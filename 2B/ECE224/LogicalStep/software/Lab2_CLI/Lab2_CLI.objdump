
Lab2_CLI.elf:     file format elf32-littlenios2
Lab2_CLI.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800248

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001bf20 memsz 0x0001bf20 flags r-x
    LOAD off    0x0001cf40 vaddr 0x0081bf40 paddr 0x0081cc4c align 2**12
         filesz 0x00000d0c memsz 0x00000d0c flags rw-
    LOAD off    0x0001e958 vaddr 0x0081d958 paddr 0x0081d958 align 2**12
         filesz 0x00000000 memsz 0x00000b4c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001afd4  00800248  00800248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d24  0081b21c  0081b21c  0001c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000d0c  0081bf40  0081cc4c  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b4c  0081d958  0081d958  0001e958  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  0081e4a4  0081e4a4  0001dc4c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001dc4c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001130  00000000  00000000  0001dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b670  00000000  00000000  0001eda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa2f  00000000  00000000  0004a410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e94a  00000000  00000000  00054e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000342c  00000000  00000000  0006378c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000048d2  00000000  00000000  00066bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017e99  00000000  00000000  0006b48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00083324  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001990  00000000  00000000  00083388  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000891e2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000891e5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000891f1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000891f2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000891f3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000891f7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000891fb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000891ff  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0008920a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00089215  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00089220  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00089223  2**0
                  CONTENTS, READONLY
 29 .jdi          00005cac  00000000  00000000  00089246  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008f4e4  00000000  00000000  0008eef2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800248 l    d  .text	00000000 .text
0081b21c l    d  .rodata	00000000 .rodata
0081bf40 l    d  .rwdata	00000000 .rwdata
0081d958 l    d  .bss	00000000 .bss
0081e4a4 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_CLI_bsp//obj/HAL/src/crt0.o
00800290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 fatfs.c
00000000 l    df *ABS*	00000000 fatfs_diskio.c
0081cbfc l     O .rwdata	00000001 Stat
0081d958 l     O .bss	00000001 CardType
0081d95a l     O .bss	00000002 Timer1
0081d95c l     O .bss	00000002 Timer2
0081d95e l     O .bss	00000001 XMITDummy
0081d960 l     O .bss	00000004 Control1
008002b8 l     F .text	00000050 SetLowSpeed
00800308 l     F .text	00000070 SetHighSpeed
00800378 l     F .text	00000048 InitDiskIOHardware
008003c0 l     F .text	00000040 Set8BitTransfer
00800400 l     F .text	0000003c Set32BitTransfer
0080043c l     F .text	00000050 ReceiveU8
0080048c l     F .text	0000012c ReceiveDatablock
008005b8 l     F .text	00000188 TransmitDatablock
00800764 l     F .text	00000054 WaitReady
00800740 l     F .text	00000024 GetCDWP
008007b8 l     F .text	00000048 ReleaseBus
00800800 l     F .text	0000024c SendCMD
0081d964 l     O .bss	00000004 pvm.1949
00000000 l    df *ABS*	00000000 fatfs_nios2_de0_nano_spi.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_pio.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_spi.c
00000000 l    df *ABS*	00000000 ff.c
0081d968 l     O .bss	00000004 FatFs
0081d96c l     O .bss	00000002 Fsid
00801588 l     F .text	00000070 mem_cpy
008015f8 l     F .text	0000005c mem_set
00801654 l     F .text	0000008c mem_cmp
008016e0 l     F .text	0000007c chk_chr
0080175c l     F .text	0000015c move_window
008018b8 l     F .text	00000220 sync
00802154 l     F .text	0000011c remove_chain
00802270 l     F .text	000001dc create_chain
0080244c l     F .text	000001ec dir_sdi
00802638 l     F .text	000002e8 dir_next
00802920 l     F .text	000000fc dir_find
00802a1c l     F .text	00000108 dir_read
00802b24 l     F .text	00000124 dir_register
00802c48 l     F .text	00000098 dir_remove
00802ce0 l     F .text	000002ec create_name
0081b260 l     O .rodata	00000080 excvt.1975
00802fcc l     F .text	0000023c get_fileinfo
00803208 l     F .text	000001dc follow_path
008033e4 l     F .text	000001ac check_fs
00803590 l     F .text	00000940 chk_mounted
00803ed0 l     F .text	00000090 validate
0081b2e0 l     O .rodata	00000016 vst.2214
0081b2f6 l     O .rodata	00000016 cst.2215
00000000 l    df *ABS*	00000000 hello_world.c
0081d9b8 l     O .bss	00000018 alarm
0081d970 l     O .bss	00000004 Systick
0081d974 l     O .bss	00000002 Timer
008080f4 l     F .text	00000068 TimerFunction
0081d976 l     O .bss	00000002 wTimer10ms.3612
0080815c l     F .text	00000054 IoInit
008081b0 l     F .text	00000140 scan_files
008082f0 l     F .text	000000a8 put_rc
00808398 l     F .text	00000034 display_help
0081cbfd l     O .rwdata	00000004 ft.3667
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 uart_nios2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0081bf40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081b9c6 l     O .rodata	00000010 zeroes.4404
0080ca84 l     F .text	000000bc __sbprintf
0081b9d6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080cc94 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080e7c4 l     F .text	00000008 __fp_unlock
0080e7d8 l     F .text	0000019c __sinit.part.1
0080e974 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0081c384 l     O .rwdata	00000020 lc_ctype_charset
0081c364 l     O .rwdata	00000020 lc_message_charset
0081c3a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0081ba04 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
00810f54 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00811424 l     F .text	000000fc __sprint_r.part.0
0081bb38 l     O .rodata	00000010 blanks.4348
0081bb28 l     O .rodata	00000010 zeroes.4349
008129b0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00817160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081726c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00817298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00817384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00817464 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00817550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0081798c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081cc34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00817d7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00817eb0 l     F .text	00000034 alt_dev_reg
0081c98c l     O .rwdata	0000002c jtag_uart_0
0081c9b8 l     O .rwdata	00000120 lcd_display
0081cad8 l     O .rwdata	000000c4 uart
0081cb9c l     O .rwdata	00000030 audio_i2c_config
0081cbcc l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081cc40 l     O .rwdata	00000004 colstart
008181fc l     F .text	000000b8 lcd_write_command
008182b4 l     F .text	000000d8 lcd_write_data
0081838c l     F .text	000000d0 lcd_clear_screen
0081845c l     F .text	000001ec lcd_repaint_screen
00818648 l     F .text	000000cc lcd_scroll_up
00818714 l     F .text	000002ac lcd_handle_escape
00818e98 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008190d8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081937c l     F .text	000000a0 altera_avalon_uart_irq
0081941c l     F .text	000000e4 altera_avalon_uart_rxirq
00819500 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0081969c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008198b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081a28c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081a4f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081a7b0 l     F .text	0000003c alt_get_errno
0081a7ec l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081bdc0 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081d9b4 g     O .bss	00000004 alt_instruction_exception_handler
0080a6a8 g     F .text	00000018 putchar
00810c74 g     F .text	00000074 _mprec_log10
00810d60 g     F .text	0000008c __any_on
00813560 g     F .text	00000054 _isatty_r
0081ba10 g     O .rodata	00000028 __mprec_tinytens
008078b0 g     F .text	000000d8 f_gets
00817660 g     F .text	0000007c alt_main
0080a748 g     F .text	00000090 strcpy
0081d9f8 g     O .bss	00000230 Fatfs
0081e3a4 g     O .bss	00000100 alt_irq
008135b4 g     F .text	00000060 _lseek_r
00801b44 g     F .text	00000290 get_fat
0081cc4c g       *ABS*	00000000 __flash_rwdata_start
00815b60 g     F .text	00000088 .hidden __eqdf2
00819d44 g     F .text	00000060 alt_up_audio_read_fifo_avail
0081e4a4 g       *ABS*	00000000 __alt_heap_start
0080a1d4 g     F .text	0000003c uart0_put
0080a664 g     F .text	0000003c printf
00807a94 g     F .text	00000660 f_printf
00819da4 g     F .text	00000068 alt_up_audio_record_r
00813d34 g     F .text	0000009c _wcrtomb_r
008112e4 g     F .text	0000005c __sseek
0080eb14 g     F .text	00000010 __sinit
00812a6c g     F .text	00000140 __swbuf_r
0080f120 g     F .text	0000007c _setlocale_r
0080e97c g     F .text	00000068 __sfmoreglue
00817700 g     F .text	00000024 __malloc_unlock
0081dc28 g     O .bss	00000224 File1
00819cb0 g     F .text	00000094 alt_up_audio_reset_audio_core
00813614 g     F .text	0000015c memmove
0080eafc g     F .text	00000018 _cleanup
0080fdf0 g     F .text	000000a8 _Balloc
00815be8 g     F .text	000000dc .hidden __gtdf2
0081aa34 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00813048 g     F .text	0000005c _fstat_r
0081d998 g     O .bss	00000004 errno
0080a734 g     F .text	00000014 __srget
00811260 g     F .text	00000008 __seofread
00800f28 g     F .text	00000170 ffs_DiskIOWrite
00819c70 g     F .text	00000040 alt_up_audio_write_interrupt_pending
0081d9a0 g     O .bss	00000004 alt_argv
00824bfc g       *ABS*	00000000 _gp
0081aa04 g     F .text	00000030 usleep
0081c80c g     O .rwdata	00000180 alt_fd_list
0081de4c g     O .bss	00000018 Finfo
0080a414 g     F .text	00000070 _getc_r
0080a484 g     F .text	00000088 getc
0080a6a0 g     F .text	00000008 _putchar_r
00801098 g     F .text	000004c4 ffs_DiskIOIoctl
0081a42c g     F .text	00000090 alt_find_dev
0080fca8 g     F .text	00000148 memcpy
0080e7cc g     F .text	0000000c _cleanup_r
00816e4c g     F .text	000000dc .hidden __floatsidf
0081a5b4 g     F .text	0000007c alt_io_redirect
00815cc4 g     F .text	000000f4 .hidden __ltdf2
0081b21c g       *ABS*	00000000 __DTOR_END__
0081adec g     F .text	0000009c alt_exception_cause_generated_bad_addr
00811144 g     F .text	00000074 __fpclassifyd
00810bd0 g     F .text	000000a4 __ratio
00812994 g     F .text	0000001c __vfiprintf_internal
008066dc g     F .text	00000314 f_rename
0081a18c g     F .text	00000050 alt_up_audio_read_fifo_head
0081807c g     F .text	000000ec altera_avalon_jtag_uart_read
0080a634 g     F .text	00000030 _printf_r
0080a358 g     F .text	00000064 .hidden __udivsi3
008173c0 g     F .text	000000a4 isatty
0081ba60 g     O .rodata	000000c8 __mprec_tens
0081d978 g     O .bss	00000002 acc_dirs
0080f19c g     F .text	0000000c __locale_charset
00809b4c g     F .text	000001c0 xitoa
0081ad5c g     F .text	00000090 alt_icache_flush
0081d994 g     O .bss	00000004 __malloc_top_pad
00805c84 g     F .text	000001e8 f_truncate
00809808 g     F .text	00000284 xatoi
0081cc0c g     O .rwdata	00000004 __mb_cur_max
0080f1cc g     F .text	0000000c _localeconv_r
008130a4 g     F .text	000004bc __sfvwrite_r
008101fc g     F .text	0000003c __i2b
008111b8 g     F .text	00000054 _sbrk_r
00809fd0 g     F .text	00000120 put_dump
00813770 g     F .text	00000060 _read_r
0081cc2c g     O .rwdata	00000004 alt_max_fd
0081a1dc g     F .text	00000068 alt_up_audio_write_fifo_head
00812d3c g     F .text	000000f0 _fclose_r
0081d97a g     O .bss	00000002 acc_files
0080e794 g     F .text	00000030 fflush
0081d990 g     O .bss	00000004 __malloc_max_sbrked_mem
0081a630 g     F .text	00000180 alt_irq_register
008149cc g     F .text	000008ac .hidden __adddf3
00810978 g     F .text	0000010c __b2d
00814494 g     F .text	00000538 .hidden __umoddi3
0081758c g     F .text	000000d4 lseek
0081cc04 g     O .rwdata	00000004 _global_impure_ptr
008137d0 g     F .text	00000564 _realloc_r
0081e4a4 g       *ABS*	00000000 __bss_end
00817c74 g     F .text	00000108 alt_tick
00813f1c g     F .text	00000578 .hidden __udivdi3
00812fa4 g     F .text	00000024 _fputwc_r
0081ba38 g     O .rodata	00000028 __mprec_bigtens
0080ffe0 g     F .text	00000104 __s2b
00816f28 g     F .text	000000a8 .hidden __floatunsidf
008106b8 g     F .text	00000060 __mcmp
008192d8 g     F .text	000000a4 altera_avalon_uart_init
00819a9c g     F .text	0000003c alt_up_audio_open_dev
0080eb34 g     F .text	00000018 __fp_lock_all
00805e6c g     F .text	00000218 f_unlink
00819ed4 g     F .text	00000068 alt_up_audio_play_r
00817bd8 g     F .text	0000009c alt_alarm_stop
00809d0c g     F .text	000002c4 xprintf
0081d9b0 g     O .bss	00000004 alt_irq_active
0080a0f0 g     F .text	000000c0 get_line
008000fc g     F .exceptions	000000d8 alt_irq_handler
0081c7e4 g     O .rwdata	00000028 alt_dev_null
00807988 g     F .text	00000074 f_putc
008079fc g     F .text	00000098 f_puts
0081a244 g     F .text	00000048 alt_dcache_flush_all
008100e4 g     F .text	00000068 __hi0bits
00816dcc g     F .text	00000080 .hidden __fixdfsi
0081cc4c g       *ABS*	00000000 __ram_rwdata_end
0081cc24 g     O .rwdata	00000008 alt_dev_list
00817db8 g     F .text	000000f8 write
00810dec g     F .text	000000a0 _putc_r
0081bf40 g       *ABS*	00000000 __ram_rodata_end
008172d4 g     F .text	000000b0 fstat
00815cc4 g     F .text	000000f4 .hidden __ledf2
00810430 g     F .text	00000140 __pow5mult
00811538 g     F .text	0000145c ___vfiprintf_internal_r
0081d988 g     O .bss	00000004 __nlocale_changed
0080a3bc g     F .text	00000058 .hidden __umodsi3
0081e4a4 g       *ABS*	00000000 end
008189c0 g     F .text	000004d8 altera_avalon_lcd_16207_write
008198f0 g     F .text	000001ac altera_avalon_uart_write
008001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0081b21c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00819154 g     F .text	00000074 alt_avalon_timer_sc_init
00819228 g     F .text	00000060 altera_avalon_uart_write_fd
00816fd0 g     F .text	00000064 .hidden __clzsi2
00819288 g     F .text	00000050 altera_avalon_uart_close_fd
00818168 g     F .text	00000094 altera_avalon_jtag_uart_write
0080eb24 g     F .text	00000004 __sfp_lock_acquire
0080fbc4 g     F .text	000000e4 memchr
0080a870 g     F .text	000021f8 ___vfprintf_internal_r
0080ec88 g     F .text	00000310 _free_r
00817724 g     F .text	0000022c alt_printf
0080f1a8 g     F .text	00000010 __locale_mb_cur_max
00809ae0 g     F .text	0000006c xputs
0081b068 g     F .text	00000180 __call_exitprocs
0080a6c0 g     F .text	00000074 __srget_r
0080a1b0 g     F .text	00000024 uart0_init
0081de64 g     O .bss	00000200 Buff
0081d984 g     O .bss	00000004 __mlocale_changed
0080516c g     F .text	00000048 f_close
0081cc10 g     O .rwdata	00000004 __malloc_sbrk_base
00800248 g     F .text	0000004c _start
0081d9a8 g     O .bss	00000004 _alt_tick_rate
0081a084 g     F .text	00000108 alt_up_audio_write_fifo
00810570 g     F .text	00000148 __lshift
0081d9ac g     O .bss	00000004 _alt_nticks
008179c8 g     F .text	000000fc read
00817f1c g     F .text	000000a0 alt_sys_init
00819fa4 g     F .text	000000e0 alt_up_audio_read_fifo
0081af50 g     F .text	00000118 __register_exitproc
00804478 g     F .text	000004e8 f_read
00819bd8 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00810238 g     F .text	000001f8 __multiply
00805814 g     F .text	000000e4 f_readdir
0081bf40 g       *ABS*	00000000 __ram_rwdata_start
00800e08 g     F .text	00000120 ffs_DiskIORead
0081b21c g       *ABS*	00000000 __ram_rodata_start
0081d9d0 g     O .bss	00000028 __malloc_current_mallinfo
00810a84 g     F .text	0000014c __d2b
008064bc g     F .text	0000010c f_chmod
0081e064 g     O .bss	00000224 File2
00817fbc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081acb8 g     F .text	000000a4 alt_get_fd
00800a78 g     F .text	0000010c ffs_DiskIOTimerproc
0081aa58 g     F .text	00000158 alt_busy_sleep
00812c24 g     F .text	00000054 _close_r
00819b84 g     F .text	00000054 alt_up_audio_enable_write_interrupt
00800b84 g     F .text	0000025c ffs_DiskIOInitialize
0081aed4 g     F .text	0000007c memcmp
0081e4a4 g       *ABS*	00000000 __alt_stack_base
0080cb40 g     F .text	00000154 __swsetup_r
0081e288 g     O .bss	0000001c Dir
00815278 g     F .text	000008e8 .hidden __divdf3
00819b2c g     F .text	00000058 alt_up_audio_disable_read_interrupt
0080e9e4 g     F .text	00000118 __sfp
00810ce8 g     F .text	00000078 __copybits
0081c3dc g     O .rwdata	00000408 __malloc_av_
0080eb30 g     F .text	00000004 __sinit_lock_release
00815db8 g     F .text	00000718 .hidden __muldf3
0081120c g     F .text	00000054 __sread
0081d97c g     O .bss	00000004 acc_size
0080155c g     F .text	0000002c get_fattime
0081abb0 g     F .text	00000108 alt_find_file
0081a2c8 g     F .text	000000a4 alt_dev_llist_insert
008176dc g     F .text	00000024 __malloc_lock
00817b28 g     F .text	000000b0 sbrk
0080e738 g     F .text	0000005c _fflush_r
00812c78 g     F .text	000000c4 _calloc_r
0081d958 g       *ABS*	00000000 __bss_start
0080a50c g     F .text	00000128 memset
008083cc g     F .text	0000143c main
00819e74 g     F .text	00000060 alt_up_audio_write_fifo_space
0081d9a4 g     O .bss	00000004 alt_envp
0081d98c g     O .bss	00000004 __malloc_max_total_mem
0081801c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00812bac g     F .text	00000018 __swbuf
00804ee4 g     F .text	00000288 f_sync
00818f44 g     F .text	00000134 altera_avalon_lcd_16207_init
00811340 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00812e2c g     F .text	00000014 fclose
0080ce94 g     F .text	00001688 _dtoa_r
0080f3b8 g     F .text	0000080c _malloc_r
00813e90 g     F .text	00000030 __ascii_wctomb
0081e2a4 g     O .bss	00000100 Line
008069f0 g     F .text	00000ec0 f_mkfs
0081cc30 g     O .rwdata	00000004 alt_errno
00803f60 g     F .text	00000094 f_mount
0080ef98 g     F .text	000000c4 _fwalk
008056a4 g     F .text	00000170 f_opendir
00810e8c g     F .text	000000c8 putc
0080a260 g     F .text	00000084 .hidden __divsi3
0080eb64 g     F .text	00000124 _malloc_trim_r
0081b21c g       *ABS*	00000000 __CTOR_END__
00811348 g     F .text	000000dc strcmp
0081b21c g       *ABS*	00000000 __flash_rodata_start
0081b21c g       *ABS*	00000000 __DTOR_LIST__
00801dd4 g     F .text	00000380 put_fat
00809a8c g     F .text	00000054 xputc
00815b60 g     F .text	00000088 .hidden __nedf2
00817ee4 g     F .text	00000038 alt_irq_init
00817ac4 g     F .text	00000064 alt_release_fd
008051b4 g     F .text	000004f0 f_lseek
0081bb48 g     O .rodata	00000100 .hidden __clz_tab
0081d980 g     O .bss	00000004 _PathLocale
0081ae88 g     F .text	00000014 atexit
00812bc4 g     F .text	00000060 _write_r
0080f1d8 g     F .text	00000018 setlocale
0081cc08 g     O .rwdata	00000004 _impure_ptr
0081d99c g     O .bss	00000004 alt_argc
0080e51c g     F .text	0000021c __sflush_r
0081a3cc g     F .text	00000060 _do_dtors
0080f1c4 g     F .text	00000008 __locale_cjk_lang
00810f70 g     F .text	000001d4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800de0 g     F .text	00000028 ffs_DiskIOStatus
00810914 g     F .text	00000064 __ulp
008058f8 g     F .text	000000a0 f_stat
0080eb4c g     F .text	00000018 __fp_unlock_all
00819078 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081cc1c g     O .rwdata	00000008 alt_fs_list
00819e0c g     F .text	00000068 alt_up_audio_record_l
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080f1f0 g     F .text	0000000c localeconv
00801ad8 g     F .text	0000006c clust2sect
0081cc4c g       *ABS*	00000000 _edata
008065c8 g     F .text	00000114 f_utime
008191c8 g     F .text	00000060 altera_avalon_uart_read_fd
0081e4a4 g       *ABS*	00000000 _end
00812e40 g     F .text	00000164 __fputwc
00800248 g       *ABS*	00000000 __ram_exceptions_end
00804960 g     F .text	00000584 f_write
00819f3c g     F .text	00000068 alt_up_audio_play_l
00811268 g     F .text	0000007c __swrite
0081cc14 g     O .rwdata	00000004 __malloc_trim_threshold
00803ff4 g     F .text	00000484 f_open
0080f1b8 g     F .text	0000000c __locale_msgcharset
0081ae9c g     F .text	00000038 exit
0080f05c g     F .text	000000c4 _fwalk_reent
00810718 g     F .text	000001fc __mdiff
0080a2e4 g     F .text	00000074 .hidden __modsi3
0081cc48 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080eb28 g     F .text	00000004 __sfp_lock_release
0081bcbf g     O .rodata	00000101 _ctype_
0080a210 g     F .text	00000050 uart0_get
00806084 g     F .text	00000438 f_mkdir
00819648 g     F .text	00000054 altera_avalon_uart_close
0081b1e8 g     F .text	00000034 _exit
00800294 g     F .text	00000024 ffs_Init
00817034 g     F .text	0000012c alt_alarm_start
0080f1fc g     F .text	000001bc __smakebuf_r
0080a7d8 g     F .text	00000098 strlen
0081a8b0 g     F .text	00000154 open
00815be8 g     F .text	000000dc .hidden __gedf2
00817950 g     F .text	0000003c alt_putchar
0081cc18 g     O .rwdata	00000004 __wctomb
00811520 g     F .text	00000018 __sprint_r
0081a4bc g     F .text	00000034 alt_icache_flush_all
00805998 g     F .text	000002ec f_getfree
0081cc44 g     O .rwdata	00000004 alt_priority_mask
0080ca68 g     F .text	0000001c __vfprintf_internal
008196d8 g     F .text	000001dc altera_avalon_uart_read
00813ec0 g     F .text	0000005c _wctomb_r
008164d0 g     F .text	000008fc .hidden __subdf3
00800a4c g     F .text	0000002c ffs_DiskIOInit
0081014c g     F .text	000000b0 __lo0bits
0081cc38 g     O .rwdata	00000008 alt_alarm_list
0081a36c g     F .text	00000060 _do_ctors
00813dd0 g     F .text	000000c0 wcrtomb
0081719c g     F .text	000000d0 close
008174cc g     F .text	00000084 alt_load
00819ad8 g     F .text	00000054 alt_up_audio_enable_read_interrupt
00812fc8 g     F .text	00000080 fputwc
0080eb2c g     F .text	00000004 __sinit_lock_acquire
0080fec0 g     F .text	00000120 __multadd
0080fe98 g     F .text	00000028 _Bfree
00819c30 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409214 	ori	at,at,584
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10b8e904 	addi	r2,r2,-7260
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10b8e904 	addi	r2,r2,-7260
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e8:	000531fa 	rdctl	r2,exception
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001f0:	e0bffd17 	ldw	r2,-12(fp)
  8001f4:	10801f0c 	andi	r2,r2,124
  8001f8:	1004d0ba 	srli	r2,r2,2
  8001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  800200:	0005333a 	rdctl	r2,badaddr
  800204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800208:	d0a36e17 	ldw	r2,-29256(gp)
  80020c:	10000726 	beq	r2,zero,80022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800210:	d0a36e17 	ldw	r2,-29256(gp)
  800214:	e0fffd17 	ldw	r3,-12(fp)
  800218:	e1bffe17 	ldw	r6,-8(fp)
  80021c:	e17fff17 	ldw	r5,-4(fp)
  800220:	1809883a 	mov	r4,r3
  800224:	103ee83a 	callr	r2
  800228:	00000206 	br	800234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800230:	0005883a 	mov	r2,zero
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

Disassembly of section .text:

00800248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800254:	00bffd16 	blt	zero,r2,80024c <__alt_data_end+0xff80024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800258:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800260:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800264:	d692ff14 	ori	gp,gp,19452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800268:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80026c:	10b65614 	ori	r2,r2,55640

    movhi r3, %hi(__bss_end)
  800270:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800274:	18f92914 	ori	r3,r3,58532

    beq r2, r3, 1f
  800278:	10c00326 	beq	r2,r3,800288 <_start+0x40>

0:
    stw zero, (r2)
  80027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800284:	10fffd36 	bltu	r2,r3,80027c <__alt_data_end+0xff80027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800288:	08174cc0 	call	8174cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80028c:	08176600 	call	817660 <alt_main>

00800290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800290:	003fff06 	br	800290 <__alt_data_end+0xff800290>

00800294 <ffs_Init>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: error cause                                                    */
/***************************************************************************/
FFS_RESULT ffs_Init(void)
{
  800294:	defffe04 	addi	sp,sp,-8
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
   FFS_RESULT Error = FFS_OK;
  8002a0:	e03fff0d 	sth	zero,-4(fp)
   
   return (Error);
  8002a4:	e0bfff0b 	ldhu	r2,-4(fp)
} /* ffs_Init */
  8002a8:	e037883a 	mov	sp,fp
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00104 	addi	sp,sp,4
  8002b4:	f800283a 	ret

008002b8 <SetLowSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetLowSpeed(void)
{
  8002b8:	deffff04 	addi	sp,sp,-4
  8002bc:	df000015 	stw	fp,0(sp)
  8002c0:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  8002c4:	d0e35917 	ldw	r3,-29340(gp)
  8002c8:	00bffff4 	movhi	r2,65535
  8002cc:	10803fc4 	addi	r2,r2,255
  8002d0:	1884703a 	and	r2,r3,r2
  8002d4:	d0a35915 	stw	r2,-29340(gp)
   Control1 |= (249 << 8);
  8002d8:	d0a35917 	ldw	r2,-29340(gp)
  8002dc:	10be4014 	ori	r2,r2,63744
  8002e0:	d0a35915 	stw	r2,-29340(gp)
   SPI_CTRL  = Control1;
  8002e4:	00a04034 	movhi	r2,33024
  8002e8:	10840204 	addi	r2,r2,4104
  8002ec:	d0e35917 	ldw	r3,-29340(gp)
  8002f0:	10c00015 	stw	r3,0(r2)
} /* SetLowSpeed */
  8002f4:	0001883a 	nop
  8002f8:	e037883a 	mov	sp,fp
  8002fc:	df000017 	ldw	fp,0(sp)
  800300:	dec00104 	addi	sp,sp,4
  800304:	f800283a 	ret

00800308 <SetHighSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetHighSpeed(void)
{
  800308:	deffff04 	addi	sp,sp,-4
  80030c:	df000015 	stw	fp,0(sp)
  800310:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  800314:	d0e35917 	ldw	r3,-29340(gp)
  800318:	00bffff4 	movhi	r2,65535
  80031c:	10803fc4 	addi	r2,r2,255
  800320:	1884703a 	and	r2,r3,r2
  800324:	d0a35915 	stw	r2,-29340(gp)

   if (0 == (CardType & 0x01))
  800328:	d0a35703 	ldbu	r2,-29348(gp)
  80032c:	10803fcc 	andi	r2,r2,255
  800330:	1080004c 	andi	r2,r2,1
  800334:	1000041e 	bne	r2,zero,800348 <SetHighSpeed+0x40>
   {
      /* SD card 25 MHz */
      Control1 |= (1 << 8);
  800338:	d0a35917 	ldw	r2,-29340(gp)
  80033c:	10804014 	ori	r2,r2,256
  800340:	d0a35915 	stw	r2,-29340(gp)
  800344:	00000306 	br	800354 <SetHighSpeed+0x4c>
   }
   else
   {
      /* MMC card 16 MHz */
      Control1 |= (2 << 8);
  800348:	d0a35917 	ldw	r2,-29340(gp)
  80034c:	10808014 	ori	r2,r2,512
  800350:	d0a35915 	stw	r2,-29340(gp)
   }
   SPI_CTRL  = Control1;
  800354:	00a04034 	movhi	r2,33024
  800358:	10840204 	addi	r2,r2,4104
  80035c:	d0e35917 	ldw	r3,-29340(gp)
  800360:	10c00015 	stw	r3,0(r2)
} /* SetHighSpeed */
  800364:	0001883a 	nop
  800368:	e037883a 	mov	sp,fp
  80036c:	df000017 	ldw	fp,0(sp)
  800370:	dec00104 	addi	sp,sp,4
  800374:	f800283a 	ret

00800378 <InitDiskIOHardware>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void InitDiskIOHardware(void)
{
  800378:	defffe04 	addi	sp,sp,-8
  80037c:	dfc00115 	stw	ra,4(sp)
  800380:	df000015 	stw	fp,0(sp)
  800384:	d839883a 	mov	fp,sp
   /*
    * Deselct before to prevent glitch
    */
   DESELECT();
  800388:	d0a35917 	ldw	r2,-29340(gp)
  80038c:	10800054 	ori	r2,r2,1
  800390:	d0a35915 	stw	r2,-29340(gp)
  800394:	00a04034 	movhi	r2,33024
  800398:	10840204 	addi	r2,r2,4104
  80039c:	d0e35917 	ldw	r3,-29340(gp)
  8003a0:	10c00015 	stw	r3,0(r2)

   /* Slow during init */
   SetLowSpeed();
  8003a4:	08002b80 	call	8002b8 <SetLowSpeed>
   
} /* InitDiskIOHardware */
  8003a8:	0001883a 	nop
  8003ac:	e037883a 	mov	sp,fp
  8003b0:	dfc00117 	ldw	ra,4(sp)
  8003b4:	df000017 	ldw	fp,0(sp)
  8003b8:	dec00204 	addi	sp,sp,8
  8003bc:	f800283a 	ret

008003c0 <Set8BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set8BitTransfer(void)
{
  8003c0:	deffff04 	addi	sp,sp,-4
  8003c4:	df000015 	stw	fp,0(sp)
  8003c8:	d839883a 	mov	fp,sp
   Control1 &= ~CTRL_BIT32;
  8003cc:	d0e35917 	ldw	r3,-29340(gp)
  8003d0:	00bfff44 	movi	r2,-3
  8003d4:	1884703a 	and	r2,r3,r2
  8003d8:	d0a35915 	stw	r2,-29340(gp)
   SPI_CTRL  = Control1;
  8003dc:	00a04034 	movhi	r2,33024
  8003e0:	10840204 	addi	r2,r2,4104
  8003e4:	d0e35917 	ldw	r3,-29340(gp)
  8003e8:	10c00015 	stw	r3,0(r2)
} /* Set8BitTransfer */
  8003ec:	0001883a 	nop
  8003f0:	e037883a 	mov	sp,fp
  8003f4:	df000017 	ldw	fp,0(sp)
  8003f8:	dec00104 	addi	sp,sp,4
  8003fc:	f800283a 	ret

00800400 <Set32BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set32BitTransfer(void)
{
  800400:	deffff04 	addi	sp,sp,-4
  800404:	df000015 	stw	fp,0(sp)
  800408:	d839883a 	mov	fp,sp
   Control1 |= CTRL_BIT32;
  80040c:	d0a35917 	ldw	r2,-29340(gp)
  800410:	10800094 	ori	r2,r2,2
  800414:	d0a35915 	stw	r2,-29340(gp)
   SPI_CTRL  = Control1;
  800418:	00a04034 	movhi	r2,33024
  80041c:	10840204 	addi	r2,r2,4104
  800420:	d0e35917 	ldw	r3,-29340(gp)
  800424:	10c00015 	stw	r3,0(r2)
} /* Set32BitTransfer */
  800428:	0001883a 	nop
  80042c:	e037883a 	mov	sp,fp
  800430:	df000017 	ldw	fp,0(sp)
  800434:	dec00104 	addi	sp,sp,4
  800438:	f800283a 	ret

0080043c <ReceiveU8>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U8 ReceiveU8 (void)
{
  80043c:	deffff04 	addi	sp,sp,-4
  800440:	df000015 	stw	fp,0(sp)
  800444:	d839883a 	mov	fp,sp
   SPI_TXR = (uint32_t) 0xff;
  800448:	00a04034 	movhi	r2,33024
  80044c:	10840004 	addi	r2,r2,4096
  800450:	00c03fc4 	movi	r3,255
  800454:	10c00015 	stw	r3,0(r2)

   /* wait for char */
   while (!(SPI_SR & SPI_SR_DONE)) ;
  800458:	0001883a 	nop
  80045c:	00a04034 	movhi	r2,33024
  800460:	10840304 	addi	r2,r2,4108
  800464:	10800017 	ldw	r2,0(r2)
  800468:	1080004c 	andi	r2,r2,1
  80046c:	103ffb26 	beq	r2,zero,80045c <__alt_data_end+0xff80045c>

   return(SPI_RXR);
  800470:	00a04034 	movhi	r2,33024
  800474:	10840104 	addi	r2,r2,4100
  800478:	10800017 	ldw	r2,0(r2)
} /* ReceiveU8 */
  80047c:	e037883a 	mov	sp,fp
  800480:	df000017 	ldw	fp,0(sp)
  800484:	dec00104 	addi	sp,sp,4
  800488:	f800283a 	ret

0080048c <ReceiveDatablock>:
/*  In    : buff, btr                                                      */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int ReceiveDatablock(FFS_U8 * buff, uint32_t btr)
{
  80048c:	defff904 	addi	sp,sp,-28
  800490:	dfc00615 	stw	ra,24(sp)
  800494:	df000515 	stw	fp,20(sp)
  800498:	df000504 	addi	fp,sp,20
  80049c:	e13ffe15 	stw	r4,-8(fp)
  8004a0:	e17fff15 	stw	r5,-4(fp)
   FFS_U8 token, cnt;
   FFS_U32 *buff32 = (FFS_U32*)buff;
  8004a4:	e0bffe17 	ldw	r2,-8(fp)
  8004a8:	e0bffc15 	stw	r2,-16(fp)

   Timer1 = 10;
  8004ac:	00800284 	movi	r2,10
  8004b0:	d0a3578d 	sth	r2,-29346(gp)
   do /* Wait for data packet in timeout of 100ms */
   {
      token = ReceiveU8();
  8004b4:	080043c0 	call	80043c <ReceiveU8>
  8004b8:	e0bffd05 	stb	r2,-12(fp)
   }
   while ((token == 0xFF) && Timer1);
  8004bc:	e0bffd03 	ldbu	r2,-12(fp)
  8004c0:	10803fd8 	cmpnei	r2,r2,255
  8004c4:	1000031e 	bne	r2,zero,8004d4 <ReceiveDatablock+0x48>
  8004c8:	d0a3578b 	ldhu	r2,-29346(gp)
  8004cc:	10bfffcc 	andi	r2,r2,65535
  8004d0:	103ff81e 	bne	r2,zero,8004b4 <__alt_data_end+0xff8004b4>

   if (token != 0xFE)
  8004d4:	e0bffd03 	ldbu	r2,-12(fp)
  8004d8:	10803fa0 	cmpeqi	r2,r2,254
  8004dc:	1000021e 	bne	r2,zero,8004e8 <ReceiveDatablock+0x5c>
      return(FFS_FALSE);  /* If not valid data token, return with error */
  8004e0:	0005883a 	mov	r2,zero
  8004e4:	00002f06 	br	8005a4 <ReceiveDatablock+0x118>
      
   /* Receive the data block into buffer */
   Set32BitTransfer();
  8004e8:	08004000 	call	800400 <Set32BitTransfer>
   
   /* Divide by 8 */
   cnt = btr >> 3;
  8004ec:	e0bfff17 	ldw	r2,-4(fp)
  8004f0:	1004d0fa 	srli	r2,r2,3
  8004f4:	e0bffb05 	stb	r2,-20(fp)

   do /* Receive the data block into buffer */
   {
      RECEIVE_FAST(buff32);
  8004f8:	00a04034 	movhi	r2,33024
  8004fc:	10840004 	addi	r2,r2,4096
  800500:	00ffffc4 	movi	r3,-1
  800504:	10c00015 	stw	r3,0(r2)
  800508:	0001883a 	nop
  80050c:	00a04034 	movhi	r2,33024
  800510:	10840304 	addi	r2,r2,4108
  800514:	10800017 	ldw	r2,0(r2)
  800518:	1080004c 	andi	r2,r2,1
  80051c:	103ffb26 	beq	r2,zero,80050c <__alt_data_end+0xff80050c>
  800520:	e0fffc17 	ldw	r3,-16(fp)
  800524:	18800104 	addi	r2,r3,4
  800528:	e0bffc15 	stw	r2,-16(fp)
  80052c:	00a04034 	movhi	r2,33024
  800530:	10840104 	addi	r2,r2,4100
  800534:	10800017 	ldw	r2,0(r2)
  800538:	18800015 	stw	r2,0(r3)
      RECEIVE_FAST(buff32);
  80053c:	00a04034 	movhi	r2,33024
  800540:	10840004 	addi	r2,r2,4096
  800544:	00ffffc4 	movi	r3,-1
  800548:	10c00015 	stw	r3,0(r2)
  80054c:	0001883a 	nop
  800550:	00a04034 	movhi	r2,33024
  800554:	10840304 	addi	r2,r2,4108
  800558:	10800017 	ldw	r2,0(r2)
  80055c:	1080004c 	andi	r2,r2,1
  800560:	103ffb26 	beq	r2,zero,800550 <__alt_data_end+0xff800550>
  800564:	e0fffc17 	ldw	r3,-16(fp)
  800568:	18800104 	addi	r2,r3,4
  80056c:	e0bffc15 	stw	r2,-16(fp)
  800570:	00a04034 	movhi	r2,33024
  800574:	10840104 	addi	r2,r2,4100
  800578:	10800017 	ldw	r2,0(r2)
  80057c:	18800015 	stw	r2,0(r3)
   }
   while (--cnt);
  800580:	e0bffb03 	ldbu	r2,-20(fp)
  800584:	10bfffc4 	addi	r2,r2,-1
  800588:	e0bffb05 	stb	r2,-20(fp)
  80058c:	e0bffb03 	ldbu	r2,-20(fp)
  800590:	103fd91e 	bne	r2,zero,8004f8 <__alt_data_end+0xff8004f8>
   
   Set8BitTransfer();   
  800594:	08003c00 	call	8003c0 <Set8BitTransfer>
   ReceiveU8();   /* Discard CRC */
  800598:	080043c0 	call	80043c <ReceiveU8>
   ReceiveU8();   /* Discard CRC */
  80059c:	080043c0 	call	80043c <ReceiveU8>

   return(FFS_TRUE);  /* Return with success */
  8005a0:	00800044 	movi	r2,1
} /* ReceiveDatablock */
  8005a4:	e037883a 	mov	sp,fp
  8005a8:	dfc00117 	ldw	ra,4(sp)
  8005ac:	df000017 	ldw	fp,0(sp)
  8005b0:	dec00204 	addi	sp,sp,8
  8005b4:	f800283a 	ret

008005b8 <TransmitDatablock>:
/*  In    : buff, token (Data/Stop token)                                  */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int TransmitDatablock(const FFS_U8 * buff, FFS_U8 token)
{
  8005b8:	defff904 	addi	sp,sp,-28
  8005bc:	dfc00615 	stw	ra,24(sp)
  8005c0:	df000515 	stw	fp,20(sp)
  8005c4:	df000504 	addi	fp,sp,20
  8005c8:	e13ffe15 	stw	r4,-8(fp)
  8005cc:	2805883a 	mov	r2,r5
  8005d0:	e0bfff05 	stb	r2,-4(fp)
   FFS_U8 resp, cnt = 0;
  8005d4:	e03ffb05 	stb	zero,-20(fp)
   FFS_U32 *buff32 = (FFS_U32*)buff;
  8005d8:	e0bffe17 	ldw	r2,-8(fp)
  8005dc:	e0bffc15 	stw	r2,-16(fp)

   if (WaitReady() != 0xFF)
  8005e0:	08007640 	call	800764 <WaitReady>
  8005e4:	10803fcc 	andi	r2,r2,255
  8005e8:	10803fe0 	cmpeqi	r2,r2,255
  8005ec:	1000021e 	bne	r2,zero,8005f8 <TransmitDatablock+0x40>
      return(FFS_FALSE);
  8005f0:	0005883a 	mov	r2,zero
  8005f4:	00004d06 	br	80072c <TransmitDatablock+0x174>

   TRANSMIT_U8(token);  /* Xmit data token */
  8005f8:	00a04034 	movhi	r2,33024
  8005fc:	10840004 	addi	r2,r2,4096
  800600:	e0ffff03 	ldbu	r3,-4(fp)
  800604:	10c00015 	stw	r3,0(r2)
  800608:	0001883a 	nop
  80060c:	00a04034 	movhi	r2,33024
  800610:	10840304 	addi	r2,r2,4108
  800614:	10800017 	ldw	r2,0(r2)
  800618:	1080004c 	andi	r2,r2,1
  80061c:	103ffb26 	beq	r2,zero,80060c <__alt_data_end+0xff80060c>
   if (token != 0xFD)   /* Is data token */
  800620:	e0bfff03 	ldbu	r2,-4(fp)
  800624:	10803f60 	cmpeqi	r2,r2,253
  800628:	10003f1e 	bne	r2,zero,800728 <TransmitDatablock+0x170>
   {
   
      cnt = 512 / 8;
  80062c:	00801004 	movi	r2,64
  800630:	e0bffb05 	stb	r2,-20(fp)
   
      /* Send the 512 byte data block */
      Set32BitTransfer();
  800634:	08004000 	call	800400 <Set32BitTransfer>
      do /* Send the 512 byte data block */
      {
         TRANSMIT_FAST(*buff32++);
  800638:	00a04034 	movhi	r2,33024
  80063c:	10840004 	addi	r2,r2,4096
  800640:	e0fffc17 	ldw	r3,-16(fp)
  800644:	19000104 	addi	r4,r3,4
  800648:	e13ffc15 	stw	r4,-16(fp)
  80064c:	18c00017 	ldw	r3,0(r3)
  800650:	10c00015 	stw	r3,0(r2)
  800654:	0001883a 	nop
  800658:	00a04034 	movhi	r2,33024
  80065c:	10840304 	addi	r2,r2,4108
  800660:	10800017 	ldw	r2,0(r2)
  800664:	1080004c 	andi	r2,r2,1
  800668:	103ffb26 	beq	r2,zero,800658 <__alt_data_end+0xff800658>
         TRANSMIT_FAST(*buff32++);
  80066c:	00a04034 	movhi	r2,33024
  800670:	10840004 	addi	r2,r2,4096
  800674:	e0fffc17 	ldw	r3,-16(fp)
  800678:	19000104 	addi	r4,r3,4
  80067c:	e13ffc15 	stw	r4,-16(fp)
  800680:	18c00017 	ldw	r3,0(r3)
  800684:	10c00015 	stw	r3,0(r2)
  800688:	0001883a 	nop
  80068c:	00a04034 	movhi	r2,33024
  800690:	10840304 	addi	r2,r2,4108
  800694:	10800017 	ldw	r2,0(r2)
  800698:	1080004c 	andi	r2,r2,1
  80069c:	103ffb26 	beq	r2,zero,80068c <__alt_data_end+0xff80068c>
      }
      while (--cnt);
  8006a0:	e0bffb03 	ldbu	r2,-20(fp)
  8006a4:	10bfffc4 	addi	r2,r2,-1
  8006a8:	e0bffb05 	stb	r2,-20(fp)
  8006ac:	e0bffb03 	ldbu	r2,-20(fp)
  8006b0:	103fe11e 	bne	r2,zero,800638 <__alt_data_end+0xff800638>

      Set8BitTransfer();
  8006b4:	08003c00 	call	8003c0 <Set8BitTransfer>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  8006b8:	00a04034 	movhi	r2,33024
  8006bc:	10840004 	addi	r2,r2,4096
  8006c0:	00c03fc4 	movi	r3,255
  8006c4:	10c00015 	stw	r3,0(r2)
  8006c8:	0001883a 	nop
  8006cc:	00a04034 	movhi	r2,33024
  8006d0:	10840304 	addi	r2,r2,4108
  8006d4:	10800017 	ldw	r2,0(r2)
  8006d8:	1080004c 	andi	r2,r2,1
  8006dc:	103ffb26 	beq	r2,zero,8006cc <__alt_data_end+0xff8006cc>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  8006e0:	00a04034 	movhi	r2,33024
  8006e4:	10840004 	addi	r2,r2,4096
  8006e8:	00c03fc4 	movi	r3,255
  8006ec:	10c00015 	stw	r3,0(r2)
  8006f0:	0001883a 	nop
  8006f4:	00a04034 	movhi	r2,33024
  8006f8:	10840304 	addi	r2,r2,4108
  8006fc:	10800017 	ldw	r2,0(r2)
  800700:	1080004c 	andi	r2,r2,1
  800704:	103ffb26 	beq	r2,zero,8006f4 <__alt_data_end+0xff8006f4>

      resp = ReceiveU8();  /* Reveive data response */
  800708:	080043c0 	call	80043c <ReceiveU8>
  80070c:	e0bffd05 	stb	r2,-12(fp)
      if ((resp & 0x1F) != 0x05) /* If not accepted, return with error */
  800710:	e0bffd03 	ldbu	r2,-12(fp)
  800714:	108007cc 	andi	r2,r2,31
  800718:	10800160 	cmpeqi	r2,r2,5
  80071c:	1000021e 	bne	r2,zero,800728 <TransmitDatablock+0x170>
      {
         return(FFS_FALSE);
  800720:	0005883a 	mov	r2,zero
  800724:	00000106 	br	80072c <TransmitDatablock+0x174>
      }
   }

   return(FFS_TRUE);  /* Return with success */
  800728:	00800044 	movi	r2,1
} /* TransmitDatablock */
  80072c:	e037883a 	mov	sp,fp
  800730:	dfc00117 	ldw	ra,4(sp)
  800734:	df000017 	ldw	fp,0(sp)
  800738:	dec00204 	addi	sp,sp,8
  80073c:	f800283a 	ret

00800740 <GetCDWP>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U32 GetCDWP(void)
{
  800740:	defffe04 	addi	sp,sp,-8
  800744:	df000115 	stw	fp,4(sp)
  800748:	df000104 	addi	fp,sp,4
   FFS_U32 value = 0;
  80074c:	e03fff15 	stw	zero,-4(fp)
   
   /*
    * CD and WP is not supported by the Altera DE1 board.
    */

   return(value);
  800750:	e0bfff17 	ldw	r2,-4(fp)
} /* GetCDWP */
  800754:	e037883a 	mov	sp,fp
  800758:	df000017 	ldw	fp,0(sp)
  80075c:	dec00104 	addi	sp,sp,4
  800760:	f800283a 	ret

00800764 <WaitReady>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static FFS_U8 WaitReady (void)
{
  800764:	defffd04 	addi	sp,sp,-12
  800768:	dfc00215 	stw	ra,8(sp)
  80076c:	df000115 	stw	fp,4(sp)
  800770:	df000104 	addi	fp,sp,4
   FFS_U8 res;
   
#if (FFS_USE_REAL_TIME_OS == 0)
   Timer2 = (WAIT_READY_TIME_MAX_MS / 10);
  800774:	00800c84 	movi	r2,50
  800778:	d0a3580d 	sth	r2,-29344(gp)
   ReceiveU8();
  80077c:	080043c0 	call	80043c <ReceiveU8>
   do
   {
      res = ReceiveU8();
  800780:	080043c0 	call	80043c <ReceiveU8>
  800784:	e0bfff05 	stb	r2,-4(fp)
   }
   while ((res != 0xFF) && Timer2);
  800788:	e0bfff03 	ldbu	r2,-4(fp)
  80078c:	10803fe0 	cmpeqi	r2,r2,255
  800790:	1000031e 	bne	r2,zero,8007a0 <WaitReady+0x3c>
  800794:	d0a3580b 	ldhu	r2,-29344(gp)
  800798:	10bfffcc 	andi	r2,r2,65535
  80079c:	103ff81e 	bne	r2,zero,800780 <__alt_data_end+0xff800780>
      ff_wait_ms(WAIT_READY_TIME_RTOS_MS);
   }
   while ((res != 0xFF) && (cnt < WAIT_READY_TIME_CNT_RTOS));
#endif   

   return(res);
  8007a0:	e0bfff03 	ldbu	r2,-4(fp)
} /* WaitReady */
  8007a4:	e037883a 	mov	sp,fp
  8007a8:	dfc00117 	ldw	ra,4(sp)
  8007ac:	df000017 	ldw	fp,0(sp)
  8007b0:	dec00204 	addi	sp,sp,8
  8007b4:	f800283a 	ret

008007b8 <ReleaseBus>:

/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static void ReleaseBus (void)
{
  8007b8:	defffe04 	addi	sp,sp,-8
  8007bc:	dfc00115 	stw	ra,4(sp)
  8007c0:	df000015 	stw	fp,0(sp)
  8007c4:	d839883a 	mov	fp,sp
    * master device must send a byte after deasserted CS signal.   
    *
    * More information can be found here:
    * http://elm-chan.org/docs/mmc/mmc_e.html
    */
   DESELECT();
  8007c8:	d0a35917 	ldw	r2,-29340(gp)
  8007cc:	10800054 	ori	r2,r2,1
  8007d0:	d0a35915 	stw	r2,-29340(gp)
  8007d4:	00a04034 	movhi	r2,33024
  8007d8:	10840204 	addi	r2,r2,4104
  8007dc:	d0e35917 	ldw	r3,-29340(gp)
  8007e0:	10c00015 	stw	r3,0(r2)
   ReceiveU8();
  8007e4:	080043c0 	call	80043c <ReceiveU8>
} /* ReleaseBus */
  8007e8:	0001883a 	nop
  8007ec:	e037883a 	mov	sp,fp
  8007f0:	dfc00117 	ldw	ra,4(sp)
  8007f4:	df000017 	ldw	fp,0(sp)
  8007f8:	dec00204 	addi	sp,sp,8
  8007fc:	f800283a 	ret

00800800 <SendCMD>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static FFS_U8 SendCMD (FFS_U8 cmd,   /* Command byte */
                       FFS_U32 arg)  /* Argument */
{
  800800:	defffb04 	addi	sp,sp,-20
  800804:	dfc00415 	stw	ra,16(sp)
  800808:	df000315 	stw	fp,12(sp)
  80080c:	df000304 	addi	fp,sp,12
  800810:	2005883a 	mov	r2,r4
  800814:	e17fff15 	stw	r5,-4(fp)
  800818:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, res;

   if (cmd & 0x80)   /* ACMD<n> is the command sequense of CMD55-CMD<n> */
  80081c:	e0bffe03 	ldbu	r2,-8(fp)
  800820:	10803fcc 	andi	r2,r2,255
  800824:	1080201c 	xori	r2,r2,128
  800828:	10bfe004 	addi	r2,r2,-128
  80082c:	10000c0e 	bge	r2,zero,800860 <SendCMD+0x60>
   {
      cmd &= 0x7F;
  800830:	e0bffe03 	ldbu	r2,-8(fp)
  800834:	10801fcc 	andi	r2,r2,127
  800838:	e0bffe05 	stb	r2,-8(fp)
      res = SendCMD(CMD55, 0);
  80083c:	000b883a 	mov	r5,zero
  800840:	01001dc4 	movi	r4,119
  800844:	08008000 	call	800800 <SendCMD>
  800848:	e0bffd45 	stb	r2,-11(fp)
      if (res > 1)
  80084c:	e0bffd43 	ldbu	r2,-11(fp)
  800850:	108000b0 	cmpltui	r2,r2,2
  800854:	1000021e 	bne	r2,zero,800860 <SendCMD+0x60>
         return res;
  800858:	e0bffd43 	ldbu	r2,-11(fp)
  80085c:	00007606 	br	800a38 <SendCMD+0x238>
   }

   /* Select the card and wait for ready */
   DESELECT();
  800860:	d0a35917 	ldw	r2,-29340(gp)
  800864:	10800054 	ori	r2,r2,1
  800868:	d0a35915 	stw	r2,-29340(gp)
  80086c:	00a04034 	movhi	r2,33024
  800870:	10840204 	addi	r2,r2,4104
  800874:	d0e35917 	ldw	r3,-29340(gp)
  800878:	10c00015 	stw	r3,0(r2)
   SELECT();
  80087c:	d0e35917 	ldw	r3,-29340(gp)
  800880:	00bfff84 	movi	r2,-2
  800884:	1884703a 	and	r2,r3,r2
  800888:	d0a35915 	stw	r2,-29340(gp)
  80088c:	00a04034 	movhi	r2,33024
  800890:	10840204 	addi	r2,r2,4104
  800894:	d0e35917 	ldw	r3,-29340(gp)
  800898:	10c00015 	stw	r3,0(r2)

   if (WaitReady() != 0xFF)
  80089c:	08007640 	call	800764 <WaitReady>
  8008a0:	10803fcc 	andi	r2,r2,255
  8008a4:	10803fe0 	cmpeqi	r2,r2,255
  8008a8:	1000021e 	bne	r2,zero,8008b4 <SendCMD+0xb4>
      return 0xFF;
  8008ac:	00bfffc4 	movi	r2,-1
  8008b0:	00006106 	br	800a38 <SendCMD+0x238>

   /* Send command packet */
   TRANSMIT_U8(cmd); /* Start + Command index */
  8008b4:	00a04034 	movhi	r2,33024
  8008b8:	10840004 	addi	r2,r2,4096
  8008bc:	e0fffe03 	ldbu	r3,-8(fp)
  8008c0:	10c00015 	stw	r3,0(r2)
  8008c4:	0001883a 	nop
  8008c8:	00a04034 	movhi	r2,33024
  8008cc:	10840304 	addi	r2,r2,4108
  8008d0:	10800017 	ldw	r2,0(r2)
  8008d4:	1080004c 	andi	r2,r2,1
  8008d8:	103ffb26 	beq	r2,zero,8008c8 <__alt_data_end+0xff8008c8>
   TRANSMIT_U8((FFS_U8) (arg >> 24));  /* Argument[31..24] */
  8008dc:	00a04034 	movhi	r2,33024
  8008e0:	10840004 	addi	r2,r2,4096
  8008e4:	e0ffff17 	ldw	r3,-4(fp)
  8008e8:	1806d63a 	srli	r3,r3,24
  8008ec:	10c00015 	stw	r3,0(r2)
  8008f0:	0001883a 	nop
  8008f4:	00a04034 	movhi	r2,33024
  8008f8:	10840304 	addi	r2,r2,4108
  8008fc:	10800017 	ldw	r2,0(r2)
  800900:	1080004c 	andi	r2,r2,1
  800904:	103ffb26 	beq	r2,zero,8008f4 <__alt_data_end+0xff8008f4>
   TRANSMIT_U8((FFS_U8) (arg >> 16));  /* Argument[23..16] */
  800908:	00a04034 	movhi	r2,33024
  80090c:	10840004 	addi	r2,r2,4096
  800910:	e0ffff17 	ldw	r3,-4(fp)
  800914:	1806d43a 	srli	r3,r3,16
  800918:	18c03fcc 	andi	r3,r3,255
  80091c:	10c00015 	stw	r3,0(r2)
  800920:	0001883a 	nop
  800924:	00a04034 	movhi	r2,33024
  800928:	10840304 	addi	r2,r2,4108
  80092c:	10800017 	ldw	r2,0(r2)
  800930:	1080004c 	andi	r2,r2,1
  800934:	103ffb26 	beq	r2,zero,800924 <__alt_data_end+0xff800924>
   TRANSMIT_U8((FFS_U8) (arg >> 8));   /* Argument[15..8] */
  800938:	00a04034 	movhi	r2,33024
  80093c:	10840004 	addi	r2,r2,4096
  800940:	e0ffff17 	ldw	r3,-4(fp)
  800944:	1806d23a 	srli	r3,r3,8
  800948:	18c03fcc 	andi	r3,r3,255
  80094c:	10c00015 	stw	r3,0(r2)
  800950:	0001883a 	nop
  800954:	00a04034 	movhi	r2,33024
  800958:	10840304 	addi	r2,r2,4108
  80095c:	10800017 	ldw	r2,0(r2)
  800960:	1080004c 	andi	r2,r2,1
  800964:	103ffb26 	beq	r2,zero,800954 <__alt_data_end+0xff800954>
   TRANSMIT_U8((FFS_U8) arg); /* Argument[7..0] */
  800968:	00a04034 	movhi	r2,33024
  80096c:	10840004 	addi	r2,r2,4096
  800970:	e0ffff17 	ldw	r3,-4(fp)
  800974:	18c03fcc 	andi	r3,r3,255
  800978:	10c00015 	stw	r3,0(r2)
  80097c:	0001883a 	nop
  800980:	00a04034 	movhi	r2,33024
  800984:	10840304 	addi	r2,r2,4108
  800988:	10800017 	ldw	r2,0(r2)
  80098c:	1080004c 	andi	r2,r2,1
  800990:	103ffb26 	beq	r2,zero,800980 <__alt_data_end+0xff800980>

   n = 0x01;   /* Dummy CRC + Stop */
  800994:	00800044 	movi	r2,1
  800998:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD0)
  80099c:	e0bffe03 	ldbu	r2,-8(fp)
  8009a0:	10801018 	cmpnei	r2,r2,64
  8009a4:	1000021e 	bne	r2,zero,8009b0 <SendCMD+0x1b0>
      n = 0x95;   /* Valid CRC for CMD0(0) */
  8009a8:	00bfe544 	movi	r2,-107
  8009ac:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD8)
  8009b0:	e0bffe03 	ldbu	r2,-8(fp)
  8009b4:	10801218 	cmpnei	r2,r2,72
  8009b8:	1000021e 	bne	r2,zero,8009c4 <SendCMD+0x1c4>
      n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
  8009bc:	00bfe1c4 	movi	r2,-121
  8009c0:	e0bffd05 	stb	r2,-12(fp)
   TRANSMIT_U8(n);
  8009c4:	00a04034 	movhi	r2,33024
  8009c8:	10840004 	addi	r2,r2,4096
  8009cc:	e0fffd03 	ldbu	r3,-12(fp)
  8009d0:	10c00015 	stw	r3,0(r2)
  8009d4:	0001883a 	nop
  8009d8:	00a04034 	movhi	r2,33024
  8009dc:	10840304 	addi	r2,r2,4108
  8009e0:	10800017 	ldw	r2,0(r2)
  8009e4:	1080004c 	andi	r2,r2,1
  8009e8:	103ffb26 	beq	r2,zero,8009d8 <__alt_data_end+0xff8009d8>

   /* Receive command response */
   if (cmd == CMD12)
  8009ec:	e0bffe03 	ldbu	r2,-8(fp)
  8009f0:	10801318 	cmpnei	r2,r2,76
  8009f4:	1000011e 	bne	r2,zero,8009fc <SendCMD+0x1fc>
      ReceiveU8();   /* Skip a stuff byte when stop reading */
  8009f8:	080043c0 	call	80043c <ReceiveU8>

   n = 10;  /* Wait for a valid response in timeout of 10 attempts */
  8009fc:	00800284 	movi	r2,10
  800a00:	e0bffd05 	stb	r2,-12(fp)
   do
   {
      res = ReceiveU8();
  800a04:	080043c0 	call	80043c <ReceiveU8>
  800a08:	e0bffd45 	stb	r2,-11(fp)
   }
   while ((res & 0x80) && --n);
  800a0c:	e0bffd43 	ldbu	r2,-11(fp)
  800a10:	10803fcc 	andi	r2,r2,255
  800a14:	1080201c 	xori	r2,r2,128
  800a18:	10bfe004 	addi	r2,r2,-128
  800a1c:	1000050e 	bge	r2,zero,800a34 <SendCMD+0x234>
  800a20:	e0bffd03 	ldbu	r2,-12(fp)
  800a24:	10bfffc4 	addi	r2,r2,-1
  800a28:	e0bffd05 	stb	r2,-12(fp)
  800a2c:	e0bffd03 	ldbu	r2,-12(fp)
  800a30:	103ff41e 	bne	r2,zero,800a04 <__alt_data_end+0xff800a04>

   return(res); /* Return with the response value */
  800a34:	e0bffd43 	ldbu	r2,-11(fp)
} /* SendCMD */
  800a38:	e037883a 	mov	sp,fp
  800a3c:	dfc00117 	ldw	ra,4(sp)
  800a40:	df000017 	ldw	fp,0(sp)
  800a44:	dec00204 	addi	sp,sp,8
  800a48:	f800283a 	ret

00800a4c <ffs_DiskIOInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: FFS_OK                                                         */
/***************************************************************************/
FFS_RESULT ffs_DiskIOInit (void)
{
  800a4c:	defffe04 	addi	sp,sp,-8
  800a50:	dfc00115 	stw	ra,4(sp)
  800a54:	df000015 	stw	fp,0(sp)
  800a58:	d839883a 	mov	fp,sp
   (void)XMITDummy;

   InitDiskIOHardware();
  800a5c:	08003780 	call	800378 <InitDiskIOHardware>

   return(FFS_OK);
  800a60:	0005883a 	mov	r2,zero
} /* ffs_DiskIOInit */
  800a64:	e037883a 	mov	sp,fp
  800a68:	dfc00117 	ldw	ra,4(sp)
  800a6c:	df000017 	ldw	fp,0(sp)
  800a70:	dec00204 	addi	sp,sp,8
  800a74:	f800283a 	ret

00800a78 <ffs_DiskIOTimerproc>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void ffs_DiskIOTimerproc (void)
{
  800a78:	defffc04 	addi	sp,sp,-16
  800a7c:	dfc00315 	stw	ra,12(sp)
  800a80:	df000215 	stw	fp,8(sp)
  800a84:	df000204 	addi	fp,sp,8
   static FFS_U32 pvm;
   FFS_U32 n;
   DSTATUS s;

   /* 100Hz decrement timer */
   n = Timer1;
  800a88:	d0a3578b 	ldhu	r2,-29346(gp)
  800a8c:	10bfffcc 	andi	r2,r2,65535
  800a90:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  800a94:	e0bfff17 	ldw	r2,-4(fp)
  800a98:	10000526 	beq	r2,zero,800ab0 <ffs_DiskIOTimerproc+0x38>
      Timer1 = (FFS_U16)-- n;
  800a9c:	e0bfff17 	ldw	r2,-4(fp)
  800aa0:	10bfffc4 	addi	r2,r2,-1
  800aa4:	e0bfff15 	stw	r2,-4(fp)
  800aa8:	e0bfff17 	ldw	r2,-4(fp)
  800aac:	d0a3578d 	sth	r2,-29346(gp)
   n = Timer2;
  800ab0:	d0a3580b 	ldhu	r2,-29344(gp)
  800ab4:	10bfffcc 	andi	r2,r2,65535
  800ab8:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  800abc:	e0bfff17 	ldw	r2,-4(fp)
  800ac0:	10000526 	beq	r2,zero,800ad8 <ffs_DiskIOTimerproc+0x60>
      Timer2 = (FFS_U16)-- n;
  800ac4:	e0bfff17 	ldw	r2,-4(fp)
  800ac8:	10bfffc4 	addi	r2,r2,-1
  800acc:	e0bfff15 	stw	r2,-4(fp)
  800ad0:	e0bfff17 	ldw	r2,-4(fp)
  800ad4:	d0a3580d 	sth	r2,-29344(gp)

   n = pvm;
  800ad8:	d0a35a17 	ldw	r2,-29336(gp)
  800adc:	e0bfff15 	stw	r2,-4(fp)

   /* Sample socket switch */
   pvm = GetCDWP();
  800ae0:	08007400 	call	800740 <GetCDWP>
  800ae4:	d0a35a15 	stw	r2,-29336(gp)

   /* Have contacts stabled? */
   if (n == pvm)
  800ae8:	d0a35a17 	ldw	r2,-29336(gp)
  800aec:	e0ffff17 	ldw	r3,-4(fp)
  800af0:	18801e1e 	bne	r3,r2,800b6c <ffs_DiskIOTimerproc+0xf4>
   {
      s = Stat;
  800af4:	d0a00003 	ldbu	r2,-32768(gp)
  800af8:	e0bffe05 	stb	r2,-8(fp)

      /* Check write protect */
      if (pvm & SOCK_WP_ACTIVE)
  800afc:	d0a35a17 	ldw	r2,-29336(gp)
  800b00:	1080008c 	andi	r2,r2,2
  800b04:	10000426 	beq	r2,zero,800b18 <ffs_DiskIOTimerproc+0xa0>
         s |= STA_PROTECT;
  800b08:	e0bffe03 	ldbu	r2,-8(fp)
  800b0c:	10800114 	ori	r2,r2,4
  800b10:	e0bffe05 	stb	r2,-8(fp)
  800b14:	00000406 	br	800b28 <ffs_DiskIOTimerproc+0xb0>
      else
         s &= ~STA_PROTECT;
  800b18:	e0fffe03 	ldbu	r3,-8(fp)
  800b1c:	00bffec4 	movi	r2,-5
  800b20:	1884703a 	and	r2,r3,r2
  800b24:	e0bffe05 	stb	r2,-8(fp)

      /* Check socket empty */
      if (pvm & SOCK_CD_EMPTY)
  800b28:	d0a35a17 	ldw	r2,-29336(gp)
  800b2c:	1080004c 	andi	r2,r2,1
  800b30:	10000426 	beq	r2,zero,800b44 <ffs_DiskIOTimerproc+0xcc>
         s |= (STA_NODISK | STA_NOINIT);
  800b34:	e0bffe03 	ldbu	r2,-8(fp)
  800b38:	108000d4 	ori	r2,r2,3
  800b3c:	e0bffe05 	stb	r2,-8(fp)
  800b40:	00000406 	br	800b54 <ffs_DiskIOTimerproc+0xdc>
      else
         s &= ~STA_NODISK;
  800b44:	e0fffe03 	ldbu	r3,-8(fp)
  800b48:	00bfff44 	movi	r2,-3
  800b4c:	1884703a 	and	r2,r3,r2
  800b50:	e0bffe05 	stb	r2,-8(fp)

#if (FFS_SUPPORT_HW_WP == 0)
      /* Ignore the write protect */
      s &= ~STA_PROTECT;
  800b54:	e0fffe03 	ldbu	r3,-8(fp)
  800b58:	00bffec4 	movi	r2,-5
  800b5c:	1884703a 	and	r2,r3,r2
  800b60:	e0bffe05 	stb	r2,-8(fp)
#endif

      Stat = s;
  800b64:	e0bffe03 	ldbu	r2,-8(fp)
  800b68:	d0a00005 	stb	r2,-32768(gp)
   }
} /* ffs_DiskIOTimerproc */
  800b6c:	0001883a 	nop
  800b70:	e037883a 	mov	sp,fp
  800b74:	dfc00117 	ldw	ra,4(sp)
  800b78:	df000017 	ldw	fp,0(sp)
  800b7c:	dec00204 	addi	sp,sp,8
  800b80:	f800283a 	ret

00800b84 <ffs_DiskIOInitialize>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOInitialize (FFS_U8 drv)
{
  800b84:	defffa04 	addi	sp,sp,-24
  800b88:	dfc00515 	stw	ra,20(sp)
  800b8c:	df000415 	stw	fp,16(sp)
  800b90:	dc000315 	stw	r16,12(sp)
  800b94:	df000404 	addi	fp,sp,16
  800b98:	2005883a 	mov	r2,r4
  800b9c:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, ty, cmd, ocr[4];

   (void)drv;

   if (Stat & STA_NODISK)  /* No card in the socket */
  800ba0:	d0a00003 	ldbu	r2,-32768(gp)
  800ba4:	10803fcc 	andi	r2,r2,255
  800ba8:	1080008c 	andi	r2,r2,2
  800bac:	10000226 	beq	r2,zero,800bb8 <ffs_DiskIOInitialize+0x34>
      return Stat;
  800bb0:	d0a00003 	ldbu	r2,-32768(gp)
  800bb4:	00008406 	br	800dc8 <ffs_DiskIOInitialize+0x244>

   /* low speed during init */
   SetLowSpeed();
  800bb8:	08002b80 	call	8002b8 <SetLowSpeed>

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  800bbc:	00800284 	movi	r2,10
  800bc0:	e0bffc05 	stb	r2,-16(fp)
  800bc4:	00000406 	br	800bd8 <ffs_DiskIOInitialize+0x54>
      ReceiveU8();   /* 80 dummy clocks */
  800bc8:	080043c0 	call	80043c <ReceiveU8>

   /* low speed during init */
   SetLowSpeed();

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  800bcc:	e0bffc03 	ldbu	r2,-16(fp)
  800bd0:	10bfffc4 	addi	r2,r2,-1
  800bd4:	e0bffc05 	stb	r2,-16(fp)
  800bd8:	e0bffc03 	ldbu	r2,-16(fp)
  800bdc:	103ffa1e 	bne	r2,zero,800bc8 <__alt_data_end+0xff800bc8>
      ReceiveU8();   /* 80 dummy clocks */

   ty = 0;
  800be0:	e03ffc45 	stb	zero,-15(fp)
   if (SendCMD(CMD0, 0) == 1)
  800be4:	000b883a 	mov	r5,zero
  800be8:	01001004 	movi	r4,64
  800bec:	08008000 	call	800800 <SendCMD>
  800bf0:	10803fcc 	andi	r2,r2,255
  800bf4:	10800058 	cmpnei	r2,r2,1
  800bf8:	1000681e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
  800bfc:	00801904 	movi	r2,100
  800c00:	d0a3578d 	sth	r2,-29346(gp)
      if (SendCMD(CMD8, 0x1AA) == 1)
  800c04:	01406a84 	movi	r5,426
  800c08:	01001204 	movi	r4,72
  800c0c:	08008000 	call	800800 <SendCMD>
  800c10:	10803fcc 	andi	r2,r2,255
  800c14:	10800058 	cmpnei	r2,r2,1
  800c18:	10003e1e 	bne	r2,zero,800d14 <ffs_DiskIOInitialize+0x190>
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  800c1c:	e03ffc05 	stb	zero,-16(fp)
  800c20:	00000906 	br	800c48 <ffs_DiskIOInitialize+0xc4>
            ocr[n] = ReceiveU8();
  800c24:	e43ffc03 	ldbu	r16,-16(fp)
  800c28:	080043c0 	call	80043c <ReceiveU8>
  800c2c:	1007883a 	mov	r3,r2
  800c30:	e0bffcc4 	addi	r2,fp,-13
  800c34:	1405883a 	add	r2,r2,r16
  800c38:	10c00005 	stb	r3,0(r2)
   if (SendCMD(CMD0, 0) == 1)
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
      if (SendCMD(CMD8, 0x1AA) == 1)
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  800c3c:	e0bffc03 	ldbu	r2,-16(fp)
  800c40:	10800044 	addi	r2,r2,1
  800c44:	e0bffc05 	stb	r2,-16(fp)
  800c48:	e0bffc03 	ldbu	r2,-16(fp)
  800c4c:	10800130 	cmpltui	r2,r2,4
  800c50:	103ff41e 	bne	r2,zero,800c24 <__alt_data_end+0xff800c24>
            ocr[n] = ReceiveU8();
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
  800c54:	e0bffd43 	ldbu	r2,-11(fp)
  800c58:	10803fcc 	andi	r2,r2,255
  800c5c:	10800058 	cmpnei	r2,r2,1
  800c60:	10004e1e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
  800c64:	e0bffd83 	ldbu	r2,-10(fp)
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	10802a98 	cmpnei	r2,r2,170
  800c70:	10004a1e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
  800c74:	0001883a 	nop
  800c78:	d0a3578b 	ldhu	r2,-29346(gp)
  800c7c:	10bfffcc 	andi	r2,r2,65535
  800c80:	10000526 	beq	r2,zero,800c98 <ffs_DiskIOInitialize+0x114>
  800c84:	01500034 	movhi	r5,16384
  800c88:	01003a44 	movi	r4,233
  800c8c:	08008000 	call	800800 <SendCMD>
  800c90:	10803fcc 	andi	r2,r2,255
  800c94:	103ff81e 	bne	r2,zero,800c78 <__alt_data_end+0xff800c78>
            if (Timer1 && SendCMD(CMD58, 0) == 0)
  800c98:	d0a3578b 	ldhu	r2,-29346(gp)
  800c9c:	10bfffcc 	andi	r2,r2,65535
  800ca0:	10003e26 	beq	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
  800ca4:	000b883a 	mov	r5,zero
  800ca8:	01001e84 	movi	r4,122
  800cac:	08008000 	call	800800 <SendCMD>
  800cb0:	10803fcc 	andi	r2,r2,255
  800cb4:	1000391e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  800cb8:	e03ffc05 	stb	zero,-16(fp)
  800cbc:	00000906 	br	800ce4 <ffs_DiskIOInitialize+0x160>
                  ocr[n] = ReceiveU8();
  800cc0:	e43ffc03 	ldbu	r16,-16(fp)
  800cc4:	080043c0 	call	80043c <ReceiveU8>
  800cc8:	1007883a 	mov	r3,r2
  800ccc:	e0bffcc4 	addi	r2,fp,-13
  800cd0:	1405883a 	add	r2,r2,r16
  800cd4:	10c00005 	stb	r3,0(r2)
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
            if (Timer1 && SendCMD(CMD58, 0) == 0)
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  800cd8:	e0bffc03 	ldbu	r2,-16(fp)
  800cdc:	10800044 	addi	r2,r2,1
  800ce0:	e0bffc05 	stb	r2,-16(fp)
  800ce4:	e0bffc03 	ldbu	r2,-16(fp)
  800ce8:	10800130 	cmpltui	r2,r2,4
  800cec:	103ff41e 	bne	r2,zero,800cc0 <__alt_data_end+0xff800cc0>
                  ocr[n] = ReceiveU8();
               ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
  800cf0:	e0bffcc3 	ldbu	r2,-13(fp)
  800cf4:	10803fcc 	andi	r2,r2,255
  800cf8:	1080100c 	andi	r2,r2,64
  800cfc:	10000226 	beq	r2,zero,800d08 <ffs_DiskIOInitialize+0x184>
  800d00:	00800304 	movi	r2,12
  800d04:	00000106 	br	800d0c <ffs_DiskIOInitialize+0x188>
  800d08:	00800104 	movi	r2,4
  800d0c:	e0bffc45 	stb	r2,-15(fp)
  800d10:	00002206 	br	800d9c <ffs_DiskIOInitialize+0x218>
            }
         }
      }
      else
      {  /* SDC ver 1.XX or MMC */
         if (SendCMD(ACMD41, 0) <= 1)
  800d14:	000b883a 	mov	r5,zero
  800d18:	01003a44 	movi	r4,233
  800d1c:	08008000 	call	800800 <SendCMD>
  800d20:	10803fcc 	andi	r2,r2,255
  800d24:	108000a8 	cmpgeui	r2,r2,2
  800d28:	1000051e 	bne	r2,zero,800d40 <ffs_DiskIOInitialize+0x1bc>
         {
            ty  = CT_SD1;
  800d2c:	00800084 	movi	r2,2
  800d30:	e0bffc45 	stb	r2,-15(fp)
            cmd = ACMD41;  /* SDC ver 1.XX */
  800d34:	00bffa44 	movi	r2,-23
  800d38:	e0bffc85 	stb	r2,-14(fp)
  800d3c:	00000406 	br	800d50 <ffs_DiskIOInitialize+0x1cc>
         }
         else
         {
            ty  = CT_MMC;
  800d40:	00800044 	movi	r2,1
  800d44:	e0bffc45 	stb	r2,-15(fp)
            cmd = CMD1; /* MMC */
  800d48:	00801044 	movi	r2,65
  800d4c:	e0bffc85 	stb	r2,-14(fp)
         }
         while (Timer1 && SendCMD(cmd, 0)) ; /* Wait for leaving idle state */
  800d50:	0001883a 	nop
  800d54:	d0a3578b 	ldhu	r2,-29346(gp)
  800d58:	10bfffcc 	andi	r2,r2,65535
  800d5c:	10000626 	beq	r2,zero,800d78 <ffs_DiskIOInitialize+0x1f4>
  800d60:	e0bffc83 	ldbu	r2,-14(fp)
  800d64:	000b883a 	mov	r5,zero
  800d68:	1009883a 	mov	r4,r2
  800d6c:	08008000 	call	800800 <SendCMD>
  800d70:	10803fcc 	andi	r2,r2,255
  800d74:	103ff71e 	bne	r2,zero,800d54 <__alt_data_end+0xff800d54>
         if (!Timer1 || SendCMD(CMD16, 512) != 0)  /* Select R/W block length */
  800d78:	d0a3578b 	ldhu	r2,-29346(gp)
  800d7c:	10bfffcc 	andi	r2,r2,65535
  800d80:	10000526 	beq	r2,zero,800d98 <ffs_DiskIOInitialize+0x214>
  800d84:	01408004 	movi	r5,512
  800d88:	01001404 	movi	r4,80
  800d8c:	08008000 	call	800800 <SendCMD>
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	10000126 	beq	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
            ty = 0;
  800d98:	e03ffc45 	stb	zero,-15(fp)
      }
   }
   CardType = ty;
  800d9c:	e0bffc43 	ldbu	r2,-15(fp)
  800da0:	d0a35705 	stb	r2,-29348(gp)
   ReleaseBus();
  800da4:	08007b80 	call	8007b8 <ReleaseBus>

   if (ty)
  800da8:	e0bffc43 	ldbu	r2,-15(fp)
  800dac:	10000526 	beq	r2,zero,800dc4 <ffs_DiskIOInitialize+0x240>
   {  /* Initialization succeded */
      Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
  800db0:	d0e00003 	ldbu	r3,-32768(gp)
  800db4:	00bfff84 	movi	r2,-2
  800db8:	1884703a 	and	r2,r3,r2
  800dbc:	d0a00005 	stb	r2,-32768(gp)

      SetHighSpeed();
  800dc0:	08003080 	call	800308 <SetHighSpeed>
   else
   {  /* Initialization failed */
      POWER_OFF();
   }

   return(Stat);
  800dc4:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOInitialize */
  800dc8:	e6ffff04 	addi	sp,fp,-4
  800dcc:	dfc00217 	ldw	ra,8(sp)
  800dd0:	df000117 	ldw	fp,4(sp)
  800dd4:	dc000017 	ldw	r16,0(sp)
  800dd8:	dec00304 	addi	sp,sp,12
  800ddc:	f800283a 	ret

00800de0 <ffs_DiskIOStatus>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOStatus (FFS_U8 drv)
{
  800de0:	defffe04 	addi	sp,sp,-8
  800de4:	df000115 	stw	fp,4(sp)
  800de8:	df000104 	addi	fp,sp,4
  800dec:	2005883a 	mov	r2,r4
  800df0:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   return(Stat);
  800df4:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOStatus */
  800df8:	e037883a 	mov	sp,fp
  800dfc:	df000017 	ldw	fp,0(sp)
  800e00:	dec00104 	addi	sp,sp,4
  800e04:	f800283a 	ret

00800e08 <ffs_DiskIORead>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIORead (FFS_U8 drv, FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  800e08:	defffa04 	addi	sp,sp,-24
  800e0c:	dfc00515 	stw	ra,20(sp)
  800e10:	df000415 	stw	fp,16(sp)
  800e14:	df000404 	addi	fp,sp,16
  800e18:	2007883a 	mov	r3,r4
  800e1c:	e17ffd15 	stw	r5,-12(fp)
  800e20:	e1bffe15 	stw	r6,-8(fp)
  800e24:	3805883a 	mov	r2,r7
  800e28:	e0fffc05 	stb	r3,-16(fp)
  800e2c:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  800e30:	e0bfff03 	ldbu	r2,-4(fp)
  800e34:	1000021e 	bne	r2,zero,800e40 <ffs_DiskIORead+0x38>
      return RES_PARERR;
  800e38:	00800104 	movi	r2,4
  800e3c:	00003506 	br	800f14 <ffs_DiskIORead+0x10c>
   if (Stat & STA_NOINIT)
  800e40:	d0a00003 	ldbu	r2,-32768(gp)
  800e44:	10803fcc 	andi	r2,r2,255
  800e48:	1080004c 	andi	r2,r2,1
  800e4c:	10000226 	beq	r2,zero,800e58 <ffs_DiskIORead+0x50>
      return RES_NOTRDY;
  800e50:	008000c4 	movi	r2,3
  800e54:	00002f06 	br	800f14 <ffs_DiskIORead+0x10c>

   if (!(CardType & CT_BLOCK))
  800e58:	d0a35703 	ldbu	r2,-29348(gp)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080020c 	andi	r2,r2,8
  800e64:	1000031e 	bne	r2,zero,800e74 <ffs_DiskIORead+0x6c>
      sector *= 512; /* Convert LBA to byte address if needed */
  800e68:	e0bffe17 	ldw	r2,-8(fp)
  800e6c:	1004927a 	slli	r2,r2,9
  800e70:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  800e74:	e0bfff03 	ldbu	r2,-4(fp)
  800e78:	10800058 	cmpnei	r2,r2,1
  800e7c:	10000b1e 	bne	r2,zero,800eac <ffs_DiskIORead+0xa4>
   {  /* Single block read */
      if ((SendCMD(CMD17, sector) == 0)   /* READ_SINGLE_BLOCK */
  800e80:	e17ffe17 	ldw	r5,-8(fp)
  800e84:	01001444 	movi	r4,81
  800e88:	08008000 	call	800800 <SendCMD>
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	10001c1e 	bne	r2,zero,800f04 <ffs_DiskIORead+0xfc>
          && ReceiveDatablock(buff, 512))
  800e94:	01408004 	movi	r5,512
  800e98:	e13ffd17 	ldw	r4,-12(fp)
  800e9c:	080048c0 	call	80048c <ReceiveDatablock>
  800ea0:	10001826 	beq	r2,zero,800f04 <ffs_DiskIORead+0xfc>
         count = 0;
  800ea4:	e03fff05 	stb	zero,-4(fp)
  800ea8:	00001606 	br	800f04 <ffs_DiskIORead+0xfc>
   }
   else
   {  /* Multiple block read */
      if (SendCMD(CMD18, sector) == 0)
  800eac:	e17ffe17 	ldw	r5,-8(fp)
  800eb0:	01001484 	movi	r4,82
  800eb4:	08008000 	call	800800 <SendCMD>
  800eb8:	10803fcc 	andi	r2,r2,255
  800ebc:	1000111e 	bne	r2,zero,800f04 <ffs_DiskIORead+0xfc>
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
  800ec0:	01408004 	movi	r5,512
  800ec4:	e13ffd17 	ldw	r4,-12(fp)
  800ec8:	080048c0 	call	80048c <ReceiveDatablock>
  800ecc:	10000926 	beq	r2,zero,800ef4 <ffs_DiskIORead+0xec>
               break;
            buff += 512;
  800ed0:	e0bffd17 	ldw	r2,-12(fp)
  800ed4:	10808004 	addi	r2,r2,512
  800ed8:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  800edc:	e0bfff03 	ldbu	r2,-4(fp)
  800ee0:	10bfffc4 	addi	r2,r2,-1
  800ee4:	e0bfff05 	stb	r2,-4(fp)
  800ee8:	e0bfff03 	ldbu	r2,-4(fp)
  800eec:	103ff41e 	bne	r2,zero,800ec0 <__alt_data_end+0xff800ec0>
  800ef0:	00000106 	br	800ef8 <ffs_DiskIORead+0xf0>
      if (SendCMD(CMD18, sector) == 0)
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
               break;
  800ef4:	0001883a 	nop
            buff += 512;
         }
         while (--count);
         SendCMD(CMD12, 0);   /* STOP_TRANSMISSION */
  800ef8:	000b883a 	mov	r5,zero
  800efc:	01001304 	movi	r4,76
  800f00:	08008000 	call	800800 <SendCMD>
      }
   }
   ReleaseBus();
  800f04:	08007b80 	call	8007b8 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  800f08:	e0bfff03 	ldbu	r2,-4(fp)
  800f0c:	1004c03a 	cmpne	r2,r2,zero
  800f10:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIORead */
  800f14:	e037883a 	mov	sp,fp
  800f18:	dfc00117 	ldw	ra,4(sp)
  800f1c:	df000017 	ldw	fp,0(sp)
  800f20:	dec00204 	addi	sp,sp,8
  800f24:	f800283a 	ret

00800f28 <ffs_DiskIOWrite>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOWrite (FFS_U8 drv, const FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  800f28:	defffa04 	addi	sp,sp,-24
  800f2c:	dfc00515 	stw	ra,20(sp)
  800f30:	df000415 	stw	fp,16(sp)
  800f34:	df000404 	addi	fp,sp,16
  800f38:	2007883a 	mov	r3,r4
  800f3c:	e17ffd15 	stw	r5,-12(fp)
  800f40:	e1bffe15 	stw	r6,-8(fp)
  800f44:	3805883a 	mov	r2,r7
  800f48:	e0fffc05 	stb	r3,-16(fp)
  800f4c:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  800f50:	e0bfff03 	ldbu	r2,-4(fp)
  800f54:	1000021e 	bne	r2,zero,800f60 <ffs_DiskIOWrite+0x38>
      return RES_PARERR;
  800f58:	00800104 	movi	r2,4
  800f5c:	00004906 	br	801084 <ffs_DiskIOWrite+0x15c>
   if (Stat & STA_NOINIT)
  800f60:	d0a00003 	ldbu	r2,-32768(gp)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080004c 	andi	r2,r2,1
  800f6c:	10000226 	beq	r2,zero,800f78 <ffs_DiskIOWrite+0x50>
      return RES_NOTRDY;
  800f70:	008000c4 	movi	r2,3
  800f74:	00004306 	br	801084 <ffs_DiskIOWrite+0x15c>
   if (Stat & STA_PROTECT)
  800f78:	d0a00003 	ldbu	r2,-32768(gp)
  800f7c:	10803fcc 	andi	r2,r2,255
  800f80:	1080010c 	andi	r2,r2,4
  800f84:	10000226 	beq	r2,zero,800f90 <ffs_DiskIOWrite+0x68>
      return RES_WRPRT;
  800f88:	00800084 	movi	r2,2
  800f8c:	00003d06 	br	801084 <ffs_DiskIOWrite+0x15c>

   if (!(CardType & CT_BLOCK))
  800f90:	d0a35703 	ldbu	r2,-29348(gp)
  800f94:	10803fcc 	andi	r2,r2,255
  800f98:	1080020c 	andi	r2,r2,8
  800f9c:	1000031e 	bne	r2,zero,800fac <ffs_DiskIOWrite+0x84>
      sector *= 512; /* Convert LBA to byte address if needed */
  800fa0:	e0bffe17 	ldw	r2,-8(fp)
  800fa4:	1004927a 	slli	r2,r2,9
  800fa8:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  800fac:	e0bfff03 	ldbu	r2,-4(fp)
  800fb0:	10800058 	cmpnei	r2,r2,1
  800fb4:	10000b1e 	bne	r2,zero,800fe4 <ffs_DiskIOWrite+0xbc>
   {  /* Single block write */
      if ((SendCMD(CMD24, sector) == 0)   /* WRITE_BLOCK */
  800fb8:	e17ffe17 	ldw	r5,-8(fp)
  800fbc:	01001604 	movi	r4,88
  800fc0:	08008000 	call	800800 <SendCMD>
  800fc4:	10803fcc 	andi	r2,r2,255
  800fc8:	10002a1e 	bne	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
          && TransmitDatablock(buff, 0xFE))
  800fcc:	01403f84 	movi	r5,254
  800fd0:	e13ffd17 	ldw	r4,-12(fp)
  800fd4:	08005b80 	call	8005b8 <TransmitDatablock>
  800fd8:	10002626 	beq	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
         count = 0;
  800fdc:	e03fff05 	stb	zero,-4(fp)
  800fe0:	00002406 	br	801074 <ffs_DiskIOWrite+0x14c>
   }
   else
   {  /* Multiple block write */
      if (CardType & CT_SDC)
  800fe4:	d0a35703 	ldbu	r2,-29348(gp)
  800fe8:	10803fcc 	andi	r2,r2,255
  800fec:	1080018c 	andi	r2,r2,6
  800ff0:	10000726 	beq	r2,zero,801010 <ffs_DiskIOWrite+0xe8>
      {
         SendCMD(CMD55, 0);
  800ff4:	000b883a 	mov	r5,zero
  800ff8:	01001dc4 	movi	r4,119
  800ffc:	08008000 	call	800800 <SendCMD>
         SendCMD(CMD23, count);  /* ACMD23 */
  801000:	e0bfff03 	ldbu	r2,-4(fp)
  801004:	100b883a 	mov	r5,r2
  801008:	010015c4 	movi	r4,87
  80100c:	08008000 	call	800800 <SendCMD>
      }
      if (SendCMD(CMD25, sector) == 0)
  801010:	e17ffe17 	ldw	r5,-8(fp)
  801014:	01001644 	movi	r4,89
  801018:	08008000 	call	800800 <SendCMD>
  80101c:	10803fcc 	andi	r2,r2,255
  801020:	1000141e 	bne	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
  801024:	01403f04 	movi	r5,252
  801028:	e13ffd17 	ldw	r4,-12(fp)
  80102c:	08005b80 	call	8005b8 <TransmitDatablock>
  801030:	10000926 	beq	r2,zero,801058 <ffs_DiskIOWrite+0x130>
               break;
            buff += 512;
  801034:	e0bffd17 	ldw	r2,-12(fp)
  801038:	10808004 	addi	r2,r2,512
  80103c:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  801040:	e0bfff03 	ldbu	r2,-4(fp)
  801044:	10bfffc4 	addi	r2,r2,-1
  801048:	e0bfff05 	stb	r2,-4(fp)
  80104c:	e0bfff03 	ldbu	r2,-4(fp)
  801050:	103ff41e 	bne	r2,zero,801024 <__alt_data_end+0xff801024>
  801054:	00000106 	br	80105c <ffs_DiskIOWrite+0x134>
      if (SendCMD(CMD25, sector) == 0)
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
               break;
  801058:	0001883a 	nop
            buff += 512;
         }
         while (--count);
         if (!TransmitDatablock(0, 0xFD)) /* STOP_TRAN token */
  80105c:	01403f44 	movi	r5,253
  801060:	0009883a 	mov	r4,zero
  801064:	08005b80 	call	8005b8 <TransmitDatablock>
  801068:	1000021e 	bne	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
            count = 1;
  80106c:	00800044 	movi	r2,1
  801070:	e0bfff05 	stb	r2,-4(fp)
      }
   }
   ReleaseBus();
  801074:	08007b80 	call	8007b8 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  801078:	e0bfff03 	ldbu	r2,-4(fp)
  80107c:	1004c03a 	cmpne	r2,r2,zero
  801080:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIOWrite */
  801084:	e037883a 	mov	sp,fp
  801088:	dfc00117 	ldw	ra,4(sp)
  80108c:	df000017 	ldw	fp,0(sp)
  801090:	dec00204 	addi	sp,sp,8
  801094:	f800283a 	ret

00801098 <ffs_DiskIOIoctl>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOIoctl (FFS_U8 drv, FFS_U8 ctrl, void *buff)
{
  801098:	defff204 	addi	sp,sp,-56
  80109c:	dfc00d15 	stw	ra,52(sp)
  8010a0:	df000c15 	stw	fp,48(sp)
  8010a4:	dc000b15 	stw	r16,44(sp)
  8010a8:	df000c04 	addi	fp,sp,48
  8010ac:	2007883a 	mov	r3,r4
  8010b0:	2805883a 	mov	r2,r5
  8010b4:	e1bffe15 	stw	r6,-8(fp)
  8010b8:	e0fffc05 	stb	r3,-16(fp)
  8010bc:	e0bffd05 	stb	r2,-12(fp)
   DRESULT res;
   FFS_U8 n, csd[16], *ptr = buff;
  8010c0:	e0bffe17 	ldw	r2,-8(fp)
  8010c4:	e0bff615 	stw	r2,-40(fp)
   FFS_U16 csize;

   (void)drv;

   if (Stat & STA_NOINIT)
  8010c8:	d0a00003 	ldbu	r2,-32768(gp)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080004c 	andi	r2,r2,1
  8010d4:	10000226 	beq	r2,zero,8010e0 <ffs_DiskIOIoctl+0x48>
      return RES_NOTRDY;
  8010d8:	008000c4 	movi	r2,3
  8010dc:	00011906 	br	801544 <ffs_DiskIOIoctl+0x4ac>

   res = RES_ERROR;
  8010e0:	00800044 	movi	r2,1
  8010e4:	e0bff415 	stw	r2,-48(fp)
   switch (ctrl)
  8010e8:	e0bffd03 	ldbu	r2,-12(fp)
  8010ec:	10c003e8 	cmpgeui	r3,r2,15
  8010f0:	1801021e 	bne	r3,zero,8014fc <ffs_DiskIOIoctl+0x464>
  8010f4:	100690ba 	slli	r3,r2,2
  8010f8:	00802034 	movhi	r2,128
  8010fc:	10844304 	addi	r2,r2,4364
  801100:	1885883a 	add	r2,r3,r2
  801104:	10800017 	ldw	r2,0(r2)
  801108:	1000683a 	jmp	r2
  80110c:	00801148 	cmpgei	r2,zero,69
  801110:	00801180 	call	80118 <__alt_mem_sdram_0-0x77fee8>
  801114:	00801290 	cmplti	r2,zero,74
  801118:	008012a4 	muli	r2,zero,74
  80111c:	008014fc 	xorhi	r2,zero,83
  801120:	008014fc 	xorhi	r2,zero,83
  801124:	008014fc 	xorhi	r2,zero,83
  801128:	008014fc 	xorhi	r2,zero,83
  80112c:	008014fc 	xorhi	r2,zero,83
  801130:	008014fc 	xorhi	r2,zero,83
  801134:	00801410 	cmplti	r2,zero,80
  801138:	00801424 	muli	r2,zero,80
  80113c:	00801450 	cmplti	r2,zero,81
  801140:	0080147c 	xorhi	r2,zero,81
  801144:	008014cc 	andi	r2,zero,83
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
  801148:	d0e35917 	ldw	r3,-29340(gp)
  80114c:	00bfff84 	movi	r2,-2
  801150:	1884703a 	and	r2,r3,r2
  801154:	d0a35915 	stw	r2,-29340(gp)
  801158:	00a04034 	movhi	r2,33024
  80115c:	10840204 	addi	r2,r2,4104
  801160:	d0e35917 	ldw	r3,-29340(gp)
  801164:	10c00015 	stw	r3,0(r2)
         if (WaitReady() == 0xFF)
  801168:	08007640 	call	800764 <WaitReady>
  80116c:	10803fcc 	andi	r2,r2,255
  801170:	10803fd8 	cmpnei	r2,r2,255
  801174:	1000e41e 	bne	r2,zero,801508 <ffs_DiskIOIoctl+0x470>
            res = RES_OK;
  801178:	e03ff415 	stw	zero,-48(fp)
         break;
  80117c:	0000e206 	br	801508 <ffs_DiskIOIoctl+0x470>

      case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
         if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  801180:	000b883a 	mov	r5,zero
  801184:	01001244 	movi	r4,73
  801188:	08008000 	call	800800 <SendCMD>
  80118c:	10803fcc 	andi	r2,r2,255
  801190:	1000df1e 	bne	r2,zero,801510 <ffs_DiskIOIoctl+0x478>
  801194:	e0bff784 	addi	r2,fp,-34
  801198:	01400404 	movi	r5,16
  80119c:	1009883a 	mov	r4,r2
  8011a0:	080048c0 	call	80048c <ReceiveDatablock>
  8011a4:	1000da26 	beq	r2,zero,801510 <ffs_DiskIOIoctl+0x478>
         {
            if ((csd[0] >> 6) == 1)
  8011a8:	e0bff783 	ldbu	r2,-34(fp)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	1004d1ba 	srli	r2,r2,6
  8011b4:	10803fcc 	andi	r2,r2,255
  8011b8:	10800058 	cmpnei	r2,r2,1
  8011bc:	10000d1e 	bne	r2,zero,8011f4 <ffs_DiskIOIoctl+0x15c>
            {  /* SDC ver 2.00 */
               //@@MF csize = csd[9] + ((FFS_U16)csd[8] << 8) + 1;
               csize = (FFS_U16) ((FFS_U16) csd[9] | ((FFS_U16) csd[8] << 8)) + 1;
  8011c0:	e0bff9c3 	ldbu	r2,-25(fp)
  8011c4:	10803fcc 	andi	r2,r2,255
  8011c8:	e0fff983 	ldbu	r3,-26(fp)
  8011cc:	18c03fcc 	andi	r3,r3,255
  8011d0:	1806923a 	slli	r3,r3,8
  8011d4:	10c4b03a 	or	r2,r2,r3
  8011d8:	10800044 	addi	r2,r2,1
  8011dc:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << 10;
  8011e0:	e0bff70b 	ldhu	r2,-36(fp)
  8011e4:	100692ba 	slli	r3,r2,10
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	10c00015 	stw	r3,0(r2)
  8011f0:	00002506 	br	801288 <ffs_DiskIOIoctl+0x1f0>
            }
            else
            {  /* MMC or SDC ver 1.XX */
               n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
  8011f4:	e0bff8c3 	ldbu	r2,-29(fp)
  8011f8:	108003cc 	andi	r2,r2,15
  8011fc:	1007883a 	mov	r3,r2
  801200:	e0bffa03 	ldbu	r2,-24(fp)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1004d1fa 	srli	r2,r2,7
  80120c:	1885883a 	add	r2,r3,r2
  801210:	1007883a 	mov	r3,r2
  801214:	e0bff9c3 	ldbu	r2,-25(fp)
  801218:	108000cc 	andi	r2,r2,3
  80121c:	1085883a 	add	r2,r2,r2
  801220:	1885883a 	add	r2,r3,r2
  801224:	10800084 	addi	r2,r2,2
  801228:	e0bff505 	stb	r2,-44(fp)
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
  80122c:	e0bff983 	ldbu	r2,-26(fp)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1004d1ba 	srli	r2,r2,6
  801238:	10c03fcc 	andi	r3,r2,255
  80123c:	e0bff943 	ldbu	r2,-27(fp)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1085883a 	add	r2,r2,r2
  801248:	1085883a 	add	r2,r2,r2
  80124c:	1885883a 	add	r2,r3,r2
  801250:	1007883a 	mov	r3,r2
  801254:	e0bff903 	ldbu	r2,-28(fp)
  801258:	10803fcc 	andi	r2,r2,255
  80125c:	108000cc 	andi	r2,r2,3
  801260:	100492ba 	slli	r2,r2,10
  801264:	1885883a 	add	r2,r3,r2
  801268:	10800044 	addi	r2,r2,1
  80126c:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
  801270:	e0fff70b 	ldhu	r3,-36(fp)
  801274:	e0bff503 	ldbu	r2,-44(fp)
  801278:	10bffdc4 	addi	r2,r2,-9
  80127c:	1886983a 	sll	r3,r3,r2
  801280:	e0bffe17 	ldw	r2,-8(fp)
  801284:	10c00015 	stw	r3,0(r2)
            }
            res = RES_OK;
  801288:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  80128c:	0000a006 	br	801510 <ffs_DiskIOIoctl+0x478>

      case GET_SECTOR_SIZE:  /* Get sectors on the disk (WORD) */
         *(FFS_U16 *) buff = 512;
  801290:	e0bffe17 	ldw	r2,-8(fp)
  801294:	00c08004 	movi	r3,512
  801298:	10c0000d 	sth	r3,0(r2)
         res = RES_OK;
  80129c:	e03ff415 	stw	zero,-48(fp)
         break;
  8012a0:	0000a606 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case GET_BLOCK_SIZE:   /* Get erase block size in unit of sectors (DWORD) */
         if (CardType & CT_SD2)
  8012a4:	d0a35703 	ldbu	r2,-29348(gp)
  8012a8:	10803fcc 	andi	r2,r2,255
  8012ac:	1080010c 	andi	r2,r2,4
  8012b0:	10001e26 	beq	r2,zero,80132c <ffs_DiskIOIoctl+0x294>
         {  /* SDC ver 2.00 */
            if (SendCMD(ACMD13, 0) == 0)
  8012b4:	000b883a 	mov	r5,zero
  8012b8:	01003344 	movi	r4,205
  8012bc:	08008000 	call	800800 <SendCMD>
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	1000941e 	bne	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
            {  /* Read SD status */
               ReceiveU8();
  8012c8:	080043c0 	call	80043c <ReceiveU8>
               if (ReceiveDatablock(csd, 16))
  8012cc:	e0bff784 	addi	r2,fp,-34
  8012d0:	01400404 	movi	r5,16
  8012d4:	1009883a 	mov	r4,r2
  8012d8:	080048c0 	call	80048c <ReceiveDatablock>
  8012dc:	10008e26 	beq	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  8012e0:	00800c04 	movi	r2,48
  8012e4:	e0bff505 	stb	r2,-44(fp)
  8012e8:	00000406 	br	8012fc <ffs_DiskIOIoctl+0x264>
                     ReceiveU8();   /* Purge trailing data */
  8012ec:	080043c0 	call	80043c <ReceiveU8>
            if (SendCMD(ACMD13, 0) == 0)
            {  /* Read SD status */
               ReceiveU8();
               if (ReceiveDatablock(csd, 16))
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  8012f0:	e0bff503 	ldbu	r2,-44(fp)
  8012f4:	10bfffc4 	addi	r2,r2,-1
  8012f8:	e0bff505 	stb	r2,-44(fp)
  8012fc:	e0bff503 	ldbu	r2,-44(fp)
  801300:	103ffa1e 	bne	r2,zero,8012ec <__alt_data_end+0xff8012ec>
                     ReceiveU8();   /* Purge trailing data */
                  *(FFS_U32 *) buff = 16UL << (csd[10] >> 4);
  801304:	e0bffa03 	ldbu	r2,-24(fp)
  801308:	10803fcc 	andi	r2,r2,255
  80130c:	1004d13a 	srli	r2,r2,4
  801310:	10803fcc 	andi	r2,r2,255
  801314:	00c00404 	movi	r3,16
  801318:	1886983a 	sll	r3,r3,r2
  80131c:	e0bffe17 	ldw	r2,-8(fp)
  801320:	10c00015 	stw	r3,0(r2)
                  res = RES_OK;
  801324:	e03ff415 	stw	zero,-48(fp)
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
  801328:	00007b06 	br	801518 <ffs_DiskIOIoctl+0x480>
               }
            }
         }
         else
         {  /* SDC ver 1.XX or MMC */
            if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  80132c:	000b883a 	mov	r5,zero
  801330:	01001244 	movi	r4,73
  801334:	08008000 	call	800800 <SendCMD>
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1000761e 	bne	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
  801340:	e0bff784 	addi	r2,fp,-34
  801344:	01400404 	movi	r5,16
  801348:	1009883a 	mov	r4,r2
  80134c:	080048c0 	call	80048c <ReceiveDatablock>
  801350:	10007126 	beq	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
            {  /* Read CSD */
               if (CardType & CT_SD1)
  801354:	d0a35703 	ldbu	r2,-29348(gp)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	1080008c 	andi	r2,r2,2
  801360:	10001526 	beq	r2,zero,8013b8 <ffs_DiskIOIoctl+0x320>
               {  /* SDC ver 1.XX */
                  *(FFS_U32 *) buff = (((csd[10] & 63) << 1) + ((FFS_U16) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
  801364:	e0bffa03 	ldbu	r2,-24(fp)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	10800fcc 	andi	r2,r2,63
  801370:	1085883a 	add	r2,r2,r2
  801374:	1007883a 	mov	r3,r2
  801378:	e0bffa43 	ldbu	r2,-23(fp)
  80137c:	10803fcc 	andi	r2,r2,255
  801380:	1004d1fa 	srli	r2,r2,7
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1885883a 	add	r2,r3,r2
  80138c:	10c00044 	addi	r3,r2,1
  801390:	e0bffac3 	ldbu	r2,-21(fp)
  801394:	10803fcc 	andi	r2,r2,255
  801398:	1004d1ba 	srli	r2,r2,6
  80139c:	10803fcc 	andi	r2,r2,255
  8013a0:	10bfffc4 	addi	r2,r2,-1
  8013a4:	1884983a 	sll	r2,r3,r2
  8013a8:	1007883a 	mov	r3,r2
  8013ac:	e0bffe17 	ldw	r2,-8(fp)
  8013b0:	10c00015 	stw	r3,0(r2)
  8013b4:	00001406 	br	801408 <ffs_DiskIOIoctl+0x370>
               }
               else
               {  /* MMC */
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
  8013b8:	e0bffa03 	ldbu	r2,-24(fp)
  8013bc:	10803fcc 	andi	r2,r2,255
  8013c0:	10801f0c 	andi	r2,r2,124
  8013c4:	1005d0ba 	srai	r2,r2,2
  8013c8:	10bfffcc 	andi	r2,r2,65535
  8013cc:	10c00044 	addi	r3,r2,1
  8013d0:	e0bffa43 	ldbu	r2,-23(fp)
  8013d4:	10803fcc 	andi	r2,r2,255
  8013d8:	108000cc 	andi	r2,r2,3
  8013dc:	100890fa 	slli	r4,r2,3
  8013e0:	e0bffa43 	ldbu	r2,-23(fp)
  8013e4:	10803fcc 	andi	r2,r2,255
  8013e8:	1004d17a 	srli	r2,r2,5
  8013ec:	10803fcc 	andi	r2,r2,255
  8013f0:	2085883a 	add	r2,r4,r2
  8013f4:	10800044 	addi	r2,r2,1
  8013f8:	1885383a 	mul	r2,r3,r2
  8013fc:	1007883a 	mov	r3,r2
  801400:	e0bffe17 	ldw	r2,-8(fp)
  801404:	10c00015 	stw	r3,0(r2)
               }
               res = RES_OK;
  801408:	e03ff415 	stw	zero,-48(fp)
            }
         }
         break;
  80140c:	00004206 	br	801518 <ffs_DiskIOIoctl+0x480>
         
      /* Following command are not used by FatFs module */
         
      case MMC_GET_TYPE:  /* Get MMC/SDC type (BYTE) */
         *ptr = CardType;
  801410:	d0e35703 	ldbu	r3,-29348(gp)
  801414:	e0bff617 	ldw	r2,-40(fp)
  801418:	10c00005 	stb	r3,0(r2)
         res = RES_OK;
  80141c:	e03ff415 	stw	zero,-48(fp)
         break;
  801420:	00004606 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
  801424:	000b883a 	mov	r5,zero
  801428:	01001244 	movi	r4,73
  80142c:	08008000 	call	800800 <SendCMD>
  801430:	10803fcc 	andi	r2,r2,255
  801434:	10003a1e 	bne	r2,zero,801520 <ffs_DiskIOIoctl+0x488>
             && ReceiveDatablock(ptr, 16))
  801438:	01400404 	movi	r5,16
  80143c:	e13ff617 	ldw	r4,-40(fp)
  801440:	080048c0 	call	80048c <ReceiveDatablock>
  801444:	10003626 	beq	r2,zero,801520 <ffs_DiskIOIoctl+0x488>
            res = RES_OK;
  801448:	e03ff415 	stw	zero,-48(fp)
         break;
  80144c:	00003406 	br	801520 <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
  801450:	000b883a 	mov	r5,zero
  801454:	01001284 	movi	r4,74
  801458:	08008000 	call	800800 <SendCMD>
  80145c:	10803fcc 	andi	r2,r2,255
  801460:	1000311e 	bne	r2,zero,801528 <ffs_DiskIOIoctl+0x490>
             && ReceiveDatablock(ptr, 16))
  801464:	01400404 	movi	r5,16
  801468:	e13ff617 	ldw	r4,-40(fp)
  80146c:	080048c0 	call	80048c <ReceiveDatablock>
  801470:	10002d26 	beq	r2,zero,801528 <ffs_DiskIOIoctl+0x490>
            res = RES_OK;
  801474:	e03ff415 	stw	zero,-48(fp)
         break;
  801478:	00002b06 	br	801528 <ffs_DiskIOIoctl+0x490>

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
  80147c:	000b883a 	mov	r5,zero
  801480:	01001e84 	movi	r4,122
  801484:	08008000 	call	800800 <SendCMD>
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1000281e 	bne	r2,zero,801530 <ffs_DiskIOIoctl+0x498>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  801490:	e03ff505 	stb	zero,-44(fp)
  801494:	00000806 	br	8014b8 <ffs_DiskIOIoctl+0x420>
               *ptr++ = ReceiveU8();
  801498:	e43ff617 	ldw	r16,-40(fp)
  80149c:	80800044 	addi	r2,r16,1
  8014a0:	e0bff615 	stw	r2,-40(fp)
  8014a4:	080043c0 	call	80043c <ReceiveU8>
  8014a8:	80800005 	stb	r2,0(r16)
         break;

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  8014ac:	e0bff503 	ldbu	r2,-44(fp)
  8014b0:	10800044 	addi	r2,r2,1
  8014b4:	e0bff505 	stb	r2,-44(fp)
  8014b8:	e0bff503 	ldbu	r2,-44(fp)
  8014bc:	10800130 	cmpltui	r2,r2,4
  8014c0:	103ff51e 	bne	r2,zero,801498 <__alt_data_end+0xff801498>
               *ptr++ = ReceiveU8();
            res = RES_OK;
  8014c4:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  8014c8:	00001906 	br	801530 <ffs_DiskIOIoctl+0x498>

      case MMC_GET_SDSTAT:   /* Receive SD statsu as a data block (64 bytes) */
         if (SendCMD(ACMD13, 0) == 0)
  8014cc:	000b883a 	mov	r5,zero
  8014d0:	01003344 	movi	r4,205
  8014d4:	08008000 	call	800800 <SendCMD>
  8014d8:	10803fcc 	andi	r2,r2,255
  8014dc:	1000161e 	bne	r2,zero,801538 <ffs_DiskIOIoctl+0x4a0>
         {  /* SD_STATUS */
            ReceiveU8();
  8014e0:	080043c0 	call	80043c <ReceiveU8>
            if (ReceiveDatablock(ptr, 64))
  8014e4:	01401004 	movi	r5,64
  8014e8:	e13ff617 	ldw	r4,-40(fp)
  8014ec:	080048c0 	call	80048c <ReceiveDatablock>
  8014f0:	10001126 	beq	r2,zero,801538 <ffs_DiskIOIoctl+0x4a0>
               res = RES_OK;
  8014f4:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  8014f8:	00000f06 	br	801538 <ffs_DiskIOIoctl+0x4a0>

      default:
         res = RES_PARERR;
  8014fc:	00800104 	movi	r2,4
  801500:	e0bff415 	stw	r2,-48(fp)
  801504:	00000d06 	br	80153c <ffs_DiskIOIoctl+0x4a4>
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
         if (WaitReady() == 0xFF)
            res = RES_OK;
         break;
  801508:	0001883a 	nop
  80150c:	00000b06 	br	80153c <ffs_DiskIOIoctl+0x4a4>
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
            }
            res = RES_OK;
         }
         break;
  801510:	0001883a 	nop
  801514:	00000906 	br	80153c <ffs_DiskIOIoctl+0x4a4>
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
  801518:	0001883a 	nop
  80151c:	00000706 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
             && ReceiveDatablock(ptr, 16))
            res = RES_OK;
         break;
  801520:	0001883a 	nop
  801524:	00000506 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
             && ReceiveDatablock(ptr, 16))
            res = RES_OK;
         break;
  801528:	0001883a 	nop
  80152c:	00000306 	br	80153c <ffs_DiskIOIoctl+0x4a4>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
               *ptr++ = ReceiveU8();
            res = RES_OK;
         }
         break;
  801530:	0001883a 	nop
  801534:	00000106 	br	80153c <ffs_DiskIOIoctl+0x4a4>
         {  /* SD_STATUS */
            ReceiveU8();
            if (ReceiveDatablock(ptr, 64))
               res = RES_OK;
         }
         break;
  801538:	0001883a 	nop

      default:
         res = RES_PARERR;
   }

   ReleaseBus();
  80153c:	08007b80 	call	8007b8 <ReleaseBus>

   return(res);
  801540:	e0bff417 	ldw	r2,-48(fp)
} /* ffs_DiskIOIoctl */
  801544:	e6ffff04 	addi	sp,fp,-4
  801548:	dfc00217 	ldw	ra,8(sp)
  80154c:	df000117 	ldw	fp,4(sp)
  801550:	dc000017 	ldw	r16,0(sp)
  801554:	dec00304 	addi	sp,sp,12
  801558:	f800283a 	ret

0080155c <get_fattime>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: time                                                           */
/***************************************************************************/
FFS_U32 get_fattime (void)
{
  80155c:	defffe04 	addi	sp,sp,-8
  801560:	df000115 	stw	fp,4(sp)
  801564:	df000104 	addi	fp,sp,4
   FFS_U32 dTime;

   dTime = ((FFS_U32)(2008 - 1980) << 25) |
  801568:	008e57f4 	movhi	r2,14687
  80156c:	10a87844 	addi	r2,r2,-24095
  801570:	e0bfff15 	stw	r2,-4(fp)
                     ((FFS_U32) 30 << 16) | 
                     ((FFS_U32) 20 << 11) | 
                     ((FFS_U32) 15 << 5)  | 
                     ((FFS_U32) 2 >> 1);

   return(dTime);
  801574:	e0bfff17 	ldw	r2,-4(fp)
} /* get_fattime */
  801578:	e037883a 	mov	sp,fp
  80157c:	df000017 	ldw	fp,0(sp)
  801580:	dec00104 	addi	sp,sp,4
  801584:	f800283a 	ret

00801588 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, uint32_t cnt) {
  801588:	defffa04 	addi	sp,sp,-24
  80158c:	df000515 	stw	fp,20(sp)
  801590:	df000504 	addi	fp,sp,20
  801594:	e13ffd15 	stw	r4,-12(fp)
  801598:	e17ffe15 	stw	r5,-8(fp)
  80159c:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  8015a0:	e0bffd17 	ldw	r2,-12(fp)
  8015a4:	e0bffb15 	stw	r2,-20(fp)
   const uint8_t *s = (const uint8_t*)src;
  8015a8:	e0bffe17 	ldw	r2,-8(fp)
  8015ac:	e0bffc15 	stw	r2,-16(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  8015b0:	00000806 	br	8015d4 <mem_cpy+0x4c>
      *d++ = *s++;
  8015b4:	e0bffb17 	ldw	r2,-20(fp)
  8015b8:	10c00044 	addi	r3,r2,1
  8015bc:	e0fffb15 	stw	r3,-20(fp)
  8015c0:	e0fffc17 	ldw	r3,-16(fp)
  8015c4:	19000044 	addi	r4,r3,1
  8015c8:	e13ffc15 	stw	r4,-16(fp)
  8015cc:	18c00003 	ldbu	r3,0(r3)
  8015d0:	10c00005 	stb	r3,0(r2)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  8015d4:	e0bfff17 	ldw	r2,-4(fp)
  8015d8:	10ffffc4 	addi	r3,r2,-1
  8015dc:	e0ffff15 	stw	r3,-4(fp)
  8015e0:	103ff41e 	bne	r2,zero,8015b4 <__alt_data_end+0xff8015b4>
      *d++ = *s++;
}
  8015e4:	0001883a 	nop
  8015e8:	e037883a 	mov	sp,fp
  8015ec:	df000017 	ldw	fp,0(sp)
  8015f0:	dec00104 	addi	sp,sp,4
  8015f4:	f800283a 	ret

008015f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
  8015f8:	defffb04 	addi	sp,sp,-20
  8015fc:	df000415 	stw	fp,16(sp)
  801600:	df000404 	addi	fp,sp,16
  801604:	e13ffd15 	stw	r4,-12(fp)
  801608:	e17ffe15 	stw	r5,-8(fp)
  80160c:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  801610:	e0bffd17 	ldw	r2,-12(fp)
  801614:	e0bffc15 	stw	r2,-16(fp)

   while (cnt--)
  801618:	00000506 	br	801630 <mem_set+0x38>
      *d++ = (uint8_t)val;
  80161c:	e0bffc17 	ldw	r2,-16(fp)
  801620:	10c00044 	addi	r3,r2,1
  801624:	e0fffc15 	stw	r3,-16(fp)
  801628:	e0fffe17 	ldw	r3,-8(fp)
  80162c:	10c00005 	stb	r3,0(r2)
/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
   uint8_t *d = (uint8_t*)dst;

   while (cnt--)
  801630:	e0bfff17 	ldw	r2,-4(fp)
  801634:	10ffffc4 	addi	r3,r2,-1
  801638:	e0ffff15 	stw	r3,-4(fp)
  80163c:	103ff71e 	bne	r2,zero,80161c <__alt_data_end+0xff80161c>
      *d++ = (uint8_t)val;
}
  801640:	0001883a 	nop
  801644:	e037883a 	mov	sp,fp
  801648:	df000017 	ldw	fp,0(sp)
  80164c:	dec00104 	addi	sp,sp,4
  801650:	f800283a 	ret

00801654 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, uint32_t cnt) {
  801654:	defff904 	addi	sp,sp,-28
  801658:	df000615 	stw	fp,24(sp)
  80165c:	df000604 	addi	fp,sp,24
  801660:	e13ffd15 	stw	r4,-12(fp)
  801664:	e17ffe15 	stw	r5,-8(fp)
  801668:	e1bfff15 	stw	r6,-4(fp)
   const uint8_t *d = (const uint8_t *)dst, *s = (const uint8_t *)src;
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	e0bffa15 	stw	r2,-24(fp)
  801674:	e0bffe17 	ldw	r2,-8(fp)
  801678:	e0bffb15 	stw	r2,-20(fp)
   int r = 0;
  80167c:	e03ffc15 	stw	zero,-16(fp)

   while (cnt-- && (r = *d++ - *s++) == 0) ;
  801680:	0001883a 	nop
  801684:	e0bfff17 	ldw	r2,-4(fp)
  801688:	10ffffc4 	addi	r3,r2,-1
  80168c:	e0ffff15 	stw	r3,-4(fp)
  801690:	10000e26 	beq	r2,zero,8016cc <mem_cmp+0x78>
  801694:	e0bffa17 	ldw	r2,-24(fp)
  801698:	10c00044 	addi	r3,r2,1
  80169c:	e0fffa15 	stw	r3,-24(fp)
  8016a0:	10800003 	ldbu	r2,0(r2)
  8016a4:	10c03fcc 	andi	r3,r2,255
  8016a8:	e0bffb17 	ldw	r2,-20(fp)
  8016ac:	11000044 	addi	r4,r2,1
  8016b0:	e13ffb15 	stw	r4,-20(fp)
  8016b4:	10800003 	ldbu	r2,0(r2)
  8016b8:	10803fcc 	andi	r2,r2,255
  8016bc:	1885c83a 	sub	r2,r3,r2
  8016c0:	e0bffc15 	stw	r2,-16(fp)
  8016c4:	e0bffc17 	ldw	r2,-16(fp)
  8016c8:	103fee26 	beq	r2,zero,801684 <__alt_data_end+0xff801684>
   return r;
  8016cc:	e0bffc17 	ldw	r2,-16(fp)
}
  8016d0:	e037883a 	mov	sp,fp
  8016d4:	df000017 	ldw	fp,0(sp)
  8016d8:	dec00104 	addi	sp,sp,4
  8016dc:	f800283a 	ret

008016e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  8016e0:	defffd04 	addi	sp,sp,-12
  8016e4:	df000215 	stw	fp,8(sp)
  8016e8:	df000204 	addi	fp,sp,8
  8016ec:	e13ffe15 	stw	r4,-8(fp)
  8016f0:	e17fff15 	stw	r5,-4(fp)
   while (*str && *str != chr) str++;
  8016f4:	00000306 	br	801704 <chk_chr+0x24>
  8016f8:	e0bffe17 	ldw	r2,-8(fp)
  8016fc:	10800044 	addi	r2,r2,1
  801700:	e0bffe15 	stw	r2,-8(fp)
  801704:	e0bffe17 	ldw	r2,-8(fp)
  801708:	10800003 	ldbu	r2,0(r2)
  80170c:	10803fcc 	andi	r2,r2,255
  801710:	1080201c 	xori	r2,r2,128
  801714:	10bfe004 	addi	r2,r2,-128
  801718:	10000726 	beq	r2,zero,801738 <chk_chr+0x58>
  80171c:	e0bffe17 	ldw	r2,-8(fp)
  801720:	10800003 	ldbu	r2,0(r2)
  801724:	10c03fcc 	andi	r3,r2,255
  801728:	18c0201c 	xori	r3,r3,128
  80172c:	18ffe004 	addi	r3,r3,-128
  801730:	e0bfff17 	ldw	r2,-4(fp)
  801734:	18bff01e 	bne	r3,r2,8016f8 <__alt_data_end+0xff8016f8>
   return *str;
  801738:	e0bffe17 	ldw	r2,-8(fp)
  80173c:	10800003 	ldbu	r2,0(r2)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
}
  80174c:	e037883a 	mov	sp,fp
  801750:	df000017 	ldw	fp,0(sp)
  801754:	dec00104 	addi	sp,sp,4
  801758:	f800283a 	ret

0080175c <move_window>:
static
FRESULT move_window (
   FATFS *fs,     /* File system object */
   uint32_t sector   /* Sector number to make appearance in the fs->win[] */
)              /* Move to zero only writes back dirty window */
{
  80175c:	defffa04 	addi	sp,sp,-24
  801760:	dfc00515 	stw	ra,20(sp)
  801764:	df000415 	stw	fp,16(sp)
  801768:	df000404 	addi	fp,sp,16
  80176c:	e13ffe15 	stw	r4,-8(fp)
  801770:	e17fff15 	stw	r5,-4(fp)
   uint32_t wsect;


   wsect = fs->winsect;
  801774:	e0bffe17 	ldw	r2,-8(fp)
  801778:	10800b17 	ldw	r2,44(r2)
  80177c:	e0bffc15 	stw	r2,-16(fp)
   if (wsect != sector) {  /* Changed current window */
  801780:	e0fffc17 	ldw	r3,-16(fp)
  801784:	e0bfff17 	ldw	r2,-4(fp)
  801788:	18804526 	beq	r3,r2,8018a0 <move_window+0x144>
#if !_FS_READONLY
      if (fs->wflag) {  /* Write back dirty window if needed */
  80178c:	e0bffe17 	ldw	r2,-8(fp)
  801790:	10800103 	ldbu	r2,4(r2)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	10002f26 	beq	r2,zero,801858 <move_window+0xfc>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  80179c:	e0bffe17 	ldw	r2,-8(fp)
  8017a0:	10800043 	ldbu	r2,1(r2)
  8017a4:	10c03fcc 	andi	r3,r2,255
  8017a8:	e0bffe17 	ldw	r2,-8(fp)
  8017ac:	10800c04 	addi	r2,r2,48
  8017b0:	01c00044 	movi	r7,1
  8017b4:	e1bffc17 	ldw	r6,-16(fp)
  8017b8:	100b883a 	mov	r5,r2
  8017bc:	1809883a 	mov	r4,r3
  8017c0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8017c4:	10000226 	beq	r2,zero,8017d0 <move_window+0x74>
            return FR_DISK_ERR;
  8017c8:	00800044 	movi	r2,1
  8017cc:	00003506 	br	8018a4 <move_window+0x148>
         fs->wflag = 0;
  8017d0:	e0bffe17 	ldw	r2,-8(fp)
  8017d4:	10000105 	stb	zero,4(r2)
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
  8017d8:	e0bffe17 	ldw	r2,-8(fp)
  8017dc:	10c00817 	ldw	r3,32(r2)
  8017e0:	e0bffe17 	ldw	r2,-8(fp)
  8017e4:	10800717 	ldw	r2,28(r2)
  8017e8:	1885883a 	add	r2,r3,r2
  8017ec:	e0fffc17 	ldw	r3,-16(fp)
  8017f0:	1880192e 	bgeu	r3,r2,801858 <move_window+0xfc>
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  8017f4:	e0bffe17 	ldw	r2,-8(fp)
  8017f8:	108000c3 	ldbu	r2,3(r2)
  8017fc:	e0bffd05 	stb	r2,-12(fp)
  801800:	00001206 	br	80184c <move_window+0xf0>
               wsect += fs->fsize;
  801804:	e0bffe17 	ldw	r2,-8(fp)
  801808:	10800717 	ldw	r2,28(r2)
  80180c:	e0fffc17 	ldw	r3,-16(fp)
  801810:	1885883a 	add	r2,r3,r2
  801814:	e0bffc15 	stw	r2,-16(fp)
               disk_write(fs->drv, fs->win, wsect, 1);
  801818:	e0bffe17 	ldw	r2,-8(fp)
  80181c:	10800043 	ldbu	r2,1(r2)
  801820:	10c03fcc 	andi	r3,r2,255
  801824:	e0bffe17 	ldw	r2,-8(fp)
  801828:	10800c04 	addi	r2,r2,48
  80182c:	01c00044 	movi	r7,1
  801830:	e1bffc17 	ldw	r6,-16(fp)
  801834:	100b883a 	mov	r5,r2
  801838:	1809883a 	mov	r4,r3
  80183c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
            return FR_DISK_ERR;
         fs->wflag = 0;
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  801840:	e0bffd03 	ldbu	r2,-12(fp)
  801844:	10bfffc4 	addi	r2,r2,-1
  801848:	e0bffd05 	stb	r2,-12(fp)
  80184c:	e0bffd03 	ldbu	r2,-12(fp)
  801850:	108000a8 	cmpgeui	r2,r2,2
  801854:	103feb1e 	bne	r2,zero,801804 <__alt_data_end+0xff801804>
               disk_write(fs->drv, fs->win, wsect, 1);
            }
         }
      }
#endif
      if (sector) {
  801858:	e0bfff17 	ldw	r2,-4(fp)
  80185c:	10001026 	beq	r2,zero,8018a0 <move_window+0x144>
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  801860:	e0bffe17 	ldw	r2,-8(fp)
  801864:	10800043 	ldbu	r2,1(r2)
  801868:	10c03fcc 	andi	r3,r2,255
  80186c:	e0bffe17 	ldw	r2,-8(fp)
  801870:	10800c04 	addi	r2,r2,48
  801874:	01c00044 	movi	r7,1
  801878:	e1bfff17 	ldw	r6,-4(fp)
  80187c:	100b883a 	mov	r5,r2
  801880:	1809883a 	mov	r4,r3
  801884:	0800e080 	call	800e08 <ffs_DiskIORead>
  801888:	10000226 	beq	r2,zero,801894 <move_window+0x138>
            return FR_DISK_ERR;
  80188c:	00800044 	movi	r2,1
  801890:	00000406 	br	8018a4 <move_window+0x148>
         fs->winsect = sector;
  801894:	e0bffe17 	ldw	r2,-8(fp)
  801898:	e0ffff17 	ldw	r3,-4(fp)
  80189c:	10c00b15 	stw	r3,44(r2)
      }
   }

   return FR_OK;
  8018a0:	0005883a 	mov	r2,zero
}
  8018a4:	e037883a 	mov	sp,fp
  8018a8:	dfc00117 	ldw	ra,4(sp)
  8018ac:	df000017 	ldw	fp,0(sp)
  8018b0:	dec00204 	addi	sp,sp,8
  8018b4:	f800283a 	ret

008018b8 <sync>:
#if !_FS_READONLY
static
FRESULT sync ( /* FR_OK: successful, FR_DISK_ERR: failed */
   FATFS *fs   /* File system object */
)
{
  8018b8:	defffc04 	addi	sp,sp,-16
  8018bc:	dfc00315 	stw	ra,12(sp)
  8018c0:	df000215 	stw	fp,8(sp)
  8018c4:	df000204 	addi	fp,sp,8
  8018c8:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;


   res = move_window(fs, 0);
  8018cc:	000b883a 	mov	r5,zero
  8018d0:	e13fff17 	ldw	r4,-4(fp)
  8018d4:	080175c0 	call	80175c <move_window>
  8018d8:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  8018dc:	e0bffe17 	ldw	r2,-8(fp)
  8018e0:	1000771e 	bne	r2,zero,801ac0 <sync+0x208>
      /* Update FSInfo sector if needed */
      if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  8018e4:	e0bfff17 	ldw	r2,-4(fp)
  8018e8:	10800003 	ldbu	r2,0(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	108000d8 	cmpnei	r2,r2,3
  8018f4:	1000681e 	bne	r2,zero,801a98 <sync+0x1e0>
  8018f8:	e0bfff17 	ldw	r2,-4(fp)
  8018fc:	10800143 	ldbu	r2,5(r2)
  801900:	10803fcc 	andi	r2,r2,255
  801904:	10006426 	beq	r2,zero,801a98 <sync+0x1e0>
         fs->winsect = 0;
  801908:	e0bfff17 	ldw	r2,-4(fp)
  80190c:	10000b15 	stw	zero,44(r2)
         /* Create FSInfo structure */
         mem_set(fs->win, 0, 512);
  801910:	e0bfff17 	ldw	r2,-4(fp)
  801914:	10800c04 	addi	r2,r2,48
  801918:	01808004 	movi	r6,512
  80191c:	000b883a 	mov	r5,zero
  801920:	1009883a 	mov	r4,r2
  801924:	08015f80 	call	8015f8 <mem_set>
         ST_WORD(fs->win+BS_55AA, 0xAA55);
  801928:	e0bfff17 	ldw	r2,-4(fp)
  80192c:	00c01544 	movi	r3,85
  801930:	10c08b85 	stb	r3,558(r2)
  801934:	e0bfff17 	ldw	r2,-4(fp)
  801938:	00ffea84 	movi	r3,-86
  80193c:	10c08bc5 	stb	r3,559(r2)
         ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  801940:	e0bfff17 	ldw	r2,-4(fp)
  801944:	00c01484 	movi	r3,82
  801948:	10c00c05 	stb	r3,48(r2)
  80194c:	e0bfff17 	ldw	r2,-4(fp)
  801950:	00c01484 	movi	r3,82
  801954:	10c00c45 	stb	r3,49(r2)
  801958:	e0bfff17 	ldw	r2,-4(fp)
  80195c:	00c01844 	movi	r3,97
  801960:	10c00c85 	stb	r3,50(r2)
  801964:	e0bfff17 	ldw	r2,-4(fp)
  801968:	00c01044 	movi	r3,65
  80196c:	10c00cc5 	stb	r3,51(r2)
         ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  801970:	e0bfff17 	ldw	r2,-4(fp)
  801974:	00c01c84 	movi	r3,114
  801978:	10c08505 	stb	r3,532(r2)
  80197c:	e0bfff17 	ldw	r2,-4(fp)
  801980:	00c01c84 	movi	r3,114
  801984:	10c08545 	stb	r3,533(r2)
  801988:	e0bfff17 	ldw	r2,-4(fp)
  80198c:	00c01044 	movi	r3,65
  801990:	10c08585 	stb	r3,534(r2)
  801994:	e0bfff17 	ldw	r2,-4(fp)
  801998:	00c01844 	movi	r3,97
  80199c:	10c085c5 	stb	r3,535(r2)
         ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  8019a0:	e0bfff17 	ldw	r2,-4(fp)
  8019a4:	10800417 	ldw	r2,16(r2)
  8019a8:	1007883a 	mov	r3,r2
  8019ac:	e0bfff17 	ldw	r2,-4(fp)
  8019b0:	10c08605 	stb	r3,536(r2)
  8019b4:	e0bfff17 	ldw	r2,-4(fp)
  8019b8:	10800417 	ldw	r2,16(r2)
  8019bc:	10bfffcc 	andi	r2,r2,65535
  8019c0:	1005d23a 	srai	r2,r2,8
  8019c4:	1007883a 	mov	r3,r2
  8019c8:	e0bfff17 	ldw	r2,-4(fp)
  8019cc:	10c08645 	stb	r3,537(r2)
  8019d0:	e0bfff17 	ldw	r2,-4(fp)
  8019d4:	10800417 	ldw	r2,16(r2)
  8019d8:	1004d43a 	srli	r2,r2,16
  8019dc:	1007883a 	mov	r3,r2
  8019e0:	e0bfff17 	ldw	r2,-4(fp)
  8019e4:	10c08685 	stb	r3,538(r2)
  8019e8:	e0bfff17 	ldw	r2,-4(fp)
  8019ec:	10800417 	ldw	r2,16(r2)
  8019f0:	1004d63a 	srli	r2,r2,24
  8019f4:	1007883a 	mov	r3,r2
  8019f8:	e0bfff17 	ldw	r2,-4(fp)
  8019fc:	10c086c5 	stb	r3,539(r2)
         ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  801a00:	e0bfff17 	ldw	r2,-4(fp)
  801a04:	10800317 	ldw	r2,12(r2)
  801a08:	1007883a 	mov	r3,r2
  801a0c:	e0bfff17 	ldw	r2,-4(fp)
  801a10:	10c08705 	stb	r3,540(r2)
  801a14:	e0bfff17 	ldw	r2,-4(fp)
  801a18:	10800317 	ldw	r2,12(r2)
  801a1c:	10bfffcc 	andi	r2,r2,65535
  801a20:	1005d23a 	srai	r2,r2,8
  801a24:	1007883a 	mov	r3,r2
  801a28:	e0bfff17 	ldw	r2,-4(fp)
  801a2c:	10c08745 	stb	r3,541(r2)
  801a30:	e0bfff17 	ldw	r2,-4(fp)
  801a34:	10800317 	ldw	r2,12(r2)
  801a38:	1004d43a 	srli	r2,r2,16
  801a3c:	1007883a 	mov	r3,r2
  801a40:	e0bfff17 	ldw	r2,-4(fp)
  801a44:	10c08785 	stb	r3,542(r2)
  801a48:	e0bfff17 	ldw	r2,-4(fp)
  801a4c:	10800317 	ldw	r2,12(r2)
  801a50:	1004d63a 	srli	r2,r2,24
  801a54:	1007883a 	mov	r3,r2
  801a58:	e0bfff17 	ldw	r2,-4(fp)
  801a5c:	10c087c5 	stb	r3,543(r2)
         /* Write it into the FSInfo sector */
         disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  801a60:	e0bfff17 	ldw	r2,-4(fp)
  801a64:	10800043 	ldbu	r2,1(r2)
  801a68:	10c03fcc 	andi	r3,r2,255
  801a6c:	e0bfff17 	ldw	r2,-4(fp)
  801a70:	11000c04 	addi	r4,r2,48
  801a74:	e0bfff17 	ldw	r2,-4(fp)
  801a78:	10800517 	ldw	r2,20(r2)
  801a7c:	01c00044 	movi	r7,1
  801a80:	100d883a 	mov	r6,r2
  801a84:	200b883a 	mov	r5,r4
  801a88:	1809883a 	mov	r4,r3
  801a8c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
         fs->fsi_flag = 0;
  801a90:	e0bfff17 	ldw	r2,-4(fp)
  801a94:	10000145 	stb	zero,5(r2)
      }
      /* Make sure that no pending write process in the physical drive */
      if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  801a98:	e0bfff17 	ldw	r2,-4(fp)
  801a9c:	10800043 	ldbu	r2,1(r2)
  801aa0:	10803fcc 	andi	r2,r2,255
  801aa4:	000d883a 	mov	r6,zero
  801aa8:	000b883a 	mov	r5,zero
  801aac:	1009883a 	mov	r4,r2
  801ab0:	08010980 	call	801098 <ffs_DiskIOIoctl>
  801ab4:	10000226 	beq	r2,zero,801ac0 <sync+0x208>
         res = FR_DISK_ERR;
  801ab8:	00800044 	movi	r2,1
  801abc:	e0bffe15 	stw	r2,-8(fp)
   }

   return res;
  801ac0:	e0bffe17 	ldw	r2,-8(fp)
}
  801ac4:	e037883a 	mov	sp,fp
  801ac8:	dfc00117 	ldw	ra,4(sp)
  801acc:	df000017 	ldw	fp,0(sp)
  801ad0:	dec00204 	addi	sp,sp,8
  801ad4:	f800283a 	ret

00801ad8 <clust2sect>:

uint32_t clust2sect (   /* !=0: Sector number, 0: Failed - invalid cluster# */
   FATFS *fs,     /* File system object */
   uint32_t clst     /* Cluster# to be converted */
)
{
  801ad8:	defffd04 	addi	sp,sp,-12
  801adc:	df000215 	stw	fp,8(sp)
  801ae0:	df000204 	addi	fp,sp,8
  801ae4:	e13ffe15 	stw	r4,-8(fp)
  801ae8:	e17fff15 	stw	r5,-4(fp)
   clst -= 2;
  801aec:	e0bfff17 	ldw	r2,-4(fp)
  801af0:	10bfff84 	addi	r2,r2,-2
  801af4:	e0bfff15 	stw	r2,-4(fp)
   if (clst >= (fs->n_fatent - 2)) return 0;    /* Invalid cluster# */
  801af8:	e0bffe17 	ldw	r2,-8(fp)
  801afc:	10800617 	ldw	r2,24(r2)
  801b00:	10bfff84 	addi	r2,r2,-2
  801b04:	e0ffff17 	ldw	r3,-4(fp)
  801b08:	18800236 	bltu	r3,r2,801b14 <clust2sect+0x3c>
  801b0c:	0005883a 	mov	r2,zero
  801b10:	00000806 	br	801b34 <clust2sect+0x5c>
   return clst * fs->csize + fs->database;
  801b14:	e0bffe17 	ldw	r2,-8(fp)
  801b18:	10800083 	ldbu	r2,2(r2)
  801b1c:	10c03fcc 	andi	r3,r2,255
  801b20:	e0bfff17 	ldw	r2,-4(fp)
  801b24:	1887383a 	mul	r3,r3,r2
  801b28:	e0bffe17 	ldw	r2,-8(fp)
  801b2c:	10800a17 	ldw	r2,40(r2)
  801b30:	1885883a 	add	r2,r3,r2
}
  801b34:	e037883a 	mov	sp,fp
  801b38:	df000017 	ldw	fp,0(sp)
  801b3c:	dec00104 	addi	sp,sp,4
  801b40:	f800283a 	ret

00801b44 <get_fat>:

uint32_t get_fat (   /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   FATFS *fs,  /* File system object */
   uint32_t clst  /* Cluster# to get the link information */
)
{
  801b44:	defff904 	addi	sp,sp,-28
  801b48:	dfc00615 	stw	ra,24(sp)
  801b4c:	df000515 	stw	fp,20(sp)
  801b50:	df000504 	addi	fp,sp,20
  801b54:	e13ffe15 	stw	r4,-8(fp)
  801b58:	e17fff15 	stw	r5,-4(fp)
   uint32_t wc, bc;
   uint8_t *p;


   if (clst < 2 || clst >= fs->n_fatent)  /* Chack range */
  801b5c:	e0bfff17 	ldw	r2,-4(fp)
  801b60:	108000b0 	cmpltui	r2,r2,2
  801b64:	1000041e 	bne	r2,zero,801b78 <get_fat+0x34>
  801b68:	e0bffe17 	ldw	r2,-8(fp)
  801b6c:	10800617 	ldw	r2,24(r2)
  801b70:	e0ffff17 	ldw	r3,-4(fp)
  801b74:	18800236 	bltu	r3,r2,801b80 <get_fat+0x3c>
      return 1;
  801b78:	00800044 	movi	r2,1
  801b7c:	00009006 	br	801dc0 <get_fat+0x27c>

   switch (fs->fs_type) {
  801b80:	e0bffe17 	ldw	r2,-8(fp)
  801b84:	10800003 	ldbu	r2,0(r2)
  801b88:	10803fcc 	andi	r2,r2,255
  801b8c:	10c000a0 	cmpeqi	r3,r2,2
  801b90:	18003d1e 	bne	r3,zero,801c88 <get_fat+0x144>
  801b94:	10c000e0 	cmpeqi	r3,r2,3
  801b98:	1800571e 	bne	r3,zero,801cf8 <get_fat+0x1b4>
  801b9c:	10800060 	cmpeqi	r2,r2,1
  801ba0:	10008626 	beq	r2,zero,801dbc <get_fat+0x278>
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
  801ba4:	e0bfff17 	ldw	r2,-4(fp)
  801ba8:	e0bffb15 	stw	r2,-20(fp)
  801bac:	e0bffb17 	ldw	r2,-20(fp)
  801bb0:	1004d07a 	srli	r2,r2,1
  801bb4:	e0fffb17 	ldw	r3,-20(fp)
  801bb8:	1885883a 	add	r2,r3,r2
  801bbc:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801bc0:	e0bffe17 	ldw	r2,-8(fp)
  801bc4:	10c00817 	ldw	r3,32(r2)
  801bc8:	e0bffb17 	ldw	r2,-20(fp)
  801bcc:	1004d27a 	srli	r2,r2,9
  801bd0:	1885883a 	add	r2,r3,r2
  801bd4:	100b883a 	mov	r5,r2
  801bd8:	e13ffe17 	ldw	r4,-8(fp)
  801bdc:	080175c0 	call	80175c <move_window>
  801be0:	10006f1e 	bne	r2,zero,801da0 <get_fat+0x25c>
      wc = fs->win[bc % SS(fs)]; bc++;
  801be4:	e0bffb17 	ldw	r2,-20(fp)
  801be8:	10807fcc 	andi	r2,r2,511
  801bec:	e0fffe17 	ldw	r3,-8(fp)
  801bf0:	1885883a 	add	r2,r3,r2
  801bf4:	10800c04 	addi	r2,r2,48
  801bf8:	10800003 	ldbu	r2,0(r2)
  801bfc:	10803fcc 	andi	r2,r2,255
  801c00:	e0bffc15 	stw	r2,-16(fp)
  801c04:	e0bffb17 	ldw	r2,-20(fp)
  801c08:	10800044 	addi	r2,r2,1
  801c0c:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801c10:	e0bffe17 	ldw	r2,-8(fp)
  801c14:	10c00817 	ldw	r3,32(r2)
  801c18:	e0bffb17 	ldw	r2,-20(fp)
  801c1c:	1004d27a 	srli	r2,r2,9
  801c20:	1885883a 	add	r2,r3,r2
  801c24:	100b883a 	mov	r5,r2
  801c28:	e13ffe17 	ldw	r4,-8(fp)
  801c2c:	080175c0 	call	80175c <move_window>
  801c30:	10005d1e 	bne	r2,zero,801da8 <get_fat+0x264>
      wc |= fs->win[bc % SS(fs)] << 8;
  801c34:	e0bffb17 	ldw	r2,-20(fp)
  801c38:	10807fcc 	andi	r2,r2,511
  801c3c:	e0fffe17 	ldw	r3,-8(fp)
  801c40:	1885883a 	add	r2,r3,r2
  801c44:	10800c04 	addi	r2,r2,48
  801c48:	10800003 	ldbu	r2,0(r2)
  801c4c:	10803fcc 	andi	r2,r2,255
  801c50:	1004923a 	slli	r2,r2,8
  801c54:	1007883a 	mov	r3,r2
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10c4b03a 	or	r2,r2,r3
  801c60:	e0bffc15 	stw	r2,-16(fp)
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  801c64:	e0bfff17 	ldw	r2,-4(fp)
  801c68:	1080004c 	andi	r2,r2,1
  801c6c:	10000326 	beq	r2,zero,801c7c <get_fat+0x138>
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	1004d13a 	srli	r2,r2,4
  801c78:	00005106 	br	801dc0 <get_fat+0x27c>
  801c7c:	e0bffc17 	ldw	r2,-16(fp)
  801c80:	1083ffcc 	andi	r2,r2,4095
  801c84:	00004e06 	br	801dc0 <get_fat+0x27c>

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  801c88:	e0bffe17 	ldw	r2,-8(fp)
  801c8c:	10c00817 	ldw	r3,32(r2)
  801c90:	e0bfff17 	ldw	r2,-4(fp)
  801c94:	1004d23a 	srli	r2,r2,8
  801c98:	1885883a 	add	r2,r3,r2
  801c9c:	100b883a 	mov	r5,r2
  801ca0:	e13ffe17 	ldw	r4,-8(fp)
  801ca4:	080175c0 	call	80175c <move_window>
  801ca8:	1000411e 	bne	r2,zero,801db0 <get_fat+0x26c>
      p = &fs->win[clst * 2 % SS(fs)];
  801cac:	e0bfff17 	ldw	r2,-4(fp)
  801cb0:	1085883a 	add	r2,r2,r2
  801cb4:	10807f8c 	andi	r2,r2,510
  801cb8:	10800c04 	addi	r2,r2,48
  801cbc:	e0fffe17 	ldw	r3,-8(fp)
  801cc0:	1885883a 	add	r2,r3,r2
  801cc4:	e0bffd15 	stw	r2,-12(fp)
      return LD_WORD(p);
  801cc8:	e0bffd17 	ldw	r2,-12(fp)
  801ccc:	10800044 	addi	r2,r2,1
  801cd0:	10800003 	ldbu	r2,0(r2)
  801cd4:	10803fcc 	andi	r2,r2,255
  801cd8:	1004923a 	slli	r2,r2,8
  801cdc:	1007883a 	mov	r3,r2
  801ce0:	e0bffd17 	ldw	r2,-12(fp)
  801ce4:	10800003 	ldbu	r2,0(r2)
  801ce8:	10803fcc 	andi	r2,r2,255
  801cec:	1884b03a 	or	r2,r3,r2
  801cf0:	10bfffcc 	andi	r2,r2,65535
  801cf4:	00003206 	br	801dc0 <get_fat+0x27c>

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  801cf8:	e0bffe17 	ldw	r2,-8(fp)
  801cfc:	10c00817 	ldw	r3,32(r2)
  801d00:	e0bfff17 	ldw	r2,-4(fp)
  801d04:	1004d1fa 	srli	r2,r2,7
  801d08:	1885883a 	add	r2,r3,r2
  801d0c:	100b883a 	mov	r5,r2
  801d10:	e13ffe17 	ldw	r4,-8(fp)
  801d14:	080175c0 	call	80175c <move_window>
  801d18:	1000271e 	bne	r2,zero,801db8 <get_fat+0x274>
      p = &fs->win[clst * 4 % SS(fs)];
  801d1c:	e0bfff17 	ldw	r2,-4(fp)
  801d20:	1085883a 	add	r2,r2,r2
  801d24:	1085883a 	add	r2,r2,r2
  801d28:	10807f0c 	andi	r2,r2,508
  801d2c:	10800c04 	addi	r2,r2,48
  801d30:	e0fffe17 	ldw	r3,-8(fp)
  801d34:	1885883a 	add	r2,r3,r2
  801d38:	e0bffd15 	stw	r2,-12(fp)
      return LD_DWORD(p) & 0x0FFFFFFF;
  801d3c:	e0bffd17 	ldw	r2,-12(fp)
  801d40:	108000c4 	addi	r2,r2,3
  801d44:	10800003 	ldbu	r2,0(r2)
  801d48:	10803fcc 	andi	r2,r2,255
  801d4c:	1006963a 	slli	r3,r2,24
  801d50:	e0bffd17 	ldw	r2,-12(fp)
  801d54:	10800084 	addi	r2,r2,2
  801d58:	10800003 	ldbu	r2,0(r2)
  801d5c:	10803fcc 	andi	r2,r2,255
  801d60:	1004943a 	slli	r2,r2,16
  801d64:	1884b03a 	or	r2,r3,r2
  801d68:	e0fffd17 	ldw	r3,-12(fp)
  801d6c:	18c00044 	addi	r3,r3,1
  801d70:	18c00003 	ldbu	r3,0(r3)
  801d74:	18c03fcc 	andi	r3,r3,255
  801d78:	1806923a 	slli	r3,r3,8
  801d7c:	10c6b03a 	or	r3,r2,r3
  801d80:	e0bffd17 	ldw	r2,-12(fp)
  801d84:	10800003 	ldbu	r2,0(r2)
  801d88:	10803fcc 	andi	r2,r2,255
  801d8c:	1886b03a 	or	r3,r3,r2
  801d90:	00840034 	movhi	r2,4096
  801d94:	10bfffc4 	addi	r2,r2,-1
  801d98:	1884703a 	and	r2,r3,r2
  801d9c:	00000806 	br	801dc0 <get_fat+0x27c>
      return 1;

   switch (fs->fs_type) {
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801da0:	0001883a 	nop
  801da4:	00000506 	br	801dbc <get_fat+0x278>
      wc = fs->win[bc % SS(fs)]; bc++;
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801da8:	0001883a 	nop
  801dac:	00000306 	br	801dbc <get_fat+0x278>
      wc |= fs->win[bc % SS(fs)] << 8;
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  801db0:	0001883a 	nop
  801db4:	00000106 	br	801dbc <get_fat+0x278>
      p = &fs->win[clst * 2 % SS(fs)];
      return LD_WORD(p);

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  801db8:	0001883a 	nop
      p = &fs->win[clst * 4 % SS(fs)];
      return LD_DWORD(p) & 0x0FFFFFFF;
   }

   return 0xFFFFFFFF;   /* An error occurred at the disk I/O layer */
  801dbc:	00bfffc4 	movi	r2,-1
}
  801dc0:	e037883a 	mov	sp,fp
  801dc4:	dfc00117 	ldw	ra,4(sp)
  801dc8:	df000017 	ldw	fp,0(sp)
  801dcc:	dec00204 	addi	sp,sp,8
  801dd0:	f800283a 	ret

00801dd4 <put_fat>:
FRESULT put_fat (
   FATFS *fs,  /* File system object */
   uint32_t clst, /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
   uint32_t val   /* New value to mark the cluster */
)
{
  801dd4:	defff804 	addi	sp,sp,-32
  801dd8:	dfc00715 	stw	ra,28(sp)
  801ddc:	df000615 	stw	fp,24(sp)
  801de0:	df000604 	addi	fp,sp,24
  801de4:	e13ffd15 	stw	r4,-12(fp)
  801de8:	e17ffe15 	stw	r5,-8(fp)
  801dec:	e1bfff15 	stw	r6,-4(fp)
   uint32_t bc;
   uint8_t *p;
   FRESULT res;


   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  801df0:	e0bffe17 	ldw	r2,-8(fp)
  801df4:	108000b0 	cmpltui	r2,r2,2
  801df8:	1000041e 	bne	r2,zero,801e0c <put_fat+0x38>
  801dfc:	e0bffd17 	ldw	r2,-12(fp)
  801e00:	10800617 	ldw	r2,24(r2)
  801e04:	e0fffe17 	ldw	r3,-8(fp)
  801e08:	18800336 	bltu	r3,r2,801e18 <put_fat+0x44>
      res = FR_INT_ERR;
  801e0c:	00800084 	movi	r2,2
  801e10:	e0bffa15 	stw	r2,-24(fp)
  801e14:	0000c906 	br	80213c <put_fat+0x368>

   } else {
      switch (fs->fs_type) {
  801e18:	e0bffd17 	ldw	r2,-12(fp)
  801e1c:	10800003 	ldbu	r2,0(r2)
  801e20:	10803fcc 	andi	r2,r2,255
  801e24:	10c000a0 	cmpeqi	r3,r2,2
  801e28:	1800591e 	bne	r3,zero,801f90 <put_fat+0x1bc>
  801e2c:	10c000e0 	cmpeqi	r3,r2,3
  801e30:	1800741e 	bne	r3,zero,802004 <put_fat+0x230>
  801e34:	10800060 	cmpeqi	r2,r2,1
  801e38:	1000b326 	beq	r2,zero,802108 <put_fat+0x334>
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
  801e3c:	e0bffe17 	ldw	r2,-8(fp)
  801e40:	e0bffb15 	stw	r2,-20(fp)
  801e44:	e0bffb17 	ldw	r2,-20(fp)
  801e48:	1004d07a 	srli	r2,r2,1
  801e4c:	e0fffb17 	ldw	r3,-20(fp)
  801e50:	1885883a 	add	r2,r3,r2
  801e54:	e0bffb15 	stw	r2,-20(fp)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  801e58:	e0bffd17 	ldw	r2,-12(fp)
  801e5c:	10c00817 	ldw	r3,32(r2)
  801e60:	e0bffb17 	ldw	r2,-20(fp)
  801e64:	1004d27a 	srli	r2,r2,9
  801e68:	1885883a 	add	r2,r3,r2
  801e6c:	100b883a 	mov	r5,r2
  801e70:	e13ffd17 	ldw	r4,-12(fp)
  801e74:	080175c0 	call	80175c <move_window>
  801e78:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801e7c:	e0bffa17 	ldw	r2,-24(fp)
  801e80:	1000a41e 	bne	r2,zero,802114 <put_fat+0x340>
         p = &fs->win[bc % SS(fs)];
  801e84:	e0bffb17 	ldw	r2,-20(fp)
  801e88:	10807fcc 	andi	r2,r2,511
  801e8c:	10800c04 	addi	r2,r2,48
  801e90:	e0fffd17 	ldw	r3,-12(fp)
  801e94:	1885883a 	add	r2,r3,r2
  801e98:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
  801e9c:	e0bffe17 	ldw	r2,-8(fp)
  801ea0:	1080004c 	andi	r2,r2,1
  801ea4:	10000a26 	beq	r2,zero,801ed0 <put_fat+0xfc>
  801ea8:	e0bffc17 	ldw	r2,-16(fp)
  801eac:	10800003 	ldbu	r2,0(r2)
  801eb0:	108003cc 	andi	r2,r2,15
  801eb4:	1007883a 	mov	r3,r2
  801eb8:	e0bfff17 	ldw	r2,-4(fp)
  801ebc:	10803fcc 	andi	r2,r2,255
  801ec0:	1004913a 	slli	r2,r2,4
  801ec4:	1884b03a 	or	r2,r3,r2
  801ec8:	1007883a 	mov	r3,r2
  801ecc:	00000206 	br	801ed8 <put_fat+0x104>
  801ed0:	e0bfff17 	ldw	r2,-4(fp)
  801ed4:	1007883a 	mov	r3,r2
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10c00005 	stb	r3,0(r2)
         bc++;
  801ee0:	e0bffb17 	ldw	r2,-20(fp)
  801ee4:	10800044 	addi	r2,r2,1
  801ee8:	e0bffb15 	stw	r2,-20(fp)
         fs->wflag = 1;
  801eec:	e0bffd17 	ldw	r2,-12(fp)
  801ef0:	00c00044 	movi	r3,1
  801ef4:	10c00105 	stb	r3,4(r2)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  801ef8:	e0bffd17 	ldw	r2,-12(fp)
  801efc:	10c00817 	ldw	r3,32(r2)
  801f00:	e0bffb17 	ldw	r2,-20(fp)
  801f04:	1004d27a 	srli	r2,r2,9
  801f08:	1885883a 	add	r2,r3,r2
  801f0c:	100b883a 	mov	r5,r2
  801f10:	e13ffd17 	ldw	r4,-12(fp)
  801f14:	080175c0 	call	80175c <move_window>
  801f18:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801f1c:	e0bffa17 	ldw	r2,-24(fp)
  801f20:	10007e1e 	bne	r2,zero,80211c <put_fat+0x348>
         p = &fs->win[bc % SS(fs)];
  801f24:	e0bffb17 	ldw	r2,-20(fp)
  801f28:	10807fcc 	andi	r2,r2,511
  801f2c:	10800c04 	addi	r2,r2,48
  801f30:	e0fffd17 	ldw	r3,-12(fp)
  801f34:	1885883a 	add	r2,r3,r2
  801f38:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
  801f3c:	e0bffe17 	ldw	r2,-8(fp)
  801f40:	1080004c 	andi	r2,r2,1
  801f44:	10000426 	beq	r2,zero,801f58 <put_fat+0x184>
  801f48:	e0bfff17 	ldw	r2,-4(fp)
  801f4c:	1004d13a 	srli	r2,r2,4
  801f50:	1007883a 	mov	r3,r2
  801f54:	00000b06 	br	801f84 <put_fat+0x1b0>
  801f58:	e0bffc17 	ldw	r2,-16(fp)
  801f5c:	10800003 	ldbu	r2,0(r2)
  801f60:	1007883a 	mov	r3,r2
  801f64:	00bffc04 	movi	r2,-16
  801f68:	1884703a 	and	r2,r3,r2
  801f6c:	1007883a 	mov	r3,r2
  801f70:	e0bfff17 	ldw	r2,-4(fp)
  801f74:	1004d23a 	srli	r2,r2,8
  801f78:	108003cc 	andi	r2,r2,15
  801f7c:	1884b03a 	or	r2,r3,r2
  801f80:	1007883a 	mov	r3,r2
  801f84:	e0bffc17 	ldw	r2,-16(fp)
  801f88:	10c00005 	stb	r3,0(r2)
         break;
  801f8c:	00006806 	br	802130 <put_fat+0x35c>

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  801f90:	e0bffd17 	ldw	r2,-12(fp)
  801f94:	10c00817 	ldw	r3,32(r2)
  801f98:	e0bffe17 	ldw	r2,-8(fp)
  801f9c:	1004d23a 	srli	r2,r2,8
  801fa0:	1885883a 	add	r2,r3,r2
  801fa4:	100b883a 	mov	r5,r2
  801fa8:	e13ffd17 	ldw	r4,-12(fp)
  801fac:	080175c0 	call	80175c <move_window>
  801fb0:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801fb4:	e0bffa17 	ldw	r2,-24(fp)
  801fb8:	10005a1e 	bne	r2,zero,802124 <put_fat+0x350>
         p = &fs->win[clst * 2 % SS(fs)];
  801fbc:	e0bffe17 	ldw	r2,-8(fp)
  801fc0:	1085883a 	add	r2,r2,r2
  801fc4:	10807f8c 	andi	r2,r2,510
  801fc8:	10800c04 	addi	r2,r2,48
  801fcc:	e0fffd17 	ldw	r3,-12(fp)
  801fd0:	1885883a 	add	r2,r3,r2
  801fd4:	e0bffc15 	stw	r2,-16(fp)
         ST_WORD(p, (uint16_t)val);
  801fd8:	e0bfff17 	ldw	r2,-4(fp)
  801fdc:	1007883a 	mov	r3,r2
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	10c00005 	stb	r3,0(r2)
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10800044 	addi	r2,r2,1
  801ff0:	e0ffff17 	ldw	r3,-4(fp)
  801ff4:	18ffffcc 	andi	r3,r3,65535
  801ff8:	1807d23a 	srai	r3,r3,8
  801ffc:	10c00005 	stb	r3,0(r2)
         break;
  802000:	00004b06 	br	802130 <put_fat+0x35c>

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  802004:	e0bffd17 	ldw	r2,-12(fp)
  802008:	10c00817 	ldw	r3,32(r2)
  80200c:	e0bffe17 	ldw	r2,-8(fp)
  802010:	1004d1fa 	srli	r2,r2,7
  802014:	1885883a 	add	r2,r3,r2
  802018:	100b883a 	mov	r5,r2
  80201c:	e13ffd17 	ldw	r4,-12(fp)
  802020:	080175c0 	call	80175c <move_window>
  802024:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  802028:	e0bffa17 	ldw	r2,-24(fp)
  80202c:	10003f1e 	bne	r2,zero,80212c <put_fat+0x358>
         p = &fs->win[clst * 4 % SS(fs)];
  802030:	e0bffe17 	ldw	r2,-8(fp)
  802034:	1085883a 	add	r2,r2,r2
  802038:	1085883a 	add	r2,r2,r2
  80203c:	10807f0c 	andi	r2,r2,508
  802040:	10800c04 	addi	r2,r2,48
  802044:	e0fffd17 	ldw	r3,-12(fp)
  802048:	1885883a 	add	r2,r3,r2
  80204c:	e0bffc15 	stw	r2,-16(fp)
         val |= LD_DWORD(p) & 0xF0000000;
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	108000c4 	addi	r2,r2,3
  802058:	10800003 	ldbu	r2,0(r2)
  80205c:	10803fcc 	andi	r2,r2,255
  802060:	1006963a 	slli	r3,r2,24
  802064:	e0bffc17 	ldw	r2,-16(fp)
  802068:	10800084 	addi	r2,r2,2
  80206c:	10800003 	ldbu	r2,0(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1004943a 	slli	r2,r2,16
  802078:	1884b03a 	or	r2,r3,r2
  80207c:	e0fffc17 	ldw	r3,-16(fp)
  802080:	18c00044 	addi	r3,r3,1
  802084:	18c00003 	ldbu	r3,0(r3)
  802088:	18c03fcc 	andi	r3,r3,255
  80208c:	1806923a 	slli	r3,r3,8
  802090:	10c6b03a 	or	r3,r2,r3
  802094:	e0bffc17 	ldw	r2,-16(fp)
  802098:	10800003 	ldbu	r2,0(r2)
  80209c:	10803fcc 	andi	r2,r2,255
  8020a0:	1884b03a 	or	r2,r3,r2
  8020a4:	10bc002c 	andhi	r2,r2,61440
  8020a8:	e0ffff17 	ldw	r3,-4(fp)
  8020ac:	1884b03a 	or	r2,r3,r2
  8020b0:	e0bfff15 	stw	r2,-4(fp)
         ST_DWORD(p, val);
  8020b4:	e0bfff17 	ldw	r2,-4(fp)
  8020b8:	1007883a 	mov	r3,r2
  8020bc:	e0bffc17 	ldw	r2,-16(fp)
  8020c0:	10c00005 	stb	r3,0(r2)
  8020c4:	e0bffc17 	ldw	r2,-16(fp)
  8020c8:	10800044 	addi	r2,r2,1
  8020cc:	e0ffff17 	ldw	r3,-4(fp)
  8020d0:	18ffffcc 	andi	r3,r3,65535
  8020d4:	1807d23a 	srai	r3,r3,8
  8020d8:	10c00005 	stb	r3,0(r2)
  8020dc:	e0bffc17 	ldw	r2,-16(fp)
  8020e0:	10800084 	addi	r2,r2,2
  8020e4:	e0ffff17 	ldw	r3,-4(fp)
  8020e8:	1806d43a 	srli	r3,r3,16
  8020ec:	10c00005 	stb	r3,0(r2)
  8020f0:	e0bffc17 	ldw	r2,-16(fp)
  8020f4:	108000c4 	addi	r2,r2,3
  8020f8:	e0ffff17 	ldw	r3,-4(fp)
  8020fc:	1806d63a 	srli	r3,r3,24
  802100:	10c00005 	stb	r3,0(r2)
         break;
  802104:	00000a06 	br	802130 <put_fat+0x35c>

      default :
         res = FR_INT_ERR;
  802108:	00800084 	movi	r2,2
  80210c:	e0bffa15 	stw	r2,-24(fp)
  802110:	00000706 	br	802130 <put_fat+0x35c>
   } else {
      switch (fs->fs_type) {
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
         if (res != FR_OK) break;
  802114:	0001883a 	nop
  802118:	00000506 	br	802130 <put_fat+0x35c>
         p = &fs->win[bc % SS(fs)];
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
         bc++;
         fs->wflag = 1;
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
         if (res != FR_OK) break;
  80211c:	0001883a 	nop
  802120:	00000306 	br	802130 <put_fat+0x35c>
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
         break;

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
         if (res != FR_OK) break;
  802124:	0001883a 	nop
  802128:	00000106 	br	802130 <put_fat+0x35c>
         ST_WORD(p, (uint16_t)val);
         break;

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
         if (res != FR_OK) break;
  80212c:	0001883a 	nop
         break;

      default :
         res = FR_INT_ERR;
      }
      fs->wflag = 1;
  802130:	e0bffd17 	ldw	r2,-12(fp)
  802134:	00c00044 	movi	r3,1
  802138:	10c00105 	stb	r3,4(r2)
   }

   return res;
  80213c:	e0bffa17 	ldw	r2,-24(fp)
}
  802140:	e037883a 	mov	sp,fp
  802144:	dfc00117 	ldw	ra,4(sp)
  802148:	df000017 	ldw	fp,0(sp)
  80214c:	dec00204 	addi	sp,sp,8
  802150:	f800283a 	ret

00802154 <remove_chain>:
static
FRESULT remove_chain (
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to remove a chain from */
)
{
  802154:	defffa04 	addi	sp,sp,-24
  802158:	dfc00515 	stw	ra,20(sp)
  80215c:	df000415 	stw	fp,16(sp)
  802160:	df000404 	addi	fp,sp,16
  802164:	e13ffe15 	stw	r4,-8(fp)
  802168:	e17fff15 	stw	r5,-4(fp)
   uint32_t nxt;
#if _USE_ERASE
   uint32_t scl = clst, ecl = clst, resion[2];
#endif

   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  80216c:	e0bfff17 	ldw	r2,-4(fp)
  802170:	108000b0 	cmpltui	r2,r2,2
  802174:	1000041e 	bne	r2,zero,802188 <remove_chain+0x34>
  802178:	e0bffe17 	ldw	r2,-8(fp)
  80217c:	10800617 	ldw	r2,24(r2)
  802180:	e0ffff17 	ldw	r3,-4(fp)
  802184:	18800336 	bltu	r3,r2,802194 <remove_chain+0x40>
      res = FR_INT_ERR;
  802188:	00800084 	movi	r2,2
  80218c:	e0bffc15 	stw	r2,-16(fp)
  802190:	00003106 	br	802258 <remove_chain+0x104>

   } else {
      res = FR_OK;
  802194:	e03ffc15 	stw	zero,-16(fp)
      while (clst < fs->n_fatent) {       /* Not a last link? */
  802198:	00002706 	br	802238 <remove_chain+0xe4>
         nxt = get_fat(fs, clst);         /* Get cluster status */
  80219c:	e17fff17 	ldw	r5,-4(fp)
  8021a0:	e13ffe17 	ldw	r4,-8(fp)
  8021a4:	0801b440 	call	801b44 <get_fat>
  8021a8:	e0bffd15 	stw	r2,-12(fp)
         if (nxt == 0) break;          /* Empty cluster? */
  8021ac:	e0bffd17 	ldw	r2,-12(fp)
  8021b0:	10002626 	beq	r2,zero,80224c <remove_chain+0xf8>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
  8021b4:	e0bffd17 	ldw	r2,-12(fp)
  8021b8:	10800058 	cmpnei	r2,r2,1
  8021bc:	1000031e 	bne	r2,zero,8021cc <remove_chain+0x78>
  8021c0:	00800084 	movi	r2,2
  8021c4:	e0bffc15 	stw	r2,-16(fp)
  8021c8:	00002306 	br	802258 <remove_chain+0x104>
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
  8021cc:	e0bffd17 	ldw	r2,-12(fp)
  8021d0:	10bfffd8 	cmpnei	r2,r2,-1
  8021d4:	1000031e 	bne	r2,zero,8021e4 <remove_chain+0x90>
  8021d8:	00800044 	movi	r2,1
  8021dc:	e0bffc15 	stw	r2,-16(fp)
  8021e0:	00001d06 	br	802258 <remove_chain+0x104>
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
  8021e4:	000d883a 	mov	r6,zero
  8021e8:	e17fff17 	ldw	r5,-4(fp)
  8021ec:	e13ffe17 	ldw	r4,-8(fp)
  8021f0:	0801dd40 	call	801dd4 <put_fat>
  8021f4:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  8021f8:	e0bffc17 	ldw	r2,-16(fp)
  8021fc:	1000151e 	bne	r2,zero,802254 <remove_chain+0x100>
         if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
  802200:	e0bffe17 	ldw	r2,-8(fp)
  802204:	10800417 	ldw	r2,16(r2)
  802208:	10bfffe0 	cmpeqi	r2,r2,-1
  80220c:	1000081e 	bne	r2,zero,802230 <remove_chain+0xdc>
            fs->free_clust++;
  802210:	e0bffe17 	ldw	r2,-8(fp)
  802214:	10800417 	ldw	r2,16(r2)
  802218:	10c00044 	addi	r3,r2,1
  80221c:	e0bffe17 	ldw	r2,-8(fp)
  802220:	10c00415 	stw	r3,16(r2)
            fs->fsi_flag = 1;
  802224:	e0bffe17 	ldw	r2,-8(fp)
  802228:	00c00044 	movi	r3,1
  80222c:	10c00145 	stb	r3,5(r2)
            resion[1] = clust2sect(fs, ecl) + fs->csize - 1;   /* End sector */
            disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);    /* Erase the block */
            scl = ecl = nxt;
         }
#endif
         clst = nxt; /* Next cluster */
  802230:	e0bffd17 	ldw	r2,-12(fp)
  802234:	e0bfff15 	stw	r2,-4(fp)
   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
      res = FR_INT_ERR;

   } else {
      res = FR_OK;
      while (clst < fs->n_fatent) {       /* Not a last link? */
  802238:	e0bffe17 	ldw	r2,-8(fp)
  80223c:	10800617 	ldw	r2,24(r2)
  802240:	e0ffff17 	ldw	r3,-4(fp)
  802244:	18bfd536 	bltu	r3,r2,80219c <__alt_data_end+0xff80219c>
  802248:	00000306 	br	802258 <remove_chain+0x104>
         nxt = get_fat(fs, clst);         /* Get cluster status */
         if (nxt == 0) break;          /* Empty cluster? */
  80224c:	0001883a 	nop
  802250:	00000106 	br	802258 <remove_chain+0x104>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
         if (res != FR_OK) break;
  802254:	0001883a 	nop
#endif
         clst = nxt; /* Next cluster */
      }
   }

   return res;
  802258:	e0bffc17 	ldw	r2,-16(fp)
}
  80225c:	e037883a 	mov	sp,fp
  802260:	dfc00117 	ldw	ra,4(sp)
  802264:	df000017 	ldw	fp,0(sp)
  802268:	dec00204 	addi	sp,sp,8
  80226c:	f800283a 	ret

00802270 <create_chain>:
static
uint32_t create_chain ( /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to stretch. 0 means create a new chain. */
)
{
  802270:	defff804 	addi	sp,sp,-32
  802274:	dfc00715 	stw	ra,28(sp)
  802278:	df000615 	stw	fp,24(sp)
  80227c:	df000604 	addi	fp,sp,24
  802280:	e13ffe15 	stw	r4,-8(fp)
  802284:	e17fff15 	stw	r5,-4(fp)
   uint32_t cs, ncl, scl;
   FRESULT res;


   if (clst == 0) {     /* Create a new chain */
  802288:	e0bfff17 	ldw	r2,-4(fp)
  80228c:	10000c1e 	bne	r2,zero,8022c0 <create_chain+0x50>
      scl = fs->last_clust;         /* Get suggested start point */
  802290:	e0bffe17 	ldw	r2,-8(fp)
  802294:	10800317 	ldw	r2,12(r2)
  802298:	e0bffb15 	stw	r2,-20(fp)
      if (!scl || scl >= fs->n_fatent) scl = 1;
  80229c:	e0bffb17 	ldw	r2,-20(fp)
  8022a0:	10000426 	beq	r2,zero,8022b4 <create_chain+0x44>
  8022a4:	e0bffe17 	ldw	r2,-8(fp)
  8022a8:	10800617 	ldw	r2,24(r2)
  8022ac:	e0fffb17 	ldw	r3,-20(fp)
  8022b0:	18801436 	bltu	r3,r2,802304 <create_chain+0x94>
  8022b4:	00800044 	movi	r2,1
  8022b8:	e0bffb15 	stw	r2,-20(fp)
  8022bc:	00001106 	br	802304 <create_chain+0x94>
   }
   else {               /* Stretch the current chain */
      cs = get_fat(fs, clst);       /* Check the cluster status */
  8022c0:	e17fff17 	ldw	r5,-4(fp)
  8022c4:	e13ffe17 	ldw	r4,-8(fp)
  8022c8:	0801b440 	call	801b44 <get_fat>
  8022cc:	e0bffd15 	stw	r2,-12(fp)
      if (cs < 2) return 1;         /* It is an invalid cluster */
  8022d0:	e0bffd17 	ldw	r2,-12(fp)
  8022d4:	108000a8 	cmpgeui	r2,r2,2
  8022d8:	1000021e 	bne	r2,zero,8022e4 <create_chain+0x74>
  8022dc:	00800044 	movi	r2,1
  8022e0:	00005506 	br	802438 <create_chain+0x1c8>
      if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
  8022e4:	e0bffe17 	ldw	r2,-8(fp)
  8022e8:	10800617 	ldw	r2,24(r2)
  8022ec:	e0fffd17 	ldw	r3,-12(fp)
  8022f0:	1880022e 	bgeu	r3,r2,8022fc <create_chain+0x8c>
  8022f4:	e0bffd17 	ldw	r2,-12(fp)
  8022f8:	00004f06 	br	802438 <create_chain+0x1c8>
      scl = clst;
  8022fc:	e0bfff17 	ldw	r2,-4(fp)
  802300:	e0bffb15 	stw	r2,-20(fp)
   }

   ncl = scl;           /* Start cluster */
  802304:	e0bffb17 	ldw	r2,-20(fp)
  802308:	e0bffa15 	stw	r2,-24(fp)
   for (;;) {
      ncl++;                     /* Next cluster */
  80230c:	e0bffa17 	ldw	r2,-24(fp)
  802310:	10800044 	addi	r2,r2,1
  802314:	e0bffa15 	stw	r2,-24(fp)
      if (ncl >= fs->n_fatent) {    /* Wrap around */
  802318:	e0bffe17 	ldw	r2,-8(fp)
  80231c:	10800617 	ldw	r2,24(r2)
  802320:	e0fffa17 	ldw	r3,-24(fp)
  802324:	18800736 	bltu	r3,r2,802344 <create_chain+0xd4>
         ncl = 2;
  802328:	00800084 	movi	r2,2
  80232c:	e0bffa15 	stw	r2,-24(fp)
         if (ncl > scl) return 0;   /* No free cluster */
  802330:	e0bffa17 	ldw	r2,-24(fp)
  802334:	e0fffb17 	ldw	r3,-20(fp)
  802338:	1880022e 	bgeu	r3,r2,802344 <create_chain+0xd4>
  80233c:	0005883a 	mov	r2,zero
  802340:	00003d06 	br	802438 <create_chain+0x1c8>
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
  802344:	e17ffa17 	ldw	r5,-24(fp)
  802348:	e13ffe17 	ldw	r4,-8(fp)
  80234c:	0801b440 	call	801b44 <get_fat>
  802350:	e0bffd15 	stw	r2,-12(fp)
      if (cs == 0) break;           /* Found a free cluster */
  802354:	e0bffd17 	ldw	r2,-12(fp)
  802358:	10000d26 	beq	r2,zero,802390 <create_chain+0x120>
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  80235c:	e0bffd17 	ldw	r2,-12(fp)
  802360:	10bfffe0 	cmpeqi	r2,r2,-1
  802364:	1000031e 	bne	r2,zero,802374 <create_chain+0x104>
  802368:	e0bffd17 	ldw	r2,-12(fp)
  80236c:	10800058 	cmpnei	r2,r2,1
  802370:	1000021e 	bne	r2,zero,80237c <create_chain+0x10c>
         return cs;
  802374:	e0bffd17 	ldw	r2,-12(fp)
  802378:	00002f06 	br	802438 <create_chain+0x1c8>
      if (ncl == scl) return 0;     /* No free cluster */
  80237c:	e0fffa17 	ldw	r3,-24(fp)
  802380:	e0bffb17 	ldw	r2,-20(fp)
  802384:	18bfe11e 	bne	r3,r2,80230c <__alt_data_end+0xff80230c>
  802388:	0005883a 	mov	r2,zero
  80238c:	00002a06 	br	802438 <create_chain+0x1c8>
      if (ncl >= fs->n_fatent) {    /* Wrap around */
         ncl = 2;
         if (ncl > scl) return 0;   /* No free cluster */
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
      if (cs == 0) break;           /* Found a free cluster */
  802390:	0001883a 	nop
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
         return cs;
      if (ncl == scl) return 0;     /* No free cluster */
   }

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
  802394:	01840034 	movhi	r6,4096
  802398:	31bfffc4 	addi	r6,r6,-1
  80239c:	e17ffa17 	ldw	r5,-24(fp)
  8023a0:	e13ffe17 	ldw	r4,-8(fp)
  8023a4:	0801dd40 	call	801dd4 <put_fat>
  8023a8:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK && clst != 0) {
  8023ac:	e0bffc17 	ldw	r2,-16(fp)
  8023b0:	1000071e 	bne	r2,zero,8023d0 <create_chain+0x160>
  8023b4:	e0bfff17 	ldw	r2,-4(fp)
  8023b8:	10000526 	beq	r2,zero,8023d0 <create_chain+0x160>
      res = put_fat(fs, clst, ncl); /* Link it to the previous one if needed */
  8023bc:	e1bffa17 	ldw	r6,-24(fp)
  8023c0:	e17fff17 	ldw	r5,-4(fp)
  8023c4:	e13ffe17 	ldw	r4,-8(fp)
  8023c8:	0801dd40 	call	801dd4 <put_fat>
  8023cc:	e0bffc15 	stw	r2,-16(fp)
   }
   if (res == FR_OK) {
  8023d0:	e0bffc17 	ldw	r2,-16(fp)
  8023d4:	1000101e 	bne	r2,zero,802418 <create_chain+0x1a8>
      fs->last_clust = ncl;         /* Update FSINFO */
  8023d8:	e0bffe17 	ldw	r2,-8(fp)
  8023dc:	e0fffa17 	ldw	r3,-24(fp)
  8023e0:	10c00315 	stw	r3,12(r2)
      if (fs->free_clust != 0xFFFFFFFF) {
  8023e4:	e0bffe17 	ldw	r2,-8(fp)
  8023e8:	10800417 	ldw	r2,16(r2)
  8023ec:	10bfffe0 	cmpeqi	r2,r2,-1
  8023f0:	1000101e 	bne	r2,zero,802434 <create_chain+0x1c4>
         fs->free_clust--;
  8023f4:	e0bffe17 	ldw	r2,-8(fp)
  8023f8:	10800417 	ldw	r2,16(r2)
  8023fc:	10ffffc4 	addi	r3,r2,-1
  802400:	e0bffe17 	ldw	r2,-8(fp)
  802404:	10c00415 	stw	r3,16(r2)
         fs->fsi_flag = 1;
  802408:	e0bffe17 	ldw	r2,-8(fp)
  80240c:	00c00044 	movi	r3,1
  802410:	10c00145 	stb	r3,5(r2)
  802414:	00000706 	br	802434 <create_chain+0x1c4>
      }
   } else {
      ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  802418:	e0bffc17 	ldw	r2,-16(fp)
  80241c:	10800058 	cmpnei	r2,r2,1
  802420:	1000021e 	bne	r2,zero,80242c <create_chain+0x1bc>
  802424:	00bfffc4 	movi	r2,-1
  802428:	00000106 	br	802430 <create_chain+0x1c0>
  80242c:	00800044 	movi	r2,1
  802430:	e0bffa15 	stw	r2,-24(fp)
   }

   return ncl;    /* Return new cluster number or error code */
  802434:	e0bffa17 	ldw	r2,-24(fp)
}
  802438:	e037883a 	mov	sp,fp
  80243c:	dfc00117 	ldw	ra,4(sp)
  802440:	df000017 	ldw	fp,0(sp)
  802444:	dec00204 	addi	sp,sp,8
  802448:	f800283a 	ret

0080244c <dir_sdi>:
static
FRESULT dir_sdi (
   DIR *dj,    /* Pointer to directory object */
   uint16_t idx    /* Directory index number */
)
{
  80244c:	defffa04 	addi	sp,sp,-24
  802450:	dfc00515 	stw	ra,20(sp)
  802454:	df000415 	stw	fp,16(sp)
  802458:	df000404 	addi	fp,sp,16
  80245c:	e13ffe15 	stw	r4,-8(fp)
  802460:	2805883a 	mov	r2,r5
  802464:	e0bfff0d 	sth	r2,-4(fp)
   uint32_t clst;
   uint16_t ic;


   dj->index = idx;
  802468:	e0bffe17 	ldw	r2,-8(fp)
  80246c:	e0ffff0b 	ldhu	r3,-4(fp)
  802470:	10c0018d 	sth	r3,6(r2)
   clst = dj->sclust;
  802474:	e0bffe17 	ldw	r2,-8(fp)
  802478:	10800217 	ldw	r2,8(r2)
  80247c:	e0bffc15 	stw	r2,-16(fp)
   if (clst == 1 || clst >= dj->fs->n_fatent)   /* Check start cluster range */
  802480:	e0bffc17 	ldw	r2,-16(fp)
  802484:	10800060 	cmpeqi	r2,r2,1
  802488:	1000051e 	bne	r2,zero,8024a0 <dir_sdi+0x54>
  80248c:	e0bffe17 	ldw	r2,-8(fp)
  802490:	10800017 	ldw	r2,0(r2)
  802494:	10800617 	ldw	r2,24(r2)
  802498:	e0fffc17 	ldw	r3,-16(fp)
  80249c:	18800236 	bltu	r3,r2,8024a8 <dir_sdi+0x5c>
      return FR_INT_ERR;
  8024a0:	00800084 	movi	r2,2
  8024a4:	00005f06 	br	802624 <dir_sdi+0x1d8>
   if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
  8024a8:	e0bffc17 	ldw	r2,-16(fp)
  8024ac:	10000a1e 	bne	r2,zero,8024d8 <dir_sdi+0x8c>
  8024b0:	e0bffe17 	ldw	r2,-8(fp)
  8024b4:	10800017 	ldw	r2,0(r2)
  8024b8:	10800003 	ldbu	r2,0(r2)
  8024bc:	10803fcc 	andi	r2,r2,255
  8024c0:	108000d8 	cmpnei	r2,r2,3
  8024c4:	1000041e 	bne	r2,zero,8024d8 <dir_sdi+0x8c>
      clst = dj->fs->dirbase;
  8024c8:	e0bffe17 	ldw	r2,-8(fp)
  8024cc:	10800017 	ldw	r2,0(r2)
  8024d0:	10800917 	ldw	r2,36(r2)
  8024d4:	e0bffc15 	stw	r2,-16(fp)

   if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	1000151e 	bne	r2,zero,802534 <dir_sdi+0xe8>
      dj->clust = clst;
  8024e0:	e0bffe17 	ldw	r2,-8(fp)
  8024e4:	e0fffc17 	ldw	r3,-16(fp)
  8024e8:	10c00315 	stw	r3,12(r2)
      if (idx >= dj->fs->n_rootdir)    /* Index is out of range */
  8024ec:	e0bffe17 	ldw	r2,-8(fp)
  8024f0:	10800017 	ldw	r2,0(r2)
  8024f4:	1080020b 	ldhu	r2,8(r2)
  8024f8:	10bfffcc 	andi	r2,r2,65535
  8024fc:	e0ffff0b 	ldhu	r3,-4(fp)
  802500:	18800236 	bltu	r3,r2,80250c <dir_sdi+0xc0>
         return FR_INT_ERR;
  802504:	00800084 	movi	r2,2
  802508:	00004606 	br	802624 <dir_sdi+0x1d8>
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  80250c:	e0bffe17 	ldw	r2,-8(fp)
  802510:	10800017 	ldw	r2,0(r2)
  802514:	10c00917 	ldw	r3,36(r2)
  802518:	e0bfff0b 	ldhu	r2,-4(fp)
  80251c:	1004d13a 	srli	r2,r2,4
  802520:	10bfffcc 	andi	r2,r2,65535
  802524:	1887883a 	add	r3,r3,r2
  802528:	e0bffe17 	ldw	r2,-8(fp)
  80252c:	10c00415 	stw	r3,16(r2)
  802530:	00003206 	br	8025fc <dir_sdi+0x1b0>
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
  802534:	e0bffe17 	ldw	r2,-8(fp)
  802538:	10800017 	ldw	r2,0(r2)
  80253c:	10800083 	ldbu	r2,2(r2)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1004913a 	slli	r2,r2,4
  802548:	e0bffd0d 	sth	r2,-12(fp)
      while (idx >= ic) {  /* Follow cluster chain */
  80254c:	00001906 	br	8025b4 <dir_sdi+0x168>
         clst = get_fat(dj->fs, clst);          /* Get next cluster */
  802550:	e0bffe17 	ldw	r2,-8(fp)
  802554:	10800017 	ldw	r2,0(r2)
  802558:	e17ffc17 	ldw	r5,-16(fp)
  80255c:	1009883a 	mov	r4,r2
  802560:	0801b440 	call	801b44 <get_fat>
  802564:	e0bffc15 	stw	r2,-16(fp)
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10bfffd8 	cmpnei	r2,r2,-1
  802570:	1000021e 	bne	r2,zero,80257c <dir_sdi+0x130>
  802574:	00800044 	movi	r2,1
  802578:	00002a06 	br	802624 <dir_sdi+0x1d8>
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
  80257c:	e0bffc17 	ldw	r2,-16(fp)
  802580:	108000b0 	cmpltui	r2,r2,2
  802584:	1000051e 	bne	r2,zero,80259c <dir_sdi+0x150>
  802588:	e0bffe17 	ldw	r2,-8(fp)
  80258c:	10800017 	ldw	r2,0(r2)
  802590:	10800617 	ldw	r2,24(r2)
  802594:	e0fffc17 	ldw	r3,-16(fp)
  802598:	18800236 	bltu	r3,r2,8025a4 <dir_sdi+0x158>
            return FR_INT_ERR;
  80259c:	00800084 	movi	r2,2
  8025a0:	00002006 	br	802624 <dir_sdi+0x1d8>
         idx -= ic;
  8025a4:	e0ffff0b 	ldhu	r3,-4(fp)
  8025a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8025ac:	1885c83a 	sub	r2,r3,r2
  8025b0:	e0bfff0d 	sth	r2,-4(fp)
         return FR_INT_ERR;
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
      while (idx >= ic) {  /* Follow cluster chain */
  8025b4:	e0ffff0b 	ldhu	r3,-4(fp)
  8025b8:	e0bffd0b 	ldhu	r2,-12(fp)
  8025bc:	18bfe42e 	bgeu	r3,r2,802550 <__alt_data_end+0xff802550>
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
            return FR_INT_ERR;
         idx -= ic;
      }
      dj->clust = clst;
  8025c0:	e0bffe17 	ldw	r2,-8(fp)
  8025c4:	e0fffc17 	ldw	r3,-16(fp)
  8025c8:	10c00315 	stw	r3,12(r2)
      dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  8025cc:	e0bffe17 	ldw	r2,-8(fp)
  8025d0:	10800017 	ldw	r2,0(r2)
  8025d4:	e17ffc17 	ldw	r5,-16(fp)
  8025d8:	1009883a 	mov	r4,r2
  8025dc:	0801ad80 	call	801ad8 <clust2sect>
  8025e0:	1007883a 	mov	r3,r2
  8025e4:	e0bfff0b 	ldhu	r2,-4(fp)
  8025e8:	1004d13a 	srli	r2,r2,4
  8025ec:	10bfffcc 	andi	r2,r2,65535
  8025f0:	1887883a 	add	r3,r3,r2
  8025f4:	e0bffe17 	ldw	r2,-8(fp)
  8025f8:	10c00415 	stw	r3,16(r2)
   }

   dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;   /* Ptr to the entry in the sector */
  8025fc:	e0bffe17 	ldw	r2,-8(fp)
  802600:	10800017 	ldw	r2,0(r2)
  802604:	10c00c04 	addi	r3,r2,48
  802608:	e0bfff0b 	ldhu	r2,-4(fp)
  80260c:	108003cc 	andi	r2,r2,15
  802610:	1004917a 	slli	r2,r2,5
  802614:	1887883a 	add	r3,r3,r2
  802618:	e0bffe17 	ldw	r2,-8(fp)
  80261c:	10c00515 	stw	r3,20(r2)

   return FR_OK;  /* Seek succeeded */
  802620:	0005883a 	mov	r2,zero
}
  802624:	e037883a 	mov	sp,fp
  802628:	dfc00117 	ldw	ra,4(sp)
  80262c:	df000017 	ldw	fp,0(sp)
  802630:	dec00204 	addi	sp,sp,8
  802634:	f800283a 	ret

00802638 <dir_next>:
static
FRESULT dir_next (   /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   DIR *dj,    /* Pointer to directory object */
   int stretch    /* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  802638:	defff904 	addi	sp,sp,-28
  80263c:	dfc00615 	stw	ra,24(sp)
  802640:	df000515 	stw	fp,20(sp)
  802644:	dc000415 	stw	r16,16(sp)
  802648:	df000504 	addi	fp,sp,20
  80264c:	e13ffd15 	stw	r4,-12(fp)
  802650:	e17ffe15 	stw	r5,-8(fp)
   uint16_t i;



   stretch = stretch;      /* To suppress warning on read-only cfg. */
   i = dj->index + 1;
  802654:	e0bffd17 	ldw	r2,-12(fp)
  802658:	1080018b 	ldhu	r2,6(r2)
  80265c:	10800044 	addi	r2,r2,1
  802660:	e0bffc8d 	sth	r2,-14(fp)
   if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
  802664:	e0bffc8b 	ldhu	r2,-14(fp)
  802668:	10000326 	beq	r2,zero,802678 <dir_next+0x40>
  80266c:	e0bffd17 	ldw	r2,-12(fp)
  802670:	10800417 	ldw	r2,16(r2)
  802674:	1000021e 	bne	r2,zero,802680 <dir_next+0x48>
      return FR_NO_FILE;
  802678:	00800104 	movi	r2,4
  80267c:	0000a206 	br	802908 <dir_next+0x2d0>

   if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
  802680:	e0bffc8b 	ldhu	r2,-14(fp)
  802684:	108003cc 	andi	r2,r2,15
  802688:	10bfffcc 	andi	r2,r2,65535
  80268c:	1000911e 	bne	r2,zero,8028d4 <dir_next+0x29c>
      dj->sect++;             /* Next sector */
  802690:	e0bffd17 	ldw	r2,-12(fp)
  802694:	10800417 	ldw	r2,16(r2)
  802698:	10c00044 	addi	r3,r2,1
  80269c:	e0bffd17 	ldw	r2,-12(fp)
  8026a0:	10c00415 	stw	r3,16(r2)

      if (dj->clust == 0) {   /* Static table */
  8026a4:	e0bffd17 	ldw	r2,-12(fp)
  8026a8:	10800317 	ldw	r2,12(r2)
  8026ac:	1000081e 	bne	r2,zero,8026d0 <dir_next+0x98>
         if (i >= dj->fs->n_rootdir)   /* Report EOT when end of table */
  8026b0:	e0bffd17 	ldw	r2,-12(fp)
  8026b4:	10800017 	ldw	r2,0(r2)
  8026b8:	1080020b 	ldhu	r2,8(r2)
  8026bc:	10bfffcc 	andi	r2,r2,65535
  8026c0:	e0fffc8b 	ldhu	r3,-14(fp)
  8026c4:	18808336 	bltu	r3,r2,8028d4 <dir_next+0x29c>
            return FR_NO_FILE;
  8026c8:	00800104 	movi	r2,4
  8026cc:	00008e06 	br	802908 <dir_next+0x2d0>
      }
      else {               /* Dynamic table */
         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {   /* Cluster changed? */
  8026d0:	e0bffc8b 	ldhu	r2,-14(fp)
  8026d4:	1004d13a 	srli	r2,r2,4
  8026d8:	10bfffcc 	andi	r2,r2,65535
  8026dc:	e0fffd17 	ldw	r3,-12(fp)
  8026e0:	18c00017 	ldw	r3,0(r3)
  8026e4:	18c00083 	ldbu	r3,2(r3)
  8026e8:	18c03fcc 	andi	r3,r3,255
  8026ec:	18ffffc4 	addi	r3,r3,-1
  8026f0:	10c4703a 	and	r2,r2,r3
  8026f4:	1000771e 	bne	r2,zero,8028d4 <dir_next+0x29c>
            clst = get_fat(dj->fs, dj->clust);           /* Get next cluster */
  8026f8:	e0bffd17 	ldw	r2,-12(fp)
  8026fc:	10c00017 	ldw	r3,0(r2)
  802700:	e0bffd17 	ldw	r2,-12(fp)
  802704:	10800317 	ldw	r2,12(r2)
  802708:	100b883a 	mov	r5,r2
  80270c:	1809883a 	mov	r4,r3
  802710:	0801b440 	call	801b44 <get_fat>
  802714:	e0bffb15 	stw	r2,-20(fp)
            if (clst <= 1) return FR_INT_ERR;
  802718:	e0bffb17 	ldw	r2,-20(fp)
  80271c:	108000a8 	cmpgeui	r2,r2,2
  802720:	1000021e 	bne	r2,zero,80272c <dir_next+0xf4>
  802724:	00800084 	movi	r2,2
  802728:	00007706 	br	802908 <dir_next+0x2d0>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  80272c:	e0bffb17 	ldw	r2,-20(fp)
  802730:	10bfffd8 	cmpnei	r2,r2,-1
  802734:	1000021e 	bne	r2,zero,802740 <dir_next+0x108>
  802738:	00800044 	movi	r2,1
  80273c:	00007206 	br	802908 <dir_next+0x2d0>
            if (clst >= dj->fs->n_fatent) {              /* When it reached end of dynamic table */
  802740:	e0bffd17 	ldw	r2,-12(fp)
  802744:	10800017 	ldw	r2,0(r2)
  802748:	10800617 	ldw	r2,24(r2)
  80274c:	e0fffb17 	ldw	r3,-20(fp)
  802750:	18805536 	bltu	r3,r2,8028a8 <dir_next+0x270>
#if !_FS_READONLY
               uint8_t c;
               if (!stretch) return FR_NO_FILE;       /* When do not stretch, report EOT */
  802754:	e0bffe17 	ldw	r2,-8(fp)
  802758:	1000021e 	bne	r2,zero,802764 <dir_next+0x12c>
  80275c:	00800104 	movi	r2,4
  802760:	00006906 	br	802908 <dir_next+0x2d0>
               clst = create_chain(dj->fs, dj->clust);      /* Stretch cluster chain */
  802764:	e0bffd17 	ldw	r2,-12(fp)
  802768:	10c00017 	ldw	r3,0(r2)
  80276c:	e0bffd17 	ldw	r2,-12(fp)
  802770:	10800317 	ldw	r2,12(r2)
  802774:	100b883a 	mov	r5,r2
  802778:	1809883a 	mov	r4,r3
  80277c:	08022700 	call	802270 <create_chain>
  802780:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 0) return FR_DENIED;       /* No free cluster */
  802784:	e0bffb17 	ldw	r2,-20(fp)
  802788:	1000021e 	bne	r2,zero,802794 <dir_next+0x15c>
  80278c:	008001c4 	movi	r2,7
  802790:	00005d06 	br	802908 <dir_next+0x2d0>
               if (clst == 1) return FR_INT_ERR;
  802794:	e0bffb17 	ldw	r2,-20(fp)
  802798:	10800058 	cmpnei	r2,r2,1
  80279c:	1000021e 	bne	r2,zero,8027a8 <dir_next+0x170>
  8027a0:	00800084 	movi	r2,2
  8027a4:	00005806 	br	802908 <dir_next+0x2d0>
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8027a8:	e0bffb17 	ldw	r2,-20(fp)
  8027ac:	10bfffd8 	cmpnei	r2,r2,-1
  8027b0:	1000021e 	bne	r2,zero,8027bc <dir_next+0x184>
  8027b4:	00800044 	movi	r2,1
  8027b8:	00005306 	br	802908 <dir_next+0x2d0>
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
  8027bc:	e0bffd17 	ldw	r2,-12(fp)
  8027c0:	10800017 	ldw	r2,0(r2)
  8027c4:	000b883a 	mov	r5,zero
  8027c8:	1009883a 	mov	r4,r2
  8027cc:	080175c0 	call	80175c <move_window>
  8027d0:	10000226 	beq	r2,zero,8027dc <dir_next+0x1a4>
  8027d4:	00800044 	movi	r2,1
  8027d8:	00004b06 	br	802908 <dir_next+0x2d0>
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
  8027dc:	e0bffd17 	ldw	r2,-12(fp)
  8027e0:	10800017 	ldw	r2,0(r2)
  8027e4:	10800c04 	addi	r2,r2,48
  8027e8:	01808004 	movi	r6,512
  8027ec:	000b883a 	mov	r5,zero
  8027f0:	1009883a 	mov	r4,r2
  8027f4:	08015f80 	call	8015f8 <mem_set>
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
  8027f8:	e0bffd17 	ldw	r2,-12(fp)
  8027fc:	14000017 	ldw	r16,0(r2)
  802800:	e0bffd17 	ldw	r2,-12(fp)
  802804:	10800017 	ldw	r2,0(r2)
  802808:	e17ffb17 	ldw	r5,-20(fp)
  80280c:	1009883a 	mov	r4,r2
  802810:	0801ad80 	call	801ad8 <clust2sect>
  802814:	80800b15 	stw	r2,44(r16)
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  802818:	e03ffc05 	stb	zero,-16(fp)
  80281c:	00001406 	br	802870 <dir_next+0x238>
                  dj->fs->wflag = 1;
  802820:	e0bffd17 	ldw	r2,-12(fp)
  802824:	10800017 	ldw	r2,0(r2)
  802828:	00c00044 	movi	r3,1
  80282c:	10c00105 	stb	r3,4(r2)
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  802830:	e0bffd17 	ldw	r2,-12(fp)
  802834:	10800017 	ldw	r2,0(r2)
  802838:	000b883a 	mov	r5,zero
  80283c:	1009883a 	mov	r4,r2
  802840:	080175c0 	call	80175c <move_window>
  802844:	10000226 	beq	r2,zero,802850 <dir_next+0x218>
  802848:	00800044 	movi	r2,1
  80284c:	00002e06 	br	802908 <dir_next+0x2d0>
                  dj->fs->winsect++;
  802850:	e0bffd17 	ldw	r2,-12(fp)
  802854:	10800017 	ldw	r2,0(r2)
  802858:	10c00b17 	ldw	r3,44(r2)
  80285c:	18c00044 	addi	r3,r3,1
  802860:	10c00b15 	stw	r3,44(r2)
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  802864:	e0bffc03 	ldbu	r2,-16(fp)
  802868:	10800044 	addi	r2,r2,1
  80286c:	e0bffc05 	stb	r2,-16(fp)
  802870:	e0bffd17 	ldw	r2,-12(fp)
  802874:	10800017 	ldw	r2,0(r2)
  802878:	10800083 	ldbu	r2,2(r2)
  80287c:	10803fcc 	andi	r2,r2,255
  802880:	e0fffc03 	ldbu	r3,-16(fp)
  802884:	18bfe636 	bltu	r3,r2,802820 <__alt_data_end+0xff802820>
                  dj->fs->wflag = 1;
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                  dj->fs->winsect++;
               }
               dj->fs->winsect -= c;                  /* Rewind window address */
  802888:	e0bffd17 	ldw	r2,-12(fp)
  80288c:	10800017 	ldw	r2,0(r2)
  802890:	e0fffd17 	ldw	r3,-12(fp)
  802894:	18c00017 	ldw	r3,0(r3)
  802898:	19000b17 	ldw	r4,44(r3)
  80289c:	e0fffc03 	ldbu	r3,-16(fp)
  8028a0:	20c7c83a 	sub	r3,r4,r3
  8028a4:	10c00b15 	stw	r3,44(r2)
#else
               return FR_NO_FILE;         /* Report EOT */
#endif
            }
            dj->clust = clst;          /* Initialize data for new cluster */
  8028a8:	e0bffd17 	ldw	r2,-12(fp)
  8028ac:	e0fffb17 	ldw	r3,-20(fp)
  8028b0:	10c00315 	stw	r3,12(r2)
            dj->sect = clust2sect(dj->fs, clst);
  8028b4:	e0bffd17 	ldw	r2,-12(fp)
  8028b8:	10800017 	ldw	r2,0(r2)
  8028bc:	e17ffb17 	ldw	r5,-20(fp)
  8028c0:	1009883a 	mov	r4,r2
  8028c4:	0801ad80 	call	801ad8 <clust2sect>
  8028c8:	1007883a 	mov	r3,r2
  8028cc:	e0bffd17 	ldw	r2,-12(fp)
  8028d0:	10c00415 	stw	r3,16(r2)
         }
      }
   }

   dj->index = i;
  8028d4:	e0bffd17 	ldw	r2,-12(fp)
  8028d8:	e0fffc8b 	ldhu	r3,-14(fp)
  8028dc:	10c0018d 	sth	r3,6(r2)
   dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  8028e0:	e0bffd17 	ldw	r2,-12(fp)
  8028e4:	10800017 	ldw	r2,0(r2)
  8028e8:	10c00c04 	addi	r3,r2,48
  8028ec:	e0bffc8b 	ldhu	r2,-14(fp)
  8028f0:	108003cc 	andi	r2,r2,15
  8028f4:	1004917a 	slli	r2,r2,5
  8028f8:	1887883a 	add	r3,r3,r2
  8028fc:	e0bffd17 	ldw	r2,-12(fp)
  802900:	10c00515 	stw	r3,20(r2)

   return FR_OK;
  802904:	0005883a 	mov	r2,zero
}
  802908:	e6ffff04 	addi	sp,fp,-4
  80290c:	dfc00217 	ldw	ra,8(sp)
  802910:	df000117 	ldw	fp,4(sp)
  802914:	dc000017 	ldw	r16,0(sp)
  802918:	dec00304 	addi	sp,sp,12
  80291c:	f800283a 	ret

00802920 <dir_find>:

static
FRESULT dir_find (
   DIR *dj        /* Pointer to the directory object linked to the file name */
)
{
  802920:	defffa04 	addi	sp,sp,-24
  802924:	dfc00515 	stw	ra,20(sp)
  802928:	df000415 	stw	fp,16(sp)
  80292c:	df000404 	addi	fp,sp,16
  802930:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord, sum;
#endif

   res = dir_sdi(dj, 0);         /* Rewind directory object */
  802934:	000b883a 	mov	r5,zero
  802938:	e13fff17 	ldw	r4,-4(fp)
  80293c:	080244c0 	call	80244c <dir_sdi>
  802940:	e0bffc15 	stw	r2,-16(fp)
   if (res != FR_OK) return res;
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	10000226 	beq	r2,zero,802954 <dir_find+0x34>
  80294c:	e0bffc17 	ldw	r2,-16(fp)
  802950:	00002d06 	br	802a08 <dir_find+0xe8>

#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
  802954:	e0bfff17 	ldw	r2,-4(fp)
  802958:	10c00017 	ldw	r3,0(r2)
  80295c:	e0bfff17 	ldw	r2,-4(fp)
  802960:	10800417 	ldw	r2,16(r2)
  802964:	100b883a 	mov	r5,r2
  802968:	1809883a 	mov	r4,r3
  80296c:	080175c0 	call	80175c <move_window>
  802970:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802974:	e0bffc17 	ldw	r2,-16(fp)
  802978:	10001f1e 	bne	r2,zero,8029f8 <dir_find+0xd8>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  80297c:	e0bfff17 	ldw	r2,-4(fp)
  802980:	10800517 	ldw	r2,20(r2)
  802984:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  802988:	e0bffd17 	ldw	r2,-12(fp)
  80298c:	10800003 	ldbu	r2,0(r2)
  802990:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  802994:	e0bffe03 	ldbu	r2,-8(fp)
  802998:	1000031e 	bne	r2,zero,8029a8 <dir_find+0x88>
  80299c:	00800104 	movi	r2,4
  8029a0:	e0bffc15 	stw	r2,-16(fp)
  8029a4:	00001706 	br	802a04 <dir_find+0xe4>
            ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
  8029a8:	e0bffd17 	ldw	r2,-12(fp)
  8029ac:	108002c4 	addi	r2,r2,11
  8029b0:	10800003 	ldbu	r2,0(r2)
  8029b4:	10803fcc 	andi	r2,r2,255
  8029b8:	1080020c 	andi	r2,r2,8
  8029bc:	1000071e 	bne	r2,zero,8029dc <dir_find+0xbc>
  8029c0:	e0bfff17 	ldw	r2,-4(fp)
  8029c4:	10800617 	ldw	r2,24(r2)
  8029c8:	018002c4 	movi	r6,11
  8029cc:	100b883a 	mov	r5,r2
  8029d0:	e13ffd17 	ldw	r4,-12(fp)
  8029d4:	08016540 	call	801654 <mem_cmp>
  8029d8:	10000926 	beq	r2,zero,802a00 <dir_find+0xe0>
         break;
#endif
      res = dir_next(dj, 0);     /* Next entry */
  8029dc:	000b883a 	mov	r5,zero
  8029e0:	e13fff17 	ldw	r4,-4(fp)
  8029e4:	08026380 	call	802638 <dir_next>
  8029e8:	e0bffc15 	stw	r2,-16(fp)
   } while (res == FR_OK);
  8029ec:	e0bffc17 	ldw	r2,-16(fp)
  8029f0:	103fd826 	beq	r2,zero,802954 <__alt_data_end+0xff802954>
  8029f4:	00000306 	br	802a04 <dir_find+0xe4>
#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
      if (res != FR_OK) break;
  8029f8:	0001883a 	nop
  8029fc:	00000106 	br	802a04 <dir_find+0xe4>
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
         break;
  802a00:	0001883a 	nop
#endif
      res = dir_next(dj, 0);     /* Next entry */
   } while (res == FR_OK);

   return res;
  802a04:	e0bffc17 	ldw	r2,-16(fp)
}
  802a08:	e037883a 	mov	sp,fp
  802a0c:	dfc00117 	ldw	ra,4(sp)
  802a10:	df000017 	ldw	fp,0(sp)
  802a14:	dec00204 	addi	sp,sp,8
  802a18:	f800283a 	ret

00802a1c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
   DIR *dj        /* Pointer to the directory object that pointing the entry to be read */
)
{
  802a1c:	defffa04 	addi	sp,sp,-24
  802a20:	dfc00515 	stw	ra,20(sp)
  802a24:	df000415 	stw	fp,16(sp)
  802a28:	df000404 	addi	fp,sp,16
  802a2c:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
  802a30:	00800104 	movi	r2,4
  802a34:	e0bffc15 	stw	r2,-16(fp)
   while (dj->sect) {
  802a38:	00002706 	br	802ad8 <dir_read+0xbc>
      res = move_window(dj->fs, dj->sect);
  802a3c:	e0bfff17 	ldw	r2,-4(fp)
  802a40:	10c00017 	ldw	r3,0(r2)
  802a44:	e0bfff17 	ldw	r2,-4(fp)
  802a48:	10800417 	ldw	r2,16(r2)
  802a4c:	100b883a 	mov	r5,r2
  802a50:	1809883a 	mov	r4,r3
  802a54:	080175c0 	call	80175c <move_window>
  802a58:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802a5c:	e0bffc17 	ldw	r2,-16(fp)
  802a60:	1000211e 	bne	r2,zero,802ae8 <dir_read+0xcc>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  802a64:	e0bfff17 	ldw	r2,-4(fp)
  802a68:	10800517 	ldw	r2,20(r2)
  802a6c:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  802a70:	e0bffd17 	ldw	r2,-12(fp)
  802a74:	10800003 	ldbu	r2,0(r2)
  802a78:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  802a7c:	e0bffe03 	ldbu	r2,-8(fp)
  802a80:	1000031e 	bne	r2,zero,802a90 <dir_read+0x74>
  802a84:	00800104 	movi	r2,4
  802a88:	e0bffc15 	stw	r2,-16(fp)
  802a8c:	00001b06 	br	802afc <dir_read+0xe0>
               dj->lfn_idx = 0xFFFF;      /* It has no LFN. */
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
  802a90:	e0bffe03 	ldbu	r2,-8(fp)
  802a94:	10803960 	cmpeqi	r2,r2,229
  802a98:	1000091e 	bne	r2,zero,802ac0 <dir_read+0xa4>
  802a9c:	e0bffe03 	ldbu	r2,-8(fp)
  802aa0:	10800ba0 	cmpeqi	r2,r2,46
  802aa4:	1000061e 	bne	r2,zero,802ac0 <dir_read+0xa4>
  802aa8:	e0bffd17 	ldw	r2,-12(fp)
  802aac:	108002c4 	addi	r2,r2,11
  802ab0:	10800003 	ldbu	r2,0(r2)
  802ab4:	10803fcc 	andi	r2,r2,255
  802ab8:	1080020c 	andi	r2,r2,8
  802abc:	10000c26 	beq	r2,zero,802af0 <dir_read+0xd4>
         break;
#endif
      res = dir_next(dj, 0);           /* Next entry */
  802ac0:	000b883a 	mov	r5,zero
  802ac4:	e13fff17 	ldw	r4,-4(fp)
  802ac8:	08026380 	call	802638 <dir_next>
  802acc:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802ad0:	e0bffc17 	ldw	r2,-16(fp)
  802ad4:	1000081e 	bne	r2,zero,802af8 <dir_read+0xdc>
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
   while (dj->sect) {
  802ad8:	e0bfff17 	ldw	r2,-4(fp)
  802adc:	10800417 	ldw	r2,16(r2)
  802ae0:	103fd61e 	bne	r2,zero,802a3c <__alt_data_end+0xff802a3c>
  802ae4:	00000506 	br	802afc <dir_read+0xe0>
      res = move_window(dj->fs, dj->sect);
      if (res != FR_OK) break;
  802ae8:	0001883a 	nop
  802aec:	00000306 	br	802afc <dir_read+0xe0>
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
         break;
  802af0:	0001883a 	nop
  802af4:	00000106 	br	802afc <dir_read+0xe0>
#endif
      res = dir_next(dj, 0);           /* Next entry */
      if (res != FR_OK) break;
  802af8:	0001883a 	nop
   }

   if (res != FR_OK) dj->sect = 0;
  802afc:	e0bffc17 	ldw	r2,-16(fp)
  802b00:	10000226 	beq	r2,zero,802b0c <dir_read+0xf0>
  802b04:	e0bfff17 	ldw	r2,-4(fp)
  802b08:	10000415 	stw	zero,16(r2)

   return res;
  802b0c:	e0bffc17 	ldw	r2,-16(fp)
}
  802b10:	e037883a 	mov	sp,fp
  802b14:	dfc00117 	ldw	ra,4(sp)
  802b18:	df000017 	ldw	fp,0(sp)
  802b1c:	dec00204 	addi	sp,sp,8
  802b20:	f800283a 	ret

00802b24 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   DIR *dj           /* Target directory with object name to be created */
)
{
  802b24:	defffa04 	addi	sp,sp,-24
  802b28:	dfc00515 	stw	ra,20(sp)
  802b2c:	df000415 	stw	fp,16(sp)
  802b30:	df000404 	addi	fp,sp,16
  802b34:	e13fff15 	stw	r4,-4(fp)
         } while (res == FR_OK && --ne);
      }
   }

#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
  802b38:	000b883a 	mov	r5,zero
  802b3c:	e13fff17 	ldw	r4,-4(fp)
  802b40:	080244c0 	call	80244c <dir_sdi>
  802b44:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  802b48:	e0bffc17 	ldw	r2,-16(fp)
  802b4c:	10001b1e 	bne	r2,zero,802bbc <dir_register+0x98>
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
  802b50:	e0bfff17 	ldw	r2,-4(fp)
  802b54:	10c00017 	ldw	r3,0(r2)
  802b58:	e0bfff17 	ldw	r2,-4(fp)
  802b5c:	10800417 	ldw	r2,16(r2)
  802b60:	100b883a 	mov	r5,r2
  802b64:	1809883a 	mov	r4,r3
  802b68:	080175c0 	call	80175c <move_window>
  802b6c:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  802b70:	e0bffc17 	ldw	r2,-16(fp)
  802b74:	1000101e 	bne	r2,zero,802bb8 <dir_register+0x94>
         c = *dj->dir;
  802b78:	e0bfff17 	ldw	r2,-4(fp)
  802b7c:	10800517 	ldw	r2,20(r2)
  802b80:	10800003 	ldbu	r2,0(r2)
  802b84:	e0bffd05 	stb	r2,-12(fp)
         if (c == DDE || c == 0) break;   /* Is it a blank entry? */
  802b88:	e0bffd03 	ldbu	r2,-12(fp)
  802b8c:	10803960 	cmpeqi	r2,r2,229
  802b90:	10000a1e 	bne	r2,zero,802bbc <dir_register+0x98>
  802b94:	e0bffd03 	ldbu	r2,-12(fp)
  802b98:	10000826 	beq	r2,zero,802bbc <dir_register+0x98>
         res = dir_next(dj, 1);        /* Next entry with table stretch */
  802b9c:	01400044 	movi	r5,1
  802ba0:	e13fff17 	ldw	r4,-4(fp)
  802ba4:	08026380 	call	802638 <dir_next>
  802ba8:	e0bffc15 	stw	r2,-16(fp)
      } while (res == FR_OK);
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	103fe726 	beq	r2,zero,802b50 <__alt_data_end+0xff802b50>
  802bb4:	00000106 	br	802bbc <dir_register+0x98>
#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
   if (res == FR_OK) {
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
         if (res != FR_OK) break;
  802bb8:	0001883a 	nop
         res = dir_next(dj, 1);        /* Next entry with table stretch */
      } while (res == FR_OK);
   }
#endif

   if (res == FR_OK) {     /* Initialize the SFN entry */
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10001b1e 	bne	r2,zero,802c30 <dir_register+0x10c>
      res = move_window(dj->fs, dj->sect);
  802bc4:	e0bfff17 	ldw	r2,-4(fp)
  802bc8:	10c00017 	ldw	r3,0(r2)
  802bcc:	e0bfff17 	ldw	r2,-4(fp)
  802bd0:	10800417 	ldw	r2,16(r2)
  802bd4:	100b883a 	mov	r5,r2
  802bd8:	1809883a 	mov	r4,r3
  802bdc:	080175c0 	call	80175c <move_window>
  802be0:	e0bffc15 	stw	r2,-16(fp)
      if (res == FR_OK) {
  802be4:	e0bffc17 	ldw	r2,-16(fp)
  802be8:	1000111e 	bne	r2,zero,802c30 <dir_register+0x10c>
         dir = dj->dir;
  802bec:	e0bfff17 	ldw	r2,-4(fp)
  802bf0:	10800517 	ldw	r2,20(r2)
  802bf4:	e0bffe15 	stw	r2,-8(fp)
         mem_set(dir, 0, SZ_DIR);   /* Clean the entry */
  802bf8:	01800804 	movi	r6,32
  802bfc:	000b883a 	mov	r5,zero
  802c00:	e13ffe17 	ldw	r4,-8(fp)
  802c04:	08015f80 	call	8015f8 <mem_set>
         mem_cpy(dir, dj->fn, 11);  /* Put SFN */
  802c08:	e0bfff17 	ldw	r2,-4(fp)
  802c0c:	10800617 	ldw	r2,24(r2)
  802c10:	018002c4 	movi	r6,11
  802c14:	100b883a 	mov	r5,r2
  802c18:	e13ffe17 	ldw	r4,-8(fp)
  802c1c:	08015880 	call	801588 <mem_cpy>
#if _USE_LFN
         dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);   /* Put NT flag */
#endif
         dj->fs->wflag = 1;
  802c20:	e0bfff17 	ldw	r2,-4(fp)
  802c24:	10800017 	ldw	r2,0(r2)
  802c28:	00c00044 	movi	r3,1
  802c2c:	10c00105 	stb	r3,4(r2)
      }
   }

   return res;
  802c30:	e0bffc17 	ldw	r2,-16(fp)
}
  802c34:	e037883a 	mov	sp,fp
  802c38:	dfc00117 	ldw	ra,4(sp)
  802c3c:	df000017 	ldw	fp,0(sp)
  802c40:	dec00204 	addi	sp,sp,8
  802c44:	f800283a 	ret

00802c48 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove ( /* FR_OK: Successful, FR_DISK_ERR: A disk error */
   DIR *dj           /* Directory object pointing the entry to be removed */
)
{
  802c48:	defffc04 	addi	sp,sp,-16
  802c4c:	dfc00315 	stw	ra,12(sp)
  802c50:	df000215 	stw	fp,8(sp)
  802c54:	df000204 	addi	fp,sp,8
  802c58:	e13fff15 	stw	r4,-4(fp)
      } while (res == FR_OK);
      if (res == FR_NO_FILE) res = FR_INT_ERR;
   }

#else       /* Non LFN configuration */
   res = dir_sdi(dj, dj->index);
  802c5c:	e0bfff17 	ldw	r2,-4(fp)
  802c60:	1080018b 	ldhu	r2,6(r2)
  802c64:	10bfffcc 	andi	r2,r2,65535
  802c68:	100b883a 	mov	r5,r2
  802c6c:	e13fff17 	ldw	r4,-4(fp)
  802c70:	080244c0 	call	80244c <dir_sdi>
  802c74:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  802c78:	e0bffe17 	ldw	r2,-8(fp)
  802c7c:	1000121e 	bne	r2,zero,802cc8 <dir_remove+0x80>
      res = move_window(dj->fs, dj->sect);
  802c80:	e0bfff17 	ldw	r2,-4(fp)
  802c84:	10c00017 	ldw	r3,0(r2)
  802c88:	e0bfff17 	ldw	r2,-4(fp)
  802c8c:	10800417 	ldw	r2,16(r2)
  802c90:	100b883a 	mov	r5,r2
  802c94:	1809883a 	mov	r4,r3
  802c98:	080175c0 	call	80175c <move_window>
  802c9c:	e0bffe15 	stw	r2,-8(fp)
      if (res == FR_OK) {
  802ca0:	e0bffe17 	ldw	r2,-8(fp)
  802ca4:	1000081e 	bne	r2,zero,802cc8 <dir_remove+0x80>
         *dj->dir = DDE;         /* Mark the entry "deleted" */
  802ca8:	e0bfff17 	ldw	r2,-4(fp)
  802cac:	10800517 	ldw	r2,20(r2)
  802cb0:	00fff944 	movi	r3,-27
  802cb4:	10c00005 	stb	r3,0(r2)
         dj->fs->wflag = 1;
  802cb8:	e0bfff17 	ldw	r2,-4(fp)
  802cbc:	10800017 	ldw	r2,0(r2)
  802cc0:	00c00044 	movi	r3,1
  802cc4:	10c00105 	stb	r3,4(r2)
      }
   }
#endif

   return res;
  802cc8:	e0bffe17 	ldw	r2,-8(fp)
}
  802ccc:	e037883a 	mov	sp,fp
  802cd0:	dfc00117 	ldw	ra,4(sp)
  802cd4:	df000017 	ldw	fp,0(sp)
  802cd8:	dec00204 	addi	sp,sp,8
  802cdc:	f800283a 	ret

00802ce0 <create_name>:
static
FRESULT create_name (
   DIR *dj,       /* Pointer to the directory object */
   const TCHAR **path   /* Pointer to pointer to the segment in the path string */
)
{
  802ce0:	defff604 	addi	sp,sp,-40
  802ce4:	dfc00915 	stw	ra,36(sp)
  802ce8:	df000815 	stw	fp,32(sp)
  802cec:	df000804 	addi	fp,sp,32
  802cf0:	e13ffe15 	stw	r4,-8(fp)
  802cf4:	e17fff15 	stw	r5,-4(fp)
   uint8_t b, c, d, *sfn;
   uint32_t ni, si, i;
   const char *p;

   /* Create file name in directory form */
   for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
  802cf8:	e0bfff17 	ldw	r2,-4(fp)
  802cfc:	10800017 	ldw	r2,0(r2)
  802d00:	e0bffc15 	stw	r2,-16(fp)
  802d04:	00000306 	br	802d14 <create_name+0x34>
  802d08:	e0bffc17 	ldw	r2,-16(fp)
  802d0c:	10800044 	addi	r2,r2,1
  802d10:	e0bffc15 	stw	r2,-16(fp)
  802d14:	e0bffc17 	ldw	r2,-16(fp)
  802d18:	10800003 	ldbu	r2,0(r2)
  802d1c:	10803fcc 	andi	r2,r2,255
  802d20:	1080201c 	xori	r2,r2,128
  802d24:	10bfe004 	addi	r2,r2,-128
  802d28:	10800be0 	cmpeqi	r2,r2,47
  802d2c:	103ff61e 	bne	r2,zero,802d08 <__alt_data_end+0xff802d08>
  802d30:	e0bffc17 	ldw	r2,-16(fp)
  802d34:	10800003 	ldbu	r2,0(r2)
  802d38:	10803fcc 	andi	r2,r2,255
  802d3c:	1080201c 	xori	r2,r2,128
  802d40:	10bfe004 	addi	r2,r2,-128
  802d44:	10801720 	cmpeqi	r2,r2,92
  802d48:	103fef1e 	bne	r2,zero,802d08 <__alt_data_end+0xff802d08>
   sfn = dj->fn;
  802d4c:	e0bffe17 	ldw	r2,-8(fp)
  802d50:	10800617 	ldw	r2,24(r2)
  802d54:	e0bffd15 	stw	r2,-12(fp)
   mem_set(sfn, ' ', 11);
  802d58:	018002c4 	movi	r6,11
  802d5c:	01400804 	movi	r5,32
  802d60:	e13ffd17 	ldw	r4,-12(fp)
  802d64:	08015f80 	call	8015f8 <mem_set>
   si = i = b = 0; ni = 8;
  802d68:	e03ff805 	stb	zero,-32(fp)
  802d6c:	e03ffb15 	stw	zero,-20(fp)
  802d70:	e0bffb17 	ldw	r2,-20(fp)
  802d74:	e0bffa15 	stw	r2,-24(fp)
  802d78:	00800204 	movi	r2,8
  802d7c:	e0bff915 	stw	r2,-28(fp)
      sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;  /* Set last segment flag if end of path */
      return FR_OK;
   }
#endif
   for (;;) {
      c = (uint8_t)p[si++];
  802d80:	e0bffa17 	ldw	r2,-24(fp)
  802d84:	10c00044 	addi	r3,r2,1
  802d88:	e0fffa15 	stw	r3,-24(fp)
  802d8c:	e0fffc17 	ldw	r3,-16(fp)
  802d90:	1885883a 	add	r2,r3,r2
  802d94:	10800003 	ldbu	r2,0(r2)
  802d98:	e0bff845 	stb	r2,-31(fp)
      if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
  802d9c:	e0bff843 	ldbu	r2,-31(fp)
  802da0:	10800870 	cmpltui	r2,r2,33
  802da4:	1000521e 	bne	r2,zero,802ef0 <create_name+0x210>
  802da8:	e0bff843 	ldbu	r2,-31(fp)
  802dac:	10800be0 	cmpeqi	r2,r2,47
  802db0:	10004f1e 	bne	r2,zero,802ef0 <create_name+0x210>
  802db4:	e0bff843 	ldbu	r2,-31(fp)
  802db8:	10801720 	cmpeqi	r2,r2,92
  802dbc:	10004c1e 	bne	r2,zero,802ef0 <create_name+0x210>
      if (c == '.' || i >= ni) {
  802dc0:	e0bff843 	ldbu	r2,-31(fp)
  802dc4:	10800ba0 	cmpeqi	r2,r2,46
  802dc8:	1000031e 	bne	r2,zero,802dd8 <create_name+0xf8>
  802dcc:	e0fffb17 	ldw	r3,-20(fp)
  802dd0:	e0bff917 	ldw	r2,-28(fp)
  802dd4:	18801136 	bltu	r3,r2,802e1c <create_name+0x13c>
         if (ni != 8 || c != '.') return FR_INVALID_NAME;
  802dd8:	e0bff917 	ldw	r2,-28(fp)
  802ddc:	10800218 	cmpnei	r2,r2,8
  802de0:	1000031e 	bne	r2,zero,802df0 <create_name+0x110>
  802de4:	e0bff843 	ldbu	r2,-31(fp)
  802de8:	10800ba0 	cmpeqi	r2,r2,46
  802dec:	1000021e 	bne	r2,zero,802df8 <create_name+0x118>
  802df0:	00800184 	movi	r2,6
  802df4:	00007006 	br	802fb8 <create_name+0x2d8>
         i = 8; ni = 11;
  802df8:	00800204 	movi	r2,8
  802dfc:	e0bffb15 	stw	r2,-20(fp)
  802e00:	008002c4 	movi	r2,11
  802e04:	e0bff915 	stw	r2,-28(fp)
         b <<= 2; continue;
  802e08:	e0bff803 	ldbu	r2,-32(fp)
  802e0c:	1085883a 	add	r2,r2,r2
  802e10:	1085883a 	add	r2,r2,r2
  802e14:	e0bff805 	stb	r2,-32(fp)
  802e18:	00003406 	br	802eec <create_name+0x20c>
      }
      if (c >= 0x80) {           /* Extended char? */
  802e1c:	e0bff843 	ldbu	r2,-31(fp)
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1080201c 	xori	r2,r2,128
  802e28:	10bfe004 	addi	r2,r2,-128
  802e2c:	10000a0e 	bge	r2,zero,802e58 <create_name+0x178>
         b |= 3;                 /* Eliminate NT flag */
  802e30:	e0bff803 	ldbu	r2,-32(fp)
  802e34:	108000d4 	ori	r2,r2,3
  802e38:	e0bff805 	stb	r2,-32(fp)
#ifdef _EXCVT
         c = excvt[c-0x80];         /* Upper conversion (SBCS) */
  802e3c:	e0bff843 	ldbu	r2,-31(fp)
  802e40:	10ffe004 	addi	r3,r2,-128
  802e44:	008020b4 	movhi	r2,130
  802e48:	10ac9804 	addi	r2,r2,-19872
  802e4c:	10c5883a 	add	r2,r2,r3
  802e50:	10800003 	ldbu	r2,0(r2)
  802e54:	e0bff845 	stb	r2,-31(fp)
         if (!IsDBCS2(d) || i >= ni - 1)  /* Reject invalid DBC */
            return FR_INVALID_NAME;
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
  802e58:	e0bff843 	ldbu	r2,-31(fp)
  802e5c:	100b883a 	mov	r5,r2
  802e60:	010020b4 	movhi	r4,130
  802e64:	212c8704 	addi	r4,r4,-19940
  802e68:	08016e00 	call	8016e0 <chk_chr>
  802e6c:	10000226 	beq	r2,zero,802e78 <create_name+0x198>
            return FR_INVALID_NAME;
  802e70:	00800184 	movi	r2,6
  802e74:	00005006 	br	802fb8 <create_name+0x2d8>
         if (IsUpper(c)) {       /* ASCII large capital? */
  802e78:	e0bff843 	ldbu	r2,-31(fp)
  802e7c:	10801070 	cmpltui	r2,r2,65
  802e80:	1000071e 	bne	r2,zero,802ea0 <create_name+0x1c0>
  802e84:	e0bff843 	ldbu	r2,-31(fp)
  802e88:	108016e8 	cmpgeui	r2,r2,91
  802e8c:	1000041e 	bne	r2,zero,802ea0 <create_name+0x1c0>
            b |= 2;
  802e90:	e0bff803 	ldbu	r2,-32(fp)
  802e94:	10800094 	ori	r2,r2,2
  802e98:	e0bff805 	stb	r2,-32(fp)
  802e9c:	00000c06 	br	802ed0 <create_name+0x1f0>
         } else {
            if (IsLower(c)) {    /* ASCII small capital? */
  802ea0:	e0bff843 	ldbu	r2,-31(fp)
  802ea4:	10801870 	cmpltui	r2,r2,97
  802ea8:	1000091e 	bne	r2,zero,802ed0 <create_name+0x1f0>
  802eac:	e0bff843 	ldbu	r2,-31(fp)
  802eb0:	10801ee8 	cmpgeui	r2,r2,123
  802eb4:	1000061e 	bne	r2,zero,802ed0 <create_name+0x1f0>
               b |= 1; c -= 0x20;
  802eb8:	e0bff803 	ldbu	r2,-32(fp)
  802ebc:	10800054 	ori	r2,r2,1
  802ec0:	e0bff805 	stb	r2,-32(fp)
  802ec4:	e0bff843 	ldbu	r2,-31(fp)
  802ec8:	10bff804 	addi	r2,r2,-32
  802ecc:	e0bff845 	stb	r2,-31(fp)
            }
         }
         sfn[i++] = c;
  802ed0:	e0bffb17 	ldw	r2,-20(fp)
  802ed4:	10c00044 	addi	r3,r2,1
  802ed8:	e0fffb15 	stw	r3,-20(fp)
  802edc:	e0fffd17 	ldw	r3,-12(fp)
  802ee0:	1885883a 	add	r2,r3,r2
  802ee4:	e0fff843 	ldbu	r3,-31(fp)
  802ee8:	10c00005 	stb	r3,0(r2)
      }
   }
  802eec:	003fa406 	br	802d80 <__alt_data_end+0xff802d80>
   *path = &p[si];                  /* Return pointer to the next segment */
  802ef0:	e0fffc17 	ldw	r3,-16(fp)
  802ef4:	e0bffa17 	ldw	r2,-24(fp)
  802ef8:	1887883a 	add	r3,r3,r2
  802efc:	e0bfff17 	ldw	r2,-4(fp)
  802f00:	10c00015 	stw	r3,0(r2)
   c = (c <= ' ') ? NS_LAST : 0;    /* Set last segment flag if end of path */
  802f04:	e0bff843 	ldbu	r2,-31(fp)
  802f08:	10800868 	cmpgeui	r2,r2,33
  802f0c:	1000021e 	bne	r2,zero,802f18 <create_name+0x238>
  802f10:	00800104 	movi	r2,4
  802f14:	00000106 	br	802f1c <create_name+0x23c>
  802f18:	0005883a 	mov	r2,zero
  802f1c:	e0bff845 	stb	r2,-31(fp)

   if (!i) return FR_INVALID_NAME;     /* Reject nul string */
  802f20:	e0bffb17 	ldw	r2,-20(fp)
  802f24:	1000021e 	bne	r2,zero,802f30 <create_name+0x250>
  802f28:	00800184 	movi	r2,6
  802f2c:	00002206 	br	802fb8 <create_name+0x2d8>
   if (sfn[0] == DDE) sfn[0] = NDDE;   /* When first char collides with DDE, replace it with 0x05 */
  802f30:	e0bffd17 	ldw	r2,-12(fp)
  802f34:	10800003 	ldbu	r2,0(r2)
  802f38:	10803fcc 	andi	r2,r2,255
  802f3c:	10803958 	cmpnei	r2,r2,229
  802f40:	1000031e 	bne	r2,zero,802f50 <create_name+0x270>
  802f44:	e0bffd17 	ldw	r2,-12(fp)
  802f48:	00c00144 	movi	r3,5
  802f4c:	10c00005 	stb	r3,0(r2)

   if (ni == 8) b <<= 2;
  802f50:	e0bff917 	ldw	r2,-28(fp)
  802f54:	10800218 	cmpnei	r2,r2,8
  802f58:	1000041e 	bne	r2,zero,802f6c <create_name+0x28c>
  802f5c:	e0bff803 	ldbu	r2,-32(fp)
  802f60:	1085883a 	add	r2,r2,r2
  802f64:	1085883a 	add	r2,r2,r2
  802f68:	e0bff805 	stb	r2,-32(fp)
   if ((b & 0x03) == 0x01) c |= NS_EXT;   /* NT flag (Name extension has only small capital) */
  802f6c:	e0bff803 	ldbu	r2,-32(fp)
  802f70:	108000cc 	andi	r2,r2,3
  802f74:	10800058 	cmpnei	r2,r2,1
  802f78:	1000031e 	bne	r2,zero,802f88 <create_name+0x2a8>
  802f7c:	e0bff843 	ldbu	r2,-31(fp)
  802f80:	10800414 	ori	r2,r2,16
  802f84:	e0bff845 	stb	r2,-31(fp)
   if ((b & 0x0C) == 0x04) c |= NS_BODY;  /* NT flag (Name body has only small capital) */
  802f88:	e0bff803 	ldbu	r2,-32(fp)
  802f8c:	1080030c 	andi	r2,r2,12
  802f90:	10800118 	cmpnei	r2,r2,4
  802f94:	1000031e 	bne	r2,zero,802fa4 <create_name+0x2c4>
  802f98:	e0bff843 	ldbu	r2,-31(fp)
  802f9c:	10800214 	ori	r2,r2,8
  802fa0:	e0bff845 	stb	r2,-31(fp)

   sfn[NS] = c;      /* Store NT flag, File name is created */
  802fa4:	e0bffd17 	ldw	r2,-12(fp)
  802fa8:	108002c4 	addi	r2,r2,11
  802fac:	e0fff843 	ldbu	r3,-31(fp)
  802fb0:	10c00005 	stb	r3,0(r2)

   return FR_OK;
  802fb4:	0005883a 	mov	r2,zero
#endif
}
  802fb8:	e037883a 	mov	sp,fp
  802fbc:	dfc00117 	ldw	ra,4(sp)
  802fc0:	df000017 	ldw	fp,0(sp)
  802fc4:	dec00204 	addi	sp,sp,8
  802fc8:	f800283a 	ret

00802fcc <get_fileinfo>:
static
void get_fileinfo (     /* No return code */
   DIR *dj,       /* Pointer to the directory object */
   FILINFO *fno      /* Pointer to the file information to be filled */
)
{
  802fcc:	defff804 	addi	sp,sp,-32
  802fd0:	df000715 	stw	fp,28(sp)
  802fd4:	df000704 	addi	fp,sp,28
  802fd8:	e13ffe15 	stw	r4,-8(fp)
  802fdc:	e17fff15 	stw	r5,-4(fp)
   uint32_t i;
   uint8_t nt, *dir;
   TCHAR *p, c;


   p = fno->fname;
  802fe0:	e0bfff17 	ldw	r2,-4(fp)
  802fe4:	10800244 	addi	r2,r2,9
  802fe8:	e0bffa15 	stw	r2,-24(fp)
   if (dj->sect) {
  802fec:	e0bffe17 	ldw	r2,-8(fp)
  802ff0:	10800417 	ldw	r2,16(r2)
  802ff4:	10007d26 	beq	r2,zero,8031ec <get_fileinfo+0x220>
      dir = dj->dir;
  802ff8:	e0bffe17 	ldw	r2,-8(fp)
  802ffc:	10800517 	ldw	r2,20(r2)
  803000:	e0bffc15 	stw	r2,-16(fp)
      nt = dir[DIR_NTres];    /* NT flag */
  803004:	e0bffc17 	ldw	r2,-16(fp)
  803008:	10800303 	ldbu	r2,12(r2)
  80300c:	e0bffd05 	stb	r2,-12(fp)
      for (i = 0; i < 8; i++) {  /* Copy name body */
  803010:	e03ff915 	stw	zero,-28(fp)
  803014:	00001506 	br	80306c <get_fileinfo+0xa0>
         c = dir[i];
  803018:	e0fffc17 	ldw	r3,-16(fp)
  80301c:	e0bff917 	ldw	r2,-28(fp)
  803020:	1885883a 	add	r2,r3,r2
  803024:	10800003 	ldbu	r2,0(r2)
  803028:	e0bffb05 	stb	r2,-20(fp)
         if (c == ' ') break;
  80302c:	e0bffb07 	ldb	r2,-20(fp)
  803030:	10800818 	cmpnei	r2,r2,32
  803034:	10001126 	beq	r2,zero,80307c <get_fileinfo+0xb0>
         if (c == NDDE) c = (TCHAR)DDE;
  803038:	e0bffb07 	ldb	r2,-20(fp)
  80303c:	10800158 	cmpnei	r2,r2,5
  803040:	1000021e 	bne	r2,zero,80304c <get_fileinfo+0x80>
  803044:	00bff944 	movi	r2,-27
  803048:	e0bffb05 	stb	r2,-20(fp)
         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
            c = (c << 8) | dir[++i];
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
  80304c:	e0bffa17 	ldw	r2,-24(fp)
  803050:	10c00044 	addi	r3,r2,1
  803054:	e0fffa15 	stw	r3,-24(fp)
  803058:	e0fffb03 	ldbu	r3,-20(fp)
  80305c:	10c00005 	stb	r3,0(r2)

   p = fno->fname;
   if (dj->sect) {
      dir = dj->dir;
      nt = dir[DIR_NTres];    /* NT flag */
      for (i = 0; i < 8; i++) {  /* Copy name body */
  803060:	e0bff917 	ldw	r2,-28(fp)
  803064:	10800044 	addi	r2,r2,1
  803068:	e0bff915 	stw	r2,-28(fp)
  80306c:	e0bff917 	ldw	r2,-28(fp)
  803070:	10800230 	cmpltui	r2,r2,8
  803074:	103fe81e 	bne	r2,zero,803018 <__alt_data_end+0xff803018>
  803078:	00000106 	br	803080 <get_fileinfo+0xb4>
         c = dir[i];
         if (c == ' ') break;
  80307c:	0001883a 	nop
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
  803080:	e0bffc17 	ldw	r2,-16(fp)
  803084:	10800204 	addi	r2,r2,8
  803088:	10800003 	ldbu	r2,0(r2)
  80308c:	10803fcc 	andi	r2,r2,255
  803090:	10800820 	cmpeqi	r2,r2,32
  803094:	10001d1e 	bne	r2,zero,80310c <get_fileinfo+0x140>
         *p++ = '.';
  803098:	e0bffa17 	ldw	r2,-24(fp)
  80309c:	10c00044 	addi	r3,r2,1
  8030a0:	e0fffa15 	stw	r3,-24(fp)
  8030a4:	00c00b84 	movi	r3,46
  8030a8:	10c00005 	stb	r3,0(r2)
         for (i = 8; i < 11; i++) {
  8030ac:	00800204 	movi	r2,8
  8030b0:	e0bff915 	stw	r2,-28(fp)
  8030b4:	00001006 	br	8030f8 <get_fileinfo+0x12c>
            c = dir[i];
  8030b8:	e0fffc17 	ldw	r3,-16(fp)
  8030bc:	e0bff917 	ldw	r2,-28(fp)
  8030c0:	1885883a 	add	r2,r3,r2
  8030c4:	10800003 	ldbu	r2,0(r2)
  8030c8:	e0bffb05 	stb	r2,-20(fp)
            if (c == ' ') break;
  8030cc:	e0bffb07 	ldb	r2,-20(fp)
  8030d0:	10800818 	cmpnei	r2,r2,32
  8030d4:	10000c26 	beq	r2,zero,803108 <get_fileinfo+0x13c>
            if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
               c = (c << 8) | dir[++i];
            c = ff_convert(c, 1);
            if (!c) c = '?';
#endif
            *p++ = c;
  8030d8:	e0bffa17 	ldw	r2,-24(fp)
  8030dc:	10c00044 	addi	r3,r2,1
  8030e0:	e0fffa15 	stw	r3,-24(fp)
  8030e4:	e0fffb03 	ldbu	r3,-20(fp)
  8030e8:	10c00005 	stb	r3,0(r2)
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
         *p++ = '.';
         for (i = 8; i < 11; i++) {
  8030ec:	e0bff917 	ldw	r2,-28(fp)
  8030f0:	10800044 	addi	r2,r2,1
  8030f4:	e0bff915 	stw	r2,-28(fp)
  8030f8:	e0bff917 	ldw	r2,-28(fp)
  8030fc:	108002f0 	cmpltui	r2,r2,11
  803100:	103fed1e 	bne	r2,zero,8030b8 <__alt_data_end+0xff8030b8>
  803104:	00000106 	br	80310c <get_fileinfo+0x140>
            c = dir[i];
            if (c == ' ') break;
  803108:	0001883a 	nop
            if (!c) c = '?';
#endif
            *p++ = c;
         }
      }
      fno->fattrib = dir[DIR_Attr];          /* Attribute */
  80310c:	e0bffc17 	ldw	r2,-16(fp)
  803110:	10c002c3 	ldbu	r3,11(r2)
  803114:	e0bfff17 	ldw	r2,-4(fp)
  803118:	10c00205 	stb	r3,8(r2)
      fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	108007c4 	addi	r2,r2,31
  803124:	10800003 	ldbu	r2,0(r2)
  803128:	10803fcc 	andi	r2,r2,255
  80312c:	1006963a 	slli	r3,r2,24
  803130:	e0bffc17 	ldw	r2,-16(fp)
  803134:	10800784 	addi	r2,r2,30
  803138:	10800003 	ldbu	r2,0(r2)
  80313c:	10803fcc 	andi	r2,r2,255
  803140:	1004943a 	slli	r2,r2,16
  803144:	1884b03a 	or	r2,r3,r2
  803148:	e0fffc17 	ldw	r3,-16(fp)
  80314c:	18c00744 	addi	r3,r3,29
  803150:	18c00003 	ldbu	r3,0(r3)
  803154:	18c03fcc 	andi	r3,r3,255
  803158:	1806923a 	slli	r3,r3,8
  80315c:	10c6b03a 	or	r3,r2,r3
  803160:	e0bffc17 	ldw	r2,-16(fp)
  803164:	10800704 	addi	r2,r2,28
  803168:	10800003 	ldbu	r2,0(r2)
  80316c:	10803fcc 	andi	r2,r2,255
  803170:	1886b03a 	or	r3,r3,r2
  803174:	e0bfff17 	ldw	r2,-4(fp)
  803178:	10c00015 	stw	r3,0(r2)
      fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10800644 	addi	r2,r2,25
  803184:	10800003 	ldbu	r2,0(r2)
  803188:	10803fcc 	andi	r2,r2,255
  80318c:	1004923a 	slli	r2,r2,8
  803190:	1007883a 	mov	r3,r2
  803194:	e0bffc17 	ldw	r2,-16(fp)
  803198:	10800604 	addi	r2,r2,24
  80319c:	10800003 	ldbu	r2,0(r2)
  8031a0:	10803fcc 	andi	r2,r2,255
  8031a4:	1884b03a 	or	r2,r3,r2
  8031a8:	1007883a 	mov	r3,r2
  8031ac:	e0bfff17 	ldw	r2,-4(fp)
  8031b0:	10c0010d 	sth	r3,4(r2)
      fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
  8031b4:	e0bffc17 	ldw	r2,-16(fp)
  8031b8:	108005c4 	addi	r2,r2,23
  8031bc:	10800003 	ldbu	r2,0(r2)
  8031c0:	10803fcc 	andi	r2,r2,255
  8031c4:	1004923a 	slli	r2,r2,8
  8031c8:	1007883a 	mov	r3,r2
  8031cc:	e0bffc17 	ldw	r2,-16(fp)
  8031d0:	10800584 	addi	r2,r2,22
  8031d4:	10800003 	ldbu	r2,0(r2)
  8031d8:	10803fcc 	andi	r2,r2,255
  8031dc:	1884b03a 	or	r2,r3,r2
  8031e0:	1007883a 	mov	r3,r2
  8031e4:	e0bfff17 	ldw	r2,-4(fp)
  8031e8:	10c0018d 	sth	r3,6(r2)
   }
   *p = 0;     /* Terminate SFN str by a \0 */
  8031ec:	e0bffa17 	ldw	r2,-24(fp)
  8031f0:	10000005 	stb	zero,0(r2)
         }
      }
      tp[i] = 0;  /* Terminate the LFN str by a \0 */
   }
#endif
}
  8031f4:	0001883a 	nop
  8031f8:	e037883a 	mov	sp,fp
  8031fc:	df000017 	ldw	fp,0(sp)
  803200:	dec00104 	addi	sp,sp,4
  803204:	f800283a 	ret

00803208 <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR *dj,       /* Directory object to return last directory and found object */
   const TCHAR *path /* Full-path string to find a file or directory */
)
{
  803208:	defff904 	addi	sp,sp,-28
  80320c:	dfc00615 	stw	ra,24(sp)
  803210:	df000515 	stw	fp,20(sp)
  803214:	df000504 	addi	fp,sp,20
  803218:	e13ffe15 	stw	r4,-8(fp)
  80321c:	e17fff15 	stw	r5,-4(fp)
      path++;  dj->sclust = 0;      /* Strip it and start from the root dir */
   } else {                   /* No heading separator */
      dj->sclust = dj->fs->cdir; /* Start from the current dir */
   }
#else
   if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
  803220:	e0bfff17 	ldw	r2,-4(fp)
  803224:	10800003 	ldbu	r2,0(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	10800be0 	cmpeqi	r2,r2,47
  803238:	1000071e 	bne	r2,zero,803258 <follow_path+0x50>
  80323c:	e0bfff17 	ldw	r2,-4(fp)
  803240:	10800003 	ldbu	r2,0(r2)
  803244:	10803fcc 	andi	r2,r2,255
  803248:	1080201c 	xori	r2,r2,128
  80324c:	10bfe004 	addi	r2,r2,-128
  803250:	10801718 	cmpnei	r2,r2,92
  803254:	1000031e 	bne	r2,zero,803264 <follow_path+0x5c>
      path++;
  803258:	e0bfff17 	ldw	r2,-4(fp)
  80325c:	10800044 	addi	r2,r2,1
  803260:	e0bfff15 	stw	r2,-4(fp)
   dj->sclust = 0;                  /* Start from the root dir */
  803264:	e0bffe17 	ldw	r2,-8(fp)
  803268:	10000215 	stw	zero,8(r2)
#endif

   if ((uint32_t)*path < ' ') {         /* Nul path means the start directory itself */
  80326c:	e0bfff17 	ldw	r2,-4(fp)
  803270:	10800003 	ldbu	r2,0(r2)
  803274:	10803fcc 	andi	r2,r2,255
  803278:	10800828 	cmpgeui	r2,r2,32
  80327c:	1000071e 	bne	r2,zero,80329c <follow_path+0x94>
      res = dir_sdi(dj, 0);
  803280:	000b883a 	mov	r5,zero
  803284:	e13ffe17 	ldw	r4,-8(fp)
  803288:	080244c0 	call	80244c <dir_sdi>
  80328c:	e0bffb15 	stw	r2,-20(fp)
      dj->dir = 0;
  803290:	e0bffe17 	ldw	r2,-8(fp)
  803294:	10000515 	stw	zero,20(r2)
  803298:	00004c06 	br	8033cc <follow_path+0x1c4>

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
  80329c:	e0bfff04 	addi	r2,fp,-4
  8032a0:	100b883a 	mov	r5,r2
  8032a4:	e13ffe17 	ldw	r4,-8(fp)
  8032a8:	0802ce00 	call	802ce0 <create_name>
  8032ac:	e0bffb15 	stw	r2,-20(fp)
         if (res != FR_OK) break;
  8032b0:	e0bffb17 	ldw	r2,-20(fp)
  8032b4:	10003e1e 	bne	r2,zero,8033b0 <follow_path+0x1a8>
         res = dir_find(dj);           /* Find it */
  8032b8:	e13ffe17 	ldw	r4,-8(fp)
  8032bc:	08029200 	call	802920 <dir_find>
  8032c0:	e0bffb15 	stw	r2,-20(fp)
         ns = *(dj->fn+NS);
  8032c4:	e0bffe17 	ldw	r2,-8(fp)
  8032c8:	10800617 	ldw	r2,24(r2)
  8032cc:	108002c3 	ldbu	r2,11(r2)
  8032d0:	e0bffc05 	stb	r2,-16(fp)
         if (res != FR_OK) {           /* Failed to find the object */
  8032d4:	e0bffb17 	ldw	r2,-20(fp)
  8032d8:	10000926 	beq	r2,zero,803300 <follow_path+0xf8>
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
  8032dc:	e0bffb17 	ldw	r2,-20(fp)
  8032e0:	10800120 	cmpeqi	r2,r2,4
  8032e4:	10003426 	beq	r2,zero,8033b8 <follow_path+0x1b0>
            if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
               dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
  8032e8:	e0bffc03 	ldbu	r2,-16(fp)
  8032ec:	1080010c 	andi	r2,r2,4
  8032f0:	1000331e 	bne	r2,zero,8033c0 <follow_path+0x1b8>
  8032f4:	00800144 	movi	r2,5
  8032f8:	e0bffb15 	stw	r2,-20(fp)
            }
            break;
  8032fc:	00003006 	br	8033c0 <follow_path+0x1b8>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
  803300:	e0bffc03 	ldbu	r2,-16(fp)
  803304:	1080010c 	andi	r2,r2,4
  803308:	10002f1e 	bne	r2,zero,8033c8 <follow_path+0x1c0>
         dir = dj->dir;                /* There is next segment. Follow the sub directory */
  80330c:	e0bffe17 	ldw	r2,-8(fp)
  803310:	10800517 	ldw	r2,20(r2)
  803314:	e0bffd15 	stw	r2,-12(fp)
         if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
  803318:	e0bffd17 	ldw	r2,-12(fp)
  80331c:	108002c4 	addi	r2,r2,11
  803320:	10800003 	ldbu	r2,0(r2)
  803324:	10803fcc 	andi	r2,r2,255
  803328:	1080040c 	andi	r2,r2,16
  80332c:	1000031e 	bne	r2,zero,80333c <follow_path+0x134>
            res = FR_NO_PATH; break;
  803330:	00800144 	movi	r2,5
  803334:	e0bffb15 	stw	r2,-20(fp)
  803338:	00002406 	br	8033cc <follow_path+0x1c4>
         }
         dj->sclust = LD_CLUST(dir);
  80333c:	e0bffd17 	ldw	r2,-12(fp)
  803340:	10800544 	addi	r2,r2,21
  803344:	10800003 	ldbu	r2,0(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1004923a 	slli	r2,r2,8
  803350:	1007883a 	mov	r3,r2
  803354:	e0bffd17 	ldw	r2,-12(fp)
  803358:	10800504 	addi	r2,r2,20
  80335c:	10800003 	ldbu	r2,0(r2)
  803360:	10803fcc 	andi	r2,r2,255
  803364:	1884b03a 	or	r2,r3,r2
  803368:	10bfffcc 	andi	r2,r2,65535
  80336c:	1006943a 	slli	r3,r2,16
  803370:	e0bffd17 	ldw	r2,-12(fp)
  803374:	108006c4 	addi	r2,r2,27
  803378:	10800003 	ldbu	r2,0(r2)
  80337c:	10803fcc 	andi	r2,r2,255
  803380:	1004923a 	slli	r2,r2,8
  803384:	1009883a 	mov	r4,r2
  803388:	e0bffd17 	ldw	r2,-12(fp)
  80338c:	10800684 	addi	r2,r2,26
  803390:	10800003 	ldbu	r2,0(r2)
  803394:	10803fcc 	andi	r2,r2,255
  803398:	2084b03a 	or	r2,r4,r2
  80339c:	10bfffcc 	andi	r2,r2,65535
  8033a0:	1886b03a 	or	r3,r3,r2
  8033a4:	e0bffe17 	ldw	r2,-8(fp)
  8033a8:	10c00215 	stw	r3,8(r2)
      }
  8033ac:	003fbb06 	br	80329c <__alt_data_end+0xff80329c>
      dj->dir = 0;

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
         if (res != FR_OK) break;
  8033b0:	0001883a 	nop
  8033b4:	00000506 	br	8033cc <follow_path+0x1c4>
         res = dir_find(dj);           /* Find it */
         ns = *(dj->fn+NS);
         if (res != FR_OK) {           /* Failed to find the object */
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
  8033b8:	0001883a 	nop
  8033bc:	00000306 	br	8033cc <follow_path+0x1c4>
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
            }
            break;
  8033c0:	0001883a 	nop
  8033c4:	00000106 	br	8033cc <follow_path+0x1c4>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
  8033c8:	0001883a 	nop
         }
         dj->sclust = LD_CLUST(dir);
      }
   }

   return res;
  8033cc:	e0bffb17 	ldw	r2,-20(fp)
}
  8033d0:	e037883a 	mov	sp,fp
  8033d4:	dfc00117 	ldw	ra,4(sp)
  8033d8:	df000017 	ldw	fp,0(sp)
  8033dc:	dec00204 	addi	sp,sp,8
  8033e0:	f800283a 	ret

008033e4 <check_fs>:
static
uint8_t check_fs (   /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   FATFS *fs,  /* File system object */
   uint32_t sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  8033e4:	defffc04 	addi	sp,sp,-16
  8033e8:	dfc00315 	stw	ra,12(sp)
  8033ec:	df000215 	stw	fp,8(sp)
  8033f0:	df000204 	addi	fp,sp,8
  8033f4:	e13ffe15 	stw	r4,-8(fp)
  8033f8:	e17fff15 	stw	r5,-4(fp)
   if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)   /* Load boot record */
  8033fc:	e0bffe17 	ldw	r2,-8(fp)
  803400:	10800043 	ldbu	r2,1(r2)
  803404:	10c03fcc 	andi	r3,r2,255
  803408:	e0bffe17 	ldw	r2,-8(fp)
  80340c:	10800c04 	addi	r2,r2,48
  803410:	01c00044 	movi	r7,1
  803414:	e1bfff17 	ldw	r6,-4(fp)
  803418:	100b883a 	mov	r5,r2
  80341c:	1809883a 	mov	r4,r3
  803420:	0800e080 	call	800e08 <ffs_DiskIORead>
  803424:	10000226 	beq	r2,zero,803430 <check_fs+0x4c>
      return 3;
  803428:	008000c4 	movi	r2,3
  80342c:	00005306 	br	80357c <check_fs+0x198>
   if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)    /* Check record signature (always placed at offset 510 even if the sector size is >512) */
  803430:	e0bffe17 	ldw	r2,-8(fp)
  803434:	10808b84 	addi	r2,r2,558
  803438:	10800044 	addi	r2,r2,1
  80343c:	10800003 	ldbu	r2,0(r2)
  803440:	10803fcc 	andi	r2,r2,255
  803444:	1004923a 	slli	r2,r2,8
  803448:	1007883a 	mov	r3,r2
  80344c:	e0bffe17 	ldw	r2,-8(fp)
  803450:	10808b83 	ldbu	r2,558(r2)
  803454:	10803fcc 	andi	r2,r2,255
  803458:	1884b03a 	or	r2,r3,r2
  80345c:	10bfffcc 	andi	r2,r2,65535
  803460:	10a0001c 	xori	r2,r2,32768
  803464:	10a00004 	addi	r2,r2,-32768
  803468:	10aa9560 	cmpeqi	r2,r2,-21931
  80346c:	1000021e 	bne	r2,zero,803478 <check_fs+0x94>
      return 2;
  803470:	00800084 	movi	r2,2
  803474:	00004106 	br	80357c <check_fs+0x198>

   if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)   /* Check "FAT" string */
  803478:	e0bffe17 	ldw	r2,-8(fp)
  80347c:	10801984 	addi	r2,r2,102
  803480:	108000c4 	addi	r2,r2,3
  803484:	10800003 	ldbu	r2,0(r2)
  803488:	10803fcc 	andi	r2,r2,255
  80348c:	1006963a 	slli	r3,r2,24
  803490:	e0bffe17 	ldw	r2,-8(fp)
  803494:	10801984 	addi	r2,r2,102
  803498:	10800084 	addi	r2,r2,2
  80349c:	10800003 	ldbu	r2,0(r2)
  8034a0:	10803fcc 	andi	r2,r2,255
  8034a4:	1004943a 	slli	r2,r2,16
  8034a8:	1884b03a 	or	r2,r3,r2
  8034ac:	e0fffe17 	ldw	r3,-8(fp)
  8034b0:	18c01984 	addi	r3,r3,102
  8034b4:	18c00044 	addi	r3,r3,1
  8034b8:	18c00003 	ldbu	r3,0(r3)
  8034bc:	18c03fcc 	andi	r3,r3,255
  8034c0:	1806923a 	slli	r3,r3,8
  8034c4:	10c6b03a 	or	r3,r2,r3
  8034c8:	e0bffe17 	ldw	r2,-8(fp)
  8034cc:	10801983 	ldbu	r2,102(r2)
  8034d0:	10803fcc 	andi	r2,r2,255
  8034d4:	1886b03a 	or	r3,r3,r2
  8034d8:	00804034 	movhi	r2,256
  8034dc:	10bfffc4 	addi	r2,r2,-1
  8034e0:	1886703a 	and	r3,r3,r2
  8034e4:	00801534 	movhi	r2,84
  8034e8:	10905184 	addi	r2,r2,16710
  8034ec:	1880021e 	bne	r3,r2,8034f8 <check_fs+0x114>
      return 0;
  8034f0:	0005883a 	mov	r2,zero
  8034f4:	00002106 	br	80357c <check_fs+0x198>
   if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  8034f8:	e0bffe17 	ldw	r2,-8(fp)
  8034fc:	10802084 	addi	r2,r2,130
  803500:	108000c4 	addi	r2,r2,3
  803504:	10800003 	ldbu	r2,0(r2)
  803508:	10803fcc 	andi	r2,r2,255
  80350c:	1006963a 	slli	r3,r2,24
  803510:	e0bffe17 	ldw	r2,-8(fp)
  803514:	10802084 	addi	r2,r2,130
  803518:	10800084 	addi	r2,r2,2
  80351c:	10800003 	ldbu	r2,0(r2)
  803520:	10803fcc 	andi	r2,r2,255
  803524:	1004943a 	slli	r2,r2,16
  803528:	1884b03a 	or	r2,r3,r2
  80352c:	e0fffe17 	ldw	r3,-8(fp)
  803530:	18c02084 	addi	r3,r3,130
  803534:	18c00044 	addi	r3,r3,1
  803538:	18c00003 	ldbu	r3,0(r3)
  80353c:	18c03fcc 	andi	r3,r3,255
  803540:	1806923a 	slli	r3,r3,8
  803544:	10c6b03a 	or	r3,r2,r3
  803548:	e0bffe17 	ldw	r2,-8(fp)
  80354c:	10802083 	ldbu	r2,130(r2)
  803550:	10803fcc 	andi	r2,r2,255
  803554:	1886b03a 	or	r3,r3,r2
  803558:	00804034 	movhi	r2,256
  80355c:	10bfffc4 	addi	r2,r2,-1
  803560:	1886703a 	and	r3,r3,r2
  803564:	00801534 	movhi	r2,84
  803568:	10905184 	addi	r2,r2,16710
  80356c:	1880021e 	bne	r3,r2,803578 <check_fs+0x194>
      return 0;
  803570:	0005883a 	mov	r2,zero
  803574:	00000106 	br	80357c <check_fs+0x198>

   return 1;
  803578:	00800044 	movi	r2,1
}
  80357c:	e037883a 	mov	sp,fp
  803580:	dfc00117 	ldw	ra,4(sp)
  803584:	df000017 	ldw	fp,0(sp)
  803588:	dec00204 	addi	sp,sp,8
  80358c:	f800283a 	ret

00803590 <chk_mounted>:
FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR **path,  /* Pointer to pointer to the path name (drive number) */
   FATFS **rfs,      /* Pointer to pointer to the found file system object */
   uint8_t chk_wp       /* !=0: Check media write protection for write access */
)
{
  803590:	deffee04 	addi	sp,sp,-72
  803594:	dfc01115 	stw	ra,68(sp)
  803598:	df001015 	stw	fp,64(sp)
  80359c:	df001004 	addi	fp,sp,64
  8035a0:	e13ffd15 	stw	r4,-12(fp)
  8035a4:	e17ffe15 	stw	r5,-8(fp)
  8035a8:	3005883a 	mov	r2,r6
  8035ac:	e0bfff05 	stb	r2,-4(fp)
   uint8_t fmt, b, pi, *tbl;
   uint32_t vol;
   DSTATUS stat;
   uint32_t bsect, fasize, tsect, sysect, nclst, szbfat;
   uint16_t nrsv;
   const TCHAR *p = *path;
  8035b0:	e0bffd17 	ldw	r2,-12(fp)
  8035b4:	10800017 	ldw	r2,0(r2)
  8035b8:	e0bff615 	stw	r2,-40(fp)
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
  8035bc:	e0bff617 	ldw	r2,-40(fp)
  8035c0:	10800003 	ldbu	r2,0(r2)
  8035c4:	10803fcc 	andi	r2,r2,255
  8035c8:	1080201c 	xori	r2,r2,128
  8035cc:	10bfe004 	addi	r2,r2,-128
  8035d0:	10bff404 	addi	r2,r2,-48
  8035d4:	e0bff115 	stw	r2,-60(fp)
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
  8035d8:	e0bff117 	ldw	r2,-60(fp)
  8035dc:	108002a8 	cmpgeui	r2,r2,10
  8035e0:	10000f1e 	bne	r2,zero,803620 <chk_mounted+0x90>
  8035e4:	e0bff617 	ldw	r2,-40(fp)
  8035e8:	10800044 	addi	r2,r2,1
  8035ec:	10800003 	ldbu	r2,0(r2)
  8035f0:	10803fcc 	andi	r2,r2,255
  8035f4:	1080201c 	xori	r2,r2,128
  8035f8:	10bfe004 	addi	r2,r2,-128
  8035fc:	10800e98 	cmpnei	r2,r2,58
  803600:	1000071e 	bne	r2,zero,803620 <chk_mounted+0x90>
      p += 2; *path = p;            /* Return pointer to the path name */
  803604:	e0bff617 	ldw	r2,-40(fp)
  803608:	10800084 	addi	r2,r2,2
  80360c:	e0bff615 	stw	r2,-40(fp)
  803610:	e0bffd17 	ldw	r2,-12(fp)
  803614:	e0fff617 	ldw	r3,-40(fp)
  803618:	10c00015 	stw	r3,0(r2)
  80361c:	00000106 	br	803624 <chk_mounted+0x94>
   } else {                   /* No drive number is given */
#if _FS_RPATH
      vol = CurrVol;             /* Use current drive */
#else
      vol = 0;                /* Use drive 0 */
  803620:	e03ff115 	stw	zero,-60(fp)
#endif
   }

   /* Check if the file system object is valid or not */
   if (vol >= _VOLUMES)             /* Is the drive number valid? */
  803624:	e0bff117 	ldw	r2,-60(fp)
  803628:	10000226 	beq	r2,zero,803634 <chk_mounted+0xa4>
      return FR_INVALID_DRIVE;
  80362c:	008002c4 	movi	r2,11
  803630:	00022206 	br	803ebc <chk_mounted+0x92c>
   *rfs = fs = FatFs[vol];          /* Return pointer to the corresponding file system object */
  803634:	e0bff117 	ldw	r2,-60(fp)
  803638:	1085883a 	add	r2,r2,r2
  80363c:	1087883a 	add	r3,r2,r2
  803640:	d0a35b04 	addi	r2,gp,-29332
  803644:	1885883a 	add	r2,r3,r2
  803648:	10800017 	ldw	r2,0(r2)
  80364c:	e0bff715 	stw	r2,-36(fp)
  803650:	e0bffe17 	ldw	r2,-8(fp)
  803654:	e0fff717 	ldw	r3,-36(fp)
  803658:	10c00015 	stw	r3,0(r2)
   if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
  80365c:	e0bff717 	ldw	r2,-36(fp)
  803660:	1000021e 	bne	r2,zero,80366c <chk_mounted+0xdc>
  803664:	00800304 	movi	r2,12
  803668:	00021406 	br	803ebc <chk_mounted+0x92c>

   ENTER_FF(fs);                 /* Lock file system */

   if (fs->fs_type) {               /* If the logical drive has been mounted */
  80366c:	e0bff717 	ldw	r2,-36(fp)
  803670:	10800003 	ldbu	r2,0(r2)
  803674:	10803fcc 	andi	r2,r2,255
  803678:	10001226 	beq	r2,zero,8036c4 <chk_mounted+0x134>
      stat = disk_status(fs->drv);
  80367c:	e0bff717 	ldw	r2,-36(fp)
  803680:	10800043 	ldbu	r2,1(r2)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1009883a 	mov	r4,r2
  80368c:	0800de00 	call	800de0 <ffs_DiskIOStatus>
  803690:	e0bff805 	stb	r2,-32(fp)
      if (!(stat & STA_NOINIT)) {      /* and the physical drive is kept initialized (has not been changed), */
  803694:	e0bff803 	ldbu	r2,-32(fp)
  803698:	1080004c 	andi	r2,r2,1
  80369c:	1000091e 	bne	r2,zero,8036c4 <chk_mounted+0x134>
         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
  8036a0:	e0bfff03 	ldbu	r2,-4(fp)
  8036a4:	10000526 	beq	r2,zero,8036bc <chk_mounted+0x12c>
  8036a8:	e0bff803 	ldbu	r2,-32(fp)
  8036ac:	1080010c 	andi	r2,r2,4
  8036b0:	10000226 	beq	r2,zero,8036bc <chk_mounted+0x12c>
            return FR_WRITE_PROTECTED;
  8036b4:	00800284 	movi	r2,10
  8036b8:	00020006 	br	803ebc <chk_mounted+0x92c>
         return FR_OK;           /* The file system object is valid */
  8036bc:	0005883a 	mov	r2,zero
  8036c0:	0001fe06 	br	803ebc <chk_mounted+0x92c>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;              /* Clear the file system object */
  8036c4:	e0bff717 	ldw	r2,-36(fp)
  8036c8:	10000005 	stb	zero,0(r2)
   fs->drv = LD2PD(vol);            /* Bind the logical drive and a physical drive */
  8036cc:	e0bff117 	ldw	r2,-60(fp)
  8036d0:	1007883a 	mov	r3,r2
  8036d4:	e0bff717 	ldw	r2,-36(fp)
  8036d8:	10c00045 	stb	r3,1(r2)
   stat = disk_initialize(fs->drv); /* Initialize low level disk I/O layer */
  8036dc:	e0bff717 	ldw	r2,-36(fp)
  8036e0:	10800043 	ldbu	r2,1(r2)
  8036e4:	10803fcc 	andi	r2,r2,255
  8036e8:	1009883a 	mov	r4,r2
  8036ec:	0800b840 	call	800b84 <ffs_DiskIOInitialize>
  8036f0:	e0bff805 	stb	r2,-32(fp)
   if (stat & STA_NOINIT)           /* Check if the initialization succeeded */
  8036f4:	e0bff803 	ldbu	r2,-32(fp)
  8036f8:	1080004c 	andi	r2,r2,1
  8036fc:	10000226 	beq	r2,zero,803708 <chk_mounted+0x178>
      return FR_NOT_READY;       /* Failed to initialize due to no media or hard error */
  803700:	008000c4 	movi	r2,3
  803704:	0001ed06 	br	803ebc <chk_mounted+0x92c>
   if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check disk write protection if needed */
  803708:	e0bfff03 	ldbu	r2,-4(fp)
  80370c:	10000526 	beq	r2,zero,803724 <chk_mounted+0x194>
  803710:	e0bff803 	ldbu	r2,-32(fp)
  803714:	1080010c 	andi	r2,r2,4
  803718:	10000226 	beq	r2,zero,803724 <chk_mounted+0x194>
      return FR_WRITE_PROTECTED;
  80371c:	00800284 	movi	r2,10
  803720:	0001e606 	br	803ebc <chk_mounted+0x92c>
#if _MAX_SS != 512                  /* Get disk sector size (variable sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
      return FR_DISK_ERR;
#endif
   /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  803724:	e03ff215 	stw	zero,-56(fp)
  803728:	e17ff217 	ldw	r5,-56(fp)
  80372c:	e13ff717 	ldw	r4,-36(fp)
  803730:	08033e40 	call	8033e4 <check_fs>
  803734:	e0bff005 	stb	r2,-64(fp)
   if (LD2PT(vol) && !fmt) fmt = 1; /* Force non-SFD if the volume is forced partition */
   if (fmt == 1) {                  /* Not an FAT-VBR, the physical drive can be partitioned */
  803738:	e0bff003 	ldbu	r2,-64(fp)
  80373c:	10800058 	cmpnei	r2,r2,1
  803740:	10002d1e 	bne	r2,zero,8037f8 <chk_mounted+0x268>
      /* Check the partition listed in the partition table */
      pi = LD2PT(vol);
  803744:	e03ff045 	stb	zero,-63(fp)
      if (pi) pi--;
  803748:	e0bff043 	ldbu	r2,-63(fp)
  80374c:	10000326 	beq	r2,zero,80375c <chk_mounted+0x1cc>
  803750:	e0bff043 	ldbu	r2,-63(fp)
  803754:	10bfffc4 	addi	r2,r2,-1
  803758:	e0bff045 	stb	r2,-63(fp)
      tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  80375c:	e0bff043 	ldbu	r2,-63(fp)
  803760:	1004913a 	slli	r2,r2,4
  803764:	10806f84 	addi	r2,r2,446
  803768:	10800c04 	addi	r2,r2,48
  80376c:	e0fff717 	ldw	r3,-36(fp)
  803770:	1885883a 	add	r2,r3,r2
  803774:	e0bff915 	stw	r2,-28(fp)
      if (tbl[4]) {                 /* Is the partition existing? */
  803778:	e0bff917 	ldw	r2,-28(fp)
  80377c:	10800104 	addi	r2,r2,4
  803780:	10800003 	ldbu	r2,0(r2)
  803784:	10803fcc 	andi	r2,r2,255
  803788:	10001b26 	beq	r2,zero,8037f8 <chk_mounted+0x268>
         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
  80378c:	e0bff917 	ldw	r2,-28(fp)
  803790:	108002c4 	addi	r2,r2,11
  803794:	10800003 	ldbu	r2,0(r2)
  803798:	10803fcc 	andi	r2,r2,255
  80379c:	1006963a 	slli	r3,r2,24
  8037a0:	e0bff917 	ldw	r2,-28(fp)
  8037a4:	10800284 	addi	r2,r2,10
  8037a8:	10800003 	ldbu	r2,0(r2)
  8037ac:	10803fcc 	andi	r2,r2,255
  8037b0:	1004943a 	slli	r2,r2,16
  8037b4:	1884b03a 	or	r2,r3,r2
  8037b8:	e0fff917 	ldw	r3,-28(fp)
  8037bc:	18c00244 	addi	r3,r3,9
  8037c0:	18c00003 	ldbu	r3,0(r3)
  8037c4:	18c03fcc 	andi	r3,r3,255
  8037c8:	1806923a 	slli	r3,r3,8
  8037cc:	10c6b03a 	or	r3,r2,r3
  8037d0:	e0bff917 	ldw	r2,-28(fp)
  8037d4:	10800204 	addi	r2,r2,8
  8037d8:	10800003 	ldbu	r2,0(r2)
  8037dc:	10803fcc 	andi	r2,r2,255
  8037e0:	1884b03a 	or	r2,r3,r2
  8037e4:	e0bff215 	stw	r2,-56(fp)
         fmt = check_fs(fs, bsect);    /* Check the partition */
  8037e8:	e17ff217 	ldw	r5,-56(fp)
  8037ec:	e13ff717 	ldw	r4,-36(fp)
  8037f0:	08033e40 	call	8033e4 <check_fs>
  8037f4:	e0bff005 	stb	r2,-64(fp)
      }
   }
   if (fmt == 3) return FR_DISK_ERR;
  8037f8:	e0bff003 	ldbu	r2,-64(fp)
  8037fc:	108000d8 	cmpnei	r2,r2,3
  803800:	1000021e 	bne	r2,zero,80380c <chk_mounted+0x27c>
  803804:	00800044 	movi	r2,1
  803808:	0001ac06 	br	803ebc <chk_mounted+0x92c>
   if (fmt) return FR_NO_FILESYSTEM;      /* No FAT volume is found */
  80380c:	e0bff003 	ldbu	r2,-64(fp)
  803810:	10000226 	beq	r2,zero,80381c <chk_mounted+0x28c>
  803814:	00800344 	movi	r2,13
  803818:	0001a806 	br	803ebc <chk_mounted+0x92c>

   /* An FAT volume is found. Following code initializes the file system object */

   if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))     /* (BPB_BytsPerSec must be equal to the physical sector size) */
  80381c:	e0bff717 	ldw	r2,-36(fp)
  803820:	10800f03 	ldbu	r2,60(r2)
  803824:	10803fcc 	andi	r2,r2,255
  803828:	1004923a 	slli	r2,r2,8
  80382c:	1007883a 	mov	r3,r2
  803830:	e0bff717 	ldw	r2,-36(fp)
  803834:	10800ec3 	ldbu	r2,59(r2)
  803838:	10803fcc 	andi	r2,r2,255
  80383c:	1884b03a 	or	r2,r3,r2
  803840:	10bfffcc 	andi	r2,r2,65535
  803844:	10a0001c 	xori	r2,r2,32768
  803848:	10a00004 	addi	r2,r2,-32768
  80384c:	10808020 	cmpeqi	r2,r2,512
  803850:	1000021e 	bne	r2,zero,80385c <chk_mounted+0x2cc>
      return FR_NO_FILESYSTEM;
  803854:	00800344 	movi	r2,13
  803858:	00019806 	br	803ebc <chk_mounted+0x92c>

   fasize = LD_WORD(fs->win+BPB_FATSz16);          /* Number of sectors per FAT */
  80385c:	e0bff717 	ldw	r2,-36(fp)
  803860:	108011c3 	ldbu	r2,71(r2)
  803864:	10803fcc 	andi	r2,r2,255
  803868:	1004923a 	slli	r2,r2,8
  80386c:	1007883a 	mov	r3,r2
  803870:	e0bff717 	ldw	r2,-36(fp)
  803874:	10801183 	ldbu	r2,70(r2)
  803878:	10803fcc 	andi	r2,r2,255
  80387c:	1884b03a 	or	r2,r3,r2
  803880:	10bfffcc 	andi	r2,r2,65535
  803884:	e0bff315 	stw	r2,-52(fp)
   if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  803888:	e0bff317 	ldw	r2,-52(fp)
  80388c:	1000131e 	bne	r2,zero,8038dc <chk_mounted+0x34c>
  803890:	e0bff717 	ldw	r2,-36(fp)
  803894:	108015c3 	ldbu	r2,87(r2)
  803898:	10803fcc 	andi	r2,r2,255
  80389c:	1006963a 	slli	r3,r2,24
  8038a0:	e0bff717 	ldw	r2,-36(fp)
  8038a4:	10801583 	ldbu	r2,86(r2)
  8038a8:	10803fcc 	andi	r2,r2,255
  8038ac:	1004943a 	slli	r2,r2,16
  8038b0:	1884b03a 	or	r2,r3,r2
  8038b4:	e0fff717 	ldw	r3,-36(fp)
  8038b8:	18c01543 	ldbu	r3,85(r3)
  8038bc:	18c03fcc 	andi	r3,r3,255
  8038c0:	1806923a 	slli	r3,r3,8
  8038c4:	10c6b03a 	or	r3,r2,r3
  8038c8:	e0bff717 	ldw	r2,-36(fp)
  8038cc:	10801503 	ldbu	r2,84(r2)
  8038d0:	10803fcc 	andi	r2,r2,255
  8038d4:	1884b03a 	or	r2,r3,r2
  8038d8:	e0bff315 	stw	r2,-52(fp)
   fs->fsize = fasize;
  8038dc:	e0bff717 	ldw	r2,-36(fp)
  8038e0:	e0fff317 	ldw	r3,-52(fp)
  8038e4:	10c00715 	stw	r3,28(r2)

   fs->n_fats = b = fs->win[BPB_NumFATs];          /* Number of FAT copies */
  8038e8:	e0bff717 	ldw	r2,-36(fp)
  8038ec:	10801003 	ldbu	r2,64(r2)
  8038f0:	e0bffa05 	stb	r2,-24(fp)
  8038f4:	e0bff717 	ldw	r2,-36(fp)
  8038f8:	e0fffa03 	ldbu	r3,-24(fp)
  8038fc:	10c000c5 	stb	r3,3(r2)
   if (b != 1 && b != 2) return FR_NO_FILESYSTEM;     /* (Must be 1 or 2) */
  803900:	e0bffa03 	ldbu	r2,-24(fp)
  803904:	10800060 	cmpeqi	r2,r2,1
  803908:	1000051e 	bne	r2,zero,803920 <chk_mounted+0x390>
  80390c:	e0bffa03 	ldbu	r2,-24(fp)
  803910:	108000a0 	cmpeqi	r2,r2,2
  803914:	1000021e 	bne	r2,zero,803920 <chk_mounted+0x390>
  803918:	00800344 	movi	r2,13
  80391c:	00016706 	br	803ebc <chk_mounted+0x92c>
   fasize *= b;                              /* Number of sectors for FAT area */
  803920:	e0bffa03 	ldbu	r2,-24(fp)
  803924:	e0fff317 	ldw	r3,-52(fp)
  803928:	1885383a 	mul	r2,r3,r2
  80392c:	e0bff315 	stw	r2,-52(fp)

   fs->csize = b = fs->win[BPB_SecPerClus];        /* Number of sectors per cluster */
  803930:	e0bff717 	ldw	r2,-36(fp)
  803934:	10800f43 	ldbu	r2,61(r2)
  803938:	e0bffa05 	stb	r2,-24(fp)
  80393c:	e0bff717 	ldw	r2,-36(fp)
  803940:	e0fffa03 	ldbu	r3,-24(fp)
  803944:	10c00085 	stb	r3,2(r2)
   if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;  /* (Must be power of 2) */
  803948:	e0bffa03 	ldbu	r2,-24(fp)
  80394c:	10000526 	beq	r2,zero,803964 <chk_mounted+0x3d4>
  803950:	e0fffa03 	ldbu	r3,-24(fp)
  803954:	e0bffa03 	ldbu	r2,-24(fp)
  803958:	10bfffc4 	addi	r2,r2,-1
  80395c:	1884703a 	and	r2,r3,r2
  803960:	10000226 	beq	r2,zero,80396c <chk_mounted+0x3dc>
  803964:	00800344 	movi	r2,13
  803968:	00015406 	br	803ebc <chk_mounted+0x92c>

   fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);   /* Number of root directory entries */
  80396c:	e0bff717 	ldw	r2,-36(fp)
  803970:	10801083 	ldbu	r2,66(r2)
  803974:	10803fcc 	andi	r2,r2,255
  803978:	1004923a 	slli	r2,r2,8
  80397c:	1007883a 	mov	r3,r2
  803980:	e0bff717 	ldw	r2,-36(fp)
  803984:	10801043 	ldbu	r2,65(r2)
  803988:	10803fcc 	andi	r2,r2,255
  80398c:	1884b03a 	or	r2,r3,r2
  803990:	1007883a 	mov	r3,r2
  803994:	e0bff717 	ldw	r2,-36(fp)
  803998:	10c0020d 	sth	r3,8(r2)
   if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be sector aligned) */
  80399c:	e0bff717 	ldw	r2,-36(fp)
  8039a0:	1080020b 	ldhu	r2,8(r2)
  8039a4:	108003cc 	andi	r2,r2,15
  8039a8:	10bfffcc 	andi	r2,r2,65535
  8039ac:	10000226 	beq	r2,zero,8039b8 <chk_mounted+0x428>
  8039b0:	00800344 	movi	r2,13
  8039b4:	00014106 	br	803ebc <chk_mounted+0x92c>

   tsect = LD_WORD(fs->win+BPB_TotSec16);          /* Number of sectors on the volume */
  8039b8:	e0bff717 	ldw	r2,-36(fp)
  8039bc:	10801103 	ldbu	r2,68(r2)
  8039c0:	10803fcc 	andi	r2,r2,255
  8039c4:	1004923a 	slli	r2,r2,8
  8039c8:	1007883a 	mov	r3,r2
  8039cc:	e0bff717 	ldw	r2,-36(fp)
  8039d0:	108010c3 	ldbu	r2,67(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1884b03a 	or	r2,r3,r2
  8039dc:	10bfffcc 	andi	r2,r2,65535
  8039e0:	e0bff415 	stw	r2,-48(fp)
   if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  8039e4:	e0bff417 	ldw	r2,-48(fp)
  8039e8:	1000131e 	bne	r2,zero,803a38 <chk_mounted+0x4a8>
  8039ec:	e0bff717 	ldw	r2,-36(fp)
  8039f0:	108014c3 	ldbu	r2,83(r2)
  8039f4:	10803fcc 	andi	r2,r2,255
  8039f8:	1006963a 	slli	r3,r2,24
  8039fc:	e0bff717 	ldw	r2,-36(fp)
  803a00:	10801483 	ldbu	r2,82(r2)
  803a04:	10803fcc 	andi	r2,r2,255
  803a08:	1004943a 	slli	r2,r2,16
  803a0c:	1884b03a 	or	r2,r3,r2
  803a10:	e0fff717 	ldw	r3,-36(fp)
  803a14:	18c01443 	ldbu	r3,81(r3)
  803a18:	18c03fcc 	andi	r3,r3,255
  803a1c:	1806923a 	slli	r3,r3,8
  803a20:	10c6b03a 	or	r3,r2,r3
  803a24:	e0bff717 	ldw	r2,-36(fp)
  803a28:	10801403 	ldbu	r2,80(r2)
  803a2c:	10803fcc 	andi	r2,r2,255
  803a30:	1884b03a 	or	r2,r3,r2
  803a34:	e0bff415 	stw	r2,-48(fp)

   nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);            /* Number of reserved sectors */
  803a38:	e0bff717 	ldw	r2,-36(fp)
  803a3c:	10800fc3 	ldbu	r2,63(r2)
  803a40:	10803fcc 	andi	r2,r2,255
  803a44:	1004923a 	slli	r2,r2,8
  803a48:	1007883a 	mov	r3,r2
  803a4c:	e0bff717 	ldw	r2,-36(fp)
  803a50:	10800f83 	ldbu	r2,62(r2)
  803a54:	10803fcc 	andi	r2,r2,255
  803a58:	1884b03a 	or	r2,r3,r2
  803a5c:	e0bffa8d 	sth	r2,-22(fp)
   if (!nrsv) return FR_NO_FILESYSTEM;             /* (BPB_RsvdSecCnt must not be 0) */
  803a60:	e0bffa8b 	ldhu	r2,-22(fp)
  803a64:	1000021e 	bne	r2,zero,803a70 <chk_mounted+0x4e0>
  803a68:	00800344 	movi	r2,13
  803a6c:	00011306 	br	803ebc <chk_mounted+0x92c>

   /* Determine the FAT sub type */
   sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
  803a70:	e0fffa8b 	ldhu	r3,-22(fp)
  803a74:	e0bff317 	ldw	r2,-52(fp)
  803a78:	1887883a 	add	r3,r3,r2
  803a7c:	e0bff717 	ldw	r2,-36(fp)
  803a80:	1080020b 	ldhu	r2,8(r2)
  803a84:	10bfffcc 	andi	r2,r2,65535
  803a88:	1004d13a 	srli	r2,r2,4
  803a8c:	10bfffcc 	andi	r2,r2,65535
  803a90:	1885883a 	add	r2,r3,r2
  803a94:	e0bffb15 	stw	r2,-20(fp)
   if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
  803a98:	e0fff417 	ldw	r3,-48(fp)
  803a9c:	e0bffb17 	ldw	r2,-20(fp)
  803aa0:	1880022e 	bgeu	r3,r2,803aac <chk_mounted+0x51c>
  803aa4:	00800344 	movi	r2,13
  803aa8:	00010406 	br	803ebc <chk_mounted+0x92c>
   nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
  803aac:	e0fff417 	ldw	r3,-48(fp)
  803ab0:	e0bffb17 	ldw	r2,-20(fp)
  803ab4:	1887c83a 	sub	r3,r3,r2
  803ab8:	e0bff717 	ldw	r2,-36(fp)
  803abc:	10800083 	ldbu	r2,2(r2)
  803ac0:	10803fcc 	andi	r2,r2,255
  803ac4:	100b883a 	mov	r5,r2
  803ac8:	1809883a 	mov	r4,r3
  803acc:	080a3580 	call	80a358 <__udivsi3>
  803ad0:	e0bffc15 	stw	r2,-16(fp)
   if (!nclst) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	1000021e 	bne	r2,zero,803ae4 <chk_mounted+0x554>
  803adc:	00800344 	movi	r2,13
  803ae0:	0000f606 	br	803ebc <chk_mounted+0x92c>
   fmt = FS_FAT12;
  803ae4:	00800044 	movi	r2,1
  803ae8:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  803aec:	e0bffc17 	ldw	r2,-16(fp)
  803af0:	1083fdb0 	cmpltui	r2,r2,4086
  803af4:	1000021e 	bne	r2,zero,803b00 <chk_mounted+0x570>
  803af8:	00800084 	movi	r2,2
  803afc:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  803b00:	e0bffc17 	ldw	r2,-16(fp)
  803b04:	10bffdb0 	cmpltui	r2,r2,65526
  803b08:	1000021e 	bne	r2,zero,803b14 <chk_mounted+0x584>
  803b0c:	008000c4 	movi	r2,3
  803b10:	e0bff005 	stb	r2,-64(fp)

   /* Boundaries and Limits */
   fs->n_fatent = nclst + 2;                    /* Number of FAT entries */
  803b14:	e0bffc17 	ldw	r2,-16(fp)
  803b18:	10c00084 	addi	r3,r2,2
  803b1c:	e0bff717 	ldw	r2,-36(fp)
  803b20:	10c00615 	stw	r3,24(r2)
   fs->database = bsect + sysect;                  /* Data start sector */
  803b24:	e0fff217 	ldw	r3,-56(fp)
  803b28:	e0bffb17 	ldw	r2,-20(fp)
  803b2c:	1887883a 	add	r3,r3,r2
  803b30:	e0bff717 	ldw	r2,-36(fp)
  803b34:	10c00a15 	stw	r3,40(r2)
   fs->fatbase = bsect + nrsv;                  /* FAT start sector */
  803b38:	e0fffa8b 	ldhu	r3,-22(fp)
  803b3c:	e0bff217 	ldw	r2,-56(fp)
  803b40:	1887883a 	add	r3,r3,r2
  803b44:	e0bff717 	ldw	r2,-36(fp)
  803b48:	10c00815 	stw	r3,32(r2)
   if (fmt == FS_FAT32) {
  803b4c:	e0bff003 	ldbu	r2,-64(fp)
  803b50:	108000d8 	cmpnei	r2,r2,3
  803b54:	1000201e 	bne	r2,zero,803bd8 <chk_mounted+0x648>
      if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
  803b58:	e0bff717 	ldw	r2,-36(fp)
  803b5c:	1080020b 	ldhu	r2,8(r2)
  803b60:	10bfffcc 	andi	r2,r2,65535
  803b64:	10000226 	beq	r2,zero,803b70 <chk_mounted+0x5e0>
  803b68:	00800344 	movi	r2,13
  803b6c:	0000d306 	br	803ebc <chk_mounted+0x92c>
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
  803b70:	e0bff717 	ldw	r2,-36(fp)
  803b74:	108017c3 	ldbu	r2,95(r2)
  803b78:	10803fcc 	andi	r2,r2,255
  803b7c:	1006963a 	slli	r3,r2,24
  803b80:	e0bff717 	ldw	r2,-36(fp)
  803b84:	10801783 	ldbu	r2,94(r2)
  803b88:	10803fcc 	andi	r2,r2,255
  803b8c:	1004943a 	slli	r2,r2,16
  803b90:	1884b03a 	or	r2,r3,r2
  803b94:	e0fff717 	ldw	r3,-36(fp)
  803b98:	18c01743 	ldbu	r3,93(r3)
  803b9c:	18c03fcc 	andi	r3,r3,255
  803ba0:	1806923a 	slli	r3,r3,8
  803ba4:	10c6b03a 	or	r3,r2,r3
  803ba8:	e0bff717 	ldw	r2,-36(fp)
  803bac:	10801703 	ldbu	r2,92(r2)
  803bb0:	10803fcc 	andi	r2,r2,255
  803bb4:	1886b03a 	or	r3,r3,r2
  803bb8:	e0bff717 	ldw	r2,-36(fp)
  803bbc:	10c00915 	stw	r3,36(r2)
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
  803bc0:	e0bff717 	ldw	r2,-36(fp)
  803bc4:	10800617 	ldw	r2,24(r2)
  803bc8:	1085883a 	add	r2,r2,r2
  803bcc:	1085883a 	add	r2,r2,r2
  803bd0:	e0bff515 	stw	r2,-44(fp)
  803bd4:	00001e06 	br	803c50 <chk_mounted+0x6c0>
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
  803bd8:	e0bff717 	ldw	r2,-36(fp)
  803bdc:	1080020b 	ldhu	r2,8(r2)
  803be0:	10bfffcc 	andi	r2,r2,65535
  803be4:	1000021e 	bne	r2,zero,803bf0 <chk_mounted+0x660>
  803be8:	00800344 	movi	r2,13
  803bec:	0000b306 	br	803ebc <chk_mounted+0x92c>
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
  803bf0:	e0bff717 	ldw	r2,-36(fp)
  803bf4:	10c00817 	ldw	r3,32(r2)
  803bf8:	e0bff317 	ldw	r2,-52(fp)
  803bfc:	1887883a 	add	r3,r3,r2
  803c00:	e0bff717 	ldw	r2,-36(fp)
  803c04:	10c00915 	stw	r3,36(r2)
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  803c08:	e0bff003 	ldbu	r2,-64(fp)
  803c0c:	10800098 	cmpnei	r2,r2,2
  803c10:	1000041e 	bne	r2,zero,803c24 <chk_mounted+0x694>
  803c14:	e0bff717 	ldw	r2,-36(fp)
  803c18:	10800617 	ldw	r2,24(r2)
  803c1c:	1085883a 	add	r2,r2,r2
  803c20:	00000a06 	br	803c4c <chk_mounted+0x6bc>
  803c24:	e0bff717 	ldw	r2,-36(fp)
  803c28:	10c00617 	ldw	r3,24(r2)
  803c2c:	1805883a 	mov	r2,r3
  803c30:	1085883a 	add	r2,r2,r2
  803c34:	10c5883a 	add	r2,r2,r3
  803c38:	1006d07a 	srli	r3,r2,1
  803c3c:	e0bff717 	ldw	r2,-36(fp)
  803c40:	10800617 	ldw	r2,24(r2)
  803c44:	1080004c 	andi	r2,r2,1
  803c48:	1885883a 	add	r2,r3,r2
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
  803c4c:	e0bff515 	stw	r2,-44(fp)
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   }
   if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))  /* (BPB_FATSz must not be less than required) */
  803c50:	e0bff717 	ldw	r2,-36(fp)
  803c54:	10c00717 	ldw	r3,28(r2)
  803c58:	e0bff517 	ldw	r2,-44(fp)
  803c5c:	10807fc4 	addi	r2,r2,511
  803c60:	1004d27a 	srli	r2,r2,9
  803c64:	1880022e 	bgeu	r3,r2,803c70 <chk_mounted+0x6e0>
      return FR_NO_FILESYSTEM;
  803c68:	00800344 	movi	r2,13
  803c6c:	00009306 	br	803ebc <chk_mounted+0x92c>

#if !_FS_READONLY
   /* Initialize cluster allocation information */
   fs->free_clust = 0xFFFFFFFF;
  803c70:	e0bff717 	ldw	r2,-36(fp)
  803c74:	00ffffc4 	movi	r3,-1
  803c78:	10c00415 	stw	r3,16(r2)
   fs->last_clust = 0;
  803c7c:	e0bff717 	ldw	r2,-36(fp)
  803c80:	10000315 	stw	zero,12(r2)

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
  803c84:	e0bff003 	ldbu	r2,-64(fp)
  803c88:	108000d8 	cmpnei	r2,r2,3
  803c8c:	10007d1e 	bne	r2,zero,803e84 <chk_mounted+0x8f4>
      fs->fsi_flag = 0;
  803c90:	e0bff717 	ldw	r2,-36(fp)
  803c94:	10000145 	stb	zero,5(r2)
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  803c98:	e0bff717 	ldw	r2,-36(fp)
  803c9c:	10801843 	ldbu	r2,97(r2)
  803ca0:	10803fcc 	andi	r2,r2,255
  803ca4:	1004923a 	slli	r2,r2,8
  803ca8:	1007883a 	mov	r3,r2
  803cac:	e0bff717 	ldw	r2,-36(fp)
  803cb0:	10801803 	ldbu	r2,96(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1884b03a 	or	r2,r3,r2
  803cbc:	10ffffcc 	andi	r3,r2,65535
  803cc0:	e0bff217 	ldw	r2,-56(fp)
  803cc4:	1887883a 	add	r3,r3,r2
  803cc8:	e0bff717 	ldw	r2,-36(fp)
  803ccc:	10c00515 	stw	r3,20(r2)
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  803cd0:	e0bff717 	ldw	r2,-36(fp)
  803cd4:	10800043 	ldbu	r2,1(r2)
  803cd8:	10c03fcc 	andi	r3,r2,255
  803cdc:	e0bff717 	ldw	r2,-36(fp)
  803ce0:	11000c04 	addi	r4,r2,48
  803ce4:	e0bff717 	ldw	r2,-36(fp)
  803ce8:	10800517 	ldw	r2,20(r2)
  803cec:	01c00044 	movi	r7,1
  803cf0:	100d883a 	mov	r6,r2
  803cf4:	200b883a 	mov	r5,r4
  803cf8:	1809883a 	mov	r4,r3
  803cfc:	0800e080 	call	800e08 <ffs_DiskIORead>
  803d00:	1000601e 	bne	r2,zero,803e84 <chk_mounted+0x8f4>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  803d04:	e0bff717 	ldw	r2,-36(fp)
  803d08:	10808bc3 	ldbu	r2,559(r2)
  803d0c:	10803fcc 	andi	r2,r2,255
  803d10:	1004923a 	slli	r2,r2,8
  803d14:	1007883a 	mov	r3,r2
  803d18:	e0bff717 	ldw	r2,-36(fp)
  803d1c:	10808b83 	ldbu	r2,558(r2)
  803d20:	10803fcc 	andi	r2,r2,255
  803d24:	1884b03a 	or	r2,r3,r2

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  803d28:	10bfffcc 	andi	r2,r2,65535
  803d2c:	10a0001c 	xori	r2,r2,32768
  803d30:	10a00004 	addi	r2,r2,-32768
  803d34:	10aa9558 	cmpnei	r2,r2,-21931
  803d38:	1000521e 	bne	r2,zero,803e84 <chk_mounted+0x8f4>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  803d3c:	e0bff717 	ldw	r2,-36(fp)
  803d40:	10800cc3 	ldbu	r2,51(r2)
  803d44:	10803fcc 	andi	r2,r2,255
  803d48:	1006963a 	slli	r3,r2,24
  803d4c:	e0bff717 	ldw	r2,-36(fp)
  803d50:	10800c83 	ldbu	r2,50(r2)
  803d54:	10803fcc 	andi	r2,r2,255
  803d58:	1004943a 	slli	r2,r2,16
  803d5c:	1884b03a 	or	r2,r3,r2
  803d60:	e0fff717 	ldw	r3,-36(fp)
  803d64:	18c00c43 	ldbu	r3,49(r3)
  803d68:	18c03fcc 	andi	r3,r3,255
  803d6c:	1806923a 	slli	r3,r3,8
  803d70:	10c6b03a 	or	r3,r2,r3
  803d74:	e0bff717 	ldw	r2,-36(fp)
  803d78:	10800c03 	ldbu	r2,48(r2)
  803d7c:	10803fcc 	andi	r2,r2,255
  803d80:	1886b03a 	or	r3,r3,r2
   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  803d84:	00905874 	movhi	r2,16737
  803d88:	10949484 	addi	r2,r2,21074
  803d8c:	18803d1e 	bne	r3,r2,803e84 <chk_mounted+0x8f4>
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  803d90:	e0bff717 	ldw	r2,-36(fp)
  803d94:	108085c3 	ldbu	r2,535(r2)
  803d98:	10803fcc 	andi	r2,r2,255
  803d9c:	1006963a 	slli	r3,r2,24
  803da0:	e0bff717 	ldw	r2,-36(fp)
  803da4:	10808583 	ldbu	r2,534(r2)
  803da8:	10803fcc 	andi	r2,r2,255
  803dac:	1004943a 	slli	r2,r2,16
  803db0:	1884b03a 	or	r2,r3,r2
  803db4:	e0fff717 	ldw	r3,-36(fp)
  803db8:	18c08543 	ldbu	r3,533(r3)
  803dbc:	18c03fcc 	andi	r3,r3,255
  803dc0:	1806923a 	slli	r3,r3,8
  803dc4:	10c6b03a 	or	r3,r2,r3
  803dc8:	e0bff717 	ldw	r2,-36(fp)
  803dcc:	10808503 	ldbu	r2,532(r2)
  803dd0:	10803fcc 	andi	r2,r2,255
  803dd4:	1886b03a 	or	r3,r3,r2
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  803dd8:	00985074 	movhi	r2,24897
  803ddc:	109c9c84 	addi	r2,r2,29298
  803de0:	1880281e 	bne	r3,r2,803e84 <chk_mounted+0x8f4>
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
            fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  803de4:	e0bff717 	ldw	r2,-36(fp)
  803de8:	108087c3 	ldbu	r2,543(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1006963a 	slli	r3,r2,24
  803df4:	e0bff717 	ldw	r2,-36(fp)
  803df8:	10808783 	ldbu	r2,542(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1004943a 	slli	r2,r2,16
  803e04:	1884b03a 	or	r2,r3,r2
  803e08:	e0fff717 	ldw	r3,-36(fp)
  803e0c:	18c08743 	ldbu	r3,541(r3)
  803e10:	18c03fcc 	andi	r3,r3,255
  803e14:	1806923a 	slli	r3,r3,8
  803e18:	10c6b03a 	or	r3,r2,r3
  803e1c:	e0bff717 	ldw	r2,-36(fp)
  803e20:	10808703 	ldbu	r2,540(r2)
  803e24:	10803fcc 	andi	r2,r2,255
  803e28:	1886b03a 	or	r3,r3,r2
  803e2c:	e0bff717 	ldw	r2,-36(fp)
  803e30:	10c00315 	stw	r3,12(r2)
            fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  803e34:	e0bff717 	ldw	r2,-36(fp)
  803e38:	108086c3 	ldbu	r2,539(r2)
  803e3c:	10803fcc 	andi	r2,r2,255
  803e40:	1006963a 	slli	r3,r2,24
  803e44:	e0bff717 	ldw	r2,-36(fp)
  803e48:	10808683 	ldbu	r2,538(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1004943a 	slli	r2,r2,16
  803e54:	1884b03a 	or	r2,r3,r2
  803e58:	e0fff717 	ldw	r3,-36(fp)
  803e5c:	18c08643 	ldbu	r3,537(r3)
  803e60:	18c03fcc 	andi	r3,r3,255
  803e64:	1806923a 	slli	r3,r3,8
  803e68:	10c6b03a 	or	r3,r2,r3
  803e6c:	e0bff717 	ldw	r2,-36(fp)
  803e70:	10808603 	ldbu	r2,536(r2)
  803e74:	10803fcc 	andi	r2,r2,255
  803e78:	1886b03a 	or	r3,r3,r2
  803e7c:	e0bff717 	ldw	r2,-36(fp)
  803e80:	10c00415 	stw	r3,16(r2)
      }
   }
#endif
   fs->fs_type = fmt;      /* FAT sub-type */
  803e84:	e0bff717 	ldw	r2,-36(fp)
  803e88:	e0fff003 	ldbu	r3,-64(fp)
  803e8c:	10c00005 	stb	r3,0(r2)
   fs->id = ++Fsid;     /* File system mount ID */
  803e90:	d0a35c0b 	ldhu	r2,-29328(gp)
  803e94:	10800044 	addi	r2,r2,1
  803e98:	d0a35c0d 	sth	r2,-29328(gp)
  803e9c:	d0e35c0b 	ldhu	r3,-29328(gp)
  803ea0:	e0bff717 	ldw	r2,-36(fp)
  803ea4:	10c0018d 	sth	r3,6(r2)
   fs->winsect = 0;     /* Invalidate sector cache */
  803ea8:	e0bff717 	ldw	r2,-36(fp)
  803eac:	10000b15 	stw	zero,44(r2)
   fs->wflag = 0;
  803eb0:	e0bff717 	ldw	r2,-36(fp)
  803eb4:	10000105 	stb	zero,4(r2)
#endif
#if _FS_SHARE           /* Clear file lock semaphores */
   clear_lock(fs);
#endif

   return FR_OK;
  803eb8:	0005883a 	mov	r2,zero
}
  803ebc:	e037883a 	mov	sp,fp
  803ec0:	dfc00117 	ldw	ra,4(sp)
  803ec4:	df000017 	ldw	fp,0(sp)
  803ec8:	dec00204 	addi	sp,sp,8
  803ecc:	f800283a 	ret

00803ed0 <validate>:
static
FRESULT validate (   /* FR_OK(0): The object is valid, !=0: Invalid */
   FATFS *fs,     /* Pointer to the file system object */
   uint16_t id        /* Member id of the target object to be checked */
)
{
  803ed0:	defffc04 	addi	sp,sp,-16
  803ed4:	dfc00315 	stw	ra,12(sp)
  803ed8:	df000215 	stw	fp,8(sp)
  803edc:	df000204 	addi	fp,sp,8
  803ee0:	e13ffe15 	stw	r4,-8(fp)
  803ee4:	2805883a 	mov	r2,r5
  803ee8:	e0bfff0d 	sth	r2,-4(fp)
   if (!fs || !fs->fs_type || fs->id != id)
  803eec:	e0bffe17 	ldw	r2,-8(fp)
  803ef0:	10000926 	beq	r2,zero,803f18 <validate+0x48>
  803ef4:	e0bffe17 	ldw	r2,-8(fp)
  803ef8:	10800003 	ldbu	r2,0(r2)
  803efc:	10803fcc 	andi	r2,r2,255
  803f00:	10000526 	beq	r2,zero,803f18 <validate+0x48>
  803f04:	e0bffe17 	ldw	r2,-8(fp)
  803f08:	1080018b 	ldhu	r2,6(r2)
  803f0c:	10ffffcc 	andi	r3,r2,65535
  803f10:	e0bfff0b 	ldhu	r2,-4(fp)
  803f14:	18800226 	beq	r3,r2,803f20 <validate+0x50>
      return FR_INVALID_OBJECT;
  803f18:	00800244 	movi	r2,9
  803f1c:	00000b06 	br	803f4c <validate+0x7c>

   ENTER_FF(fs);     /* Lock file system */

   if (disk_status(fs->drv) & STA_NOINIT)
  803f20:	e0bffe17 	ldw	r2,-8(fp)
  803f24:	10800043 	ldbu	r2,1(r2)
  803f28:	10803fcc 	andi	r2,r2,255
  803f2c:	1009883a 	mov	r4,r2
  803f30:	0800de00 	call	800de0 <ffs_DiskIOStatus>
  803f34:	10803fcc 	andi	r2,r2,255
  803f38:	1080004c 	andi	r2,r2,1
  803f3c:	10000226 	beq	r2,zero,803f48 <validate+0x78>
      return FR_NOT_READY;
  803f40:	008000c4 	movi	r2,3
  803f44:	00000106 	br	803f4c <validate+0x7c>

   return FR_OK;
  803f48:	0005883a 	mov	r2,zero
}
  803f4c:	e037883a 	mov	sp,fp
  803f50:	dfc00117 	ldw	ra,4(sp)
  803f54:	df000017 	ldw	fp,0(sp)
  803f58:	dec00204 	addi	sp,sp,8
  803f5c:	f800283a 	ret

00803f60 <f_mount>:

FRESULT f_mount (
   uint8_t vol,      /* Logical drive number to be mounted/unmounted */
   FATFS *fs      /* Pointer to new file system object (NULL for unmount)*/
)
{
  803f60:	defffc04 	addi	sp,sp,-16
  803f64:	df000315 	stw	fp,12(sp)
  803f68:	df000304 	addi	fp,sp,12
  803f6c:	2005883a 	mov	r2,r4
  803f70:	e17fff15 	stw	r5,-4(fp)
  803f74:	e0bffe05 	stb	r2,-8(fp)
   FATFS *rfs;


   if (vol >= _VOLUMES)    /* Check if the drive number is valid */
  803f78:	e0bffe03 	ldbu	r2,-8(fp)
  803f7c:	10000226 	beq	r2,zero,803f88 <f_mount+0x28>
      return FR_INVALID_DRIVE;
  803f80:	008002c4 	movi	r2,11
  803f84:	00001706 	br	803fe4 <f_mount+0x84>
   rfs = FatFs[vol];       /* Get current fs object */
  803f88:	e0bffe03 	ldbu	r2,-8(fp)
  803f8c:	1085883a 	add	r2,r2,r2
  803f90:	1087883a 	add	r3,r2,r2
  803f94:	d0a35b04 	addi	r2,gp,-29332
  803f98:	1885883a 	add	r2,r3,r2
  803f9c:	10800017 	ldw	r2,0(r2)
  803fa0:	e0bffd15 	stw	r2,-12(fp)

   if (rfs) {
  803fa4:	e0bffd17 	ldw	r2,-12(fp)
  803fa8:	10000226 	beq	r2,zero,803fb4 <f_mount+0x54>
      clear_lock(rfs);
#endif
#if _FS_REENTRANT          /* Discard sync object of the current volume */
      if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
      rfs->fs_type = 0;    /* Clear old fs object */
  803fac:	e0bffd17 	ldw	r2,-12(fp)
  803fb0:	10000005 	stb	zero,0(r2)
   }

   if (fs) {
  803fb4:	e0bfff17 	ldw	r2,-4(fp)
  803fb8:	10000226 	beq	r2,zero,803fc4 <f_mount+0x64>
      fs->fs_type = 0;     /* Clear new fs object */
  803fbc:	e0bfff17 	ldw	r2,-4(fp)
  803fc0:	10000005 	stb	zero,0(r2)
#if _FS_REENTRANT          /* Create sync object for the new volume */
      if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
   }
   FatFs[vol] = fs;        /* Register new fs object */
  803fc4:	e0bffe03 	ldbu	r2,-8(fp)
  803fc8:	1085883a 	add	r2,r2,r2
  803fcc:	1087883a 	add	r3,r2,r2
  803fd0:	d0a35b04 	addi	r2,gp,-29332
  803fd4:	1885883a 	add	r2,r3,r2
  803fd8:	e0ffff17 	ldw	r3,-4(fp)
  803fdc:	10c00015 	stw	r3,0(r2)

   return FR_OK;
  803fe0:	0005883a 	mov	r2,zero
}
  803fe4:	e037883a 	mov	sp,fp
  803fe8:	df000017 	ldw	fp,0(sp)
  803fec:	dec00104 	addi	sp,sp,4
  803ff0:	f800283a 	ret

00803ff4 <f_open>:
FRESULT f_open (
   FIL *fp,       /* Pointer to the blank file object */
   const TCHAR *path,   /* Pointer to the file name */
   uint8_t mode         /* Access mode and file open mode flags */
)
{
  803ff4:	deffed04 	addi	sp,sp,-76
  803ff8:	dfc01215 	stw	ra,72(sp)
  803ffc:	df001115 	stw	fp,68(sp)
  804000:	df001104 	addi	fp,sp,68
  804004:	e13ffd15 	stw	r4,-12(fp)
  804008:	e17ffe15 	stw	r5,-8(fp)
  80400c:	3005883a 	mov	r2,r6
  804010:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   fp->fs = 0;       /* Clear file object */
  804014:	e0bffd17 	ldw	r2,-12(fp)
  804018:	10000015 	stw	zero,0(r2)

#if !_FS_READONLY
   mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  80401c:	e0bfff03 	ldbu	r2,-4(fp)
  804020:	108007cc 	andi	r2,r2,31
  804024:	e0bfff05 	stb	r2,-4(fp)
   res = chk_mounted(&path, &dj.fs, (uint8_t)(mode & ~FA_READ));
  804028:	e0bfff03 	ldbu	r2,-4(fp)
  80402c:	11003f8c 	andi	r4,r2,254
  804030:	e0fff304 	addi	r3,fp,-52
  804034:	e0bffe04 	addi	r2,fp,-8
  804038:	200d883a 	mov	r6,r4
  80403c:	180b883a 	mov	r5,r3
  804040:	1009883a 	mov	r4,r2
  804044:	08035900 	call	803590 <chk_mounted>
  804048:	e0bfef15 	stw	r2,-68(fp)
#else
   mode &= FA_READ;
   res = chk_mounted(&path, &dj.fs, 0);
#endif
   INIT_BUF(dj);
  80404c:	e0bffa04 	addi	r2,fp,-24
  804050:	e0bff915 	stw	r2,-28(fp)
   if (res == FR_OK)
  804054:	e0bfef17 	ldw	r2,-68(fp)
  804058:	1000061e 	bne	r2,zero,804074 <f_open+0x80>
      res = follow_path(&dj, path); /* Follow the file path */
  80405c:	e0fffe17 	ldw	r3,-8(fp)
  804060:	e0bff304 	addi	r2,fp,-52
  804064:	180b883a 	mov	r5,r3
  804068:	1009883a 	mov	r4,r2
  80406c:	08032080 	call	803208 <follow_path>
  804070:	e0bfef15 	stw	r2,-68(fp)
   dir = dj.dir;
  804074:	e0bff817 	ldw	r2,-32(fp)
  804078:	e0bff015 	stw	r2,-64(fp)

#if !_FS_READONLY /* R/W configuration */
   if (res == FR_OK) {
  80407c:	e0bfef17 	ldw	r2,-68(fp)
  804080:	1000041e 	bne	r2,zero,804094 <f_open+0xa0>
      if (!dir)   /* Current dir itself */
  804084:	e0bff017 	ldw	r2,-64(fp)
  804088:	1000021e 	bne	r2,zero,804094 <f_open+0xa0>
         res = FR_INVALID_NAME;
  80408c:	00800184 	movi	r2,6
  804090:	e0bfef15 	stw	r2,-68(fp)
      else
         res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
   }
   /* Create or Open a file */
   if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  804094:	e0bfff03 	ldbu	r2,-4(fp)
  804098:	1080070c 	andi	r2,r2,28
  80409c:	10008726 	beq	r2,zero,8042bc <f_open+0x2c8>
      uint32_t dw, cl;

      if (res != FR_OK) {              /* No file, create new */
  8040a0:	e0bfef17 	ldw	r2,-68(fp)
  8040a4:	10000d26 	beq	r2,zero,8040dc <f_open+0xe8>
         if (res == FR_NO_FILE)        /* There is no file to open, create a new entry */
  8040a8:	e0bfef17 	ldw	r2,-68(fp)
  8040ac:	10800118 	cmpnei	r2,r2,4
  8040b0:	1000041e 	bne	r2,zero,8040c4 <f_open+0xd0>
#if _FS_SHARE
            res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
            res = dir_register(&dj);
  8040b4:	e0bff304 	addi	r2,fp,-52
  8040b8:	1009883a 	mov	r4,r2
  8040bc:	0802b240 	call	802b24 <dir_register>
  8040c0:	e0bfef15 	stw	r2,-68(fp)
#endif
         mode |= FA_CREATE_ALWAYS;     /* File is created */
  8040c4:	e0bfff03 	ldbu	r2,-4(fp)
  8040c8:	10800214 	ori	r2,r2,8
  8040cc:	e0bfff05 	stb	r2,-4(fp)
         dir = dj.dir;              /* New entry */
  8040d0:	e0bff817 	ldw	r2,-32(fp)
  8040d4:	e0bff015 	stw	r2,-64(fp)
  8040d8:	00000e06 	br	804114 <f_open+0x120>
      }
      else {                        /* Any object is already existing */
         if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
  8040dc:	e0bff017 	ldw	r2,-64(fp)
  8040e0:	108002c4 	addi	r2,r2,11
  8040e4:	10800003 	ldbu	r2,0(r2)
  8040e8:	10803fcc 	andi	r2,r2,255
  8040ec:	1080044c 	andi	r2,r2,17
  8040f0:	10000326 	beq	r2,zero,804100 <f_open+0x10c>
            res = FR_DENIED;
  8040f4:	008001c4 	movi	r2,7
  8040f8:	e0bfef15 	stw	r2,-68(fp)
  8040fc:	00000506 	br	804114 <f_open+0x120>
         } else {
            if (mode & FA_CREATE_NEW)  /* Cannot create as new file */
  804100:	e0bfff03 	ldbu	r2,-4(fp)
  804104:	1080010c 	andi	r2,r2,4
  804108:	10000226 	beq	r2,zero,804114 <f_open+0x120>
               res = FR_EXIST;
  80410c:	00800204 	movi	r2,8
  804110:	e0bfef15 	stw	r2,-68(fp)
         }
      }
      if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {   /* Truncate it if overwrite mode */
  804114:	e0bfef17 	ldw	r2,-68(fp)
  804118:	10007e1e 	bne	r2,zero,804314 <f_open+0x320>
  80411c:	e0bfff03 	ldbu	r2,-4(fp)
  804120:	1080020c 	andi	r2,r2,8
  804124:	10007b26 	beq	r2,zero,804314 <f_open+0x320>
         dw = get_fattime();              /* Created time */
  804128:	080155c0 	call	80155c <get_fattime>
  80412c:	e0bff115 	stw	r2,-60(fp)
         ST_DWORD(dir+DIR_CrtTime, dw);
  804130:	e0bff017 	ldw	r2,-64(fp)
  804134:	10800384 	addi	r2,r2,14
  804138:	e0fff117 	ldw	r3,-60(fp)
  80413c:	10c00005 	stb	r3,0(r2)
  804140:	e0bff017 	ldw	r2,-64(fp)
  804144:	108003c4 	addi	r2,r2,15
  804148:	e0fff117 	ldw	r3,-60(fp)
  80414c:	18ffffcc 	andi	r3,r3,65535
  804150:	1807d23a 	srai	r3,r3,8
  804154:	10c00005 	stb	r3,0(r2)
  804158:	e0bff017 	ldw	r2,-64(fp)
  80415c:	10800404 	addi	r2,r2,16
  804160:	e0fff117 	ldw	r3,-60(fp)
  804164:	1806d43a 	srli	r3,r3,16
  804168:	10c00005 	stb	r3,0(r2)
  80416c:	e0bff017 	ldw	r2,-64(fp)
  804170:	10800444 	addi	r2,r2,17
  804174:	e0fff117 	ldw	r3,-60(fp)
  804178:	1806d63a 	srli	r3,r3,24
  80417c:	10c00005 	stb	r3,0(r2)
         dir[DIR_Attr] = 0;               /* Reset attribute */
  804180:	e0bff017 	ldw	r2,-64(fp)
  804184:	108002c4 	addi	r2,r2,11
  804188:	10000005 	stb	zero,0(r2)
         ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
  80418c:	e0bff017 	ldw	r2,-64(fp)
  804190:	10800704 	addi	r2,r2,28
  804194:	10000005 	stb	zero,0(r2)
  804198:	e0bff017 	ldw	r2,-64(fp)
  80419c:	10800744 	addi	r2,r2,29
  8041a0:	10000005 	stb	zero,0(r2)
  8041a4:	e0bff017 	ldw	r2,-64(fp)
  8041a8:	10800784 	addi	r2,r2,30
  8041ac:	10000005 	stb	zero,0(r2)
  8041b0:	e0bff017 	ldw	r2,-64(fp)
  8041b4:	108007c4 	addi	r2,r2,31
  8041b8:	10000005 	stb	zero,0(r2)
         cl = LD_CLUST(dir);              /* Get start cluster */
  8041bc:	e0bff017 	ldw	r2,-64(fp)
  8041c0:	10800544 	addi	r2,r2,21
  8041c4:	10800003 	ldbu	r2,0(r2)
  8041c8:	10803fcc 	andi	r2,r2,255
  8041cc:	1004923a 	slli	r2,r2,8
  8041d0:	1007883a 	mov	r3,r2
  8041d4:	e0bff017 	ldw	r2,-64(fp)
  8041d8:	10800504 	addi	r2,r2,20
  8041dc:	10800003 	ldbu	r2,0(r2)
  8041e0:	10803fcc 	andi	r2,r2,255
  8041e4:	1884b03a 	or	r2,r3,r2
  8041e8:	10bfffcc 	andi	r2,r2,65535
  8041ec:	1006943a 	slli	r3,r2,16
  8041f0:	e0bff017 	ldw	r2,-64(fp)
  8041f4:	108006c4 	addi	r2,r2,27
  8041f8:	10800003 	ldbu	r2,0(r2)
  8041fc:	10803fcc 	andi	r2,r2,255
  804200:	1004923a 	slli	r2,r2,8
  804204:	1009883a 	mov	r4,r2
  804208:	e0bff017 	ldw	r2,-64(fp)
  80420c:	10800684 	addi	r2,r2,26
  804210:	10800003 	ldbu	r2,0(r2)
  804214:	10803fcc 	andi	r2,r2,255
  804218:	2084b03a 	or	r2,r4,r2
  80421c:	10bfffcc 	andi	r2,r2,65535
  804220:	1884b03a 	or	r2,r3,r2
  804224:	e0bff215 	stw	r2,-56(fp)
         ST_CLUST(dir, 0);             /* cluster = 0 */
  804228:	e0bff017 	ldw	r2,-64(fp)
  80422c:	10800684 	addi	r2,r2,26
  804230:	10000005 	stb	zero,0(r2)
  804234:	e0bff017 	ldw	r2,-64(fp)
  804238:	108006c4 	addi	r2,r2,27
  80423c:	10000005 	stb	zero,0(r2)
  804240:	e0bff017 	ldw	r2,-64(fp)
  804244:	10800504 	addi	r2,r2,20
  804248:	10000005 	stb	zero,0(r2)
  80424c:	e0bff017 	ldw	r2,-64(fp)
  804250:	10800544 	addi	r2,r2,21
  804254:	10000005 	stb	zero,0(r2)
         dj.fs->wflag = 1;
  804258:	e0bff317 	ldw	r2,-52(fp)
  80425c:	00c00044 	movi	r3,1
  804260:	10c00105 	stb	r3,4(r2)
         if (cl) {                     /* Remove the cluster chain if exist */
  804264:	e0bff217 	ldw	r2,-56(fp)
  804268:	10002a26 	beq	r2,zero,804314 <f_open+0x320>
            dw = dj.fs->winsect;
  80426c:	e0bff317 	ldw	r2,-52(fp)
  804270:	10800b17 	ldw	r2,44(r2)
  804274:	e0bff115 	stw	r2,-60(fp)
            res = remove_chain(dj.fs, cl);
  804278:	e0bff317 	ldw	r2,-52(fp)
  80427c:	e17ff217 	ldw	r5,-56(fp)
  804280:	1009883a 	mov	r4,r2
  804284:	08021540 	call	802154 <remove_chain>
  804288:	e0bfef15 	stw	r2,-68(fp)
            if (res == FR_OK) {
  80428c:	e0bfef17 	ldw	r2,-68(fp)
  804290:	1000201e 	bne	r2,zero,804314 <f_open+0x320>
               dj.fs->last_clust = cl - 1;   /* Reuse the cluster hole */
  804294:	e0bff317 	ldw	r2,-52(fp)
  804298:	e0fff217 	ldw	r3,-56(fp)
  80429c:	18ffffc4 	addi	r3,r3,-1
  8042a0:	10c00315 	stw	r3,12(r2)
               res = move_window(dj.fs, dw);
  8042a4:	e0bff317 	ldw	r2,-52(fp)
  8042a8:	e17ff117 	ldw	r5,-60(fp)
  8042ac:	1009883a 	mov	r4,r2
  8042b0:	080175c0 	call	80175c <move_window>
  8042b4:	e0bfef15 	stw	r2,-68(fp)
  8042b8:	00001606 	br	804314 <f_open+0x320>
            }
         }
      }
   }
   else {   /* Open an existing file */
      if (res == FR_OK) {                 /* Follow succeeded */
  8042bc:	e0bfef17 	ldw	r2,-68(fp)
  8042c0:	1000141e 	bne	r2,zero,804314 <f_open+0x320>
         if (dir[DIR_Attr] & AM_DIR) {    /* It is a directory */
  8042c4:	e0bff017 	ldw	r2,-64(fp)
  8042c8:	108002c4 	addi	r2,r2,11
  8042cc:	10800003 	ldbu	r2,0(r2)
  8042d0:	10803fcc 	andi	r2,r2,255
  8042d4:	1080040c 	andi	r2,r2,16
  8042d8:	10000326 	beq	r2,zero,8042e8 <f_open+0x2f4>
            res = FR_NO_FILE;
  8042dc:	00800104 	movi	r2,4
  8042e0:	e0bfef15 	stw	r2,-68(fp)
  8042e4:	00000b06 	br	804314 <f_open+0x320>
         } else {
            if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  8042e8:	e0bfff03 	ldbu	r2,-4(fp)
  8042ec:	1080008c 	andi	r2,r2,2
  8042f0:	10000826 	beq	r2,zero,804314 <f_open+0x320>
  8042f4:	e0bff017 	ldw	r2,-64(fp)
  8042f8:	108002c4 	addi	r2,r2,11
  8042fc:	10800003 	ldbu	r2,0(r2)
  804300:	10803fcc 	andi	r2,r2,255
  804304:	1080004c 	andi	r2,r2,1
  804308:	10000226 	beq	r2,zero,804314 <f_open+0x320>
               res = FR_DENIED;
  80430c:	008001c4 	movi	r2,7
  804310:	e0bfef15 	stw	r2,-68(fp)
         }
      }
   }
   if (res == FR_OK) {
  804314:	e0bfef17 	ldw	r2,-68(fp)
  804318:	10000d1e 	bne	r2,zero,804350 <f_open+0x35c>
      if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten */
  80431c:	e0bfff03 	ldbu	r2,-4(fp)
  804320:	1080020c 	andi	r2,r2,8
  804324:	10000326 	beq	r2,zero,804334 <f_open+0x340>
         mode |= FA__WRITTEN;
  804328:	e0bfff03 	ldbu	r2,-4(fp)
  80432c:	10800814 	ori	r2,r2,32
  804330:	e0bfff05 	stb	r2,-4(fp)
      fp->dir_sect = dj.fs->winsect;         /* Pointer to the directory entry */
  804334:	e0bff317 	ldw	r2,-52(fp)
  804338:	10c00b17 	ldw	r3,44(r2)
  80433c:	e0bffd17 	ldw	r2,-12(fp)
  804340:	10c00715 	stw	r3,28(r2)
      fp->dir_ptr = dir;
  804344:	e0bffd17 	ldw	r2,-12(fp)
  804348:	e0fff017 	ldw	r3,-64(fp)
  80434c:	10c00815 	stw	r3,32(r2)
      }
   }
#endif
   FREE_BUF();

   if (res == FR_OK) {
  804350:	e0bfef17 	ldw	r2,-68(fp)
  804354:	1000421e 	bne	r2,zero,804460 <f_open+0x46c>
      fp->flag = mode;              /* File access mode */
  804358:	e0bffd17 	ldw	r2,-12(fp)
  80435c:	e0ffff03 	ldbu	r3,-4(fp)
  804360:	10c00185 	stb	r3,6(r2)
      fp->sclust = LD_CLUST(dir);         /* File start cluster */
  804364:	e0bff017 	ldw	r2,-64(fp)
  804368:	10800544 	addi	r2,r2,21
  80436c:	10800003 	ldbu	r2,0(r2)
  804370:	10803fcc 	andi	r2,r2,255
  804374:	1004923a 	slli	r2,r2,8
  804378:	1007883a 	mov	r3,r2
  80437c:	e0bff017 	ldw	r2,-64(fp)
  804380:	10800504 	addi	r2,r2,20
  804384:	10800003 	ldbu	r2,0(r2)
  804388:	10803fcc 	andi	r2,r2,255
  80438c:	1884b03a 	or	r2,r3,r2
  804390:	10bfffcc 	andi	r2,r2,65535
  804394:	1006943a 	slli	r3,r2,16
  804398:	e0bff017 	ldw	r2,-64(fp)
  80439c:	108006c4 	addi	r2,r2,27
  8043a0:	10800003 	ldbu	r2,0(r2)
  8043a4:	10803fcc 	andi	r2,r2,255
  8043a8:	1004923a 	slli	r2,r2,8
  8043ac:	1009883a 	mov	r4,r2
  8043b0:	e0bff017 	ldw	r2,-64(fp)
  8043b4:	10800684 	addi	r2,r2,26
  8043b8:	10800003 	ldbu	r2,0(r2)
  8043bc:	10803fcc 	andi	r2,r2,255
  8043c0:	2084b03a 	or	r2,r4,r2
  8043c4:	10bfffcc 	andi	r2,r2,65535
  8043c8:	1886b03a 	or	r3,r3,r2
  8043cc:	e0bffd17 	ldw	r2,-12(fp)
  8043d0:	10c00415 	stw	r3,16(r2)
      fp->fsize = LD_DWORD(dir+DIR_FileSize);   /* File size */
  8043d4:	e0bff017 	ldw	r2,-64(fp)
  8043d8:	108007c4 	addi	r2,r2,31
  8043dc:	10800003 	ldbu	r2,0(r2)
  8043e0:	10803fcc 	andi	r2,r2,255
  8043e4:	1006963a 	slli	r3,r2,24
  8043e8:	e0bff017 	ldw	r2,-64(fp)
  8043ec:	10800784 	addi	r2,r2,30
  8043f0:	10800003 	ldbu	r2,0(r2)
  8043f4:	10803fcc 	andi	r2,r2,255
  8043f8:	1004943a 	slli	r2,r2,16
  8043fc:	1884b03a 	or	r2,r3,r2
  804400:	e0fff017 	ldw	r3,-64(fp)
  804404:	18c00744 	addi	r3,r3,29
  804408:	18c00003 	ldbu	r3,0(r3)
  80440c:	18c03fcc 	andi	r3,r3,255
  804410:	1806923a 	slli	r3,r3,8
  804414:	10c6b03a 	or	r3,r2,r3
  804418:	e0bff017 	ldw	r2,-64(fp)
  80441c:	10800704 	addi	r2,r2,28
  804420:	10800003 	ldbu	r2,0(r2)
  804424:	10803fcc 	andi	r2,r2,255
  804428:	1886b03a 	or	r3,r3,r2
  80442c:	e0bffd17 	ldw	r2,-12(fp)
  804430:	10c00315 	stw	r3,12(r2)
      fp->fptr = 0;                 /* File pointer */
  804434:	e0bffd17 	ldw	r2,-12(fp)
  804438:	10000215 	stw	zero,8(r2)
      fp->dsect = 0;
  80443c:	e0bffd17 	ldw	r2,-12(fp)
  804440:	10000615 	stw	zero,24(r2)
#if _USE_FASTSEEK
      fp->cltbl = 0;                /* Normal seek mode */
#endif
      fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
  804444:	e0fff317 	ldw	r3,-52(fp)
  804448:	e0bffd17 	ldw	r2,-12(fp)
  80444c:	10c00015 	stw	r3,0(r2)
  804450:	e0bff317 	ldw	r2,-52(fp)
  804454:	10c0018b 	ldhu	r3,6(r2)
  804458:	e0bffd17 	ldw	r2,-12(fp)
  80445c:	10c0010d 	sth	r3,4(r2)
   }

   LEAVE_FF(dj.fs, res);
  804460:	e0bfef17 	ldw	r2,-68(fp)
}
  804464:	e037883a 	mov	sp,fp
  804468:	dfc00117 	ldw	ra,4(sp)
  80446c:	df000017 	ldw	fp,0(sp)
  804470:	dec00204 	addi	sp,sp,8
  804474:	f800283a 	ret

00804478 <f_read>:
   FIL *fp,       /* Pointer to the file object */
   void *buff,    /* Pointer to data buffer */
   uint32_t btr,      /* Number of bytes to read */
   uint32_t *br    /* Pointer to number of bytes read */
)
{
  804478:	defff204 	addi	sp,sp,-56
  80447c:	dfc00d15 	stw	ra,52(sp)
  804480:	df000c15 	stw	fp,48(sp)
  804484:	df000c04 	addi	fp,sp,48
  804488:	e13ffc15 	stw	r4,-16(fp)
  80448c:	e17ffd15 	stw	r5,-12(fp)
  804490:	e1bffe15 	stw	r6,-8(fp)
  804494:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect, remain;
   uint32_t rcnt, cc;
   uint8_t csect, *rbuff = buff;
  804498:	e0bffd17 	ldw	r2,-12(fp)
  80449c:	e0bff715 	stw	r2,-36(fp)


   *br = 0; /* Initialize byte counter */
  8044a0:	e0bfff17 	ldw	r2,-4(fp)
  8044a4:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);           /* Check validity */
  8044a8:	e0bffc17 	ldw	r2,-16(fp)
  8044ac:	10c00017 	ldw	r3,0(r2)
  8044b0:	e0bffc17 	ldw	r2,-16(fp)
  8044b4:	1080010b 	ldhu	r2,4(r2)
  8044b8:	10bfffcc 	andi	r2,r2,65535
  8044bc:	100b883a 	mov	r5,r2
  8044c0:	1809883a 	mov	r4,r3
  8044c4:	0803ed00 	call	803ed0 <validate>
  8044c8:	e0bff815 	stw	r2,-32(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8044cc:	e0bff817 	ldw	r2,-32(fp)
  8044d0:	10000226 	beq	r2,zero,8044dc <f_read+0x64>
  8044d4:	e0bff817 	ldw	r2,-32(fp)
  8044d8:	00011c06 	br	80494c <f_read+0x4d4>
   if (fp->flag & FA__ERROR)              /* Aborted file? */
  8044dc:	e0bffc17 	ldw	r2,-16(fp)
  8044e0:	10800183 	ldbu	r2,6(r2)
  8044e4:	10803fcc 	andi	r2,r2,255
  8044e8:	1080201c 	xori	r2,r2,128
  8044ec:	10bfe004 	addi	r2,r2,-128
  8044f0:	1000020e 	bge	r2,zero,8044fc <f_read+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  8044f4:	00800084 	movi	r2,2
  8044f8:	00011406 	br	80494c <f_read+0x4d4>
   if (!(fp->flag & FA_READ))                /* Check access mode */
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10800183 	ldbu	r2,6(r2)
  804504:	10803fcc 	andi	r2,r2,255
  804508:	1080004c 	andi	r2,r2,1
  80450c:	1000021e 	bne	r2,zero,804518 <f_read+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  804510:	008001c4 	movi	r2,7
  804514:	00010d06 	br	80494c <f_read+0x4d4>
   remain = fp->fsize - fp->fptr;
  804518:	e0bffc17 	ldw	r2,-16(fp)
  80451c:	10c00317 	ldw	r3,12(r2)
  804520:	e0bffc17 	ldw	r2,-16(fp)
  804524:	10800217 	ldw	r2,8(r2)
  804528:	1885c83a 	sub	r2,r3,r2
  80452c:	e0bff915 	stw	r2,-28(fp)
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */
  804530:	e0bffe17 	ldw	r2,-8(fp)
  804534:	e0fff917 	ldw	r3,-28(fp)
  804538:	1881012e 	bgeu	r3,r2,804940 <f_read+0x4c8>
  80453c:	e0bff917 	ldw	r2,-28(fp)
  804540:	e0bffe15 	stw	r2,-8(fp)

   for ( ;  btr;                       /* Repeat until all data read */
  804544:	0000fe06 	br	804940 <f_read+0x4c8>
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) {    /* On the sector boundary? */
  804548:	e0bffc17 	ldw	r2,-16(fp)
  80454c:	10800217 	ldw	r2,8(r2)
  804550:	10807fcc 	andi	r2,r2,511
  804554:	1000d11e 	bne	r2,zero,80489c <f_read+0x424>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  804558:	e0bffc17 	ldw	r2,-16(fp)
  80455c:	10800217 	ldw	r2,8(r2)
  804560:	1004d27a 	srli	r2,r2,9
  804564:	1007883a 	mov	r3,r2
  804568:	e0bffc17 	ldw	r2,-16(fp)
  80456c:	10800017 	ldw	r2,0(r2)
  804570:	10800083 	ldbu	r2,2(r2)
  804574:	10bfffc4 	addi	r2,r2,-1
  804578:	1884703a 	and	r2,r3,r2
  80457c:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {                 /* On the cluster boundary? */
  804580:	e0bffa03 	ldbu	r2,-24(fp)
  804584:	10002a1e 	bne	r2,zero,804630 <f_read+0x1b8>
            if (fp->fptr == 0) {       /* On the top of the file? */
  804588:	e0bffc17 	ldw	r2,-16(fp)
  80458c:	10800217 	ldw	r2,8(r2)
  804590:	1000041e 	bne	r2,zero,8045a4 <f_read+0x12c>
               clst = fp->sclust;         /* Follow from the origin */
  804594:	e0bffc17 	ldw	r2,-16(fp)
  804598:	10800417 	ldw	r2,16(r2)
  80459c:	e0bff415 	stw	r2,-48(fp)
  8045a0:	00000806 	br	8045c4 <f_read+0x14c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
  8045a4:	e0bffc17 	ldw	r2,-16(fp)
  8045a8:	10c00017 	ldw	r3,0(r2)
  8045ac:	e0bffc17 	ldw	r2,-16(fp)
  8045b0:	10800517 	ldw	r2,20(r2)
  8045b4:	100b883a 	mov	r5,r2
  8045b8:	1809883a 	mov	r4,r3
  8045bc:	0801b440 	call	801b44 <get_fat>
  8045c0:	e0bff415 	stw	r2,-48(fp)
            }
            if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  8045c4:	e0bff417 	ldw	r2,-48(fp)
  8045c8:	108000a8 	cmpgeui	r2,r2,2
  8045cc:	1000091e 	bne	r2,zero,8045f4 <f_read+0x17c>
  8045d0:	e0bffc17 	ldw	r2,-16(fp)
  8045d4:	10c00183 	ldbu	r3,6(r2)
  8045d8:	00bfe004 	movi	r2,-128
  8045dc:	1884b03a 	or	r2,r3,r2
  8045e0:	1007883a 	mov	r3,r2
  8045e4:	e0bffc17 	ldw	r2,-16(fp)
  8045e8:	10c00185 	stb	r3,6(r2)
  8045ec:	00800084 	movi	r2,2
  8045f0:	0000d606 	br	80494c <f_read+0x4d4>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  8045f4:	e0bff417 	ldw	r2,-48(fp)
  8045f8:	10bfffd8 	cmpnei	r2,r2,-1
  8045fc:	1000091e 	bne	r2,zero,804624 <f_read+0x1ac>
  804600:	e0bffc17 	ldw	r2,-16(fp)
  804604:	10c00183 	ldbu	r3,6(r2)
  804608:	00bfe004 	movi	r2,-128
  80460c:	1884b03a 	or	r2,r3,r2
  804610:	1007883a 	mov	r3,r2
  804614:	e0bffc17 	ldw	r2,-16(fp)
  804618:	10c00185 	stb	r3,6(r2)
  80461c:	00800044 	movi	r2,1
  804620:	0000ca06 	br	80494c <f_read+0x4d4>
            fp->clust = clst;          /* Update current cluster */
  804624:	e0bffc17 	ldw	r2,-16(fp)
  804628:	e0fff417 	ldw	r3,-48(fp)
  80462c:	10c00515 	stw	r3,20(r2)
         }
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  804630:	e0bffc17 	ldw	r2,-16(fp)
  804634:	10c00017 	ldw	r3,0(r2)
  804638:	e0bffc17 	ldw	r2,-16(fp)
  80463c:	10800517 	ldw	r2,20(r2)
  804640:	100b883a 	mov	r5,r2
  804644:	1809883a 	mov	r4,r3
  804648:	0801ad80 	call	801ad8 <clust2sect>
  80464c:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  804650:	e0bffb17 	ldw	r2,-20(fp)
  804654:	1000091e 	bne	r2,zero,80467c <f_read+0x204>
  804658:	e0bffc17 	ldw	r2,-16(fp)
  80465c:	10c00183 	ldbu	r3,6(r2)
  804660:	00bfe004 	movi	r2,-128
  804664:	1884b03a 	or	r2,r3,r2
  804668:	1007883a 	mov	r3,r2
  80466c:	e0bffc17 	ldw	r2,-16(fp)
  804670:	10c00185 	stb	r3,6(r2)
  804674:	00800084 	movi	r2,2
  804678:	0000b406 	br	80494c <f_read+0x4d4>
         sect += csect;
  80467c:	e0bffa03 	ldbu	r2,-24(fp)
  804680:	e0fffb17 	ldw	r3,-20(fp)
  804684:	1885883a 	add	r2,r3,r2
  804688:	e0bffb15 	stw	r2,-20(fp)
         cc = btr / SS(fp->fs);           /* When remaining bytes >= sector size, */
  80468c:	e0bffe17 	ldw	r2,-8(fp)
  804690:	1004d27a 	srli	r2,r2,9
  804694:	e0bff615 	stw	r2,-40(fp)
         if (cc) {                     /* Read maximum contiguous sectors directly */
  804698:	e0bff617 	ldw	r2,-40(fp)
  80469c:	10004026 	beq	r2,zero,8047a0 <f_read+0x328>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  8046a0:	e0fffa03 	ldbu	r3,-24(fp)
  8046a4:	e0bff617 	ldw	r2,-40(fp)
  8046a8:	1885883a 	add	r2,r3,r2
  8046ac:	e0fffc17 	ldw	r3,-16(fp)
  8046b0:	18c00017 	ldw	r3,0(r3)
  8046b4:	18c00083 	ldbu	r3,2(r3)
  8046b8:	18c03fcc 	andi	r3,r3,255
  8046bc:	1880072e 	bgeu	r3,r2,8046dc <f_read+0x264>
               cc = fp->fs->csize - csect;
  8046c0:	e0bffc17 	ldw	r2,-16(fp)
  8046c4:	10800017 	ldw	r2,0(r2)
  8046c8:	10800083 	ldbu	r2,2(r2)
  8046cc:	10c03fcc 	andi	r3,r2,255
  8046d0:	e0bffa03 	ldbu	r2,-24(fp)
  8046d4:	1885c83a 	sub	r2,r3,r2
  8046d8:	e0bff615 	stw	r2,-40(fp)
            if (disk_read(fp->fs->drv, rbuff, sect, (uint8_t)cc) != RES_OK)
  8046dc:	e0bffc17 	ldw	r2,-16(fp)
  8046e0:	10800017 	ldw	r2,0(r2)
  8046e4:	10800043 	ldbu	r2,1(r2)
  8046e8:	10c03fcc 	andi	r3,r2,255
  8046ec:	e0bff617 	ldw	r2,-40(fp)
  8046f0:	10803fcc 	andi	r2,r2,255
  8046f4:	100f883a 	mov	r7,r2
  8046f8:	e1bffb17 	ldw	r6,-20(fp)
  8046fc:	e17ff717 	ldw	r5,-36(fp)
  804700:	1809883a 	mov	r4,r3
  804704:	0800e080 	call	800e08 <ffs_DiskIORead>
  804708:	10000926 	beq	r2,zero,804730 <f_read+0x2b8>
               ABORT(fp->fs, FR_DISK_ERR);
  80470c:	e0bffc17 	ldw	r2,-16(fp)
  804710:	10c00183 	ldbu	r3,6(r2)
  804714:	00bfe004 	movi	r2,-128
  804718:	1884b03a 	or	r2,r3,r2
  80471c:	1007883a 	mov	r3,r2
  804720:	e0bffc17 	ldw	r2,-16(fp)
  804724:	10c00185 	stb	r3,6(r2)
  804728:	00800044 	movi	r2,1
  80472c:	00008706 	br	80494c <f_read+0x4d4>
#if !_FS_READONLY && _FS_MINIMIZE <= 2       /* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
            if (fp->fs->wflag && fp->fs->winsect - sect < cc)
               mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
            if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  804730:	e0bffc17 	ldw	r2,-16(fp)
  804734:	10800183 	ldbu	r2,6(r2)
  804738:	10803fcc 	andi	r2,r2,255
  80473c:	1080100c 	andi	r2,r2,64
  804740:	10001326 	beq	r2,zero,804790 <f_read+0x318>
  804744:	e0bffc17 	ldw	r2,-16(fp)
  804748:	10c00617 	ldw	r3,24(r2)
  80474c:	e0bffb17 	ldw	r2,-20(fp)
  804750:	1887c83a 	sub	r3,r3,r2
  804754:	e0bff617 	ldw	r2,-40(fp)
  804758:	18800d2e 	bgeu	r3,r2,804790 <f_read+0x318>
               mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  80475c:	e0bffc17 	ldw	r2,-16(fp)
  804760:	10c00617 	ldw	r3,24(r2)
  804764:	e0bffb17 	ldw	r2,-20(fp)
  804768:	1885c83a 	sub	r2,r3,r2
  80476c:	1004927a 	slli	r2,r2,9
  804770:	e0fff717 	ldw	r3,-36(fp)
  804774:	1887883a 	add	r3,r3,r2
  804778:	e0bffc17 	ldw	r2,-16(fp)
  80477c:	10800904 	addi	r2,r2,36
  804780:	01808004 	movi	r6,512
  804784:	100b883a 	mov	r5,r2
  804788:	1809883a 	mov	r4,r3
  80478c:	08015880 	call	801588 <mem_cpy>
#endif
#endif
            rcnt = SS(fp->fs) * cc;       /* Number of bytes transferred */
  804790:	e0bff617 	ldw	r2,-40(fp)
  804794:	1004927a 	slli	r2,r2,9
  804798:	e0bff515 	stw	r2,-44(fp)
            continue;
  80479c:	00005406 	br	8048f0 <f_read+0x478>
         }
#if !_FS_TINY
         if (fp->dsect != sect) {         /* Load data sector if not in cache */
  8047a0:	e0bffc17 	ldw	r2,-16(fp)
  8047a4:	10c00617 	ldw	r3,24(r2)
  8047a8:	e0bffb17 	ldw	r2,-20(fp)
  8047ac:	18803826 	beq	r3,r2,804890 <f_read+0x418>
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {      /* Write-back dirty sector cache */
  8047b0:	e0bffc17 	ldw	r2,-16(fp)
  8047b4:	10800183 	ldbu	r2,6(r2)
  8047b8:	10803fcc 	andi	r2,r2,255
  8047bc:	1080100c 	andi	r2,r2,64
  8047c0:	10001e26 	beq	r2,zero,80483c <f_read+0x3c4>
               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10800017 	ldw	r2,0(r2)
  8047cc:	10800043 	ldbu	r2,1(r2)
  8047d0:	10c03fcc 	andi	r3,r2,255
  8047d4:	e0bffc17 	ldw	r2,-16(fp)
  8047d8:	11000904 	addi	r4,r2,36
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	10800617 	ldw	r2,24(r2)
  8047e4:	01c00044 	movi	r7,1
  8047e8:	100d883a 	mov	r6,r2
  8047ec:	200b883a 	mov	r5,r4
  8047f0:	1809883a 	mov	r4,r3
  8047f4:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8047f8:	10000926 	beq	r2,zero,804820 <f_read+0x3a8>
                  ABORT(fp->fs, FR_DISK_ERR);
  8047fc:	e0bffc17 	ldw	r2,-16(fp)
  804800:	10c00183 	ldbu	r3,6(r2)
  804804:	00bfe004 	movi	r2,-128
  804808:	1884b03a 	or	r2,r3,r2
  80480c:	1007883a 	mov	r3,r2
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	10c00185 	stb	r3,6(r2)
  804818:	00800044 	movi	r2,1
  80481c:	00004b06 	br	80494c <f_read+0x4d4>
               fp->flag &= ~FA__DIRTY;
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	10c00183 	ldbu	r3,6(r2)
  804828:	00bfefc4 	movi	r2,-65
  80482c:	1884703a 	and	r2,r3,r2
  804830:	1007883a 	mov	r3,r2
  804834:	e0bffc17 	ldw	r2,-16(fp)
  804838:	10c00185 	stb	r3,6(r2)
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)  /* Fill sector cache */
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10800017 	ldw	r2,0(r2)
  804844:	10800043 	ldbu	r2,1(r2)
  804848:	10c03fcc 	andi	r3,r2,255
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	10800904 	addi	r2,r2,36
  804854:	01c00044 	movi	r7,1
  804858:	e1bffb17 	ldw	r6,-20(fp)
  80485c:	100b883a 	mov	r5,r2
  804860:	1809883a 	mov	r4,r3
  804864:	0800e080 	call	800e08 <ffs_DiskIORead>
  804868:	10000926 	beq	r2,zero,804890 <f_read+0x418>
               ABORT(fp->fs, FR_DISK_ERR);
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10c00183 	ldbu	r3,6(r2)
  804874:	00bfe004 	movi	r2,-128
  804878:	1884b03a 	or	r2,r3,r2
  80487c:	1007883a 	mov	r3,r2
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10c00185 	stb	r3,6(r2)
  804888:	00800044 	movi	r2,1
  80488c:	00002f06 	br	80494c <f_read+0x4d4>
         }
#endif
         fp->dsect = sect;
  804890:	e0bffc17 	ldw	r2,-16(fp)
  804894:	e0fffb17 	ldw	r3,-20(fp)
  804898:	10c00615 	stw	r3,24(r2)
      }
      rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs)); /* Get partial sector data from sector buffer */
  80489c:	e0bffc17 	ldw	r2,-16(fp)
  8048a0:	10800217 	ldw	r2,8(r2)
  8048a4:	10807fcc 	andi	r2,r2,511
  8048a8:	00c08004 	movi	r3,512
  8048ac:	1885c83a 	sub	r2,r3,r2
  8048b0:	e0bff515 	stw	r2,-44(fp)
      if (rcnt > btr) rcnt = btr;
  8048b4:	e0bff517 	ldw	r2,-44(fp)
  8048b8:	e0fffe17 	ldw	r3,-8(fp)
  8048bc:	1880022e 	bgeu	r3,r2,8048c8 <f_read+0x450>
  8048c0:	e0bffe17 	ldw	r2,-8(fp)
  8048c4:	e0bff515 	stw	r2,-44(fp)
#if _FS_TINY
      if (move_window(fp->fs, fp->dsect))    /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
  8048c8:	e0bffc17 	ldw	r2,-16(fp)
  8048cc:	10800217 	ldw	r2,8(r2)
  8048d0:	10807fcc 	andi	r2,r2,511
  8048d4:	10800904 	addi	r2,r2,36
  8048d8:	e0fffc17 	ldw	r3,-16(fp)
  8048dc:	1885883a 	add	r2,r3,r2
  8048e0:	e1bff517 	ldw	r6,-44(fp)
  8048e4:	100b883a 	mov	r5,r2
  8048e8:	e13ff717 	ldw	r4,-36(fp)
  8048ec:	08015880 	call	801588 <mem_cpy>
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  8048f0:	e0fff717 	ldw	r3,-36(fp)
  8048f4:	e0bff517 	ldw	r2,-44(fp)
  8048f8:	1885883a 	add	r2,r3,r2
  8048fc:	e0bff715 	stw	r2,-36(fp)
  804900:	e0bffc17 	ldw	r2,-16(fp)
  804904:	10c00217 	ldw	r3,8(r2)
  804908:	e0bff517 	ldw	r2,-44(fp)
  80490c:	1887883a 	add	r3,r3,r2
  804910:	e0bffc17 	ldw	r2,-16(fp)
  804914:	10c00215 	stw	r3,8(r2)
  804918:	e0bfff17 	ldw	r2,-4(fp)
  80491c:	10c00017 	ldw	r3,0(r2)
  804920:	e0bff517 	ldw	r2,-44(fp)
  804924:	1887883a 	add	r3,r3,r2
  804928:	e0bfff17 	ldw	r2,-4(fp)
  80492c:	10c00015 	stw	r3,0(r2)
  804930:	e0fffe17 	ldw	r3,-8(fp)
  804934:	e0bff517 	ldw	r2,-44(fp)
  804938:	1885c83a 	sub	r2,r3,r2
  80493c:	e0bffe15 	stw	r2,-8(fp)
   if (!(fp->flag & FA_READ))                /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
  804940:	e0bffe17 	ldw	r2,-8(fp)
  804944:	103f001e 	bne	r2,zero,804548 <__alt_data_end+0xff804548>
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
#endif
   }

   LEAVE_FF(fp->fs, FR_OK);
  804948:	0005883a 	mov	r2,zero
}
  80494c:	e037883a 	mov	sp,fp
  804950:	dfc00117 	ldw	ra,4(sp)
  804954:	df000017 	ldw	fp,0(sp)
  804958:	dec00204 	addi	sp,sp,8
  80495c:	f800283a 	ret

00804960 <f_write>:
   FIL *fp,       /* Pointer to the file object */
   const void *buff, /* Pointer to the data to be written */
   uint32_t btw,         /* Number of bytes to write */
   uint32_t *bw       /* Pointer to number of bytes written */
)
{
  804960:	defff304 	addi	sp,sp,-52
  804964:	dfc00c15 	stw	ra,48(sp)
  804968:	df000b15 	stw	fp,44(sp)
  80496c:	df000b04 	addi	fp,sp,44
  804970:	e13ffc15 	stw	r4,-16(fp)
  804974:	e17ffd15 	stw	r5,-12(fp)
  804978:	e1bffe15 	stw	r6,-8(fp)
  80497c:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect;
   uint32_t wcnt, cc;
   const uint8_t *wbuff = buff;
  804980:	e0bffd17 	ldw	r2,-12(fp)
  804984:	e0bff815 	stw	r2,-32(fp)
   uint8_t csect;


   *bw = 0; /* Initialize byte counter */
  804988:	e0bfff17 	ldw	r2,-4(fp)
  80498c:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);        /* Check validity */
  804990:	e0bffc17 	ldw	r2,-16(fp)
  804994:	10c00017 	ldw	r3,0(r2)
  804998:	e0bffc17 	ldw	r2,-16(fp)
  80499c:	1080010b 	ldhu	r2,4(r2)
  8049a0:	10bfffcc 	andi	r2,r2,65535
  8049a4:	100b883a 	mov	r5,r2
  8049a8:	1809883a 	mov	r4,r3
  8049ac:	0803ed00 	call	803ed0 <validate>
  8049b0:	e0bff915 	stw	r2,-28(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8049b4:	e0bff917 	ldw	r2,-28(fp)
  8049b8:	10000226 	beq	r2,zero,8049c4 <f_write+0x64>
  8049bc:	e0bff917 	ldw	r2,-28(fp)
  8049c0:	00014306 	br	804ed0 <f_write+0x570>
   if (fp->flag & FA__ERROR)           /* Aborted file? */
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10800183 	ldbu	r2,6(r2)
  8049cc:	10803fcc 	andi	r2,r2,255
  8049d0:	1080201c 	xori	r2,r2,128
  8049d4:	10bfe004 	addi	r2,r2,-128
  8049d8:	1000020e 	bge	r2,zero,8049e4 <f_write+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  8049dc:	00800084 	movi	r2,2
  8049e0:	00013b06 	br	804ed0 <f_write+0x570>
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
  8049e4:	e0bffc17 	ldw	r2,-16(fp)
  8049e8:	10800183 	ldbu	r2,6(r2)
  8049ec:	10803fcc 	andi	r2,r2,255
  8049f0:	1080008c 	andi	r2,r2,2
  8049f4:	1000021e 	bne	r2,zero,804a00 <f_write+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  8049f8:	008001c4 	movi	r2,7
  8049fc:	00013406 	br	804ed0 <f_write+0x570>
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */
  804a00:	e0bffc17 	ldw	r2,-16(fp)
  804a04:	10c00317 	ldw	r3,12(r2)
  804a08:	e0bffe17 	ldw	r2,-8(fp)
  804a0c:	1887883a 	add	r3,r3,r2
  804a10:	e0bffc17 	ldw	r2,-16(fp)
  804a14:	10800317 	ldw	r2,12(r2)
  804a18:	1881192e 	bgeu	r3,r2,804e80 <f_write+0x520>
  804a1c:	e03ffe15 	stw	zero,-8(fp)

   for ( ;  btw;                    /* Repeat until all data written */
  804a20:	00011706 	br	804e80 <f_write+0x520>
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10800217 	ldw	r2,8(r2)
  804a2c:	10807fcc 	andi	r2,r2,511
  804a30:	1000e41e 	bne	r2,zero,804dc4 <f_write+0x464>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  804a34:	e0bffc17 	ldw	r2,-16(fp)
  804a38:	10800217 	ldw	r2,8(r2)
  804a3c:	1004d27a 	srli	r2,r2,9
  804a40:	1007883a 	mov	r3,r2
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10800017 	ldw	r2,0(r2)
  804a4c:	10800083 	ldbu	r2,2(r2)
  804a50:	10bfffc4 	addi	r2,r2,-1
  804a54:	1884703a 	and	r2,r3,r2
  804a58:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {              /* On the cluster boundary? */
  804a5c:	e0bffa03 	ldbu	r2,-24(fp)
  804a60:	1000371e 	bne	r2,zero,804b40 <f_write+0x1e0>
            if (fp->fptr == 0) {    /* On the top of the file? */
  804a64:	e0bffc17 	ldw	r2,-16(fp)
  804a68:	10800217 	ldw	r2,8(r2)
  804a6c:	10000f1e 	bne	r2,zero,804aac <f_write+0x14c>
               clst = fp->sclust;      /* Follow from the origin */
  804a70:	e0bffc17 	ldw	r2,-16(fp)
  804a74:	10800417 	ldw	r2,16(r2)
  804a78:	e0bff515 	stw	r2,-44(fp)
               if (clst == 0)       /* When no cluster is allocated, */
  804a7c:	e0bff517 	ldw	r2,-44(fp)
  804a80:	1000121e 	bne	r2,zero,804acc <f_write+0x16c>
                  fp->sclust = clst = create_chain(fp->fs, 0); /* Create a new cluster chain */
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	10800017 	ldw	r2,0(r2)
  804a8c:	000b883a 	mov	r5,zero
  804a90:	1009883a 	mov	r4,r2
  804a94:	08022700 	call	802270 <create_chain>
  804a98:	e0bff515 	stw	r2,-44(fp)
  804a9c:	e0bffc17 	ldw	r2,-16(fp)
  804aa0:	e0fff517 	ldw	r3,-44(fp)
  804aa4:	10c00415 	stw	r3,16(r2)
  804aa8:	00000806 	br	804acc <f_write+0x16c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10c00017 	ldw	r3,0(r2)
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	10800517 	ldw	r2,20(r2)
  804abc:	100b883a 	mov	r5,r2
  804ac0:	1809883a 	mov	r4,r3
  804ac4:	08022700 	call	802270 <create_chain>
  804ac8:	e0bff515 	stw	r2,-44(fp)
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
  804acc:	e0bff517 	ldw	r2,-44(fp)
  804ad0:	1000ee26 	beq	r2,zero,804e8c <f_write+0x52c>
            if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  804ad4:	e0bff517 	ldw	r2,-44(fp)
  804ad8:	10800058 	cmpnei	r2,r2,1
  804adc:	1000091e 	bne	r2,zero,804b04 <f_write+0x1a4>
  804ae0:	e0bffc17 	ldw	r2,-16(fp)
  804ae4:	10c00183 	ldbu	r3,6(r2)
  804ae8:	00bfe004 	movi	r2,-128
  804aec:	1884b03a 	or	r2,r3,r2
  804af0:	1007883a 	mov	r3,r2
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10c00185 	stb	r3,6(r2)
  804afc:	00800084 	movi	r2,2
  804b00:	0000f306 	br	804ed0 <f_write+0x570>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  804b04:	e0bff517 	ldw	r2,-44(fp)
  804b08:	10bfffd8 	cmpnei	r2,r2,-1
  804b0c:	1000091e 	bne	r2,zero,804b34 <f_write+0x1d4>
  804b10:	e0bffc17 	ldw	r2,-16(fp)
  804b14:	10c00183 	ldbu	r3,6(r2)
  804b18:	00bfe004 	movi	r2,-128
  804b1c:	1884b03a 	or	r2,r3,r2
  804b20:	1007883a 	mov	r3,r2
  804b24:	e0bffc17 	ldw	r2,-16(fp)
  804b28:	10c00185 	stb	r3,6(r2)
  804b2c:	00800044 	movi	r2,1
  804b30:	0000e706 	br	804ed0 <f_write+0x570>
            fp->clust = clst;       /* Update current cluster */
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	e0fff517 	ldw	r3,-44(fp)
  804b3c:	10c00515 	stw	r3,20(r2)
         }
#if _FS_TINY
         if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
            ABORT(fp->fs, FR_DISK_ERR);
#else
         if (fp->flag & FA__DIRTY) {      /* Write-back sector cache */
  804b40:	e0bffc17 	ldw	r2,-16(fp)
  804b44:	10800183 	ldbu	r2,6(r2)
  804b48:	10803fcc 	andi	r2,r2,255
  804b4c:	1080100c 	andi	r2,r2,64
  804b50:	10001e26 	beq	r2,zero,804bcc <f_write+0x26c>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  804b54:	e0bffc17 	ldw	r2,-16(fp)
  804b58:	10800017 	ldw	r2,0(r2)
  804b5c:	10800043 	ldbu	r2,1(r2)
  804b60:	10c03fcc 	andi	r3,r2,255
  804b64:	e0bffc17 	ldw	r2,-16(fp)
  804b68:	11000904 	addi	r4,r2,36
  804b6c:	e0bffc17 	ldw	r2,-16(fp)
  804b70:	10800617 	ldw	r2,24(r2)
  804b74:	01c00044 	movi	r7,1
  804b78:	100d883a 	mov	r6,r2
  804b7c:	200b883a 	mov	r5,r4
  804b80:	1809883a 	mov	r4,r3
  804b84:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  804b88:	10000926 	beq	r2,zero,804bb0 <f_write+0x250>
               ABORT(fp->fs, FR_DISK_ERR);
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10c00183 	ldbu	r3,6(r2)
  804b94:	00bfe004 	movi	r2,-128
  804b98:	1884b03a 	or	r2,r3,r2
  804b9c:	1007883a 	mov	r3,r2
  804ba0:	e0bffc17 	ldw	r2,-16(fp)
  804ba4:	10c00185 	stb	r3,6(r2)
  804ba8:	00800044 	movi	r2,1
  804bac:	0000c806 	br	804ed0 <f_write+0x570>
            fp->flag &= ~FA__DIRTY;
  804bb0:	e0bffc17 	ldw	r2,-16(fp)
  804bb4:	10c00183 	ldbu	r3,6(r2)
  804bb8:	00bfefc4 	movi	r2,-65
  804bbc:	1884703a 	and	r2,r3,r2
  804bc0:	1007883a 	mov	r3,r2
  804bc4:	e0bffc17 	ldw	r2,-16(fp)
  804bc8:	10c00185 	stb	r3,6(r2)
         }
#endif
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  804bcc:	e0bffc17 	ldw	r2,-16(fp)
  804bd0:	10c00017 	ldw	r3,0(r2)
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10800517 	ldw	r2,20(r2)
  804bdc:	100b883a 	mov	r5,r2
  804be0:	1809883a 	mov	r4,r3
  804be4:	0801ad80 	call	801ad8 <clust2sect>
  804be8:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  804bec:	e0bffb17 	ldw	r2,-20(fp)
  804bf0:	1000091e 	bne	r2,zero,804c18 <f_write+0x2b8>
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10c00183 	ldbu	r3,6(r2)
  804bfc:	00bfe004 	movi	r2,-128
  804c00:	1884b03a 	or	r2,r3,r2
  804c04:	1007883a 	mov	r3,r2
  804c08:	e0bffc17 	ldw	r2,-16(fp)
  804c0c:	10c00185 	stb	r3,6(r2)
  804c10:	00800084 	movi	r2,2
  804c14:	0000ae06 	br	804ed0 <f_write+0x570>
         sect += csect;
  804c18:	e0bffa03 	ldbu	r2,-24(fp)
  804c1c:	e0fffb17 	ldw	r3,-20(fp)
  804c20:	1885883a 	add	r2,r3,r2
  804c24:	e0bffb15 	stw	r2,-20(fp)
         cc = btw / SS(fp->fs);        /* When remaining bytes >= sector size, */
  804c28:	e0bffe17 	ldw	r2,-8(fp)
  804c2c:	1004d27a 	srli	r2,r2,9
  804c30:	e0bff715 	stw	r2,-36(fp)
         if (cc) {                  /* Write maximum contiguous sectors directly */
  804c34:	e0bff717 	ldw	r2,-36(fp)
  804c38:	10004126 	beq	r2,zero,804d40 <f_write+0x3e0>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  804c3c:	e0fffa03 	ldbu	r3,-24(fp)
  804c40:	e0bff717 	ldw	r2,-36(fp)
  804c44:	1885883a 	add	r2,r3,r2
  804c48:	e0fffc17 	ldw	r3,-16(fp)
  804c4c:	18c00017 	ldw	r3,0(r3)
  804c50:	18c00083 	ldbu	r3,2(r3)
  804c54:	18c03fcc 	andi	r3,r3,255
  804c58:	1880072e 	bgeu	r3,r2,804c78 <f_write+0x318>
               cc = fp->fs->csize - csect;
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10800017 	ldw	r2,0(r2)
  804c64:	10800083 	ldbu	r2,2(r2)
  804c68:	10c03fcc 	andi	r3,r2,255
  804c6c:	e0bffa03 	ldbu	r2,-24(fp)
  804c70:	1885c83a 	sub	r2,r3,r2
  804c74:	e0bff715 	stw	r2,-36(fp)
            if (disk_write(fp->fs->drv, wbuff, sect, (uint8_t)cc) != RES_OK)
  804c78:	e0bffc17 	ldw	r2,-16(fp)
  804c7c:	10800017 	ldw	r2,0(r2)
  804c80:	10800043 	ldbu	r2,1(r2)
  804c84:	10c03fcc 	andi	r3,r2,255
  804c88:	e0bff717 	ldw	r2,-36(fp)
  804c8c:	10803fcc 	andi	r2,r2,255
  804c90:	100f883a 	mov	r7,r2
  804c94:	e1bffb17 	ldw	r6,-20(fp)
  804c98:	e17ff817 	ldw	r5,-32(fp)
  804c9c:	1809883a 	mov	r4,r3
  804ca0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  804ca4:	10000926 	beq	r2,zero,804ccc <f_write+0x36c>
               ABORT(fp->fs, FR_DISK_ERR);
  804ca8:	e0bffc17 	ldw	r2,-16(fp)
  804cac:	10c00183 	ldbu	r3,6(r2)
  804cb0:	00bfe004 	movi	r2,-128
  804cb4:	1884b03a 	or	r2,r3,r2
  804cb8:	1007883a 	mov	r3,r2
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	10c00185 	stb	r3,6(r2)
  804cc4:	00800044 	movi	r2,1
  804cc8:	00008106 	br	804ed0 <f_write+0x570>
            if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
               mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
               fp->fs->wflag = 0;
            }
#else
            if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  804ccc:	e0bffc17 	ldw	r2,-16(fp)
  804cd0:	10c00617 	ldw	r3,24(r2)
  804cd4:	e0bffb17 	ldw	r2,-20(fp)
  804cd8:	1887c83a 	sub	r3,r3,r2
  804cdc:	e0bff717 	ldw	r2,-36(fp)
  804ce0:	1880132e 	bgeu	r3,r2,804d30 <f_write+0x3d0>
               mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  804ce4:	e0bffc17 	ldw	r2,-16(fp)
  804ce8:	11000904 	addi	r4,r2,36
  804cec:	e0bffc17 	ldw	r2,-16(fp)
  804cf0:	10c00617 	ldw	r3,24(r2)
  804cf4:	e0bffb17 	ldw	r2,-20(fp)
  804cf8:	1885c83a 	sub	r2,r3,r2
  804cfc:	1004927a 	slli	r2,r2,9
  804d00:	e0fff817 	ldw	r3,-32(fp)
  804d04:	1885883a 	add	r2,r3,r2
  804d08:	01808004 	movi	r6,512
  804d0c:	100b883a 	mov	r5,r2
  804d10:	08015880 	call	801588 <mem_cpy>
               fp->flag &= ~FA__DIRTY;
  804d14:	e0bffc17 	ldw	r2,-16(fp)
  804d18:	10c00183 	ldbu	r3,6(r2)
  804d1c:	00bfefc4 	movi	r2,-65
  804d20:	1884703a 	and	r2,r3,r2
  804d24:	1007883a 	mov	r3,r2
  804d28:	e0bffc17 	ldw	r2,-16(fp)
  804d2c:	10c00185 	stb	r3,6(r2)
            }
#endif
            wcnt = SS(fp->fs) * cc;    /* Number of bytes transferred */
  804d30:	e0bff717 	ldw	r2,-36(fp)
  804d34:	1004927a 	slli	r2,r2,9
  804d38:	e0bff615 	stw	r2,-40(fp)
            continue;
  804d3c:	00003c06 	br	804e30 <f_write+0x4d0>
         if (fp->fptr >= fp->fsize) {  /* Avoid silly cache filling at growing edge */
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
  804d40:	e0bffc17 	ldw	r2,-16(fp)
  804d44:	10c00617 	ldw	r3,24(r2)
  804d48:	e0bffb17 	ldw	r2,-20(fp)
  804d4c:	18801a26 	beq	r3,r2,804db8 <f_write+0x458>
            if (fp->fptr < fp->fsize &&
  804d50:	e0bffc17 	ldw	r2,-16(fp)
  804d54:	10c00217 	ldw	r3,8(r2)
  804d58:	e0bffc17 	ldw	r2,-16(fp)
  804d5c:	10800317 	ldw	r2,12(r2)
  804d60:	1880152e 	bgeu	r3,r2,804db8 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  804d64:	e0bffc17 	ldw	r2,-16(fp)
  804d68:	10800017 	ldw	r2,0(r2)
  804d6c:	10800043 	ldbu	r2,1(r2)
  804d70:	10c03fcc 	andi	r3,r2,255
  804d74:	e0bffc17 	ldw	r2,-16(fp)
  804d78:	10800904 	addi	r2,r2,36
  804d7c:	01c00044 	movi	r7,1
  804d80:	e1bffb17 	ldw	r6,-20(fp)
  804d84:	100b883a 	mov	r5,r2
  804d88:	1809883a 	mov	r4,r3
  804d8c:	0800e080 	call	800e08 <ffs_DiskIORead>
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
            if (fp->fptr < fp->fsize &&
  804d90:	10000926 	beq	r2,zero,804db8 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                  ABORT(fp->fs, FR_DISK_ERR);
  804d94:	e0bffc17 	ldw	r2,-16(fp)
  804d98:	10c00183 	ldbu	r3,6(r2)
  804d9c:	00bfe004 	movi	r2,-128
  804da0:	1884b03a 	or	r2,r3,r2
  804da4:	1007883a 	mov	r3,r2
  804da8:	e0bffc17 	ldw	r2,-16(fp)
  804dac:	10c00185 	stb	r3,6(r2)
  804db0:	00800044 	movi	r2,1
  804db4:	00004606 	br	804ed0 <f_write+0x570>
         }
#endif
         fp->dsect = sect;
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	e0fffb17 	ldw	r3,-20(fp)
  804dc0:	10c00615 	stw	r3,24(r2)
      }
      wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  804dc4:	e0bffc17 	ldw	r2,-16(fp)
  804dc8:	10800217 	ldw	r2,8(r2)
  804dcc:	10807fcc 	andi	r2,r2,511
  804dd0:	00c08004 	movi	r3,512
  804dd4:	1885c83a 	sub	r2,r3,r2
  804dd8:	e0bff615 	stw	r2,-40(fp)
      if (wcnt > btw) wcnt = btw;
  804ddc:	e0bff617 	ldw	r2,-40(fp)
  804de0:	e0fffe17 	ldw	r3,-8(fp)
  804de4:	1880022e 	bgeu	r3,r2,804df0 <f_write+0x490>
  804de8:	e0bffe17 	ldw	r2,-8(fp)
  804dec:	e0bff615 	stw	r2,-40(fp)
      if (move_window(fp->fs, fp->dsect)) /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
      fp->fs->wflag = 1;
#else
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
  804df0:	e0bffc17 	ldw	r2,-16(fp)
  804df4:	10800217 	ldw	r2,8(r2)
  804df8:	10807fcc 	andi	r2,r2,511
  804dfc:	10800904 	addi	r2,r2,36
  804e00:	e0fffc17 	ldw	r3,-16(fp)
  804e04:	1885883a 	add	r2,r3,r2
  804e08:	e1bff617 	ldw	r6,-40(fp)
  804e0c:	e17ff817 	ldw	r5,-32(fp)
  804e10:	1009883a 	mov	r4,r2
  804e14:	08015880 	call	801588 <mem_cpy>
      fp->flag |= FA__DIRTY;
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10800183 	ldbu	r2,6(r2)
  804e20:	10801014 	ori	r2,r2,64
  804e24:	1007883a 	mov	r3,r2
  804e28:	e0bffc17 	ldw	r2,-16(fp)
  804e2c:	10c00185 	stb	r3,6(r2)
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  804e30:	e0fff817 	ldw	r3,-32(fp)
  804e34:	e0bff617 	ldw	r2,-40(fp)
  804e38:	1885883a 	add	r2,r3,r2
  804e3c:	e0bff815 	stw	r2,-32(fp)
  804e40:	e0bffc17 	ldw	r2,-16(fp)
  804e44:	10c00217 	ldw	r3,8(r2)
  804e48:	e0bff617 	ldw	r2,-40(fp)
  804e4c:	1887883a 	add	r3,r3,r2
  804e50:	e0bffc17 	ldw	r2,-16(fp)
  804e54:	10c00215 	stw	r3,8(r2)
  804e58:	e0bfff17 	ldw	r2,-4(fp)
  804e5c:	10c00017 	ldw	r3,0(r2)
  804e60:	e0bff617 	ldw	r2,-40(fp)
  804e64:	1887883a 	add	r3,r3,r2
  804e68:	e0bfff17 	ldw	r2,-4(fp)
  804e6c:	10c00015 	stw	r3,0(r2)
  804e70:	e0fffe17 	ldw	r3,-8(fp)
  804e74:	e0bff617 	ldw	r2,-40(fp)
  804e78:	1885c83a 	sub	r2,r3,r2
  804e7c:	e0bffe15 	stw	r2,-8(fp)
      LEAVE_FF(fp->fs, FR_INT_ERR);
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
  804e80:	e0bffe17 	ldw	r2,-8(fp)
  804e84:	103ee71e 	bne	r2,zero,804a24 <__alt_data_end+0xff804a24>
  804e88:	00000106 	br	804e90 <f_write+0x530>
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
  804e8c:	0001883a 	nop
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
      fp->flag |= FA__DIRTY;
#endif
   }

   if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
  804e90:	e0bffc17 	ldw	r2,-16(fp)
  804e94:	10800217 	ldw	r2,8(r2)
  804e98:	e0fffc17 	ldw	r3,-16(fp)
  804e9c:	18c00317 	ldw	r3,12(r3)
  804ea0:	1880042e 	bgeu	r3,r2,804eb4 <f_write+0x554>
  804ea4:	e0bffc17 	ldw	r2,-16(fp)
  804ea8:	10c00217 	ldw	r3,8(r2)
  804eac:	e0bffc17 	ldw	r2,-16(fp)
  804eb0:	10c00315 	stw	r3,12(r2)
   fp->flag |= FA__WRITTEN;                  /* Set file change flag */
  804eb4:	e0bffc17 	ldw	r2,-16(fp)
  804eb8:	10800183 	ldbu	r2,6(r2)
  804ebc:	10800814 	ori	r2,r2,32
  804ec0:	1007883a 	mov	r3,r2
  804ec4:	e0bffc17 	ldw	r2,-16(fp)
  804ec8:	10c00185 	stb	r3,6(r2)

   LEAVE_FF(fp->fs, FR_OK);
  804ecc:	0005883a 	mov	r2,zero
}
  804ed0:	e037883a 	mov	sp,fp
  804ed4:	dfc00117 	ldw	ra,4(sp)
  804ed8:	df000017 	ldw	fp,0(sp)
  804edc:	dec00204 	addi	sp,sp,8
  804ee0:	f800283a 	ret

00804ee4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
   FIL *fp     /* Pointer to the file object */
)
{
  804ee4:	defffa04 	addi	sp,sp,-24
  804ee8:	dfc00515 	stw	ra,20(sp)
  804eec:	df000415 	stw	fp,16(sp)
  804ef0:	df000404 	addi	fp,sp,16
  804ef4:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t tim;
   uint8_t *dir;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  804ef8:	e0bfff17 	ldw	r2,-4(fp)
  804efc:	10c00017 	ldw	r3,0(r2)
  804f00:	e0bfff17 	ldw	r2,-4(fp)
  804f04:	1080010b 	ldhu	r2,4(r2)
  804f08:	10bfffcc 	andi	r2,r2,65535
  804f0c:	100b883a 	mov	r5,r2
  804f10:	1809883a 	mov	r4,r3
  804f14:	0803ed00 	call	803ed0 <validate>
  804f18:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  804f1c:	e0bffc17 	ldw	r2,-16(fp)
  804f20:	10008c1e 	bne	r2,zero,805154 <f_sync+0x270>
      if (fp->flag & FA__WRITTEN) { /* Has the file been written? */
  804f24:	e0bfff17 	ldw	r2,-4(fp)
  804f28:	10800183 	ldbu	r2,6(r2)
  804f2c:	10803fcc 	andi	r2,r2,255
  804f30:	1080080c 	andi	r2,r2,32
  804f34:	10008726 	beq	r2,zero,805154 <f_sync+0x270>
#if !_FS_TINY  /* Write-back dirty buffer */
         if (fp->flag & FA__DIRTY) {
  804f38:	e0bfff17 	ldw	r2,-4(fp)
  804f3c:	10800183 	ldbu	r2,6(r2)
  804f40:	10803fcc 	andi	r2,r2,255
  804f44:	1080100c 	andi	r2,r2,64
  804f48:	10001726 	beq	r2,zero,804fa8 <f_sync+0xc4>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  804f4c:	e0bfff17 	ldw	r2,-4(fp)
  804f50:	10800017 	ldw	r2,0(r2)
  804f54:	10800043 	ldbu	r2,1(r2)
  804f58:	10c03fcc 	andi	r3,r2,255
  804f5c:	e0bfff17 	ldw	r2,-4(fp)
  804f60:	11000904 	addi	r4,r2,36
  804f64:	e0bfff17 	ldw	r2,-4(fp)
  804f68:	10800617 	ldw	r2,24(r2)
  804f6c:	01c00044 	movi	r7,1
  804f70:	100d883a 	mov	r6,r2
  804f74:	200b883a 	mov	r5,r4
  804f78:	1809883a 	mov	r4,r3
  804f7c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  804f80:	10000226 	beq	r2,zero,804f8c <f_sync+0xa8>
               LEAVE_FF(fp->fs, FR_DISK_ERR);
  804f84:	00800044 	movi	r2,1
  804f88:	00007306 	br	805158 <f_sync+0x274>
            fp->flag &= ~FA__DIRTY;
  804f8c:	e0bfff17 	ldw	r2,-4(fp)
  804f90:	10c00183 	ldbu	r3,6(r2)
  804f94:	00bfefc4 	movi	r2,-65
  804f98:	1884703a 	and	r2,r3,r2
  804f9c:	1007883a 	mov	r3,r2
  804fa0:	e0bfff17 	ldw	r2,-4(fp)
  804fa4:	10c00185 	stb	r3,6(r2)
         }
#endif
         /* Update the directory entry */
         res = move_window(fp->fs, fp->dir_sect);
  804fa8:	e0bfff17 	ldw	r2,-4(fp)
  804fac:	10c00017 	ldw	r3,0(r2)
  804fb0:	e0bfff17 	ldw	r2,-4(fp)
  804fb4:	10800717 	ldw	r2,28(r2)
  804fb8:	100b883a 	mov	r5,r2
  804fbc:	1809883a 	mov	r4,r3
  804fc0:	080175c0 	call	80175c <move_window>
  804fc4:	e0bffc15 	stw	r2,-16(fp)
         if (res == FR_OK) {
  804fc8:	e0bffc17 	ldw	r2,-16(fp)
  804fcc:	1000611e 	bne	r2,zero,805154 <f_sync+0x270>
            dir = fp->dir_ptr;
  804fd0:	e0bfff17 	ldw	r2,-4(fp)
  804fd4:	10800817 	ldw	r2,32(r2)
  804fd8:	e0bffd15 	stw	r2,-12(fp)
            dir[DIR_Attr] |= AM_ARC;               /* Set archive bit */
  804fdc:	e0bffd17 	ldw	r2,-12(fp)
  804fe0:	108002c4 	addi	r2,r2,11
  804fe4:	e0fffd17 	ldw	r3,-12(fp)
  804fe8:	18c002c4 	addi	r3,r3,11
  804fec:	18c00003 	ldbu	r3,0(r3)
  804ff0:	18c00814 	ori	r3,r3,32
  804ff4:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_FileSize, fp->fsize);    /* Update file size */
  804ff8:	e0bffd17 	ldw	r2,-12(fp)
  804ffc:	10800704 	addi	r2,r2,28
  805000:	e0ffff17 	ldw	r3,-4(fp)
  805004:	18c00317 	ldw	r3,12(r3)
  805008:	10c00005 	stb	r3,0(r2)
  80500c:	e0bffd17 	ldw	r2,-12(fp)
  805010:	10800744 	addi	r2,r2,29
  805014:	e0ffff17 	ldw	r3,-4(fp)
  805018:	18c00317 	ldw	r3,12(r3)
  80501c:	18ffffcc 	andi	r3,r3,65535
  805020:	1807d23a 	srai	r3,r3,8
  805024:	10c00005 	stb	r3,0(r2)
  805028:	e0bffd17 	ldw	r2,-12(fp)
  80502c:	10800784 	addi	r2,r2,30
  805030:	e0ffff17 	ldw	r3,-4(fp)
  805034:	18c00317 	ldw	r3,12(r3)
  805038:	1806d43a 	srli	r3,r3,16
  80503c:	10c00005 	stb	r3,0(r2)
  805040:	e0bffd17 	ldw	r2,-12(fp)
  805044:	108007c4 	addi	r2,r2,31
  805048:	e0ffff17 	ldw	r3,-4(fp)
  80504c:	18c00317 	ldw	r3,12(r3)
  805050:	1806d63a 	srli	r3,r3,24
  805054:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, fp->sclust);             /* Update start cluster */
  805058:	e0bffd17 	ldw	r2,-12(fp)
  80505c:	10800684 	addi	r2,r2,26
  805060:	e0ffff17 	ldw	r3,-4(fp)
  805064:	18c00417 	ldw	r3,16(r3)
  805068:	10c00005 	stb	r3,0(r2)
  80506c:	e0bffd17 	ldw	r2,-12(fp)
  805070:	108006c4 	addi	r2,r2,27
  805074:	e0ffff17 	ldw	r3,-4(fp)
  805078:	18c00417 	ldw	r3,16(r3)
  80507c:	18ffffcc 	andi	r3,r3,65535
  805080:	1807d23a 	srai	r3,r3,8
  805084:	10c00005 	stb	r3,0(r2)
  805088:	e0bffd17 	ldw	r2,-12(fp)
  80508c:	10800504 	addi	r2,r2,20
  805090:	e0ffff17 	ldw	r3,-4(fp)
  805094:	18c00417 	ldw	r3,16(r3)
  805098:	1806d43a 	srli	r3,r3,16
  80509c:	10c00005 	stb	r3,0(r2)
  8050a0:	e0bffd17 	ldw	r2,-12(fp)
  8050a4:	10800544 	addi	r2,r2,21
  8050a8:	e0ffff17 	ldw	r3,-4(fp)
  8050ac:	18c00417 	ldw	r3,16(r3)
  8050b0:	1806d43a 	srli	r3,r3,16
  8050b4:	1807d23a 	srai	r3,r3,8
  8050b8:	10c00005 	stb	r3,0(r2)
            tim = get_fattime();                /* Update updated time */
  8050bc:	080155c0 	call	80155c <get_fattime>
  8050c0:	e0bffe15 	stw	r2,-8(fp)
            ST_DWORD(dir+DIR_WrtTime, tim);
  8050c4:	e0bffd17 	ldw	r2,-12(fp)
  8050c8:	10800584 	addi	r2,r2,22
  8050cc:	e0fffe17 	ldw	r3,-8(fp)
  8050d0:	10c00005 	stb	r3,0(r2)
  8050d4:	e0bffd17 	ldw	r2,-12(fp)
  8050d8:	108005c4 	addi	r2,r2,23
  8050dc:	e0fffe17 	ldw	r3,-8(fp)
  8050e0:	18ffffcc 	andi	r3,r3,65535
  8050e4:	1807d23a 	srai	r3,r3,8
  8050e8:	10c00005 	stb	r3,0(r2)
  8050ec:	e0bffd17 	ldw	r2,-12(fp)
  8050f0:	10800604 	addi	r2,r2,24
  8050f4:	e0fffe17 	ldw	r3,-8(fp)
  8050f8:	1806d43a 	srli	r3,r3,16
  8050fc:	10c00005 	stb	r3,0(r2)
  805100:	e0bffd17 	ldw	r2,-12(fp)
  805104:	10800644 	addi	r2,r2,25
  805108:	e0fffe17 	ldw	r3,-8(fp)
  80510c:	1806d63a 	srli	r3,r3,24
  805110:	10c00005 	stb	r3,0(r2)
            fp->flag &= ~FA__WRITTEN;
  805114:	e0bfff17 	ldw	r2,-4(fp)
  805118:	10c00183 	ldbu	r3,6(r2)
  80511c:	00bff7c4 	movi	r2,-33
  805120:	1884703a 	and	r2,r3,r2
  805124:	1007883a 	mov	r3,r2
  805128:	e0bfff17 	ldw	r2,-4(fp)
  80512c:	10c00185 	stb	r3,6(r2)
            fp->fs->wflag = 1;
  805130:	e0bfff17 	ldw	r2,-4(fp)
  805134:	10800017 	ldw	r2,0(r2)
  805138:	00c00044 	movi	r3,1
  80513c:	10c00105 	stb	r3,4(r2)
            res = sync(fp->fs);
  805140:	e0bfff17 	ldw	r2,-4(fp)
  805144:	10800017 	ldw	r2,0(r2)
  805148:	1009883a 	mov	r4,r2
  80514c:	08018b80 	call	8018b8 <sync>
  805150:	e0bffc15 	stw	r2,-16(fp)
         }
      }
   }

   LEAVE_FF(fp->fs, res);
  805154:	e0bffc17 	ldw	r2,-16(fp)
}
  805158:	e037883a 	mov	sp,fp
  80515c:	dfc00117 	ldw	ra,4(sp)
  805160:	df000017 	ldw	fp,0(sp)
  805164:	dec00204 	addi	sp,sp,8
  805168:	f800283a 	ret

0080516c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL *fp     /* Pointer to the file object to be closed */
)
{
  80516c:	defffc04 	addi	sp,sp,-16
  805170:	dfc00315 	stw	ra,12(sp)
  805174:	df000215 	stw	fp,8(sp)
  805178:	df000204 	addi	fp,sp,8
  80517c:	e13fff15 	stw	r4,-4(fp)
   res = validate(fs, fp->id);
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
   LEAVE_FF(fs, res);

#else
   res = f_sync(fp);    /* Flush cached data */
  805180:	e13fff17 	ldw	r4,-4(fp)
  805184:	0804ee40 	call	804ee4 <f_sync>
  805188:	e0bffe15 	stw	r2,-8(fp)
#else
      res = dec_lock(fp->lockid);
#endif
   }
#endif
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
  80518c:	e0bffe17 	ldw	r2,-8(fp)
  805190:	1000021e 	bne	r2,zero,80519c <f_close+0x30>
  805194:	e0bfff17 	ldw	r2,-4(fp)
  805198:	10000015 	stw	zero,0(r2)
   return res;
  80519c:	e0bffe17 	ldw	r2,-8(fp)
#endif
}
  8051a0:	e037883a 	mov	sp,fp
  8051a4:	dfc00117 	ldw	ra,4(sp)
  8051a8:	df000017 	ldw	fp,0(sp)
  8051ac:	dec00204 	addi	sp,sp,8
  8051b0:	f800283a 	ret

008051b4 <f_lseek>:

FRESULT f_lseek (
   FIL *fp,          /* Pointer to the file object */
   uint32_t ofs      /* File pointer from top of file */
)
{
  8051b4:	defff604 	addi	sp,sp,-40
  8051b8:	dfc00915 	stw	ra,36(sp)
  8051bc:	df000815 	stw	fp,32(sp)
  8051c0:	dc000715 	stw	r16,28(sp)
  8051c4:	df000804 	addi	fp,sp,32
  8051c8:	e13ffd15 	stw	r4,-12(fp)
  8051cc:	e17ffe15 	stw	r5,-8(fp)
   FRESULT res;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  8051d0:	e0bffd17 	ldw	r2,-12(fp)
  8051d4:	10c00017 	ldw	r3,0(r2)
  8051d8:	e0bffd17 	ldw	r2,-12(fp)
  8051dc:	1080010b 	ldhu	r2,4(r2)
  8051e0:	10bfffcc 	andi	r2,r2,65535
  8051e4:	100b883a 	mov	r5,r2
  8051e8:	1809883a 	mov	r4,r3
  8051ec:	0803ed00 	call	803ed0 <validate>
  8051f0:	e0bffa15 	stw	r2,-24(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8051f4:	e0bffa17 	ldw	r2,-24(fp)
  8051f8:	10000226 	beq	r2,zero,805204 <f_lseek+0x50>
  8051fc:	e0bffa17 	ldw	r2,-24(fp)
  805200:	00012206 	br	80568c <f_lseek+0x4d8>
   if (fp->flag & FA__ERROR)        /* Check abort flag */
  805204:	e0bffd17 	ldw	r2,-12(fp)
  805208:	10800183 	ldbu	r2,6(r2)
  80520c:	10803fcc 	andi	r2,r2,255
  805210:	1080201c 	xori	r2,r2,128
  805214:	10bfe004 	addi	r2,r2,-128
  805218:	1000020e 	bge	r2,zero,805224 <f_lseek+0x70>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  80521c:	00800084 	movi	r2,2
  805220:	00011a06 	br	80568c <f_lseek+0x4d8>

   /* Normal Seek */
   {
      uint32_t clst, bcs, nsect, ifptr;

      if (ofs > fp->fsize              /* In read-only mode, clip offset with the file size */
  805224:	e0bffd17 	ldw	r2,-12(fp)
  805228:	10c00317 	ldw	r3,12(r2)
  80522c:	e0bffe17 	ldw	r2,-8(fp)
  805230:	1880082e 	bgeu	r3,r2,805254 <f_lseek+0xa0>
#if !_FS_READONLY
          && !(fp->flag & FA_WRITE)
  805234:	e0bffd17 	ldw	r2,-12(fp)
  805238:	10800183 	ldbu	r2,6(r2)
  80523c:	10803fcc 	andi	r2,r2,255
  805240:	1080008c 	andi	r2,r2,2
  805244:	1000031e 	bne	r2,zero,805254 <f_lseek+0xa0>
#endif
         ) ofs = fp->fsize;
  805248:	e0bffd17 	ldw	r2,-12(fp)
  80524c:	10800317 	ldw	r2,12(r2)
  805250:	e0bffe15 	stw	r2,-8(fp)

      ifptr = fp->fptr;
  805254:	e0bffd17 	ldw	r2,-12(fp)
  805258:	10800217 	ldw	r2,8(r2)
  80525c:	e0bffb15 	stw	r2,-20(fp)
      fp->fptr = nsect = 0;
  805260:	e03ff915 	stw	zero,-28(fp)
  805264:	e0bffd17 	ldw	r2,-12(fp)
  805268:	e0fff917 	ldw	r3,-28(fp)
  80526c:	10c00215 	stw	r3,8(r2)
      if (ofs) {
  805270:	e0bffe17 	ldw	r2,-8(fp)
  805274:	1000b226 	beq	r2,zero,805540 <f_lseek+0x38c>
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
  805278:	e0bffd17 	ldw	r2,-12(fp)
  80527c:	10800017 	ldw	r2,0(r2)
  805280:	10800083 	ldbu	r2,2(r2)
  805284:	10803fcc 	andi	r2,r2,255
  805288:	1004927a 	slli	r2,r2,9
  80528c:	e0bffc15 	stw	r2,-16(fp)
         if (ifptr > 0 &&
  805290:	e0bffb17 	ldw	r2,-20(fp)
  805294:	10001c26 	beq	r2,zero,805308 <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
  805298:	e0bffe17 	ldw	r2,-8(fp)
  80529c:	10bfffc4 	addi	r2,r2,-1
  8052a0:	e17ffc17 	ldw	r5,-16(fp)
  8052a4:	1009883a 	mov	r4,r2
  8052a8:	080a3580 	call	80a358 <__udivsi3>
  8052ac:	1021883a 	mov	r16,r2
  8052b0:	e0bffb17 	ldw	r2,-20(fp)
  8052b4:	10bfffc4 	addi	r2,r2,-1
  8052b8:	e17ffc17 	ldw	r5,-16(fp)
  8052bc:	1009883a 	mov	r4,r2
  8052c0:	080a3580 	call	80a358 <__udivsi3>

      ifptr = fp->fptr;
      fp->fptr = nsect = 0;
      if (ofs) {
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
         if (ifptr > 0 &&
  8052c4:	80801036 	bltu	r16,r2,805308 <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
  8052c8:	e0bffb17 	ldw	r2,-20(fp)
  8052cc:	10ffffc4 	addi	r3,r2,-1
  8052d0:	e0bffc17 	ldw	r2,-16(fp)
  8052d4:	0085c83a 	sub	r2,zero,r2
  8052d8:	1886703a 	and	r3,r3,r2
  8052dc:	e0bffd17 	ldw	r2,-12(fp)
  8052e0:	10c00215 	stw	r3,8(r2)
            ofs -= fp->fptr;
  8052e4:	e0bffd17 	ldw	r2,-12(fp)
  8052e8:	10800217 	ldw	r2,8(r2)
  8052ec:	e0fffe17 	ldw	r3,-8(fp)
  8052f0:	1885c83a 	sub	r2,r3,r2
  8052f4:	e0bffe15 	stw	r2,-8(fp)
            clst = fp->clust;
  8052f8:	e0bffd17 	ldw	r2,-12(fp)
  8052fc:	10800517 	ldw	r2,20(r2)
  805300:	e0bff815 	stw	r2,-32(fp)
  805304:	00002906 	br	8053ac <f_lseek+0x1f8>
         } else {                         /* When seek to back cluster, */
            clst = fp->sclust;                  /* start from the first cluster */
  805308:	e0bffd17 	ldw	r2,-12(fp)
  80530c:	10800417 	ldw	r2,16(r2)
  805310:	e0bff815 	stw	r2,-32(fp)
#if !_FS_READONLY
            if (clst == 0) {                 /* If no cluster chain, create a new chain */
  805314:	e0bff817 	ldw	r2,-32(fp)
  805318:	1000211e 	bne	r2,zero,8053a0 <f_lseek+0x1ec>
               clst = create_chain(fp->fs, 0);
  80531c:	e0bffd17 	ldw	r2,-12(fp)
  805320:	10800017 	ldw	r2,0(r2)
  805324:	000b883a 	mov	r5,zero
  805328:	1009883a 	mov	r4,r2
  80532c:	08022700 	call	802270 <create_chain>
  805330:	e0bff815 	stw	r2,-32(fp)
               if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  805334:	e0bff817 	ldw	r2,-32(fp)
  805338:	10800058 	cmpnei	r2,r2,1
  80533c:	1000091e 	bne	r2,zero,805364 <f_lseek+0x1b0>
  805340:	e0bffd17 	ldw	r2,-12(fp)
  805344:	10c00183 	ldbu	r3,6(r2)
  805348:	00bfe004 	movi	r2,-128
  80534c:	1884b03a 	or	r2,r3,r2
  805350:	1007883a 	mov	r3,r2
  805354:	e0bffd17 	ldw	r2,-12(fp)
  805358:	10c00185 	stb	r3,6(r2)
  80535c:	00800084 	movi	r2,2
  805360:	0000ca06 	br	80568c <f_lseek+0x4d8>
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  805364:	e0bff817 	ldw	r2,-32(fp)
  805368:	10bfffd8 	cmpnei	r2,r2,-1
  80536c:	1000091e 	bne	r2,zero,805394 <f_lseek+0x1e0>
  805370:	e0bffd17 	ldw	r2,-12(fp)
  805374:	10c00183 	ldbu	r3,6(r2)
  805378:	00bfe004 	movi	r2,-128
  80537c:	1884b03a 	or	r2,r3,r2
  805380:	1007883a 	mov	r3,r2
  805384:	e0bffd17 	ldw	r2,-12(fp)
  805388:	10c00185 	stb	r3,6(r2)
  80538c:	00800044 	movi	r2,1
  805390:	0000be06 	br	80568c <f_lseek+0x4d8>
               fp->sclust = clst;
  805394:	e0bffd17 	ldw	r2,-12(fp)
  805398:	e0fff817 	ldw	r3,-32(fp)
  80539c:	10c00415 	stw	r3,16(r2)
            }
#endif
            fp->clust = clst;
  8053a0:	e0bffd17 	ldw	r2,-12(fp)
  8053a4:	e0fff817 	ldw	r3,-32(fp)
  8053a8:	10c00515 	stw	r3,20(r2)
         }
         if (clst != 0) {
  8053ac:	e0bff817 	ldw	r2,-32(fp)
  8053b0:	10006326 	beq	r2,zero,805540 <f_lseek+0x38c>
            while (ofs > bcs) {                 /* Cluster following loop */
  8053b4:	00004006 	br	8054b8 <f_lseek+0x304>
#if !_FS_READONLY
               if (fp->flag & FA_WRITE) {       /* Check if in write mode or not */
  8053b8:	e0bffd17 	ldw	r2,-12(fp)
  8053bc:	10800183 	ldbu	r2,6(r2)
  8053c0:	10803fcc 	andi	r2,r2,255
  8053c4:	1080008c 	andi	r2,r2,2
  8053c8:	10000b26 	beq	r2,zero,8053f8 <f_lseek+0x244>
                  clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
  8053cc:	e0bffd17 	ldw	r2,-12(fp)
  8053d0:	10800017 	ldw	r2,0(r2)
  8053d4:	e17ff817 	ldw	r5,-32(fp)
  8053d8:	1009883a 	mov	r4,r2
  8053dc:	08022700 	call	802270 <create_chain>
  8053e0:	e0bff815 	stw	r2,-32(fp)
                  if (clst == 0) {           /* When disk gets full, clip file size */
  8053e4:	e0bff817 	ldw	r2,-32(fp)
  8053e8:	1000091e 	bne	r2,zero,805410 <f_lseek+0x25c>
                     ofs = bcs; break;
  8053ec:	e0bffc17 	ldw	r2,-16(fp)
  8053f0:	e0bffe15 	stw	r2,-8(fp)
  8053f4:	00003306 	br	8054c4 <f_lseek+0x310>
                  }
               } else
#endif
                  clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
  8053f8:	e0bffd17 	ldw	r2,-12(fp)
  8053fc:	10800017 	ldw	r2,0(r2)
  805400:	e17ff817 	ldw	r5,-32(fp)
  805404:	1009883a 	mov	r4,r2
  805408:	0801b440 	call	801b44 <get_fat>
  80540c:	e0bff815 	stw	r2,-32(fp)
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  805410:	e0bff817 	ldw	r2,-32(fp)
  805414:	10bfffd8 	cmpnei	r2,r2,-1
  805418:	1000091e 	bne	r2,zero,805440 <f_lseek+0x28c>
  80541c:	e0bffd17 	ldw	r2,-12(fp)
  805420:	10c00183 	ldbu	r3,6(r2)
  805424:	00bfe004 	movi	r2,-128
  805428:	1884b03a 	or	r2,r3,r2
  80542c:	1007883a 	mov	r3,r2
  805430:	e0bffd17 	ldw	r2,-12(fp)
  805434:	10c00185 	stb	r3,6(r2)
  805438:	00800044 	movi	r2,1
  80543c:	00009306 	br	80568c <f_lseek+0x4d8>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  805440:	e0bff817 	ldw	r2,-32(fp)
  805444:	108000b0 	cmpltui	r2,r2,2
  805448:	1000051e 	bne	r2,zero,805460 <f_lseek+0x2ac>
  80544c:	e0bffd17 	ldw	r2,-12(fp)
  805450:	10800017 	ldw	r2,0(r2)
  805454:	10800617 	ldw	r2,24(r2)
  805458:	e0fff817 	ldw	r3,-32(fp)
  80545c:	18800936 	bltu	r3,r2,805484 <f_lseek+0x2d0>
  805460:	e0bffd17 	ldw	r2,-12(fp)
  805464:	10c00183 	ldbu	r3,6(r2)
  805468:	00bfe004 	movi	r2,-128
  80546c:	1884b03a 	or	r2,r3,r2
  805470:	1007883a 	mov	r3,r2
  805474:	e0bffd17 	ldw	r2,-12(fp)
  805478:	10c00185 	stb	r3,6(r2)
  80547c:	00800084 	movi	r2,2
  805480:	00008206 	br	80568c <f_lseek+0x4d8>
               fp->clust = clst;
  805484:	e0bffd17 	ldw	r2,-12(fp)
  805488:	e0fff817 	ldw	r3,-32(fp)
  80548c:	10c00515 	stw	r3,20(r2)
               fp->fptr += bcs;
  805490:	e0bffd17 	ldw	r2,-12(fp)
  805494:	10c00217 	ldw	r3,8(r2)
  805498:	e0bffc17 	ldw	r2,-16(fp)
  80549c:	1887883a 	add	r3,r3,r2
  8054a0:	e0bffd17 	ldw	r2,-12(fp)
  8054a4:	10c00215 	stw	r3,8(r2)
               ofs -= bcs;
  8054a8:	e0fffe17 	ldw	r3,-8(fp)
  8054ac:	e0bffc17 	ldw	r2,-16(fp)
  8054b0:	1885c83a 	sub	r2,r3,r2
  8054b4:	e0bffe15 	stw	r2,-8(fp)
            }
#endif
            fp->clust = clst;
         }
         if (clst != 0) {
            while (ofs > bcs) {                 /* Cluster following loop */
  8054b8:	e0bffe17 	ldw	r2,-8(fp)
  8054bc:	e0fffc17 	ldw	r3,-16(fp)
  8054c0:	18bfbd36 	bltu	r3,r2,8053b8 <__alt_data_end+0xff8053b8>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
               fp->clust = clst;
               fp->fptr += bcs;
               ofs -= bcs;
            }
            fp->fptr += ofs;
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	10c00217 	ldw	r3,8(r2)
  8054cc:	e0bffe17 	ldw	r2,-8(fp)
  8054d0:	1887883a 	add	r3,r3,r2
  8054d4:	e0bffd17 	ldw	r2,-12(fp)
  8054d8:	10c00215 	stw	r3,8(r2)
            if (ofs % SS(fp->fs)) {
  8054dc:	e0bffe17 	ldw	r2,-8(fp)
  8054e0:	10807fcc 	andi	r2,r2,511
  8054e4:	10001626 	beq	r2,zero,805540 <f_lseek+0x38c>
               nsect = clust2sect(fp->fs, clst);   /* Current sector */
  8054e8:	e0bffd17 	ldw	r2,-12(fp)
  8054ec:	10800017 	ldw	r2,0(r2)
  8054f0:	e17ff817 	ldw	r5,-32(fp)
  8054f4:	1009883a 	mov	r4,r2
  8054f8:	0801ad80 	call	801ad8 <clust2sect>
  8054fc:	e0bff915 	stw	r2,-28(fp)
               if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  805500:	e0bff917 	ldw	r2,-28(fp)
  805504:	1000091e 	bne	r2,zero,80552c <f_lseek+0x378>
  805508:	e0bffd17 	ldw	r2,-12(fp)
  80550c:	10c00183 	ldbu	r3,6(r2)
  805510:	00bfe004 	movi	r2,-128
  805514:	1884b03a 	or	r2,r3,r2
  805518:	1007883a 	mov	r3,r2
  80551c:	e0bffd17 	ldw	r2,-12(fp)
  805520:	10c00185 	stb	r3,6(r2)
  805524:	00800084 	movi	r2,2
  805528:	00005806 	br	80568c <f_lseek+0x4d8>
               nsect += ofs / SS(fp->fs);
  80552c:	e0bffe17 	ldw	r2,-8(fp)
  805530:	1004d27a 	srli	r2,r2,9
  805534:	e0fff917 	ldw	r3,-28(fp)
  805538:	1885883a 	add	r2,r3,r2
  80553c:	e0bff915 	stw	r2,-28(fp)
            }
         }
      }
      if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) { /* Fill sector cache if needed */
  805540:	e0bffd17 	ldw	r2,-12(fp)
  805544:	10800217 	ldw	r2,8(r2)
  805548:	10807fcc 	andi	r2,r2,511
  80554c:	10003f26 	beq	r2,zero,80564c <f_lseek+0x498>
  805550:	e0bffd17 	ldw	r2,-12(fp)
  805554:	10c00617 	ldw	r3,24(r2)
  805558:	e0bff917 	ldw	r2,-28(fp)
  80555c:	18803b26 	beq	r3,r2,80564c <f_lseek+0x498>
#if !_FS_TINY
#if !_FS_READONLY
         if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
  805560:	e0bffd17 	ldw	r2,-12(fp)
  805564:	10800183 	ldbu	r2,6(r2)
  805568:	10803fcc 	andi	r2,r2,255
  80556c:	1080100c 	andi	r2,r2,64
  805570:	10001e26 	beq	r2,zero,8055ec <f_lseek+0x438>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  805574:	e0bffd17 	ldw	r2,-12(fp)
  805578:	10800017 	ldw	r2,0(r2)
  80557c:	10800043 	ldbu	r2,1(r2)
  805580:	10c03fcc 	andi	r3,r2,255
  805584:	e0bffd17 	ldw	r2,-12(fp)
  805588:	11000904 	addi	r4,r2,36
  80558c:	e0bffd17 	ldw	r2,-12(fp)
  805590:	10800617 	ldw	r2,24(r2)
  805594:	01c00044 	movi	r7,1
  805598:	100d883a 	mov	r6,r2
  80559c:	200b883a 	mov	r5,r4
  8055a0:	1809883a 	mov	r4,r3
  8055a4:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8055a8:	10000926 	beq	r2,zero,8055d0 <f_lseek+0x41c>
               ABORT(fp->fs, FR_DISK_ERR);
  8055ac:	e0bffd17 	ldw	r2,-12(fp)
  8055b0:	10c00183 	ldbu	r3,6(r2)
  8055b4:	00bfe004 	movi	r2,-128
  8055b8:	1884b03a 	or	r2,r3,r2
  8055bc:	1007883a 	mov	r3,r2
  8055c0:	e0bffd17 	ldw	r2,-12(fp)
  8055c4:	10c00185 	stb	r3,6(r2)
  8055c8:	00800044 	movi	r2,1
  8055cc:	00002f06 	br	80568c <f_lseek+0x4d8>
            fp->flag &= ~FA__DIRTY;
  8055d0:	e0bffd17 	ldw	r2,-12(fp)
  8055d4:	10c00183 	ldbu	r3,6(r2)
  8055d8:	00bfefc4 	movi	r2,-65
  8055dc:	1884703a 	and	r2,r3,r2
  8055e0:	1007883a 	mov	r3,r2
  8055e4:	e0bffd17 	ldw	r2,-12(fp)
  8055e8:	10c00185 	stb	r3,6(r2)
         }
#endif
         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK) /* Fill sector cache */
  8055ec:	e0bffd17 	ldw	r2,-12(fp)
  8055f0:	10800017 	ldw	r2,0(r2)
  8055f4:	10800043 	ldbu	r2,1(r2)
  8055f8:	10c03fcc 	andi	r3,r2,255
  8055fc:	e0bffd17 	ldw	r2,-12(fp)
  805600:	10800904 	addi	r2,r2,36
  805604:	01c00044 	movi	r7,1
  805608:	e1bff917 	ldw	r6,-28(fp)
  80560c:	100b883a 	mov	r5,r2
  805610:	1809883a 	mov	r4,r3
  805614:	0800e080 	call	800e08 <ffs_DiskIORead>
  805618:	10000926 	beq	r2,zero,805640 <f_lseek+0x48c>
            ABORT(fp->fs, FR_DISK_ERR);
  80561c:	e0bffd17 	ldw	r2,-12(fp)
  805620:	10c00183 	ldbu	r3,6(r2)
  805624:	00bfe004 	movi	r2,-128
  805628:	1884b03a 	or	r2,r3,r2
  80562c:	1007883a 	mov	r3,r2
  805630:	e0bffd17 	ldw	r2,-12(fp)
  805634:	10c00185 	stb	r3,6(r2)
  805638:	00800044 	movi	r2,1
  80563c:	00001306 	br	80568c <f_lseek+0x4d8>
#endif
         fp->dsect = nsect;
  805640:	e0bffd17 	ldw	r2,-12(fp)
  805644:	e0fff917 	ldw	r3,-28(fp)
  805648:	10c00615 	stw	r3,24(r2)
      }
#if !_FS_READONLY
      if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
  80564c:	e0bffd17 	ldw	r2,-12(fp)
  805650:	10800217 	ldw	r2,8(r2)
  805654:	e0fffd17 	ldw	r3,-12(fp)
  805658:	18c00317 	ldw	r3,12(r3)
  80565c:	18800a2e 	bgeu	r3,r2,805688 <f_lseek+0x4d4>
         fp->fsize = fp->fptr;
  805660:	e0bffd17 	ldw	r2,-12(fp)
  805664:	10c00217 	ldw	r3,8(r2)
  805668:	e0bffd17 	ldw	r2,-12(fp)
  80566c:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  805670:	e0bffd17 	ldw	r2,-12(fp)
  805674:	10800183 	ldbu	r2,6(r2)
  805678:	10800814 	ori	r2,r2,32
  80567c:	1007883a 	mov	r3,r2
  805680:	e0bffd17 	ldw	r2,-12(fp)
  805684:	10c00185 	stb	r3,6(r2)
      }
#endif
   }

   LEAVE_FF(fp->fs, res);
  805688:	e0bffa17 	ldw	r2,-24(fp)
}
  80568c:	e6ffff04 	addi	sp,fp,-4
  805690:	dfc00217 	ldw	ra,8(sp)
  805694:	df000117 	ldw	fp,4(sp)
  805698:	dc000017 	ldw	r16,0(sp)
  80569c:	dec00304 	addi	sp,sp,12
  8056a0:	f800283a 	ret

008056a4 <f_opendir>:

FRESULT f_opendir (
   DIR *dj,       /* Pointer to directory object to create */
   const TCHAR *path /* Pointer to the directory path */
)
{
  8056a4:	defff804 	addi	sp,sp,-32
  8056a8:	dfc00715 	stw	ra,28(sp)
  8056ac:	df000615 	stw	fp,24(sp)
  8056b0:	df000604 	addi	fp,sp,24
  8056b4:	e13ffe15 	stw	r4,-8(fp)
  8056b8:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj->fs, 0);
  8056bc:	e0fffe17 	ldw	r3,-8(fp)
  8056c0:	e0bfff04 	addi	r2,fp,-4
  8056c4:	000d883a 	mov	r6,zero
  8056c8:	180b883a 	mov	r5,r3
  8056cc:	1009883a 	mov	r4,r2
  8056d0:	08035900 	call	803590 <chk_mounted>
  8056d4:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  8056d8:	e0bffa17 	ldw	r2,-24(fp)
  8056dc:	1000471e 	bne	r2,zero,8057fc <f_opendir+0x158>

      INIT_BUF(*dj);
  8056e0:	e0bffe17 	ldw	r2,-8(fp)
  8056e4:	e0fffb04 	addi	r3,fp,-20
  8056e8:	10c00615 	stw	r3,24(r2)
      res = follow_path(dj, path);        /* Follow the path to the directory */
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	100b883a 	mov	r5,r2
  8056f4:	e13ffe17 	ldw	r4,-8(fp)
  8056f8:	08032080 	call	803208 <follow_path>
  8056fc:	e0bffa15 	stw	r2,-24(fp)
      FREE_BUF();
      if (res == FR_OK) {                 /* Follow completed */
  805700:	e0bffa17 	ldw	r2,-24(fp)
  805704:	1000381e 	bne	r2,zero,8057e8 <f_opendir+0x144>
         if (dj->dir) {                /* It is not the root dir */
  805708:	e0bffe17 	ldw	r2,-8(fp)
  80570c:	10800517 	ldw	r2,20(r2)
  805710:	10002a26 	beq	r2,zero,8057bc <f_opendir+0x118>
            if (dj->dir[DIR_Attr] & AM_DIR) {   /* The object is a directory */
  805714:	e0bffe17 	ldw	r2,-8(fp)
  805718:	10800517 	ldw	r2,20(r2)
  80571c:	108002c4 	addi	r2,r2,11
  805720:	10800003 	ldbu	r2,0(r2)
  805724:	10803fcc 	andi	r2,r2,255
  805728:	1080040c 	andi	r2,r2,16
  80572c:	10002126 	beq	r2,zero,8057b4 <f_opendir+0x110>
               dj->sclust = LD_CLUST(dj->dir);
  805730:	e0bffe17 	ldw	r2,-8(fp)
  805734:	10800517 	ldw	r2,20(r2)
  805738:	10800544 	addi	r2,r2,21
  80573c:	10800003 	ldbu	r2,0(r2)
  805740:	10803fcc 	andi	r2,r2,255
  805744:	1004923a 	slli	r2,r2,8
  805748:	1007883a 	mov	r3,r2
  80574c:	e0bffe17 	ldw	r2,-8(fp)
  805750:	10800517 	ldw	r2,20(r2)
  805754:	10800504 	addi	r2,r2,20
  805758:	10800003 	ldbu	r2,0(r2)
  80575c:	10803fcc 	andi	r2,r2,255
  805760:	1884b03a 	or	r2,r3,r2
  805764:	10bfffcc 	andi	r2,r2,65535
  805768:	1006943a 	slli	r3,r2,16
  80576c:	e0bffe17 	ldw	r2,-8(fp)
  805770:	10800517 	ldw	r2,20(r2)
  805774:	108006c4 	addi	r2,r2,27
  805778:	10800003 	ldbu	r2,0(r2)
  80577c:	10803fcc 	andi	r2,r2,255
  805780:	1004923a 	slli	r2,r2,8
  805784:	1009883a 	mov	r4,r2
  805788:	e0bffe17 	ldw	r2,-8(fp)
  80578c:	10800517 	ldw	r2,20(r2)
  805790:	10800684 	addi	r2,r2,26
  805794:	10800003 	ldbu	r2,0(r2)
  805798:	10803fcc 	andi	r2,r2,255
  80579c:	2084b03a 	or	r2,r4,r2
  8057a0:	10bfffcc 	andi	r2,r2,65535
  8057a4:	1886b03a 	or	r3,r3,r2
  8057a8:	e0bffe17 	ldw	r2,-8(fp)
  8057ac:	10c00215 	stw	r3,8(r2)
  8057b0:	00000206 	br	8057bc <f_opendir+0x118>
            } else {                /* The object is not a directory */
               res = FR_NO_PATH;
  8057b4:	00800144 	movi	r2,5
  8057b8:	e0bffa15 	stw	r2,-24(fp)
            }
         }
         if (res == FR_OK) {
  8057bc:	e0bffa17 	ldw	r2,-24(fp)
  8057c0:	1000091e 	bne	r2,zero,8057e8 <f_opendir+0x144>
            dj->id = dj->fs->id;
  8057c4:	e0bffe17 	ldw	r2,-8(fp)
  8057c8:	10800017 	ldw	r2,0(r2)
  8057cc:	10c0018b 	ldhu	r3,6(r2)
  8057d0:	e0bffe17 	ldw	r2,-8(fp)
  8057d4:	10c0010d 	sth	r3,4(r2)
            res = dir_sdi(dj, 0);         /* Rewind dir */
  8057d8:	000b883a 	mov	r5,zero
  8057dc:	e13ffe17 	ldw	r4,-8(fp)
  8057e0:	080244c0 	call	80244c <dir_sdi>
  8057e4:	e0bffa15 	stw	r2,-24(fp)
         }
      }
      if (res == FR_NO_FILE) res = FR_NO_PATH;
  8057e8:	e0bffa17 	ldw	r2,-24(fp)
  8057ec:	10800118 	cmpnei	r2,r2,4
  8057f0:	1000021e 	bne	r2,zero,8057fc <f_opendir+0x158>
  8057f4:	00800144 	movi	r2,5
  8057f8:	e0bffa15 	stw	r2,-24(fp)
   }

   LEAVE_FF(dj->fs, res);
  8057fc:	e0bffa17 	ldw	r2,-24(fp)
}
  805800:	e037883a 	mov	sp,fp
  805804:	dfc00117 	ldw	ra,4(sp)
  805808:	df000017 	ldw	fp,0(sp)
  80580c:	dec00204 	addi	sp,sp,8
  805810:	f800283a 	ret

00805814 <f_readdir>:

FRESULT f_readdir (
   DIR *dj,       /* Pointer to the open directory object */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  805814:	defff804 	addi	sp,sp,-32
  805818:	dfc00715 	stw	ra,28(sp)
  80581c:	df000615 	stw	fp,24(sp)
  805820:	df000604 	addi	fp,sp,24
  805824:	e13ffe15 	stw	r4,-8(fp)
  805828:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = validate(dj->fs, dj->id);        /* Check validity of the object */
  80582c:	e0bffe17 	ldw	r2,-8(fp)
  805830:	10c00017 	ldw	r3,0(r2)
  805834:	e0bffe17 	ldw	r2,-8(fp)
  805838:	1080010b 	ldhu	r2,4(r2)
  80583c:	10bfffcc 	andi	r2,r2,65535
  805840:	100b883a 	mov	r5,r2
  805844:	1809883a 	mov	r4,r3
  805848:	0803ed00 	call	803ed0 <validate>
  80584c:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  805850:	e0bffa17 	ldw	r2,-24(fp)
  805854:	1000221e 	bne	r2,zero,8058e0 <f_readdir+0xcc>

      if (!fno) {
  805858:	e0bfff17 	ldw	r2,-4(fp)
  80585c:	1000051e 	bne	r2,zero,805874 <f_readdir+0x60>
         res = dir_sdi(dj, 0);         /* Rewind the directory object */
  805860:	000b883a 	mov	r5,zero
  805864:	e13ffe17 	ldw	r4,-8(fp)
  805868:	080244c0 	call	80244c <dir_sdi>
  80586c:	e0bffa15 	stw	r2,-24(fp)
  805870:	00001b06 	br	8058e0 <f_readdir+0xcc>
      } else {
         INIT_BUF(*dj);
  805874:	e0bffe17 	ldw	r2,-8(fp)
  805878:	e0fffb04 	addi	r3,fp,-20
  80587c:	10c00615 	stw	r3,24(r2)
         res = dir_read(dj);           /* Read an directory item */
  805880:	e13ffe17 	ldw	r4,-8(fp)
  805884:	0802a1c0 	call	802a1c <dir_read>
  805888:	e0bffa15 	stw	r2,-24(fp)
         if (res == FR_NO_FILE) {      /* Reached end of dir */
  80588c:	e0bffa17 	ldw	r2,-24(fp)
  805890:	10800118 	cmpnei	r2,r2,4
  805894:	1000031e 	bne	r2,zero,8058a4 <f_readdir+0x90>
            dj->sect = 0;
  805898:	e0bffe17 	ldw	r2,-8(fp)
  80589c:	10000415 	stw	zero,16(r2)
            res = FR_OK;
  8058a0:	e03ffa15 	stw	zero,-24(fp)
         }
         if (res == FR_OK) {           /* A valid entry is found */
  8058a4:	e0bffa17 	ldw	r2,-24(fp)
  8058a8:	10000d1e 	bne	r2,zero,8058e0 <f_readdir+0xcc>

            get_fileinfo(dj, fno);     /* Get the object information */
  8058ac:	e17fff17 	ldw	r5,-4(fp)
  8058b0:	e13ffe17 	ldw	r4,-8(fp)
  8058b4:	0802fcc0 	call	802fcc <get_fileinfo>
            res = dir_next(dj, 0);     /* Increment index for next */
  8058b8:	000b883a 	mov	r5,zero
  8058bc:	e13ffe17 	ldw	r4,-8(fp)
  8058c0:	08026380 	call	802638 <dir_next>
  8058c4:	e0bffa15 	stw	r2,-24(fp)
            if (res == FR_NO_FILE) {
  8058c8:	e0bffa17 	ldw	r2,-24(fp)
  8058cc:	10800118 	cmpnei	r2,r2,4
  8058d0:	1000031e 	bne	r2,zero,8058e0 <f_readdir+0xcc>

               dj->sect = 0;
  8058d4:	e0bffe17 	ldw	r2,-8(fp)
  8058d8:	10000415 	stw	zero,16(r2)
               res = FR_OK;
  8058dc:	e03ffa15 	stw	zero,-24(fp)
         }
         FREE_BUF();
      }
   }

   LEAVE_FF(dj->fs, res);
  8058e0:	e0bffa17 	ldw	r2,-24(fp)
}
  8058e4:	e037883a 	mov	sp,fp
  8058e8:	dfc00117 	ldw	ra,4(sp)
  8058ec:	df000017 	ldw	fp,0(sp)
  8058f0:	dec00204 	addi	sp,sp,8
  8058f4:	f800283a 	ret

008058f8 <f_stat>:

FRESULT f_stat (
   const TCHAR *path,   /* Pointer to the file path */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  8058f8:	defff104 	addi	sp,sp,-60
  8058fc:	dfc00e15 	stw	ra,56(sp)
  805900:	df000d15 	stw	fp,52(sp)
  805904:	df000d04 	addi	fp,sp,52
  805908:	e13ffe15 	stw	r4,-8(fp)
  80590c:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DIR dj;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 0);
  805910:	e0fff404 	addi	r3,fp,-48
  805914:	e0bffe04 	addi	r2,fp,-8
  805918:	000d883a 	mov	r6,zero
  80591c:	180b883a 	mov	r5,r3
  805920:	1009883a 	mov	r4,r2
  805924:	08035900 	call	803590 <chk_mounted>
  805928:	e0bff315 	stw	r2,-52(fp)
   if (res == FR_OK) {
  80592c:	e0bff317 	ldw	r2,-52(fp)
  805930:	1000131e 	bne	r2,zero,805980 <f_stat+0x88>
      INIT_BUF(dj);
  805934:	e0bffb04 	addi	r2,fp,-20
  805938:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  80593c:	e0fffe17 	ldw	r3,-8(fp)
  805940:	e0bff404 	addi	r2,fp,-48
  805944:	180b883a 	mov	r5,r3
  805948:	1009883a 	mov	r4,r2
  80594c:	08032080 	call	803208 <follow_path>
  805950:	e0bff315 	stw	r2,-52(fp)
      if (res == FR_OK) {           /* Follow completed */
  805954:	e0bff317 	ldw	r2,-52(fp)
  805958:	1000091e 	bne	r2,zero,805980 <f_stat+0x88>
         if (dj.dir)    /* Found an object */
  80595c:	e0bff917 	ldw	r2,-28(fp)
  805960:	10000526 	beq	r2,zero,805978 <f_stat+0x80>
            get_fileinfo(&dj, fno);
  805964:	e0bff404 	addi	r2,fp,-48
  805968:	e17fff17 	ldw	r5,-4(fp)
  80596c:	1009883a 	mov	r4,r2
  805970:	0802fcc0 	call	802fcc <get_fileinfo>
  805974:	00000206 	br	805980 <f_stat+0x88>
         else        /* It is root dir */
            res = FR_INVALID_NAME;
  805978:	00800184 	movi	r2,6
  80597c:	e0bff315 	stw	r2,-52(fp)
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  805980:	e0bff317 	ldw	r2,-52(fp)
}
  805984:	e037883a 	mov	sp,fp
  805988:	dfc00117 	ldw	ra,4(sp)
  80598c:	df000017 	ldw	fp,0(sp)
  805990:	dec00204 	addi	sp,sp,8
  805994:	f800283a 	ret

00805998 <f_getfree>:
FRESULT f_getfree (
   const TCHAR *path,   /* Pointer to the logical drive number (root dir) */
   uint32_t *nclst,     /* Pointer to the variable to return number of free clusters */
   FATFS **fatfs     /* Pointer to pointer to corresponding file system object to return */
)
{
  805998:	defff304 	addi	sp,sp,-52
  80599c:	dfc00c15 	stw	ra,48(sp)
  8059a0:	df000b15 	stw	fp,44(sp)
  8059a4:	df000b04 	addi	fp,sp,44
  8059a8:	e13ffd15 	stw	r4,-12(fp)
  8059ac:	e17ffe15 	stw	r5,-8(fp)
  8059b0:	e1bfff15 	stw	r6,-4(fp)
   uint32_t i;
   uint8_t fat, *p;


   /* Get drive number */
   res = chk_mounted(&path, fatfs, 0);
  8059b4:	e0bffd04 	addi	r2,fp,-12
  8059b8:	000d883a 	mov	r6,zero
  8059bc:	e17fff17 	ldw	r5,-4(fp)
  8059c0:	1009883a 	mov	r4,r2
  8059c4:	08035900 	call	803590 <chk_mounted>
  8059c8:	e0bff515 	stw	r2,-44(fp)
   if (res == FR_OK) {
  8059cc:	e0bff517 	ldw	r2,-44(fp)
  8059d0:	1000a61e 	bne	r2,zero,805c6c <f_getfree+0x2d4>
      /* If free_clust is valid, return it without full cluster scan */
      if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
  8059d4:	e0bfff17 	ldw	r2,-4(fp)
  8059d8:	10800017 	ldw	r2,0(r2)
  8059dc:	10800417 	ldw	r2,16(r2)
  8059e0:	e0ffff17 	ldw	r3,-4(fp)
  8059e4:	18c00017 	ldw	r3,0(r3)
  8059e8:	18c00617 	ldw	r3,24(r3)
  8059ec:	18ffff84 	addi	r3,r3,-2
  8059f0:	18800636 	bltu	r3,r2,805a0c <f_getfree+0x74>
         *nclst = (*fatfs)->free_clust;
  8059f4:	e0bfff17 	ldw	r2,-4(fp)
  8059f8:	10800017 	ldw	r2,0(r2)
  8059fc:	10c00417 	ldw	r3,16(r2)
  805a00:	e0bffe17 	ldw	r2,-8(fp)
  805a04:	10c00015 	stw	r3,0(r2)
  805a08:	00009806 	br	805c6c <f_getfree+0x2d4>
      } else {
         /* Get number of free clusters */
         fat = (*fatfs)->fs_type;
  805a0c:	e0bfff17 	ldw	r2,-4(fp)
  805a10:	10800017 	ldw	r2,0(r2)
  805a14:	10800003 	ldbu	r2,0(r2)
  805a18:	e0bffb05 	stb	r2,-20(fp)
         n = 0;
  805a1c:	e03ff615 	stw	zero,-40(fp)
         if (fat == FS_FAT12) {
  805a20:	e0bffb03 	ldbu	r2,-20(fp)
  805a24:	10800058 	cmpnei	r2,r2,1
  805a28:	1000221e 	bne	r2,zero,805ab4 <f_getfree+0x11c>
            clst = 2;
  805a2c:	00800084 	movi	r2,2
  805a30:	e0bff715 	stw	r2,-36(fp)
            do {
               stat = get_fat(*fatfs, clst);
  805a34:	e0bfff17 	ldw	r2,-4(fp)
  805a38:	10800017 	ldw	r2,0(r2)
  805a3c:	e17ff717 	ldw	r5,-36(fp)
  805a40:	1009883a 	mov	r4,r2
  805a44:	0801b440 	call	801b44 <get_fat>
  805a48:	e0bffc15 	stw	r2,-16(fp)
               if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  805a4c:	e0bffc17 	ldw	r2,-16(fp)
  805a50:	10bfffd8 	cmpnei	r2,r2,-1
  805a54:	1000031e 	bne	r2,zero,805a64 <f_getfree+0xcc>
  805a58:	00800044 	movi	r2,1
  805a5c:	e0bff515 	stw	r2,-44(fp)
  805a60:	00007406 	br	805c34 <f_getfree+0x29c>
               if (stat == 1) { res = FR_INT_ERR; break; }
  805a64:	e0bffc17 	ldw	r2,-16(fp)
  805a68:	10800058 	cmpnei	r2,r2,1
  805a6c:	1000031e 	bne	r2,zero,805a7c <f_getfree+0xe4>
  805a70:	00800084 	movi	r2,2
  805a74:	e0bff515 	stw	r2,-44(fp)
  805a78:	00006e06 	br	805c34 <f_getfree+0x29c>
               if (stat == 0) n++;
  805a7c:	e0bffc17 	ldw	r2,-16(fp)
  805a80:	1000031e 	bne	r2,zero,805a90 <f_getfree+0xf8>
  805a84:	e0bff617 	ldw	r2,-40(fp)
  805a88:	10800044 	addi	r2,r2,1
  805a8c:	e0bff615 	stw	r2,-40(fp)
            } while (++clst < (*fatfs)->n_fatent);
  805a90:	e0bff717 	ldw	r2,-36(fp)
  805a94:	10800044 	addi	r2,r2,1
  805a98:	e0bff715 	stw	r2,-36(fp)
  805a9c:	e0bfff17 	ldw	r2,-4(fp)
  805aa0:	10800017 	ldw	r2,0(r2)
  805aa4:	10800617 	ldw	r2,24(r2)
  805aa8:	e0fff717 	ldw	r3,-36(fp)
  805aac:	18bfe136 	bltu	r3,r2,805a34 <__alt_data_end+0xff805a34>
  805ab0:	00006006 	br	805c34 <f_getfree+0x29c>
         } else {
            clst = (*fatfs)->n_fatent;
  805ab4:	e0bfff17 	ldw	r2,-4(fp)
  805ab8:	10800017 	ldw	r2,0(r2)
  805abc:	10800617 	ldw	r2,24(r2)
  805ac0:	e0bff715 	stw	r2,-36(fp)
            sect = (*fatfs)->fatbase;
  805ac4:	e0bfff17 	ldw	r2,-4(fp)
  805ac8:	10800017 	ldw	r2,0(r2)
  805acc:	10800817 	ldw	r2,32(r2)
  805ad0:	e0bff815 	stw	r2,-32(fp)
            i = 0; p = 0;
  805ad4:	e03ff915 	stw	zero,-28(fp)
  805ad8:	e03ffa15 	stw	zero,-24(fp)
            do {
               if (!i) {
  805adc:	e0bff917 	ldw	r2,-28(fp)
  805ae0:	1000101e 	bne	r2,zero,805b24 <f_getfree+0x18c>
                  res = move_window(*fatfs, sect++);
  805ae4:	e0bfff17 	ldw	r2,-4(fp)
  805ae8:	11000017 	ldw	r4,0(r2)
  805aec:	e0bff817 	ldw	r2,-32(fp)
  805af0:	10c00044 	addi	r3,r2,1
  805af4:	e0fff815 	stw	r3,-32(fp)
  805af8:	100b883a 	mov	r5,r2
  805afc:	080175c0 	call	80175c <move_window>
  805b00:	e0bff515 	stw	r2,-44(fp)
                  if (res != FR_OK) break;
  805b04:	e0bff517 	ldw	r2,-44(fp)
  805b08:	1000491e 	bne	r2,zero,805c30 <f_getfree+0x298>
                  p = (*fatfs)->win;
  805b0c:	e0bfff17 	ldw	r2,-4(fp)
  805b10:	10800017 	ldw	r2,0(r2)
  805b14:	10800c04 	addi	r2,r2,48
  805b18:	e0bffa15 	stw	r2,-24(fp)
                  i = SS(*fatfs);
  805b1c:	00808004 	movi	r2,512
  805b20:	e0bff915 	stw	r2,-28(fp)
               }
               if (fat == FS_FAT16) {
  805b24:	e0bffb03 	ldbu	r2,-20(fp)
  805b28:	10800098 	cmpnei	r2,r2,2
  805b2c:	1000181e 	bne	r2,zero,805b90 <f_getfree+0x1f8>
                  if (LD_WORD(p) == 0) n++;
  805b30:	e0bffa17 	ldw	r2,-24(fp)
  805b34:	10800044 	addi	r2,r2,1
  805b38:	10800003 	ldbu	r2,0(r2)
  805b3c:	10803fcc 	andi	r2,r2,255
  805b40:	1004923a 	slli	r2,r2,8
  805b44:	1007883a 	mov	r3,r2
  805b48:	e0bffa17 	ldw	r2,-24(fp)
  805b4c:	10800003 	ldbu	r2,0(r2)
  805b50:	10803fcc 	andi	r2,r2,255
  805b54:	1884b03a 	or	r2,r3,r2
  805b58:	10bfffcc 	andi	r2,r2,65535
  805b5c:	10a0001c 	xori	r2,r2,32768
  805b60:	10a00004 	addi	r2,r2,-32768
  805b64:	1000031e 	bne	r2,zero,805b74 <f_getfree+0x1dc>
  805b68:	e0bff617 	ldw	r2,-40(fp)
  805b6c:	10800044 	addi	r2,r2,1
  805b70:	e0bff615 	stw	r2,-40(fp)
                  p += 2; i -= 2;
  805b74:	e0bffa17 	ldw	r2,-24(fp)
  805b78:	10800084 	addi	r2,r2,2
  805b7c:	e0bffa15 	stw	r2,-24(fp)
  805b80:	e0bff917 	ldw	r2,-28(fp)
  805b84:	10bfff84 	addi	r2,r2,-2
  805b88:	e0bff915 	stw	r2,-28(fp)
  805b8c:	00002206 	br	805c18 <f_getfree+0x280>
               } else {
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
  805b90:	e0bffa17 	ldw	r2,-24(fp)
  805b94:	108000c4 	addi	r2,r2,3
  805b98:	10800003 	ldbu	r2,0(r2)
  805b9c:	10803fcc 	andi	r2,r2,255
  805ba0:	1006963a 	slli	r3,r2,24
  805ba4:	e0bffa17 	ldw	r2,-24(fp)
  805ba8:	10800084 	addi	r2,r2,2
  805bac:	10800003 	ldbu	r2,0(r2)
  805bb0:	10803fcc 	andi	r2,r2,255
  805bb4:	1004943a 	slli	r2,r2,16
  805bb8:	1884b03a 	or	r2,r3,r2
  805bbc:	e0fffa17 	ldw	r3,-24(fp)
  805bc0:	18c00044 	addi	r3,r3,1
  805bc4:	18c00003 	ldbu	r3,0(r3)
  805bc8:	18c03fcc 	andi	r3,r3,255
  805bcc:	1806923a 	slli	r3,r3,8
  805bd0:	10c6b03a 	or	r3,r2,r3
  805bd4:	e0bffa17 	ldw	r2,-24(fp)
  805bd8:	10800003 	ldbu	r2,0(r2)
  805bdc:	10803fcc 	andi	r2,r2,255
  805be0:	1886b03a 	or	r3,r3,r2
  805be4:	00840034 	movhi	r2,4096
  805be8:	10bfffc4 	addi	r2,r2,-1
  805bec:	1884703a 	and	r2,r3,r2
  805bf0:	1000031e 	bne	r2,zero,805c00 <f_getfree+0x268>
  805bf4:	e0bff617 	ldw	r2,-40(fp)
  805bf8:	10800044 	addi	r2,r2,1
  805bfc:	e0bff615 	stw	r2,-40(fp)
                  p += 4; i -= 4;
  805c00:	e0bffa17 	ldw	r2,-24(fp)
  805c04:	10800104 	addi	r2,r2,4
  805c08:	e0bffa15 	stw	r2,-24(fp)
  805c0c:	e0bff917 	ldw	r2,-28(fp)
  805c10:	10bfff04 	addi	r2,r2,-4
  805c14:	e0bff915 	stw	r2,-28(fp)
               }
            } while (--clst);
  805c18:	e0bff717 	ldw	r2,-36(fp)
  805c1c:	10bfffc4 	addi	r2,r2,-1
  805c20:	e0bff715 	stw	r2,-36(fp)
  805c24:	e0bff717 	ldw	r2,-36(fp)
  805c28:	103fac1e 	bne	r2,zero,805adc <__alt_data_end+0xff805adc>
  805c2c:	00000106 	br	805c34 <f_getfree+0x29c>
            sect = (*fatfs)->fatbase;
            i = 0; p = 0;
            do {
               if (!i) {
                  res = move_window(*fatfs, sect++);
                  if (res != FR_OK) break;
  805c30:	0001883a 	nop
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
                  p += 4; i -= 4;
               }
            } while (--clst);
         }
         (*fatfs)->free_clust = n;
  805c34:	e0bfff17 	ldw	r2,-4(fp)
  805c38:	10800017 	ldw	r2,0(r2)
  805c3c:	e0fff617 	ldw	r3,-40(fp)
  805c40:	10c00415 	stw	r3,16(r2)
         if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  805c44:	e0bffb03 	ldbu	r2,-20(fp)
  805c48:	108000d8 	cmpnei	r2,r2,3
  805c4c:	1000041e 	bne	r2,zero,805c60 <f_getfree+0x2c8>
  805c50:	e0bfff17 	ldw	r2,-4(fp)
  805c54:	10800017 	ldw	r2,0(r2)
  805c58:	00c00044 	movi	r3,1
  805c5c:	10c00145 	stb	r3,5(r2)
         *nclst = n;
  805c60:	e0bffe17 	ldw	r2,-8(fp)
  805c64:	e0fff617 	ldw	r3,-40(fp)
  805c68:	10c00015 	stw	r3,0(r2)
      }
   }
   LEAVE_FF(*fatfs, res);
  805c6c:	e0bff517 	ldw	r2,-44(fp)
}
  805c70:	e037883a 	mov	sp,fp
  805c74:	dfc00117 	ldw	ra,4(sp)
  805c78:	df000017 	ldw	fp,0(sp)
  805c7c:	dec00204 	addi	sp,sp,8
  805c80:	f800283a 	ret

00805c84 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
   FIL *fp     /* Pointer to the file object */
)
{
  805c84:	defffb04 	addi	sp,sp,-20
  805c88:	dfc00415 	stw	ra,16(sp)
  805c8c:	df000315 	stw	fp,12(sp)
  805c90:	df000304 	addi	fp,sp,12
  805c94:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t ncl;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  805c98:	e0bfff17 	ldw	r2,-4(fp)
  805c9c:	10c00017 	ldw	r3,0(r2)
  805ca0:	e0bfff17 	ldw	r2,-4(fp)
  805ca4:	1080010b 	ldhu	r2,4(r2)
  805ca8:	10bfffcc 	andi	r2,r2,65535
  805cac:	100b883a 	mov	r5,r2
  805cb0:	1809883a 	mov	r4,r3
  805cb4:	0803ed00 	call	803ed0 <validate>
  805cb8:	e0bffd15 	stw	r2,-12(fp)
   if (res == FR_OK) {
  805cbc:	e0bffd17 	ldw	r2,-12(fp)
  805cc0:	1000101e 	bne	r2,zero,805d04 <f_truncate+0x80>
      if (fp->flag & FA__ERROR) {         /* Check abort flag */
  805cc4:	e0bfff17 	ldw	r2,-4(fp)
  805cc8:	10800183 	ldbu	r2,6(r2)
  805ccc:	10803fcc 	andi	r2,r2,255
  805cd0:	1080201c 	xori	r2,r2,128
  805cd4:	10bfe004 	addi	r2,r2,-128
  805cd8:	1000030e 	bge	r2,zero,805ce8 <f_truncate+0x64>
         res = FR_INT_ERR;
  805cdc:	00800084 	movi	r2,2
  805ce0:	e0bffd15 	stw	r2,-12(fp)
  805ce4:	00000706 	br	805d04 <f_truncate+0x80>
      } else {
         if (!(fp->flag & FA_WRITE))      /* Check access mode */
  805ce8:	e0bfff17 	ldw	r2,-4(fp)
  805cec:	10800183 	ldbu	r2,6(r2)
  805cf0:	10803fcc 	andi	r2,r2,255
  805cf4:	1080008c 	andi	r2,r2,2
  805cf8:	1000021e 	bne	r2,zero,805d04 <f_truncate+0x80>
            res = FR_DENIED;
  805cfc:	008001c4 	movi	r2,7
  805d00:	e0bffd15 	stw	r2,-12(fp)
      }
   }
   if (res == FR_OK) {
  805d04:	e0bffd17 	ldw	r2,-12(fp)
  805d08:	1000521e 	bne	r2,zero,805e54 <f_truncate+0x1d0>
      if (fp->fsize > fp->fptr) {
  805d0c:	e0bfff17 	ldw	r2,-4(fp)
  805d10:	10800317 	ldw	r2,12(r2)
  805d14:	e0ffff17 	ldw	r3,-4(fp)
  805d18:	18c00217 	ldw	r3,8(r3)
  805d1c:	1880442e 	bgeu	r3,r2,805e30 <f_truncate+0x1ac>
         fp->fsize = fp->fptr;   /* Set file size to current R/W point */
  805d20:	e0bfff17 	ldw	r2,-4(fp)
  805d24:	10c00217 	ldw	r3,8(r2)
  805d28:	e0bfff17 	ldw	r2,-4(fp)
  805d2c:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  805d30:	e0bfff17 	ldw	r2,-4(fp)
  805d34:	10800183 	ldbu	r2,6(r2)
  805d38:	10800814 	ori	r2,r2,32
  805d3c:	1007883a 	mov	r3,r2
  805d40:	e0bfff17 	ldw	r2,-4(fp)
  805d44:	10c00185 	stb	r3,6(r2)
         if (fp->fptr == 0) { /* When set file size to zero, remove entire cluster chain */
  805d48:	e0bfff17 	ldw	r2,-4(fp)
  805d4c:	10800217 	ldw	r2,8(r2)
  805d50:	10000b1e 	bne	r2,zero,805d80 <f_truncate+0xfc>
            res = remove_chain(fp->fs, fp->sclust);
  805d54:	e0bfff17 	ldw	r2,-4(fp)
  805d58:	10c00017 	ldw	r3,0(r2)
  805d5c:	e0bfff17 	ldw	r2,-4(fp)
  805d60:	10800417 	ldw	r2,16(r2)
  805d64:	100b883a 	mov	r5,r2
  805d68:	1809883a 	mov	r4,r3
  805d6c:	08021540 	call	802154 <remove_chain>
  805d70:	e0bffd15 	stw	r2,-12(fp)
            fp->sclust = 0;
  805d74:	e0bfff17 	ldw	r2,-4(fp)
  805d78:	10000415 	stw	zero,16(r2)
  805d7c:	00002c06 	br	805e30 <f_truncate+0x1ac>
         } else {          /* When truncate a part of the file, remove remaining clusters */
            ncl = get_fat(fp->fs, fp->clust);
  805d80:	e0bfff17 	ldw	r2,-4(fp)
  805d84:	10c00017 	ldw	r3,0(r2)
  805d88:	e0bfff17 	ldw	r2,-4(fp)
  805d8c:	10800517 	ldw	r2,20(r2)
  805d90:	100b883a 	mov	r5,r2
  805d94:	1809883a 	mov	r4,r3
  805d98:	0801b440 	call	801b44 <get_fat>
  805d9c:	e0bffe15 	stw	r2,-8(fp)
            res = FR_OK;
  805da0:	e03ffd15 	stw	zero,-12(fp)
            if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
  805da4:	e0bffe17 	ldw	r2,-8(fp)
  805da8:	10bfffd8 	cmpnei	r2,r2,-1
  805dac:	1000021e 	bne	r2,zero,805db8 <f_truncate+0x134>
  805db0:	00800044 	movi	r2,1
  805db4:	e0bffd15 	stw	r2,-12(fp)
            if (ncl == 1) res = FR_INT_ERR;
  805db8:	e0bffe17 	ldw	r2,-8(fp)
  805dbc:	10800058 	cmpnei	r2,r2,1
  805dc0:	1000021e 	bne	r2,zero,805dcc <f_truncate+0x148>
  805dc4:	00800084 	movi	r2,2
  805dc8:	e0bffd15 	stw	r2,-12(fp)
            if (res == FR_OK && ncl < fp->fs->n_fatent) {
  805dcc:	e0bffd17 	ldw	r2,-12(fp)
  805dd0:	1000171e 	bne	r2,zero,805e30 <f_truncate+0x1ac>
  805dd4:	e0bfff17 	ldw	r2,-4(fp)
  805dd8:	10800017 	ldw	r2,0(r2)
  805ddc:	10800617 	ldw	r2,24(r2)
  805de0:	e0fffe17 	ldw	r3,-8(fp)
  805de4:	1880122e 	bgeu	r3,r2,805e30 <f_truncate+0x1ac>
               res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
  805de8:	e0bfff17 	ldw	r2,-4(fp)
  805dec:	10c00017 	ldw	r3,0(r2)
  805df0:	e0bfff17 	ldw	r2,-4(fp)
  805df4:	10800517 	ldw	r2,20(r2)
  805df8:	01840034 	movhi	r6,4096
  805dfc:	31bfffc4 	addi	r6,r6,-1
  805e00:	100b883a 	mov	r5,r2
  805e04:	1809883a 	mov	r4,r3
  805e08:	0801dd40 	call	801dd4 <put_fat>
  805e0c:	e0bffd15 	stw	r2,-12(fp)
               if (res == FR_OK) res = remove_chain(fp->fs, ncl);
  805e10:	e0bffd17 	ldw	r2,-12(fp)
  805e14:	1000061e 	bne	r2,zero,805e30 <f_truncate+0x1ac>
  805e18:	e0bfff17 	ldw	r2,-4(fp)
  805e1c:	10800017 	ldw	r2,0(r2)
  805e20:	e17ffe17 	ldw	r5,-8(fp)
  805e24:	1009883a 	mov	r4,r2
  805e28:	08021540 	call	802154 <remove_chain>
  805e2c:	e0bffd15 	stw	r2,-12(fp)
            }
         }
      }
      if (res != FR_OK) fp->flag |= FA__ERROR;
  805e30:	e0bffd17 	ldw	r2,-12(fp)
  805e34:	10000726 	beq	r2,zero,805e54 <f_truncate+0x1d0>
  805e38:	e0bfff17 	ldw	r2,-4(fp)
  805e3c:	10c00183 	ldbu	r3,6(r2)
  805e40:	00bfe004 	movi	r2,-128
  805e44:	1884b03a 	or	r2,r3,r2
  805e48:	1007883a 	mov	r3,r2
  805e4c:	e0bfff17 	ldw	r2,-4(fp)
  805e50:	10c00185 	stb	r3,6(r2)
   }

   LEAVE_FF(fp->fs, res);
  805e54:	e0bffd17 	ldw	r2,-12(fp)
}
  805e58:	e037883a 	mov	sp,fp
  805e5c:	dfc00117 	ldw	ra,4(sp)
  805e60:	df000017 	ldw	fp,0(sp)
  805e64:	dec00204 	addi	sp,sp,8
  805e68:	f800283a 	ret

00805e6c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
   const TCHAR *path    /* Pointer to the file or directory path */
)
{
  805e6c:	deffe904 	addi	sp,sp,-92
  805e70:	dfc01615 	stw	ra,88(sp)
  805e74:	df001515 	stw	fp,84(sp)
  805e78:	df001504 	addi	fp,sp,84
  805e7c:	e13fff15 	stw	r4,-4(fp)
   uint8_t *dir;
   uint32_t dclst;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  805e80:	e0ffee04 	addi	r3,fp,-72
  805e84:	e0bfff04 	addi	r2,fp,-4
  805e88:	01800044 	movi	r6,1
  805e8c:	180b883a 	mov	r5,r3
  805e90:	1009883a 	mov	r4,r2
  805e94:	08035900 	call	803590 <chk_mounted>
  805e98:	e0bfeb15 	stw	r2,-84(fp)
   if (res == FR_OK) {
  805e9c:	e0bfeb17 	ldw	r2,-84(fp)
  805ea0:	1000721e 	bne	r2,zero,80606c <f_unlink+0x200>
      INIT_BUF(dj);
  805ea4:	e0bffc04 	addi	r2,fp,-16
  805ea8:	e0bff415 	stw	r2,-48(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  805eac:	e0ffff17 	ldw	r3,-4(fp)
  805eb0:	e0bfee04 	addi	r2,fp,-72
  805eb4:	180b883a 	mov	r5,r3
  805eb8:	1009883a 	mov	r4,r2
  805ebc:	08032080 	call	803208 <follow_path>
  805ec0:	e0bfeb15 	stw	r2,-84(fp)
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;        /* Cannot remove dot entry */
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&dj, 2); /* Cannot remove open file */
#endif
      if (res == FR_OK) {              /* The object is accessible */
  805ec4:	e0bfeb17 	ldw	r2,-84(fp)
  805ec8:	1000681e 	bne	r2,zero,80606c <f_unlink+0x200>
         dir = dj.dir;
  805ecc:	e0bff317 	ldw	r2,-52(fp)
  805ed0:	e0bfec15 	stw	r2,-80(fp)
         if (!dir) {
  805ed4:	e0bfec17 	ldw	r2,-80(fp)
  805ed8:	1000031e 	bne	r2,zero,805ee8 <f_unlink+0x7c>
            res = FR_INVALID_NAME;     /* Cannot remove the start directory */
  805edc:	00800184 	movi	r2,6
  805ee0:	e0bfeb15 	stw	r2,-84(fp)
  805ee4:	00000806 	br	805f08 <f_unlink+0x9c>
         } else {
            if (dir[DIR_Attr] & AM_RDO)
  805ee8:	e0bfec17 	ldw	r2,-80(fp)
  805eec:	108002c4 	addi	r2,r2,11
  805ef0:	10800003 	ldbu	r2,0(r2)
  805ef4:	10803fcc 	andi	r2,r2,255
  805ef8:	1080004c 	andi	r2,r2,1
  805efc:	10000226 	beq	r2,zero,805f08 <f_unlink+0x9c>
               res = FR_DENIED;     /* Cannot remove R/O object */
  805f00:	008001c4 	movi	r2,7
  805f04:	e0bfeb15 	stw	r2,-84(fp)
         }
         dclst = LD_CLUST(dir);
  805f08:	e0bfec17 	ldw	r2,-80(fp)
  805f0c:	10800544 	addi	r2,r2,21
  805f10:	10800003 	ldbu	r2,0(r2)
  805f14:	10803fcc 	andi	r2,r2,255
  805f18:	1004923a 	slli	r2,r2,8
  805f1c:	1007883a 	mov	r3,r2
  805f20:	e0bfec17 	ldw	r2,-80(fp)
  805f24:	10800504 	addi	r2,r2,20
  805f28:	10800003 	ldbu	r2,0(r2)
  805f2c:	10803fcc 	andi	r2,r2,255
  805f30:	1884b03a 	or	r2,r3,r2
  805f34:	10bfffcc 	andi	r2,r2,65535
  805f38:	1006943a 	slli	r3,r2,16
  805f3c:	e0bfec17 	ldw	r2,-80(fp)
  805f40:	108006c4 	addi	r2,r2,27
  805f44:	10800003 	ldbu	r2,0(r2)
  805f48:	10803fcc 	andi	r2,r2,255
  805f4c:	1004923a 	slli	r2,r2,8
  805f50:	1009883a 	mov	r4,r2
  805f54:	e0bfec17 	ldw	r2,-80(fp)
  805f58:	10800684 	addi	r2,r2,26
  805f5c:	10800003 	ldbu	r2,0(r2)
  805f60:	10803fcc 	andi	r2,r2,255
  805f64:	2084b03a 	or	r2,r4,r2
  805f68:	10bfffcc 	andi	r2,r2,65535
  805f6c:	1884b03a 	or	r2,r3,r2
  805f70:	e0bfed15 	stw	r2,-76(fp)
         if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
  805f74:	e0bfeb17 	ldw	r2,-84(fp)
  805f78:	1000271e 	bne	r2,zero,806018 <f_unlink+0x1ac>
  805f7c:	e0bfec17 	ldw	r2,-80(fp)
  805f80:	108002c4 	addi	r2,r2,11
  805f84:	10800003 	ldbu	r2,0(r2)
  805f88:	10803fcc 	andi	r2,r2,255
  805f8c:	1080040c 	andi	r2,r2,16
  805f90:	10002126 	beq	r2,zero,806018 <f_unlink+0x1ac>
            if (dclst < 2) {
  805f94:	e0bfed17 	ldw	r2,-76(fp)
  805f98:	108000a8 	cmpgeui	r2,r2,2
  805f9c:	1000031e 	bne	r2,zero,805fac <f_unlink+0x140>
               res = FR_INT_ERR;
  805fa0:	00800084 	movi	r2,2
  805fa4:	e0bfeb15 	stw	r2,-84(fp)
  805fa8:	00001b06 	br	806018 <f_unlink+0x1ac>
            } else {
               mem_cpy(&sdj, &dj, sizeof(DIR)); /* Check if the sub-dir is empty or not */
  805fac:	e0ffee04 	addi	r3,fp,-72
  805fb0:	e0bff504 	addi	r2,fp,-44
  805fb4:	01800704 	movi	r6,28
  805fb8:	180b883a 	mov	r5,r3
  805fbc:	1009883a 	mov	r4,r2
  805fc0:	08015880 	call	801588 <mem_cpy>
               sdj.sclust = dclst;
  805fc4:	e0bfed17 	ldw	r2,-76(fp)
  805fc8:	e0bff715 	stw	r2,-36(fp)
               res = dir_sdi(&sdj, 2);    /* Exclude dot entries */
  805fcc:	e0bff504 	addi	r2,fp,-44
  805fd0:	01400084 	movi	r5,2
  805fd4:	1009883a 	mov	r4,r2
  805fd8:	080244c0 	call	80244c <dir_sdi>
  805fdc:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) {
  805fe0:	e0bfeb17 	ldw	r2,-84(fp)
  805fe4:	10000c1e 	bne	r2,zero,806018 <f_unlink+0x1ac>
                  res = dir_read(&sdj);
  805fe8:	e0bff504 	addi	r2,fp,-44
  805fec:	1009883a 	mov	r4,r2
  805ff0:	0802a1c0 	call	802a1c <dir_read>
  805ff4:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_OK        /* Not empty dir */
  805ff8:	e0bfeb17 	ldw	r2,-84(fp)
  805ffc:	1000021e 	bne	r2,zero,806008 <f_unlink+0x19c>
#if _FS_RPATH
                  || dclst == sdj.fs->cdir   /* Current dir */
#endif
                  ) res = FR_DENIED;
  806000:	008001c4 	movi	r2,7
  806004:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_NO_FILE) res = FR_OK; /* Empty */
  806008:	e0bfeb17 	ldw	r2,-84(fp)
  80600c:	10800118 	cmpnei	r2,r2,4
  806010:	1000011e 	bne	r2,zero,806018 <f_unlink+0x1ac>
  806014:	e03feb15 	stw	zero,-84(fp)
               }
            }
         }
         if (res == FR_OK) {
  806018:	e0bfeb17 	ldw	r2,-84(fp)
  80601c:	1000131e 	bne	r2,zero,80606c <f_unlink+0x200>
            res = dir_remove(&dj);     /* Remove the directory entry */
  806020:	e0bfee04 	addi	r2,fp,-72
  806024:	1009883a 	mov	r4,r2
  806028:	0802c480 	call	802c48 <dir_remove>
  80602c:	e0bfeb15 	stw	r2,-84(fp)
            if (res == FR_OK) {
  806030:	e0bfeb17 	ldw	r2,-84(fp)
  806034:	10000d1e 	bne	r2,zero,80606c <f_unlink+0x200>
               if (dclst)           /* Remove the cluster chain if exist */
  806038:	e0bfed17 	ldw	r2,-76(fp)
  80603c:	10000526 	beq	r2,zero,806054 <f_unlink+0x1e8>
                  res = remove_chain(dj.fs, dclst);
  806040:	e0bfee17 	ldw	r2,-72(fp)
  806044:	e17fed17 	ldw	r5,-76(fp)
  806048:	1009883a 	mov	r4,r2
  80604c:	08021540 	call	802154 <remove_chain>
  806050:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) res = sync(dj.fs);
  806054:	e0bfeb17 	ldw	r2,-84(fp)
  806058:	1000041e 	bne	r2,zero,80606c <f_unlink+0x200>
  80605c:	e0bfee17 	ldw	r2,-72(fp)
  806060:	1009883a 	mov	r4,r2
  806064:	08018b80 	call	8018b8 <sync>
  806068:	e0bfeb15 	stw	r2,-84(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(dj.fs, res);
  80606c:	e0bfeb17 	ldw	r2,-84(fp)
}
  806070:	e037883a 	mov	sp,fp
  806074:	dfc00117 	ldw	ra,4(sp)
  806078:	df000017 	ldw	fp,0(sp)
  80607c:	dec00204 	addi	sp,sp,8
  806080:	f800283a 	ret

00806084 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
   const TCHAR *path    /* Pointer to the directory path */
)
{
  806084:	deffec04 	addi	sp,sp,-80
  806088:	dfc01315 	stw	ra,76(sp)
  80608c:	df001215 	stw	fp,72(sp)
  806090:	df001204 	addi	fp,sp,72
  806094:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   DIR dj;
   uint8_t *dir, n;
   uint32_t dsc, dcl, pcl, tim = get_fattime();
  806098:	080155c0 	call	80155c <get_fattime>
  80609c:	e0bff215 	stw	r2,-56(fp)
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8060a0:	e0fff504 	addi	r3,fp,-44
  8060a4:	e0bfff04 	addi	r2,fp,-4
  8060a8:	01800044 	movi	r6,1
  8060ac:	180b883a 	mov	r5,r3
  8060b0:	1009883a 	mov	r4,r2
  8060b4:	08035900 	call	803590 <chk_mounted>
  8060b8:	e0bfee15 	stw	r2,-72(fp)
   if (res == FR_OK) {
  8060bc:	e0bfee17 	ldw	r2,-72(fp)
  8060c0:	1000f81e 	bne	r2,zero,8064a4 <f_mkdir+0x420>
      INIT_BUF(dj);
  8060c4:	e0bffc04 	addi	r2,fp,-16
  8060c8:	e0bffb15 	stw	r2,-20(fp)
      res = follow_path(&dj, path);       /* Follow the file path */
  8060cc:	e0ffff17 	ldw	r3,-4(fp)
  8060d0:	e0bff504 	addi	r2,fp,-44
  8060d4:	180b883a 	mov	r5,r3
  8060d8:	1009883a 	mov	r4,r2
  8060dc:	08032080 	call	803208 <follow_path>
  8060e0:	e0bfee15 	stw	r2,-72(fp)
      if (res == FR_OK) res = FR_EXIST;      /* Any object with same name is already existing */
  8060e4:	e0bfee17 	ldw	r2,-72(fp)
  8060e8:	1000021e 	bne	r2,zero,8060f4 <f_mkdir+0x70>
  8060ec:	00800204 	movi	r2,8
  8060f0:	e0bfee15 	stw	r2,-72(fp)
      if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_NO_FILE) {            /* Can create a new directory */
  8060f4:	e0bfee17 	ldw	r2,-72(fp)
  8060f8:	10800118 	cmpnei	r2,r2,4
  8060fc:	1000e91e 	bne	r2,zero,8064a4 <f_mkdir+0x420>
         dcl = create_chain(dj.fs, 0);    /* Allocate a cluster for the new directory table */
  806100:	e0bff517 	ldw	r2,-44(fp)
  806104:	000b883a 	mov	r5,zero
  806108:	1009883a 	mov	r4,r2
  80610c:	08022700 	call	802270 <create_chain>
  806110:	e0bff315 	stw	r2,-52(fp)
         res = FR_OK;
  806114:	e03fee15 	stw	zero,-72(fp)
         if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
  806118:	e0bff317 	ldw	r2,-52(fp)
  80611c:	1000021e 	bne	r2,zero,806128 <f_mkdir+0xa4>
  806120:	008001c4 	movi	r2,7
  806124:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 1) res = FR_INT_ERR;
  806128:	e0bff317 	ldw	r2,-52(fp)
  80612c:	10800058 	cmpnei	r2,r2,1
  806130:	1000021e 	bne	r2,zero,80613c <f_mkdir+0xb8>
  806134:	00800084 	movi	r2,2
  806138:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  80613c:	e0bff317 	ldw	r2,-52(fp)
  806140:	10bfffd8 	cmpnei	r2,r2,-1
  806144:	1000021e 	bne	r2,zero,806150 <f_mkdir+0xcc>
  806148:	00800044 	movi	r2,1
  80614c:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK)             /* Flush FAT */
  806150:	e0bfee17 	ldw	r2,-72(fp)
  806154:	1000051e 	bne	r2,zero,80616c <f_mkdir+0xe8>
            res = move_window(dj.fs, 0);
  806158:	e0bff517 	ldw	r2,-44(fp)
  80615c:	000b883a 	mov	r5,zero
  806160:	1009883a 	mov	r4,r2
  806164:	080175c0 	call	80175c <move_window>
  806168:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK) {              /* Initialize the new directory table */
  80616c:	e0bfee17 	ldw	r2,-72(fp)
  806170:	1000891e 	bne	r2,zero,806398 <f_mkdir+0x314>
            dsc = clust2sect(dj.fs, dcl);
  806174:	e0bff517 	ldw	r2,-44(fp)
  806178:	e17ff317 	ldw	r5,-52(fp)
  80617c:	1009883a 	mov	r4,r2
  806180:	0801ad80 	call	801ad8 <clust2sect>
  806184:	e0bff015 	stw	r2,-64(fp)
            dir = dj.fs->win;
  806188:	e0bff517 	ldw	r2,-44(fp)
  80618c:	10800c04 	addi	r2,r2,48
  806190:	e0bff415 	stw	r2,-48(fp)
            mem_set(dir, 0, SS(dj.fs));
  806194:	01808004 	movi	r6,512
  806198:	000b883a 	mov	r5,zero
  80619c:	e13ff417 	ldw	r4,-48(fp)
  8061a0:	08015f80 	call	8015f8 <mem_set>
            mem_set(dir+DIR_Name, ' ', 8+3); /* Create "." entry */
  8061a4:	018002c4 	movi	r6,11
  8061a8:	01400804 	movi	r5,32
  8061ac:	e13ff417 	ldw	r4,-48(fp)
  8061b0:	08015f80 	call	8015f8 <mem_set>
            dir[DIR_Name] = '.';
  8061b4:	e0bff417 	ldw	r2,-48(fp)
  8061b8:	00c00b84 	movi	r3,46
  8061bc:	10c00005 	stb	r3,0(r2)
            dir[DIR_Attr] = AM_DIR;
  8061c0:	e0bff417 	ldw	r2,-48(fp)
  8061c4:	108002c4 	addi	r2,r2,11
  8061c8:	00c00404 	movi	r3,16
  8061cc:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);
  8061d0:	e0bff417 	ldw	r2,-48(fp)
  8061d4:	10800584 	addi	r2,r2,22
  8061d8:	e0fff217 	ldw	r3,-56(fp)
  8061dc:	10c00005 	stb	r3,0(r2)
  8061e0:	e0bff417 	ldw	r2,-48(fp)
  8061e4:	108005c4 	addi	r2,r2,23
  8061e8:	e0fff217 	ldw	r3,-56(fp)
  8061ec:	18ffffcc 	andi	r3,r3,65535
  8061f0:	1807d23a 	srai	r3,r3,8
  8061f4:	10c00005 	stb	r3,0(r2)
  8061f8:	e0bff417 	ldw	r2,-48(fp)
  8061fc:	10800604 	addi	r2,r2,24
  806200:	e0fff217 	ldw	r3,-56(fp)
  806204:	1806d43a 	srli	r3,r3,16
  806208:	10c00005 	stb	r3,0(r2)
  80620c:	e0bff417 	ldw	r2,-48(fp)
  806210:	10800644 	addi	r2,r2,25
  806214:	e0fff217 	ldw	r3,-56(fp)
  806218:	1806d63a 	srli	r3,r3,24
  80621c:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);
  806220:	e0bff417 	ldw	r2,-48(fp)
  806224:	10800684 	addi	r2,r2,26
  806228:	e0fff317 	ldw	r3,-52(fp)
  80622c:	10c00005 	stb	r3,0(r2)
  806230:	e0bff417 	ldw	r2,-48(fp)
  806234:	108006c4 	addi	r2,r2,27
  806238:	e0fff317 	ldw	r3,-52(fp)
  80623c:	18ffffcc 	andi	r3,r3,65535
  806240:	1807d23a 	srai	r3,r3,8
  806244:	10c00005 	stb	r3,0(r2)
  806248:	e0bff417 	ldw	r2,-48(fp)
  80624c:	10800504 	addi	r2,r2,20
  806250:	e0fff317 	ldw	r3,-52(fp)
  806254:	1806d43a 	srli	r3,r3,16
  806258:	10c00005 	stb	r3,0(r2)
  80625c:	e0bff417 	ldw	r2,-48(fp)
  806260:	10800544 	addi	r2,r2,21
  806264:	e0fff317 	ldw	r3,-52(fp)
  806268:	1806d43a 	srli	r3,r3,16
  80626c:	1807d23a 	srai	r3,r3,8
  806270:	10c00005 	stb	r3,0(r2)
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
  806274:	e0bff417 	ldw	r2,-48(fp)
  806278:	10800804 	addi	r2,r2,32
  80627c:	01800804 	movi	r6,32
  806280:	e17ff417 	ldw	r5,-48(fp)
  806284:	1009883a 	mov	r4,r2
  806288:	08015880 	call	801588 <mem_cpy>
            dir[33] = '.'; pcl = dj.sclust;
  80628c:	e0bff417 	ldw	r2,-48(fp)
  806290:	10800844 	addi	r2,r2,33
  806294:	00c00b84 	movi	r3,46
  806298:	10c00005 	stb	r3,0(r2)
  80629c:	e0bff717 	ldw	r2,-36(fp)
  8062a0:	e0bff115 	stw	r2,-60(fp)
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  8062a4:	e0bff517 	ldw	r2,-44(fp)
  8062a8:	10800003 	ldbu	r2,0(r2)
  8062ac:	10803fcc 	andi	r2,r2,255
  8062b0:	108000d8 	cmpnei	r2,r2,3
  8062b4:	1000051e 	bne	r2,zero,8062cc <f_mkdir+0x248>
  8062b8:	e0bff517 	ldw	r2,-44(fp)
  8062bc:	10c00917 	ldw	r3,36(r2)
  8062c0:	e0bff117 	ldw	r2,-60(fp)
  8062c4:	1880011e 	bne	r3,r2,8062cc <f_mkdir+0x248>
               pcl = 0;
  8062c8:	e03ff115 	stw	zero,-60(fp)
            ST_CLUST(dir+SZ_DIR, pcl);
  8062cc:	e0bff417 	ldw	r2,-48(fp)
  8062d0:	10800e84 	addi	r2,r2,58
  8062d4:	e0fff117 	ldw	r3,-60(fp)
  8062d8:	10c00005 	stb	r3,0(r2)
  8062dc:	e0bff417 	ldw	r2,-48(fp)
  8062e0:	10800ec4 	addi	r2,r2,59
  8062e4:	e0fff117 	ldw	r3,-60(fp)
  8062e8:	18ffffcc 	andi	r3,r3,65535
  8062ec:	1807d23a 	srai	r3,r3,8
  8062f0:	10c00005 	stb	r3,0(r2)
  8062f4:	e0bff417 	ldw	r2,-48(fp)
  8062f8:	10800d04 	addi	r2,r2,52
  8062fc:	e0fff117 	ldw	r3,-60(fp)
  806300:	1806d43a 	srli	r3,r3,16
  806304:	10c00005 	stb	r3,0(r2)
  806308:	e0bff417 	ldw	r2,-48(fp)
  80630c:	10800d44 	addi	r2,r2,53
  806310:	e0fff117 	ldw	r3,-60(fp)
  806314:	1806d43a 	srli	r3,r3,16
  806318:	1807d23a 	srai	r3,r3,8
  80631c:	10c00005 	stb	r3,0(r2)
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  806320:	e0bff517 	ldw	r2,-44(fp)
  806324:	10800083 	ldbu	r2,2(r2)
  806328:	e0bfef05 	stb	r2,-68(fp)
  80632c:	00001606 	br	806388 <f_mkdir+0x304>
               dj.fs->winsect = dsc++;
  806330:	e0fff517 	ldw	r3,-44(fp)
  806334:	e0bff017 	ldw	r2,-64(fp)
  806338:	11000044 	addi	r4,r2,1
  80633c:	e13ff015 	stw	r4,-64(fp)
  806340:	18800b15 	stw	r2,44(r3)
               dj.fs->wflag = 1;
  806344:	e0bff517 	ldw	r2,-44(fp)
  806348:	00c00044 	movi	r3,1
  80634c:	10c00105 	stb	r3,4(r2)
               res = move_window(dj.fs, 0);
  806350:	e0bff517 	ldw	r2,-44(fp)
  806354:	000b883a 	mov	r5,zero
  806358:	1009883a 	mov	r4,r2
  80635c:	080175c0 	call	80175c <move_window>
  806360:	e0bfee15 	stw	r2,-72(fp)
               if (res != FR_OK) break;
  806364:	e0bfee17 	ldw	r2,-72(fp)
  806368:	10000a1e 	bne	r2,zero,806394 <f_mkdir+0x310>
               mem_set(dir, 0, SS(dj.fs));
  80636c:	01808004 	movi	r6,512
  806370:	000b883a 	mov	r5,zero
  806374:	e13ff417 	ldw	r4,-48(fp)
  806378:	08015f80 	call	8015f8 <mem_set>
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
            dir[33] = '.'; pcl = dj.sclust;
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
               pcl = 0;
            ST_CLUST(dir+SZ_DIR, pcl);
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  80637c:	e0bfef03 	ldbu	r2,-68(fp)
  806380:	10bfffc4 	addi	r2,r2,-1
  806384:	e0bfef05 	stb	r2,-68(fp)
  806388:	e0bfef03 	ldbu	r2,-68(fp)
  80638c:	103fe81e 	bne	r2,zero,806330 <__alt_data_end+0xff806330>
  806390:	00000106 	br	806398 <f_mkdir+0x314>
               dj.fs->winsect = dsc++;
               dj.fs->wflag = 1;
               res = move_window(dj.fs, 0);
               if (res != FR_OK) break;
  806394:	0001883a 	nop
               mem_set(dir, 0, SS(dj.fs));
            }
         }
         if (res == FR_OK) res = dir_register(&dj);   /* Register the object to the directoy */
  806398:	e0bfee17 	ldw	r2,-72(fp)
  80639c:	1000041e 	bne	r2,zero,8063b0 <f_mkdir+0x32c>
  8063a0:	e0bff504 	addi	r2,fp,-44
  8063a4:	1009883a 	mov	r4,r2
  8063a8:	0802b240 	call	802b24 <dir_register>
  8063ac:	e0bfee15 	stw	r2,-72(fp)
         if (res != FR_OK) {
  8063b0:	e0bfee17 	ldw	r2,-72(fp)
  8063b4:	10000526 	beq	r2,zero,8063cc <f_mkdir+0x348>
            remove_chain(dj.fs, dcl);        /* Could not register, remove cluster chain */
  8063b8:	e0bff517 	ldw	r2,-44(fp)
  8063bc:	e17ff317 	ldw	r5,-52(fp)
  8063c0:	1009883a 	mov	r4,r2
  8063c4:	08021540 	call	802154 <remove_chain>
  8063c8:	00003606 	br	8064a4 <f_mkdir+0x420>
         } else {
            dir = dj.dir;
  8063cc:	e0bffa17 	ldw	r2,-24(fp)
  8063d0:	e0bff415 	stw	r2,-48(fp)
            dir[DIR_Attr] = AM_DIR;          /* Attribute */
  8063d4:	e0bff417 	ldw	r2,-48(fp)
  8063d8:	108002c4 	addi	r2,r2,11
  8063dc:	00c00404 	movi	r3,16
  8063e0:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);     /* Created time */
  8063e4:	e0bff417 	ldw	r2,-48(fp)
  8063e8:	10800584 	addi	r2,r2,22
  8063ec:	e0fff217 	ldw	r3,-56(fp)
  8063f0:	10c00005 	stb	r3,0(r2)
  8063f4:	e0bff417 	ldw	r2,-48(fp)
  8063f8:	108005c4 	addi	r2,r2,23
  8063fc:	e0fff217 	ldw	r3,-56(fp)
  806400:	18ffffcc 	andi	r3,r3,65535
  806404:	1807d23a 	srai	r3,r3,8
  806408:	10c00005 	stb	r3,0(r2)
  80640c:	e0bff417 	ldw	r2,-48(fp)
  806410:	10800604 	addi	r2,r2,24
  806414:	e0fff217 	ldw	r3,-56(fp)
  806418:	1806d43a 	srli	r3,r3,16
  80641c:	10c00005 	stb	r3,0(r2)
  806420:	e0bff417 	ldw	r2,-48(fp)
  806424:	10800644 	addi	r2,r2,25
  806428:	e0fff217 	ldw	r3,-56(fp)
  80642c:	1806d63a 	srli	r3,r3,24
  806430:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);              /* Table start cluster */
  806434:	e0bff417 	ldw	r2,-48(fp)
  806438:	10800684 	addi	r2,r2,26
  80643c:	e0fff317 	ldw	r3,-52(fp)
  806440:	10c00005 	stb	r3,0(r2)
  806444:	e0bff417 	ldw	r2,-48(fp)
  806448:	108006c4 	addi	r2,r2,27
  80644c:	e0fff317 	ldw	r3,-52(fp)
  806450:	18ffffcc 	andi	r3,r3,65535
  806454:	1807d23a 	srai	r3,r3,8
  806458:	10c00005 	stb	r3,0(r2)
  80645c:	e0bff417 	ldw	r2,-48(fp)
  806460:	10800504 	addi	r2,r2,20
  806464:	e0fff317 	ldw	r3,-52(fp)
  806468:	1806d43a 	srli	r3,r3,16
  80646c:	10c00005 	stb	r3,0(r2)
  806470:	e0bff417 	ldw	r2,-48(fp)
  806474:	10800544 	addi	r2,r2,21
  806478:	e0fff317 	ldw	r3,-52(fp)
  80647c:	1806d43a 	srli	r3,r3,16
  806480:	1807d23a 	srai	r3,r3,8
  806484:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  806488:	e0bff517 	ldw	r2,-44(fp)
  80648c:	00c00044 	movi	r3,1
  806490:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  806494:	e0bff517 	ldw	r2,-44(fp)
  806498:	1009883a 	mov	r4,r2
  80649c:	08018b80 	call	8018b8 <sync>
  8064a0:	e0bfee15 	stw	r2,-72(fp)
         }
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  8064a4:	e0bfee17 	ldw	r2,-72(fp)
}
  8064a8:	e037883a 	mov	sp,fp
  8064ac:	dfc00117 	ldw	ra,4(sp)
  8064b0:	df000017 	ldw	fp,0(sp)
  8064b4:	dec00204 	addi	sp,sp,8
  8064b8:	f800283a 	ret

008064bc <f_chmod>:
FRESULT f_chmod (
   const TCHAR *path,   /* Pointer to the file path */
   uint8_t value,       /* Attribute bits */
   uint8_t mask         /* Attribute mask to change */
)
{
  8064bc:	deffef04 	addi	sp,sp,-68
  8064c0:	dfc01015 	stw	ra,64(sp)
  8064c4:	df000f15 	stw	fp,60(sp)
  8064c8:	df000f04 	addi	fp,sp,60
  8064cc:	e13ffd15 	stw	r4,-12(fp)
  8064d0:	2807883a 	mov	r3,r5
  8064d4:	3005883a 	mov	r2,r6
  8064d8:	e0fffe05 	stb	r3,-8(fp)
  8064dc:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8064e0:	e0fff304 	addi	r3,fp,-52
  8064e4:	e0bffd04 	addi	r2,fp,-12
  8064e8:	01800044 	movi	r6,1
  8064ec:	180b883a 	mov	r5,r3
  8064f0:	1009883a 	mov	r4,r2
  8064f4:	08035900 	call	803590 <chk_mounted>
  8064f8:	e0bff115 	stw	r2,-60(fp)
   if (res == FR_OK) {
  8064fc:	e0bff117 	ldw	r2,-60(fp)
  806500:	10002b1e 	bne	r2,zero,8065b0 <f_chmod+0xf4>
      INIT_BUF(dj);
  806504:	e0bffa04 	addi	r2,fp,-24
  806508:	e0bff915 	stw	r2,-28(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  80650c:	e0fffd17 	ldw	r3,-12(fp)
  806510:	e0bff304 	addi	r2,fp,-52
  806514:	180b883a 	mov	r5,r3
  806518:	1009883a 	mov	r4,r2
  80651c:	08032080 	call	803208 <follow_path>
  806520:	e0bff115 	stw	r2,-60(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  806524:	e0bff117 	ldw	r2,-60(fp)
  806528:	1000211e 	bne	r2,zero,8065b0 <f_chmod+0xf4>
         dir = dj.dir;
  80652c:	e0bff817 	ldw	r2,-32(fp)
  806530:	e0bff215 	stw	r2,-56(fp)
         if (!dir) {                /* Is it a root directory? */
  806534:	e0bff217 	ldw	r2,-56(fp)
  806538:	1000031e 	bne	r2,zero,806548 <f_chmod+0x8c>
            res = FR_INVALID_NAME;
  80653c:	00800184 	movi	r2,6
  806540:	e0bff115 	stw	r2,-60(fp)
  806544:	00001a06 	br	8065b0 <f_chmod+0xf4>
         } else {                /* File or sub directory */
            mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;   /* Valid attribute mask */
  806548:	e0bfff03 	ldbu	r2,-4(fp)
  80654c:	108009cc 	andi	r2,r2,39
  806550:	e0bfff05 	stb	r2,-4(fp)
            dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (uint8_t)~mask);   /* Apply attribute change */
  806554:	e0bff217 	ldw	r2,-56(fp)
  806558:	108002c4 	addi	r2,r2,11
  80655c:	e0fff217 	ldw	r3,-56(fp)
  806560:	18c002c4 	addi	r3,r3,11
  806564:	19000003 	ldbu	r4,0(r3)
  806568:	e0fffe03 	ldbu	r3,-8(fp)
  80656c:	20c6f03a 	xor	r3,r4,r3
  806570:	1809883a 	mov	r4,r3
  806574:	e0ffff03 	ldbu	r3,-4(fp)
  806578:	20c6703a 	and	r3,r4,r3
  80657c:	1809883a 	mov	r4,r3
  806580:	e0fff217 	ldw	r3,-56(fp)
  806584:	18c002c4 	addi	r3,r3,11
  806588:	18c00003 	ldbu	r3,0(r3)
  80658c:	20c6f03a 	xor	r3,r4,r3
  806590:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  806594:	e0bff317 	ldw	r2,-52(fp)
  806598:	00c00044 	movi	r3,1
  80659c:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8065a0:	e0bff317 	ldw	r2,-52(fp)
  8065a4:	1009883a 	mov	r4,r2
  8065a8:	08018b80 	call	8018b8 <sync>
  8065ac:	e0bff115 	stw	r2,-60(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  8065b0:	e0bff117 	ldw	r2,-60(fp)
}
  8065b4:	e037883a 	mov	sp,fp
  8065b8:	dfc00117 	ldw	ra,4(sp)
  8065bc:	df000017 	ldw	fp,0(sp)
  8065c0:	dec00204 	addi	sp,sp,8
  8065c4:	f800283a 	ret

008065c8 <f_utime>:

FRESULT f_utime (
   const TCHAR *path,   /* Pointer to the file/directory name */
   const FILINFO *fno   /* Pointer to the time stamp to be set */
)
{
  8065c8:	defff004 	addi	sp,sp,-64
  8065cc:	dfc00f15 	stw	ra,60(sp)
  8065d0:	df000e15 	stw	fp,56(sp)
  8065d4:	df000e04 	addi	fp,sp,56
  8065d8:	e13ffe15 	stw	r4,-8(fp)
  8065dc:	e17fff15 	stw	r5,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8065e0:	e0fff404 	addi	r3,fp,-48
  8065e4:	e0bffe04 	addi	r2,fp,-8
  8065e8:	01800044 	movi	r6,1
  8065ec:	180b883a 	mov	r5,r3
  8065f0:	1009883a 	mov	r4,r2
  8065f4:	08035900 	call	803590 <chk_mounted>
  8065f8:	e0bff215 	stw	r2,-56(fp)
   if (res == FR_OK) {
  8065fc:	e0bff217 	ldw	r2,-56(fp)
  806600:	1000301e 	bne	r2,zero,8066c4 <f_utime+0xfc>
      INIT_BUF(dj);
  806604:	e0bffb04 	addi	r2,fp,-20
  806608:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  80660c:	e0fffe17 	ldw	r3,-8(fp)
  806610:	e0bff404 	addi	r2,fp,-48
  806614:	180b883a 	mov	r5,r3
  806618:	1009883a 	mov	r4,r2
  80661c:	08032080 	call	803208 <follow_path>
  806620:	e0bff215 	stw	r2,-56(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  806624:	e0bff217 	ldw	r2,-56(fp)
  806628:	1000261e 	bne	r2,zero,8066c4 <f_utime+0xfc>
         dir = dj.dir;
  80662c:	e0bff917 	ldw	r2,-28(fp)
  806630:	e0bff315 	stw	r2,-52(fp)
         if (!dir) {             /* Root directory */
  806634:	e0bff317 	ldw	r2,-52(fp)
  806638:	1000031e 	bne	r2,zero,806648 <f_utime+0x80>
            res = FR_INVALID_NAME;
  80663c:	00800184 	movi	r2,6
  806640:	e0bff215 	stw	r2,-56(fp)
  806644:	00001f06 	br	8066c4 <f_utime+0xfc>
         } else {             /* File or sub-directory */
            ST_WORD(dir+DIR_WrtTime, fno->ftime);
  806648:	e0bff317 	ldw	r2,-52(fp)
  80664c:	10800584 	addi	r2,r2,22
  806650:	e0ffff17 	ldw	r3,-4(fp)
  806654:	18c0018b 	ldhu	r3,6(r3)
  806658:	10c00005 	stb	r3,0(r2)
  80665c:	e0bff317 	ldw	r2,-52(fp)
  806660:	108005c4 	addi	r2,r2,23
  806664:	e0ffff17 	ldw	r3,-4(fp)
  806668:	18c0018b 	ldhu	r3,6(r3)
  80666c:	18ffffcc 	andi	r3,r3,65535
  806670:	1806d23a 	srli	r3,r3,8
  806674:	10c00005 	stb	r3,0(r2)
            ST_WORD(dir+DIR_WrtDate, fno->fdate);
  806678:	e0bff317 	ldw	r2,-52(fp)
  80667c:	10800604 	addi	r2,r2,24
  806680:	e0ffff17 	ldw	r3,-4(fp)
  806684:	18c0010b 	ldhu	r3,4(r3)
  806688:	10c00005 	stb	r3,0(r2)
  80668c:	e0bff317 	ldw	r2,-52(fp)
  806690:	10800644 	addi	r2,r2,25
  806694:	e0ffff17 	ldw	r3,-4(fp)
  806698:	18c0010b 	ldhu	r3,4(r3)
  80669c:	18ffffcc 	andi	r3,r3,65535
  8066a0:	1806d23a 	srli	r3,r3,8
  8066a4:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  8066a8:	e0bff417 	ldw	r2,-48(fp)
  8066ac:	00c00044 	movi	r3,1
  8066b0:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8066b4:	e0bff417 	ldw	r2,-48(fp)
  8066b8:	1009883a 	mov	r4,r2
  8066bc:	08018b80 	call	8018b8 <sync>
  8066c0:	e0bff215 	stw	r2,-56(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  8066c4:	e0bff217 	ldw	r2,-56(fp)
}
  8066c8:	e037883a 	mov	sp,fp
  8066cc:	dfc00117 	ldw	ra,4(sp)
  8066d0:	df000017 	ldw	fp,0(sp)
  8066d4:	dec00204 	addi	sp,sp,8
  8066d8:	f800283a 	ret

008066dc <f_rename>:

FRESULT f_rename (
   const TCHAR *path_old,  /* Pointer to the old name */
   const TCHAR *path_new   /* Pointer to the new name */
)
{
  8066dc:	deffe204 	addi	sp,sp,-120
  8066e0:	dfc01d15 	stw	ra,116(sp)
  8066e4:	df001c15 	stw	fp,112(sp)
  8066e8:	df001c04 	addi	fp,sp,112
  8066ec:	e13ffe15 	stw	r4,-8(fp)
  8066f0:	e17fff15 	stw	r5,-4(fp)
   uint8_t buf[21], *dir;
   uint32_t dw;
   DEF_NAMEBUF;


   res = chk_mounted(&path_old, &djo.fs, 1);
  8066f4:	e0ffe704 	addi	r3,fp,-100
  8066f8:	e0bffe04 	addi	r2,fp,-8
  8066fc:	01800044 	movi	r6,1
  806700:	180b883a 	mov	r5,r3
  806704:	1009883a 	mov	r4,r2
  806708:	08035900 	call	803590 <chk_mounted>
  80670c:	e0bfe415 	stw	r2,-112(fp)
   if (res == FR_OK) {
  806710:	e0bfe417 	ldw	r2,-112(fp)
  806714:	1000b01e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
      djn.fs = djo.fs;
  806718:	e0bfe717 	ldw	r2,-100(fp)
  80671c:	e0bfee15 	stw	r2,-72(fp)
      INIT_BUF(djo);
  806720:	e0bffa44 	addi	r2,fp,-23
  806724:	e0bfed15 	stw	r2,-76(fp)
      res = follow_path(&djo, path_old);     /* Check old object */
  806728:	e0fffe17 	ldw	r3,-8(fp)
  80672c:	e0bfe704 	addi	r2,fp,-100
  806730:	180b883a 	mov	r5,r3
  806734:	1009883a 	mov	r4,r2
  806738:	08032080 	call	803208 <follow_path>
  80673c:	e0bfe415 	stw	r2,-112(fp)
      if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
      if (res == FR_OK) {                 /* Old object is found */
  806740:	e0bfe417 	ldw	r2,-112(fp)
  806744:	1000a41e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
         if (!djo.dir) {                  /* Is root dir? */
  806748:	e0bfec17 	ldw	r2,-80(fp)
  80674c:	1000031e 	bne	r2,zero,80675c <f_rename+0x80>
            res = FR_NO_FILE;
  806750:	00800104 	movi	r2,4
  806754:	e0bfe415 	stw	r2,-112(fp)
  806758:	00009f06 	br	8069d8 <f_rename+0x2fc>
         } else {
            mem_cpy(buf, djo.dir+DIR_Attr, 21);    /* Save the object information except for name */
  80675c:	e0bfec17 	ldw	r2,-80(fp)
  806760:	10c002c4 	addi	r3,r2,11
  806764:	e0bff504 	addi	r2,fp,-44
  806768:	01800544 	movi	r6,21
  80676c:	180b883a 	mov	r5,r3
  806770:	1009883a 	mov	r4,r2
  806774:	08015880 	call	801588 <mem_cpy>
            mem_cpy(&djn, &djo, sizeof(DIR));      /* Check new object */
  806778:	e0ffe704 	addi	r3,fp,-100
  80677c:	e0bfee04 	addi	r2,fp,-72
  806780:	01800704 	movi	r6,28
  806784:	180b883a 	mov	r5,r3
  806788:	1009883a 	mov	r4,r2
  80678c:	08015880 	call	801588 <mem_cpy>
            res = follow_path(&djn, path_new);
  806790:	e0bfee04 	addi	r2,fp,-72
  806794:	e17fff17 	ldw	r5,-4(fp)
  806798:	1009883a 	mov	r4,r2
  80679c:	08032080 	call	803208 <follow_path>
  8067a0:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_OK) res = FR_EXIST;      /* The new object name is already existing */
  8067a4:	e0bfe417 	ldw	r2,-112(fp)
  8067a8:	1000021e 	bne	r2,zero,8067b4 <f_rename+0xd8>
  8067ac:	00800204 	movi	r2,8
  8067b0:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_NO_FILE) {            /* Is it a valid path and no name collision? */
  8067b4:	e0bfe417 	ldw	r2,-112(fp)
  8067b8:	10800118 	cmpnei	r2,r2,4
  8067bc:	1000861e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
/* Start critical section that any interruption or error can cause cross-link */
               res = dir_register(&djn);        /* Register the new entry */
  8067c0:	e0bfee04 	addi	r2,fp,-72
  8067c4:	1009883a 	mov	r4,r2
  8067c8:	0802b240 	call	802b24 <dir_register>
  8067cc:	e0bfe415 	stw	r2,-112(fp)
               if (res == FR_OK) {
  8067d0:	e0bfe417 	ldw	r2,-112(fp)
  8067d4:	1000801e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
                  dir = djn.dir;             /* Copy object information except for name */
  8067d8:	e0bff317 	ldw	r2,-52(fp)
  8067dc:	e0bfe515 	stw	r2,-108(fp)
                  mem_cpy(dir+13, buf+2, 19);
  8067e0:	e0bfe517 	ldw	r2,-108(fp)
  8067e4:	10c00344 	addi	r3,r2,13
  8067e8:	e0bff504 	addi	r2,fp,-44
  8067ec:	10800084 	addi	r2,r2,2
  8067f0:	018004c4 	movi	r6,19
  8067f4:	100b883a 	mov	r5,r2
  8067f8:	1809883a 	mov	r4,r3
  8067fc:	08015880 	call	801588 <mem_cpy>
                  dir[DIR_Attr] = buf[0] | AM_ARC;
  806800:	e0bfe517 	ldw	r2,-108(fp)
  806804:	108002c4 	addi	r2,r2,11
  806808:	e0fff503 	ldbu	r3,-44(fp)
  80680c:	18c00814 	ori	r3,r3,32
  806810:	10c00005 	stb	r3,0(r2)
                  djo.fs->wflag = 1;
  806814:	e0bfe717 	ldw	r2,-100(fp)
  806818:	00c00044 	movi	r3,1
  80681c:	10c00105 	stb	r3,4(r2)
                  if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {    /* Update .. entry in the directory if needed */
  806820:	e0ffe917 	ldw	r3,-92(fp)
  806824:	e0bff017 	ldw	r2,-64(fp)
  806828:	18805f26 	beq	r3,r2,8069a8 <f_rename+0x2cc>
  80682c:	e0bfe517 	ldw	r2,-108(fp)
  806830:	108002c4 	addi	r2,r2,11
  806834:	10800003 	ldbu	r2,0(r2)
  806838:	10803fcc 	andi	r2,r2,255
  80683c:	1080040c 	andi	r2,r2,16
  806840:	10005926 	beq	r2,zero,8069a8 <f_rename+0x2cc>
                     dw = clust2sect(djn.fs, LD_CLUST(dir));
  806844:	e13fee17 	ldw	r4,-72(fp)
  806848:	e0bfe517 	ldw	r2,-108(fp)
  80684c:	10800544 	addi	r2,r2,21
  806850:	10800003 	ldbu	r2,0(r2)
  806854:	10803fcc 	andi	r2,r2,255
  806858:	1004923a 	slli	r2,r2,8
  80685c:	1007883a 	mov	r3,r2
  806860:	e0bfe517 	ldw	r2,-108(fp)
  806864:	10800504 	addi	r2,r2,20
  806868:	10800003 	ldbu	r2,0(r2)
  80686c:	10803fcc 	andi	r2,r2,255
  806870:	1884b03a 	or	r2,r3,r2
  806874:	10bfffcc 	andi	r2,r2,65535
  806878:	1006943a 	slli	r3,r2,16
  80687c:	e0bfe517 	ldw	r2,-108(fp)
  806880:	108006c4 	addi	r2,r2,27
  806884:	10800003 	ldbu	r2,0(r2)
  806888:	10803fcc 	andi	r2,r2,255
  80688c:	1004923a 	slli	r2,r2,8
  806890:	100b883a 	mov	r5,r2
  806894:	e0bfe517 	ldw	r2,-108(fp)
  806898:	10800684 	addi	r2,r2,26
  80689c:	10800003 	ldbu	r2,0(r2)
  8068a0:	10803fcc 	andi	r2,r2,255
  8068a4:	2884b03a 	or	r2,r5,r2
  8068a8:	10bfffcc 	andi	r2,r2,65535
  8068ac:	1884b03a 	or	r2,r3,r2
  8068b0:	100b883a 	mov	r5,r2
  8068b4:	0801ad80 	call	801ad8 <clust2sect>
  8068b8:	e0bfe615 	stw	r2,-104(fp)
                     if (!dw) {
  8068bc:	e0bfe617 	ldw	r2,-104(fp)
  8068c0:	1000031e 	bne	r2,zero,8068d0 <f_rename+0x1f4>
                        res = FR_INT_ERR;
  8068c4:	00800084 	movi	r2,2
  8068c8:	e0bfe415 	stw	r2,-112(fp)
  8068cc:	00003606 	br	8069a8 <f_rename+0x2cc>
                     } else {
                        res = move_window(djn.fs, dw);
  8068d0:	e0bfee17 	ldw	r2,-72(fp)
  8068d4:	e17fe617 	ldw	r5,-104(fp)
  8068d8:	1009883a 	mov	r4,r2
  8068dc:	080175c0 	call	80175c <move_window>
  8068e0:	e0bfe415 	stw	r2,-112(fp)
                        dir = djn.fs->win+SZ_DIR;  /* .. entry */
  8068e4:	e0bfee17 	ldw	r2,-72(fp)
  8068e8:	10800c04 	addi	r2,r2,48
  8068ec:	10800804 	addi	r2,r2,32
  8068f0:	e0bfe515 	stw	r2,-108(fp)
                        if (res == FR_OK && dir[1] == '.') {
  8068f4:	e0bfe417 	ldw	r2,-112(fp)
  8068f8:	10002b1e 	bne	r2,zero,8069a8 <f_rename+0x2cc>
  8068fc:	e0bfe517 	ldw	r2,-108(fp)
  806900:	10800044 	addi	r2,r2,1
  806904:	10800003 	ldbu	r2,0(r2)
  806908:	10803fcc 	andi	r2,r2,255
  80690c:	10800b98 	cmpnei	r2,r2,46
  806910:	1000251e 	bne	r2,zero,8069a8 <f_rename+0x2cc>
                           dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
  806914:	e0bfee17 	ldw	r2,-72(fp)
  806918:	10800003 	ldbu	r2,0(r2)
  80691c:	10803fcc 	andi	r2,r2,255
  806920:	108000d8 	cmpnei	r2,r2,3
  806924:	1000041e 	bne	r2,zero,806938 <f_rename+0x25c>
  806928:	e0fff017 	ldw	r3,-64(fp)
  80692c:	e0bfee17 	ldw	r2,-72(fp)
  806930:	10800917 	ldw	r2,36(r2)
  806934:	18800226 	beq	r3,r2,806940 <f_rename+0x264>
  806938:	e0bff017 	ldw	r2,-64(fp)
  80693c:	00000106 	br	806944 <f_rename+0x268>
  806940:	0005883a 	mov	r2,zero
  806944:	e0bfe615 	stw	r2,-104(fp)
                           ST_CLUST(dir, dw);
  806948:	e0bfe517 	ldw	r2,-108(fp)
  80694c:	10800684 	addi	r2,r2,26
  806950:	e0ffe617 	ldw	r3,-104(fp)
  806954:	10c00005 	stb	r3,0(r2)
  806958:	e0bfe517 	ldw	r2,-108(fp)
  80695c:	108006c4 	addi	r2,r2,27
  806960:	e0ffe617 	ldw	r3,-104(fp)
  806964:	18ffffcc 	andi	r3,r3,65535
  806968:	1807d23a 	srai	r3,r3,8
  80696c:	10c00005 	stb	r3,0(r2)
  806970:	e0bfe517 	ldw	r2,-108(fp)
  806974:	10800504 	addi	r2,r2,20
  806978:	e0ffe617 	ldw	r3,-104(fp)
  80697c:	1806d43a 	srli	r3,r3,16
  806980:	10c00005 	stb	r3,0(r2)
  806984:	e0bfe517 	ldw	r2,-108(fp)
  806988:	10800544 	addi	r2,r2,21
  80698c:	e0ffe617 	ldw	r3,-104(fp)
  806990:	1806d43a 	srli	r3,r3,16
  806994:	1807d23a 	srai	r3,r3,8
  806998:	10c00005 	stb	r3,0(r2)
                           djn.fs->wflag = 1;
  80699c:	e0bfee17 	ldw	r2,-72(fp)
  8069a0:	00c00044 	movi	r3,1
  8069a4:	10c00105 	stb	r3,4(r2)
                        }
                     }
                  }
                  if (res == FR_OK) {
  8069a8:	e0bfe417 	ldw	r2,-112(fp)
  8069ac:	10000a1e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
                     res = dir_remove(&djo);    /* Remove old entry */
  8069b0:	e0bfe704 	addi	r2,fp,-100
  8069b4:	1009883a 	mov	r4,r2
  8069b8:	0802c480 	call	802c48 <dir_remove>
  8069bc:	e0bfe415 	stw	r2,-112(fp)
                     if (res == FR_OK)
  8069c0:	e0bfe417 	ldw	r2,-112(fp)
  8069c4:	1000041e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
                        res = sync(djo.fs);
  8069c8:	e0bfe717 	ldw	r2,-100(fp)
  8069cc:	1009883a 	mov	r4,r2
  8069d0:	08018b80 	call	8018b8 <sync>
  8069d4:	e0bfe415 	stw	r2,-112(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(djo.fs, res);
  8069d8:	e0bfe417 	ldw	r2,-112(fp)
}
  8069dc:	e037883a 	mov	sp,fp
  8069e0:	dfc00117 	ldw	ra,4(sp)
  8069e4:	df000017 	ldw	fp,0(sp)
  8069e8:	dec00204 	addi	sp,sp,8
  8069ec:	f800283a 	ret

008069f0 <f_mkfs>:
FRESULT f_mkfs (
   uint8_t drv,      /* Logical drive number */
   uint8_t sfd,      /* Partitioning rule 0:FDISK, 1:SFD */
   uint32_t au        /* Allocation unit size [bytes] */
)
{
  8069f0:	deffea04 	addi	sp,sp,-88
  8069f4:	dfc01515 	stw	ra,84(sp)
  8069f8:	df001415 	stw	fp,80(sp)
  8069fc:	df001404 	addi	fp,sp,80
  806a00:	2007883a 	mov	r3,r4
  806a04:	2805883a 	mov	r2,r5
  806a08:	e1bfff15 	stw	r6,-4(fp)
  806a0c:	e0fffd05 	stb	r3,-12(fp)
  806a10:	e0bffe05 	stb	r2,-8(fp)
   FATFS *fs;
   DSTATUS stat;


   /* Check mounted drive and clear work area */
   if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
  806a14:	e0bffd03 	ldbu	r2,-12(fp)
  806a18:	10000226 	beq	r2,zero,806a24 <f_mkfs+0x34>
  806a1c:	008002c4 	movi	r2,11
  806a20:	00039e06 	br	80789c <f_mkfs+0xeac>
   if (sfd > 1) return FR_INVALID_PARAMETER;
  806a24:	e0bffe03 	ldbu	r2,-8(fp)
  806a28:	108000b0 	cmpltui	r2,r2,2
  806a2c:	1000021e 	bne	r2,zero,806a38 <f_mkfs+0x48>
  806a30:	008004c4 	movi	r2,19
  806a34:	00039906 	br	80789c <f_mkfs+0xeac>
   if (au & (au - 1)) return FR_INVALID_PARAMETER;
  806a38:	e0bfff17 	ldw	r2,-4(fp)
  806a3c:	10ffffc4 	addi	r3,r2,-1
  806a40:	e0bfff17 	ldw	r2,-4(fp)
  806a44:	1884703a 	and	r2,r3,r2
  806a48:	10000226 	beq	r2,zero,806a54 <f_mkfs+0x64>
  806a4c:	008004c4 	movi	r2,19
  806a50:	00039206 	br	80789c <f_mkfs+0xeac>
   fs = FatFs[drv];
  806a54:	e0bffd03 	ldbu	r2,-12(fp)
  806a58:	1085883a 	add	r2,r2,r2
  806a5c:	1087883a 	add	r3,r2,r2
  806a60:	d0a35b04 	addi	r2,gp,-29332
  806a64:	1885883a 	add	r2,r3,r2
  806a68:	10800017 	ldw	r2,0(r2)
  806a6c:	e0bff315 	stw	r2,-52(fp)
   if (!fs) return FR_NOT_ENABLED;
  806a70:	e0bff317 	ldw	r2,-52(fp)
  806a74:	1000021e 	bne	r2,zero,806a80 <f_mkfs+0x90>
  806a78:	00800304 	movi	r2,12
  806a7c:	00038706 	br	80789c <f_mkfs+0xeac>
   fs->fs_type = 0;
  806a80:	e0bff317 	ldw	r2,-52(fp)
  806a84:	10000005 	stb	zero,0(r2)
   pdrv = LD2PD(drv);   /* Physical drive */
  806a88:	e0bffd03 	ldbu	r2,-12(fp)
  806a8c:	e0bff405 	stb	r2,-48(fp)
   part = LD2PT(drv);   /* Partition (0:auto detect, 1-4:get from partition table)*/
  806a90:	e03ff445 	stb	zero,-47(fp)

   /* Get disk statics */
   stat = disk_initialize(pdrv);
  806a94:	e0bff403 	ldbu	r2,-48(fp)
  806a98:	1009883a 	mov	r4,r2
  806a9c:	0800b840 	call	800b84 <ffs_DiskIOInitialize>
  806aa0:	e0bff485 	stb	r2,-46(fp)
   if (stat & STA_NOINIT) return FR_NOT_READY;
  806aa4:	e0bff483 	ldbu	r2,-46(fp)
  806aa8:	1080004c 	andi	r2,r2,1
  806aac:	10000226 	beq	r2,zero,806ab8 <f_mkfs+0xc8>
  806ab0:	008000c4 	movi	r2,3
  806ab4:	00037906 	br	80789c <f_mkfs+0xeac>
   if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
  806ab8:	e0bff483 	ldbu	r2,-46(fp)
  806abc:	1080010c 	andi	r2,r2,4
  806ac0:	10000226 	beq	r2,zero,806acc <f_mkfs+0xdc>
  806ac4:	00800284 	movi	r2,10
  806ac8:	00037406 	br	80789c <f_mkfs+0xeac>
      if (!tbl[4]) return FR_MKFS_ABORTED;   /* No partition? */
      b_vol = LD_DWORD(tbl+8);   /* Volume start sector */
      n_vol = LD_DWORD(tbl+12);  /* Volume size */
   } else {
      /* Create a partition in this function */
      if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
  806acc:	e0bff403 	ldbu	r2,-48(fp)
  806ad0:	e0fffc04 	addi	r3,fp,-16
  806ad4:	180d883a 	mov	r6,r3
  806ad8:	01400044 	movi	r5,1
  806adc:	1009883a 	mov	r4,r2
  806ae0:	08010980 	call	801098 <ffs_DiskIOIoctl>
  806ae4:	1000031e 	bne	r2,zero,806af4 <f_mkfs+0x104>
  806ae8:	e0bffc17 	ldw	r2,-16(fp)
  806aec:	10802028 	cmpgeui	r2,r2,128
  806af0:	1000021e 	bne	r2,zero,806afc <f_mkfs+0x10c>
         return FR_DISK_ERR;
  806af4:	00800044 	movi	r2,1
  806af8:	00036806 	br	80789c <f_mkfs+0xeac>
      b_vol = (sfd) ? 0 : 63;    /* Volume start sector */
  806afc:	e0bffe03 	ldbu	r2,-8(fp)
  806b00:	10000226 	beq	r2,zero,806b0c <f_mkfs+0x11c>
  806b04:	0005883a 	mov	r2,zero
  806b08:	00000106 	br	806b10 <f_mkfs+0x120>
  806b0c:	00800fc4 	movi	r2,63
  806b10:	e0bff515 	stw	r2,-44(fp)
      n_vol -= b_vol;            /* Volume size */
  806b14:	e0fffc17 	ldw	r3,-16(fp)
  806b18:	e0bff517 	ldw	r2,-44(fp)
  806b1c:	1885c83a 	sub	r2,r3,r2
  806b20:	e0bffc15 	stw	r2,-16(fp)
   }

   if (!au) {           /* AU auto selection */
  806b24:	e0bfff17 	ldw	r2,-4(fp)
  806b28:	10001b1e 	bne	r2,zero,806b98 <f_mkfs+0x1a8>
      vs = n_vol / (2000 / (SS(fs) / 512));
  806b2c:	e0bffc17 	ldw	r2,-16(fp)
  806b30:	0141f404 	movi	r5,2000
  806b34:	1009883a 	mov	r4,r2
  806b38:	080a3580 	call	80a358 <__udivsi3>
  806b3c:	e0bff615 	stw	r2,-40(fp)
      for (i = 0; vs < vst[i]; i++) ;
  806b40:	e03fee15 	stw	zero,-72(fp)
  806b44:	00000306 	br	806b54 <f_mkfs+0x164>
  806b48:	e0bfee17 	ldw	r2,-72(fp)
  806b4c:	10800044 	addi	r2,r2,1
  806b50:	e0bfee15 	stw	r2,-72(fp)
  806b54:	008020b4 	movhi	r2,130
  806b58:	10acb804 	addi	r2,r2,-19744
  806b5c:	e0ffee17 	ldw	r3,-72(fp)
  806b60:	18c7883a 	add	r3,r3,r3
  806b64:	10c5883a 	add	r2,r2,r3
  806b68:	1080000b 	ldhu	r2,0(r2)
  806b6c:	10bfffcc 	andi	r2,r2,65535
  806b70:	e0fff617 	ldw	r3,-40(fp)
  806b74:	18bff436 	bltu	r3,r2,806b48 <__alt_data_end+0xff806b48>
      au = cst[i];
  806b78:	008020b4 	movhi	r2,130
  806b7c:	10acbd84 	addi	r2,r2,-19722
  806b80:	e0ffee17 	ldw	r3,-72(fp)
  806b84:	18c7883a 	add	r3,r3,r3
  806b88:	10c5883a 	add	r2,r2,r3
  806b8c:	1080000b 	ldhu	r2,0(r2)
  806b90:	10bfffcc 	andi	r2,r2,65535
  806b94:	e0bfff15 	stw	r2,-4(fp)
   }
   au /= SS(fs);     /* Number of sectors per cluster */
  806b98:	e0bfff17 	ldw	r2,-4(fp)
  806b9c:	1004d27a 	srli	r2,r2,9
  806ba0:	e0bfff15 	stw	r2,-4(fp)
   if (au == 0) au = 1;
  806ba4:	e0bfff17 	ldw	r2,-4(fp)
  806ba8:	1000021e 	bne	r2,zero,806bb4 <f_mkfs+0x1c4>
  806bac:	00800044 	movi	r2,1
  806bb0:	e0bfff15 	stw	r2,-4(fp)
   if (au > 128) au = 128;
  806bb4:	e0bfff17 	ldw	r2,-4(fp)
  806bb8:	10802070 	cmpltui	r2,r2,129
  806bbc:	1000021e 	bne	r2,zero,806bc8 <f_mkfs+0x1d8>
  806bc0:	00802004 	movi	r2,128
  806bc4:	e0bfff15 	stw	r2,-4(fp)

   /* Pre-compute number of clusters and FAT syb-type */
   n_clst = n_vol / au;
  806bc8:	e0bffc17 	ldw	r2,-16(fp)
  806bcc:	e17fff17 	ldw	r5,-4(fp)
  806bd0:	1009883a 	mov	r4,r2
  806bd4:	080a3580 	call	80a358 <__udivsi3>
  806bd8:	e0bff715 	stw	r2,-36(fp)
   fmt = FS_FAT12;
  806bdc:	00800044 	movi	r2,1
  806be0:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
  806be4:	e0bff717 	ldw	r2,-36(fp)
  806be8:	1083fdb0 	cmpltui	r2,r2,4086
  806bec:	1000021e 	bne	r2,zero,806bf8 <f_mkfs+0x208>
  806bf0:	00800084 	movi	r2,2
  806bf4:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
  806bf8:	e0bff717 	ldw	r2,-36(fp)
  806bfc:	10bffdb0 	cmpltui	r2,r2,65526
  806c00:	1000021e 	bne	r2,zero,806c0c <f_mkfs+0x21c>
  806c04:	008000c4 	movi	r2,3
  806c08:	e0bfec05 	stb	r2,-80(fp)

   /* Determine offset and size of FAT structure */
   if (fmt == FS_FAT32) {
  806c0c:	e0bfec03 	ldbu	r2,-80(fp)
  806c10:	108000d8 	cmpnei	r2,r2,3
  806c14:	10000b1e 	bne	r2,zero,806c44 <f_mkfs+0x254>
      n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
  806c18:	e0bff717 	ldw	r2,-36(fp)
  806c1c:	10802084 	addi	r2,r2,130
  806c20:	1085883a 	add	r2,r2,r2
  806c24:	1085883a 	add	r2,r2,r2
  806c28:	10bfffc4 	addi	r2,r2,-1
  806c2c:	1004d27a 	srli	r2,r2,9
  806c30:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 32;
  806c34:	00800804 	movi	r2,32
  806c38:	e0bff015 	stw	r2,-64(fp)
      n_dir = 0;
  806c3c:	e03ff215 	stw	zero,-56(fp)
  806c40:	00001706 	br	806ca0 <f_mkfs+0x2b0>
   } else {
      n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
  806c44:	e0bfec03 	ldbu	r2,-80(fp)
  806c48:	10800058 	cmpnei	r2,r2,1
  806c4c:	1000081e 	bne	r2,zero,806c70 <f_mkfs+0x280>
  806c50:	e0fff717 	ldw	r3,-36(fp)
  806c54:	1805883a 	mov	r2,r3
  806c58:	1085883a 	add	r2,r2,r2
  806c5c:	10c5883a 	add	r2,r2,r3
  806c60:	10800044 	addi	r2,r2,1
  806c64:	1004d07a 	srli	r2,r2,1
  806c68:	108000c4 	addi	r2,r2,3
  806c6c:	00000306 	br	806c7c <f_mkfs+0x28c>
  806c70:	e0bff717 	ldw	r2,-36(fp)
  806c74:	10800084 	addi	r2,r2,2
  806c78:	1085883a 	add	r2,r2,r2
  806c7c:	e0bff115 	stw	r2,-60(fp)
      n_fat = (n_fat + SS(fs) - 1) / SS(fs);
  806c80:	e0bff117 	ldw	r2,-60(fp)
  806c84:	10807fc4 	addi	r2,r2,511
  806c88:	1004d27a 	srli	r2,r2,9
  806c8c:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 1;
  806c90:	00800044 	movi	r2,1
  806c94:	e0bff015 	stw	r2,-64(fp)
      n_dir = (uint32_t)N_ROOTDIR * SZ_DIR / SS(fs);
  806c98:	00800804 	movi	r2,32
  806c9c:	e0bff215 	stw	r2,-56(fp)
   }
   b_fat = b_vol + n_rsv;           /* FAT area start sector */
  806ca0:	e0fff517 	ldw	r3,-44(fp)
  806ca4:	e0bff017 	ldw	r2,-64(fp)
  806ca8:	1885883a 	add	r2,r3,r2
  806cac:	e0bfef15 	stw	r2,-68(fp)
   b_dir = b_fat + n_fat * N_FATS;     /* Directory area start sector */
  806cb0:	e0ffef17 	ldw	r3,-68(fp)
  806cb4:	e0bff117 	ldw	r2,-60(fp)
  806cb8:	1885883a 	add	r2,r3,r2
  806cbc:	e0bff815 	stw	r2,-32(fp)
   b_data = b_dir + n_dir;          /* Data area start sector */
  806cc0:	e0fff817 	ldw	r3,-32(fp)
  806cc4:	e0bff217 	ldw	r2,-56(fp)
  806cc8:	1885883a 	add	r2,r3,r2
  806ccc:	e0bff915 	stw	r2,-28(fp)
   if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED; /* Too small volume */
  806cd0:	e0fff917 	ldw	r3,-28(fp)
  806cd4:	e0bfff17 	ldw	r2,-4(fp)
  806cd8:	1887883a 	add	r3,r3,r2
  806cdc:	e0bff517 	ldw	r2,-44(fp)
  806ce0:	1885c83a 	sub	r2,r3,r2
  806ce4:	e0fffc17 	ldw	r3,-16(fp)
  806ce8:	1880022e 	bgeu	r3,r2,806cf4 <f_mkfs+0x304>
  806cec:	00800384 	movi	r2,14
  806cf0:	0002ea06 	br	80789c <f_mkfs+0xeac>

   /* Align data start sector to erase block boundary (for flash memory media) */
   if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
  806cf4:	e0bff403 	ldbu	r2,-48(fp)
  806cf8:	e0fffb04 	addi	r3,fp,-20
  806cfc:	180d883a 	mov	r6,r3
  806d00:	014000c4 	movi	r5,3
  806d04:	1009883a 	mov	r4,r2
  806d08:	08010980 	call	801098 <ffs_DiskIOIoctl>
  806d0c:	1000051e 	bne	r2,zero,806d24 <f_mkfs+0x334>
  806d10:	e0bffb17 	ldw	r2,-20(fp)
  806d14:	10000326 	beq	r2,zero,806d24 <f_mkfs+0x334>
  806d18:	e0bffb17 	ldw	r2,-20(fp)
  806d1c:	10a00070 	cmpltui	r2,r2,32769
  806d20:	1000021e 	bne	r2,zero,806d2c <f_mkfs+0x33c>
  806d24:	00800044 	movi	r2,1
  806d28:	e0bffb15 	stw	r2,-20(fp)
   n = (b_data + n - 1) & ~(n - 1); /* Next nearest erase block from current data start */
  806d2c:	e0fffb17 	ldw	r3,-20(fp)
  806d30:	e0bff917 	ldw	r2,-28(fp)
  806d34:	1885883a 	add	r2,r3,r2
  806d38:	10ffffc4 	addi	r3,r2,-1
  806d3c:	e0bffb17 	ldw	r2,-20(fp)
  806d40:	0085c83a 	sub	r2,zero,r2
  806d44:	1884703a 	and	r2,r3,r2
  806d48:	e0bffb15 	stw	r2,-20(fp)
   n = (n - b_data) / N_FATS;
  806d4c:	e0fffb17 	ldw	r3,-20(fp)
  806d50:	e0bff917 	ldw	r2,-28(fp)
  806d54:	1885c83a 	sub	r2,r3,r2
  806d58:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {     /* FAT32: Move FAT offset */
  806d5c:	e0bfec03 	ldbu	r2,-80(fp)
  806d60:	108000d8 	cmpnei	r2,r2,3
  806d64:	1000091e 	bne	r2,zero,806d8c <f_mkfs+0x39c>
      n_rsv += n;
  806d68:	e0bffb17 	ldw	r2,-20(fp)
  806d6c:	e0fff017 	ldw	r3,-64(fp)
  806d70:	1885883a 	add	r2,r3,r2
  806d74:	e0bff015 	stw	r2,-64(fp)
      b_fat += n;
  806d78:	e0bffb17 	ldw	r2,-20(fp)
  806d7c:	e0ffef17 	ldw	r3,-68(fp)
  806d80:	1885883a 	add	r2,r3,r2
  806d84:	e0bfef15 	stw	r2,-68(fp)
  806d88:	00000406 	br	806d9c <f_mkfs+0x3ac>
   } else {             /* FAT12/16: Expand FAT size */
      n_fat += n;
  806d8c:	e0bffb17 	ldw	r2,-20(fp)
  806d90:	e0fff117 	ldw	r3,-60(fp)
  806d94:	1885883a 	add	r2,r3,r2
  806d98:	e0bff115 	stw	r2,-60(fp)
   }

   /* Determine number of clusters and final check of validity of the FAT sub-type */
   n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
  806d9c:	e0fffc17 	ldw	r3,-16(fp)
  806da0:	e0bff017 	ldw	r2,-64(fp)
  806da4:	1887c83a 	sub	r3,r3,r2
  806da8:	e0bff117 	ldw	r2,-60(fp)
  806dac:	1887c83a 	sub	r3,r3,r2
  806db0:	e0bff217 	ldw	r2,-56(fp)
  806db4:	1885c83a 	sub	r2,r3,r2
  806db8:	e17fff17 	ldw	r5,-4(fp)
  806dbc:	1009883a 	mov	r4,r2
  806dc0:	080a3580 	call	80a358 <__udivsi3>
  806dc4:	e0bff715 	stw	r2,-36(fp)
   if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
  806dc8:	e0bfec03 	ldbu	r2,-80(fp)
  806dcc:	10800098 	cmpnei	r2,r2,2
  806dd0:	1000031e 	bne	r2,zero,806de0 <f_mkfs+0x3f0>
  806dd4:	e0bff717 	ldw	r2,-36(fp)
  806dd8:	1083fdb0 	cmpltui	r2,r2,4086
  806ddc:	1000061e 	bne	r2,zero,806df8 <f_mkfs+0x408>
      || (fmt == FS_FAT32 && n_clst < MIN_FAT32))
  806de0:	e0bfec03 	ldbu	r2,-80(fp)
  806de4:	108000d8 	cmpnei	r2,r2,3
  806de8:	1000051e 	bne	r2,zero,806e00 <f_mkfs+0x410>
  806dec:	e0bff717 	ldw	r2,-36(fp)
  806df0:	10bffda8 	cmpgeui	r2,r2,65526
  806df4:	1000021e 	bne	r2,zero,806e00 <f_mkfs+0x410>
      return FR_MKFS_ABORTED;
  806df8:	00800384 	movi	r2,14
  806dfc:	0002a706 	br	80789c <f_mkfs+0xeac>

   switch (fmt) { /* Determine system ID for partition table */
  806e00:	e0bfec03 	ldbu	r2,-80(fp)
  806e04:	10c00060 	cmpeqi	r3,r2,1
  806e08:	1800031e 	bne	r3,zero,806e18 <f_mkfs+0x428>
  806e0c:	108000a0 	cmpeqi	r2,r2,2
  806e10:	1000041e 	bne	r2,zero,806e24 <f_mkfs+0x434>
  806e14:	00000b06 	br	806e44 <f_mkfs+0x454>
   case FS_FAT12: sys = 0x01; break;
  806e18:	00800044 	movi	r2,1
  806e1c:	e0bfec85 	stb	r2,-78(fp)
  806e20:	00000a06 	br	806e4c <f_mkfs+0x45c>
   case FS_FAT16: sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
  806e24:	e0bffc17 	ldw	r2,-16(fp)
  806e28:	00ffffd4 	movui	r3,65535
  806e2c:	18800236 	bltu	r3,r2,806e38 <f_mkfs+0x448>
  806e30:	00800104 	movi	r2,4
  806e34:	00000106 	br	806e3c <f_mkfs+0x44c>
  806e38:	00800184 	movi	r2,6
  806e3c:	e0bfec85 	stb	r2,-78(fp)
  806e40:	00000206 	br	806e4c <f_mkfs+0x45c>
   default:       sys = 0x0C;
  806e44:	00800304 	movi	r2,12
  806e48:	e0bfec85 	stb	r2,-78(fp)
      tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
      tbl[4] = sys;
      if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
      md = 0xF8;
   } else {
      if (sfd) {  /* No patition table (SFD) */
  806e4c:	e0bffe03 	ldbu	r2,-8(fp)
  806e50:	10000326 	beq	r2,zero,806e60 <f_mkfs+0x470>
         md = 0xF0;
  806e54:	00bffc04 	movi	r2,-16
  806e58:	e0bfec45 	stb	r2,-79(fp)
  806e5c:	00006206 	br	806fe8 <f_mkfs+0x5f8>
      } else { /* Create partition table (FDISK) */
         mem_set(fs->win, 0, SS(fs));
  806e60:	e0bff317 	ldw	r2,-52(fp)
  806e64:	10800c04 	addi	r2,r2,48
  806e68:	01808004 	movi	r6,512
  806e6c:	000b883a 	mov	r5,zero
  806e70:	1009883a 	mov	r4,r2
  806e74:	08015f80 	call	8015f8 <mem_set>
         tbl = fs->win+MBR_Table;   /* Create partiton table for single partition in the drive */
  806e78:	e0bff317 	ldw	r2,-52(fp)
  806e7c:	10800c04 	addi	r2,r2,48
  806e80:	10806f84 	addi	r2,r2,446
  806e84:	e0bffa15 	stw	r2,-24(fp)
         tbl[1] = 1;                /* Partition start head */
  806e88:	e0bffa17 	ldw	r2,-24(fp)
  806e8c:	10800044 	addi	r2,r2,1
  806e90:	00c00044 	movi	r3,1
  806e94:	10c00005 	stb	r3,0(r2)
         tbl[2] = 1;                /* Partition start sector */
  806e98:	e0bffa17 	ldw	r2,-24(fp)
  806e9c:	10800084 	addi	r2,r2,2
  806ea0:	00c00044 	movi	r3,1
  806ea4:	10c00005 	stb	r3,0(r2)
         tbl[3] = 0;                /* Partition start cylinder */
  806ea8:	e0bffa17 	ldw	r2,-24(fp)
  806eac:	108000c4 	addi	r2,r2,3
  806eb0:	10000005 	stb	zero,0(r2)
         tbl[4] = sys;              /* System type */
  806eb4:	e0bffa17 	ldw	r2,-24(fp)
  806eb8:	10800104 	addi	r2,r2,4
  806ebc:	e0ffec83 	ldbu	r3,-78(fp)
  806ec0:	10c00005 	stb	r3,0(r2)
         tbl[5] = 254;              /* Partition end head */
  806ec4:	e0bffa17 	ldw	r2,-24(fp)
  806ec8:	10800144 	addi	r2,r2,5
  806ecc:	00ffff84 	movi	r3,-2
  806ed0:	10c00005 	stb	r3,0(r2)
         n = (b_vol + n_vol) / 63 / 255;
  806ed4:	e0fffc17 	ldw	r3,-16(fp)
  806ed8:	e0bff517 	ldw	r2,-44(fp)
  806edc:	1885883a 	add	r2,r3,r2
  806ee0:	014fb044 	movi	r5,16065
  806ee4:	1009883a 	mov	r4,r2
  806ee8:	080a3580 	call	80a358 <__udivsi3>
  806eec:	e0bffb15 	stw	r2,-20(fp)
         tbl[6] = (uint8_t)((n >> 2) | 63);  /* Partiiton end sector */
  806ef0:	e0bffa17 	ldw	r2,-24(fp)
  806ef4:	10800184 	addi	r2,r2,6
  806ef8:	e0fffb17 	ldw	r3,-20(fp)
  806efc:	1806d0ba 	srli	r3,r3,2
  806f00:	18c00fd4 	ori	r3,r3,63
  806f04:	10c00005 	stb	r3,0(r2)
         tbl[7] = (uint8_t)n;          /* End cylinder */
  806f08:	e0bffa17 	ldw	r2,-24(fp)
  806f0c:	108001c4 	addi	r2,r2,7
  806f10:	e0fffb17 	ldw	r3,-20(fp)
  806f14:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 63);       /* Partition start in LBA */
  806f18:	e0bffa17 	ldw	r2,-24(fp)
  806f1c:	10800204 	addi	r2,r2,8
  806f20:	00c00fc4 	movi	r3,63
  806f24:	10c00005 	stb	r3,0(r2)
  806f28:	e0bffa17 	ldw	r2,-24(fp)
  806f2c:	10800244 	addi	r2,r2,9
  806f30:	10000005 	stb	zero,0(r2)
  806f34:	e0bffa17 	ldw	r2,-24(fp)
  806f38:	10800284 	addi	r2,r2,10
  806f3c:	10000005 	stb	zero,0(r2)
  806f40:	e0bffa17 	ldw	r2,-24(fp)
  806f44:	108002c4 	addi	r2,r2,11
  806f48:	10000005 	stb	zero,0(r2)
         ST_DWORD(tbl+12, n_vol);      /* Partition size in LBA */
  806f4c:	e0bffa17 	ldw	r2,-24(fp)
  806f50:	10800304 	addi	r2,r2,12
  806f54:	e0fffc17 	ldw	r3,-16(fp)
  806f58:	10c00005 	stb	r3,0(r2)
  806f5c:	e0bffa17 	ldw	r2,-24(fp)
  806f60:	10800344 	addi	r2,r2,13
  806f64:	e0fffc17 	ldw	r3,-16(fp)
  806f68:	18ffffcc 	andi	r3,r3,65535
  806f6c:	1807d23a 	srai	r3,r3,8
  806f70:	10c00005 	stb	r3,0(r2)
  806f74:	e0bffa17 	ldw	r2,-24(fp)
  806f78:	10800384 	addi	r2,r2,14
  806f7c:	e0fffc17 	ldw	r3,-16(fp)
  806f80:	1806d43a 	srli	r3,r3,16
  806f84:	10c00005 	stb	r3,0(r2)
  806f88:	e0bffa17 	ldw	r2,-24(fp)
  806f8c:	108003c4 	addi	r2,r2,15
  806f90:	e0fffc17 	ldw	r3,-16(fp)
  806f94:	1806d63a 	srli	r3,r3,24
  806f98:	10c00005 	stb	r3,0(r2)
         ST_WORD(fs->win+BS_55AA, 0xAA55);   /* MBR signature */
  806f9c:	e0bff317 	ldw	r2,-52(fp)
  806fa0:	00c01544 	movi	r3,85
  806fa4:	10c08b85 	stb	r3,558(r2)
  806fa8:	e0bff317 	ldw	r2,-52(fp)
  806fac:	00ffea84 	movi	r3,-86
  806fb0:	10c08bc5 	stb	r3,559(r2)
         if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)  /* Write it to the MBR sector */
  806fb4:	e0fff403 	ldbu	r3,-48(fp)
  806fb8:	e0bff317 	ldw	r2,-52(fp)
  806fbc:	10800c04 	addi	r2,r2,48
  806fc0:	01c00044 	movi	r7,1
  806fc4:	000d883a 	mov	r6,zero
  806fc8:	100b883a 	mov	r5,r2
  806fcc:	1809883a 	mov	r4,r3
  806fd0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  806fd4:	10000226 	beq	r2,zero,806fe0 <f_mkfs+0x5f0>
            return FR_DISK_ERR;
  806fd8:	00800044 	movi	r2,1
  806fdc:	00022f06 	br	80789c <f_mkfs+0xeac>
         md = 0xF8;
  806fe0:	00bffe04 	movi	r2,-8
  806fe4:	e0bfec45 	stb	r2,-79(fp)
      }
   }

   /* Create BPB in the VBR */
   tbl = fs->win;                   /* Clear sector */
  806fe8:	e0bff317 	ldw	r2,-52(fp)
  806fec:	10800c04 	addi	r2,r2,48
  806ff0:	e0bffa15 	stw	r2,-24(fp)
   mem_set(tbl, 0, SS(fs));
  806ff4:	01808004 	movi	r6,512
  806ff8:	000b883a 	mov	r5,zero
  806ffc:	e13ffa17 	ldw	r4,-24(fp)
  807000:	08015f80 	call	8015f8 <mem_set>
   mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
  807004:	018002c4 	movi	r6,11
  807008:	014020b4 	movhi	r5,130
  80700c:	296c8b04 	addi	r5,r5,-19924
  807010:	e13ffa17 	ldw	r4,-24(fp)
  807014:	08015880 	call	801588 <mem_cpy>
   i = SS(fs);                      /* Sector size */
  807018:	00808004 	movi	r2,512
  80701c:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_BytsPerSec, i);
  807020:	e0bffa17 	ldw	r2,-24(fp)
  807024:	108002c4 	addi	r2,r2,11
  807028:	e0ffee17 	ldw	r3,-72(fp)
  80702c:	10c00005 	stb	r3,0(r2)
  807030:	e0bffa17 	ldw	r2,-24(fp)
  807034:	10800304 	addi	r2,r2,12
  807038:	e0ffee17 	ldw	r3,-72(fp)
  80703c:	18ffffcc 	andi	r3,r3,65535
  807040:	1807d23a 	srai	r3,r3,8
  807044:	10c00005 	stb	r3,0(r2)
   tbl[BPB_SecPerClus] = (uint8_t)au;        /* Sectors per cluster */
  807048:	e0bffa17 	ldw	r2,-24(fp)
  80704c:	10800344 	addi	r2,r2,13
  807050:	e0ffff17 	ldw	r3,-4(fp)
  807054:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);    /* Reserved sectors */
  807058:	e0bffa17 	ldw	r2,-24(fp)
  80705c:	10800384 	addi	r2,r2,14
  807060:	e0fff017 	ldw	r3,-64(fp)
  807064:	10c00005 	stb	r3,0(r2)
  807068:	e0bffa17 	ldw	r2,-24(fp)
  80706c:	108003c4 	addi	r2,r2,15
  807070:	e0fff017 	ldw	r3,-64(fp)
  807074:	18ffffcc 	andi	r3,r3,65535
  807078:	1807d23a 	srai	r3,r3,8
  80707c:	10c00005 	stb	r3,0(r2)
   tbl[BPB_NumFATs] = N_FATS;          /* Number of FATs */
  807080:	e0bffa17 	ldw	r2,-24(fp)
  807084:	10800404 	addi	r2,r2,16
  807088:	00c00044 	movi	r3,1
  80708c:	10c00005 	stb	r3,0(r2)
   i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR; /* Number of rootdir entries */
  807090:	e0bfec03 	ldbu	r2,-80(fp)
  807094:	108000d8 	cmpnei	r2,r2,3
  807098:	1000021e 	bne	r2,zero,8070a4 <f_mkfs+0x6b4>
  80709c:	0005883a 	mov	r2,zero
  8070a0:	00000106 	br	8070a8 <f_mkfs+0x6b8>
  8070a4:	00808004 	movi	r2,512
  8070a8:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_RootEntCnt, i);
  8070ac:	e0bffa17 	ldw	r2,-24(fp)
  8070b0:	10800444 	addi	r2,r2,17
  8070b4:	e0ffee17 	ldw	r3,-72(fp)
  8070b8:	10c00005 	stb	r3,0(r2)
  8070bc:	e0bffa17 	ldw	r2,-24(fp)
  8070c0:	10800484 	addi	r2,r2,18
  8070c4:	e0ffee17 	ldw	r3,-72(fp)
  8070c8:	18ffffcc 	andi	r3,r3,65535
  8070cc:	1807d23a 	srai	r3,r3,8
  8070d0:	10c00005 	stb	r3,0(r2)
   if (n_vol < 0x10000) {              /* Number of total sectors */
  8070d4:	e0bffc17 	ldw	r2,-16(fp)
  8070d8:	00ffffd4 	movui	r3,65535
  8070dc:	18800b36 	bltu	r3,r2,80710c <f_mkfs+0x71c>
      ST_WORD(tbl+BPB_TotSec16, n_vol);
  8070e0:	e0bffa17 	ldw	r2,-24(fp)
  8070e4:	108004c4 	addi	r2,r2,19
  8070e8:	e0fffc17 	ldw	r3,-16(fp)
  8070ec:	10c00005 	stb	r3,0(r2)
  8070f0:	e0bffa17 	ldw	r2,-24(fp)
  8070f4:	10800504 	addi	r2,r2,20
  8070f8:	e0fffc17 	ldw	r3,-16(fp)
  8070fc:	18ffffcc 	andi	r3,r3,65535
  807100:	1807d23a 	srai	r3,r3,8
  807104:	10c00005 	stb	r3,0(r2)
  807108:	00001406 	br	80715c <f_mkfs+0x76c>
   } else {
      ST_DWORD(tbl+BPB_TotSec32, n_vol);
  80710c:	e0bffa17 	ldw	r2,-24(fp)
  807110:	10800804 	addi	r2,r2,32
  807114:	e0fffc17 	ldw	r3,-16(fp)
  807118:	10c00005 	stb	r3,0(r2)
  80711c:	e0bffa17 	ldw	r2,-24(fp)
  807120:	10800844 	addi	r2,r2,33
  807124:	e0fffc17 	ldw	r3,-16(fp)
  807128:	18ffffcc 	andi	r3,r3,65535
  80712c:	1807d23a 	srai	r3,r3,8
  807130:	10c00005 	stb	r3,0(r2)
  807134:	e0bffa17 	ldw	r2,-24(fp)
  807138:	10800884 	addi	r2,r2,34
  80713c:	e0fffc17 	ldw	r3,-16(fp)
  807140:	1806d43a 	srli	r3,r3,16
  807144:	10c00005 	stb	r3,0(r2)
  807148:	e0bffa17 	ldw	r2,-24(fp)
  80714c:	108008c4 	addi	r2,r2,35
  807150:	e0fffc17 	ldw	r3,-16(fp)
  807154:	1806d63a 	srli	r3,r3,24
  807158:	10c00005 	stb	r3,0(r2)
   }
   tbl[BPB_Media] = md;             /* Media descriptor */
  80715c:	e0bffa17 	ldw	r2,-24(fp)
  807160:	10800544 	addi	r2,r2,21
  807164:	e0ffec43 	ldbu	r3,-79(fp)
  807168:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_SecPerTrk, 63);        /* Number of sectors per track */
  80716c:	e0bffa17 	ldw	r2,-24(fp)
  807170:	10800604 	addi	r2,r2,24
  807174:	00c00fc4 	movi	r3,63
  807178:	10c00005 	stb	r3,0(r2)
  80717c:	e0bffa17 	ldw	r2,-24(fp)
  807180:	10800644 	addi	r2,r2,25
  807184:	10000005 	stb	zero,0(r2)
   ST_WORD(tbl+BPB_NumHeads, 255);        /* Number of heads */
  807188:	e0bffa17 	ldw	r2,-24(fp)
  80718c:	10800684 	addi	r2,r2,26
  807190:	00ffffc4 	movi	r3,-1
  807194:	10c00005 	stb	r3,0(r2)
  807198:	e0bffa17 	ldw	r2,-24(fp)
  80719c:	108006c4 	addi	r2,r2,27
  8071a0:	10000005 	stb	zero,0(r2)
   ST_DWORD(tbl+BPB_HiddSec, b_vol);      /* Hidden sectors */
  8071a4:	e0bffa17 	ldw	r2,-24(fp)
  8071a8:	10800704 	addi	r2,r2,28
  8071ac:	e0fff517 	ldw	r3,-44(fp)
  8071b0:	10c00005 	stb	r3,0(r2)
  8071b4:	e0bffa17 	ldw	r2,-24(fp)
  8071b8:	10800744 	addi	r2,r2,29
  8071bc:	e0fff517 	ldw	r3,-44(fp)
  8071c0:	18ffffcc 	andi	r3,r3,65535
  8071c4:	1807d23a 	srai	r3,r3,8
  8071c8:	10c00005 	stb	r3,0(r2)
  8071cc:	e0bffa17 	ldw	r2,-24(fp)
  8071d0:	10800784 	addi	r2,r2,30
  8071d4:	e0fff517 	ldw	r3,-44(fp)
  8071d8:	1806d43a 	srli	r3,r3,16
  8071dc:	10c00005 	stb	r3,0(r2)
  8071e0:	e0bffa17 	ldw	r2,-24(fp)
  8071e4:	108007c4 	addi	r2,r2,31
  8071e8:	e0fff517 	ldw	r3,-44(fp)
  8071ec:	1806d63a 	srli	r3,r3,24
  8071f0:	10c00005 	stb	r3,0(r2)
   n = get_fattime();                  /* Use current time as VSN */
  8071f4:	080155c0 	call	80155c <get_fattime>
  8071f8:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {
  8071fc:	e0bfec03 	ldbu	r2,-80(fp)
  807200:	108000d8 	cmpnei	r2,r2,3
  807204:	1000531e 	bne	r2,zero,807354 <f_mkfs+0x964>
      ST_DWORD(tbl+BS_VolID32, n);     /* VSN */
  807208:	e0bffa17 	ldw	r2,-24(fp)
  80720c:	108010c4 	addi	r2,r2,67
  807210:	e0fffb17 	ldw	r3,-20(fp)
  807214:	10c00005 	stb	r3,0(r2)
  807218:	e0bffa17 	ldw	r2,-24(fp)
  80721c:	10801104 	addi	r2,r2,68
  807220:	e0fffb17 	ldw	r3,-20(fp)
  807224:	18ffffcc 	andi	r3,r3,65535
  807228:	1807d23a 	srai	r3,r3,8
  80722c:	10c00005 	stb	r3,0(r2)
  807230:	e0bffa17 	ldw	r2,-24(fp)
  807234:	10801144 	addi	r2,r2,69
  807238:	e0fffb17 	ldw	r3,-20(fp)
  80723c:	1806d43a 	srli	r3,r3,16
  807240:	10c00005 	stb	r3,0(r2)
  807244:	e0bffa17 	ldw	r2,-24(fp)
  807248:	10801184 	addi	r2,r2,70
  80724c:	e0fffb17 	ldw	r3,-20(fp)
  807250:	1806d63a 	srli	r3,r3,24
  807254:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_FATSz32, n_fat);   /* Number of sectors per FAT */
  807258:	e0bffa17 	ldw	r2,-24(fp)
  80725c:	10800904 	addi	r2,r2,36
  807260:	e0fff117 	ldw	r3,-60(fp)
  807264:	10c00005 	stb	r3,0(r2)
  807268:	e0bffa17 	ldw	r2,-24(fp)
  80726c:	10800944 	addi	r2,r2,37
  807270:	e0fff117 	ldw	r3,-60(fp)
  807274:	18ffffcc 	andi	r3,r3,65535
  807278:	1807d23a 	srai	r3,r3,8
  80727c:	10c00005 	stb	r3,0(r2)
  807280:	e0bffa17 	ldw	r2,-24(fp)
  807284:	10800984 	addi	r2,r2,38
  807288:	e0fff117 	ldw	r3,-60(fp)
  80728c:	1806d43a 	srli	r3,r3,16
  807290:	10c00005 	stb	r3,0(r2)
  807294:	e0bffa17 	ldw	r2,-24(fp)
  807298:	108009c4 	addi	r2,r2,39
  80729c:	e0fff117 	ldw	r3,-60(fp)
  8072a0:	1806d63a 	srli	r3,r3,24
  8072a4:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_RootClus, 2);      /* Root directory start cluster (2) */
  8072a8:	e0bffa17 	ldw	r2,-24(fp)
  8072ac:	10800b04 	addi	r2,r2,44
  8072b0:	00c00084 	movi	r3,2
  8072b4:	10c00005 	stb	r3,0(r2)
  8072b8:	e0bffa17 	ldw	r2,-24(fp)
  8072bc:	10800b44 	addi	r2,r2,45
  8072c0:	10000005 	stb	zero,0(r2)
  8072c4:	e0bffa17 	ldw	r2,-24(fp)
  8072c8:	10800b84 	addi	r2,r2,46
  8072cc:	10000005 	stb	zero,0(r2)
  8072d0:	e0bffa17 	ldw	r2,-24(fp)
  8072d4:	10800bc4 	addi	r2,r2,47
  8072d8:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_FSInfo, 1);         /* FSInfo record offset (VBR+1) */
  8072dc:	e0bffa17 	ldw	r2,-24(fp)
  8072e0:	10800c04 	addi	r2,r2,48
  8072e4:	00c00044 	movi	r3,1
  8072e8:	10c00005 	stb	r3,0(r2)
  8072ec:	e0bffa17 	ldw	r2,-24(fp)
  8072f0:	10800c44 	addi	r2,r2,49
  8072f4:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_BkBootSec, 6);      /* Backup boot record offset (VBR+6) */
  8072f8:	e0bffa17 	ldw	r2,-24(fp)
  8072fc:	10800c84 	addi	r2,r2,50
  807300:	00c00184 	movi	r3,6
  807304:	10c00005 	stb	r3,0(r2)
  807308:	e0bffa17 	ldw	r2,-24(fp)
  80730c:	10800cc4 	addi	r2,r2,51
  807310:	10000005 	stb	zero,0(r2)
      tbl[BS_DrvNum32] = 0x80;         /* Drive number */
  807314:	e0bffa17 	ldw	r2,-24(fp)
  807318:	10801004 	addi	r2,r2,64
  80731c:	00ffe004 	movi	r3,-128
  807320:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig32] = 0x29;        /* Extended boot signature */
  807324:	e0bffa17 	ldw	r2,-24(fp)
  807328:	10801084 	addi	r2,r2,66
  80732c:	00c00a44 	movi	r3,41
  807330:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);  /* Volume label, FAT signature */
  807334:	e0bffa17 	ldw	r2,-24(fp)
  807338:	108011c4 	addi	r2,r2,71
  80733c:	018004c4 	movi	r6,19
  807340:	014020b4 	movhi	r5,130
  807344:	296c8e04 	addi	r5,r5,-19912
  807348:	1009883a 	mov	r4,r2
  80734c:	08015880 	call	801588 <mem_cpy>
  807350:	00002d06 	br	807408 <f_mkfs+0xa18>
   } else {
      ST_DWORD(tbl+BS_VolID, n);       /* VSN */
  807354:	e0bffa17 	ldw	r2,-24(fp)
  807358:	108009c4 	addi	r2,r2,39
  80735c:	e0fffb17 	ldw	r3,-20(fp)
  807360:	10c00005 	stb	r3,0(r2)
  807364:	e0bffa17 	ldw	r2,-24(fp)
  807368:	10800a04 	addi	r2,r2,40
  80736c:	e0fffb17 	ldw	r3,-20(fp)
  807370:	18ffffcc 	andi	r3,r3,65535
  807374:	1807d23a 	srai	r3,r3,8
  807378:	10c00005 	stb	r3,0(r2)
  80737c:	e0bffa17 	ldw	r2,-24(fp)
  807380:	10800a44 	addi	r2,r2,41
  807384:	e0fffb17 	ldw	r3,-20(fp)
  807388:	1806d43a 	srli	r3,r3,16
  80738c:	10c00005 	stb	r3,0(r2)
  807390:	e0bffa17 	ldw	r2,-24(fp)
  807394:	10800a84 	addi	r2,r2,42
  807398:	e0fffb17 	ldw	r3,-20(fp)
  80739c:	1806d63a 	srli	r3,r3,24
  8073a0:	10c00005 	stb	r3,0(r2)
      ST_WORD(tbl+BPB_FATSz16, n_fat); /* Number of sectors per FAT */
  8073a4:	e0bffa17 	ldw	r2,-24(fp)
  8073a8:	10800584 	addi	r2,r2,22
  8073ac:	e0fff117 	ldw	r3,-60(fp)
  8073b0:	10c00005 	stb	r3,0(r2)
  8073b4:	e0bffa17 	ldw	r2,-24(fp)
  8073b8:	108005c4 	addi	r2,r2,23
  8073bc:	e0fff117 	ldw	r3,-60(fp)
  8073c0:	18ffffcc 	andi	r3,r3,65535
  8073c4:	1807d23a 	srai	r3,r3,8
  8073c8:	10c00005 	stb	r3,0(r2)
      tbl[BS_DrvNum] = 0x80;           /* Drive number */
  8073cc:	e0bffa17 	ldw	r2,-24(fp)
  8073d0:	10800904 	addi	r2,r2,36
  8073d4:	00ffe004 	movi	r3,-128
  8073d8:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig] = 0x29;          /* Extended boot signature */
  8073dc:	e0bffa17 	ldw	r2,-24(fp)
  8073e0:	10800984 	addi	r2,r2,38
  8073e4:	00c00a44 	movi	r3,41
  8073e8:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
  8073ec:	e0bffa17 	ldw	r2,-24(fp)
  8073f0:	10800ac4 	addi	r2,r2,43
  8073f4:	018004c4 	movi	r6,19
  8073f8:	014020b4 	movhi	r5,130
  8073fc:	296c9304 	addi	r5,r5,-19892
  807400:	1009883a 	mov	r4,r2
  807404:	08015880 	call	801588 <mem_cpy>
   }
   ST_WORD(tbl+BS_55AA, 0xAA55);       /* Signature (Offset is fixed here regardless of sector size) */
  807408:	e0bffa17 	ldw	r2,-24(fp)
  80740c:	10807f84 	addi	r2,r2,510
  807410:	00c01544 	movi	r3,85
  807414:	10c00005 	stb	r3,0(r2)
  807418:	e0bffa17 	ldw	r2,-24(fp)
  80741c:	10807fc4 	addi	r2,r2,511
  807420:	00ffea84 	movi	r3,-86
  807424:	10c00005 	stb	r3,0(r2)
   if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)  /* Write it to the VBR sector */
  807428:	e0bff403 	ldbu	r2,-48(fp)
  80742c:	01c00044 	movi	r7,1
  807430:	e1bff517 	ldw	r6,-44(fp)
  807434:	e17ffa17 	ldw	r5,-24(fp)
  807438:	1009883a 	mov	r4,r2
  80743c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  807440:	10000226 	beq	r2,zero,80744c <f_mkfs+0xa5c>
      return FR_DISK_ERR;
  807444:	00800044 	movi	r2,1
  807448:	00011406 	br	80789c <f_mkfs+0xeac>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
  80744c:	e0bfec03 	ldbu	r2,-80(fp)
  807450:	108000d8 	cmpnei	r2,r2,3
  807454:	1000081e 	bne	r2,zero,807478 <f_mkfs+0xa88>
      disk_write(pdrv, tbl, b_vol + 6, 1);
  807458:	e0fff403 	ldbu	r3,-48(fp)
  80745c:	e0bff517 	ldw	r2,-44(fp)
  807460:	10800184 	addi	r2,r2,6
  807464:	01c00044 	movi	r7,1
  807468:	100d883a 	mov	r6,r2
  80746c:	e17ffa17 	ldw	r5,-24(fp)
  807470:	1809883a 	mov	r4,r3
  807474:	0800f280 	call	800f28 <ffs_DiskIOWrite>

   /* Initialize FAT area */
   wsect = b_fat;
  807478:	e0bfef17 	ldw	r2,-68(fp)
  80747c:	e0bfed15 	stw	r2,-76(fp)
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  807480:	e03fee15 	stw	zero,-72(fp)
  807484:	00008606 	br	8076a0 <f_mkfs+0xcb0>
      mem_set(tbl, 0, SS(fs));         /* 1st sector of the FAT  */
  807488:	01808004 	movi	r6,512
  80748c:	000b883a 	mov	r5,zero
  807490:	e13ffa17 	ldw	r4,-24(fp)
  807494:	08015f80 	call	8015f8 <mem_set>
      n = md;                       /* Media descriptor byte */
  807498:	e0bfec43 	ldbu	r2,-79(fp)
  80749c:	e0bffb15 	stw	r2,-20(fp)
      if (fmt != FS_FAT32) {
  8074a0:	e0bfec03 	ldbu	r2,-80(fp)
  8074a4:	108000e0 	cmpeqi	r2,r2,3
  8074a8:	10001f1e 	bne	r2,zero,807528 <f_mkfs+0xb38>
         n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
  8074ac:	e0bfec03 	ldbu	r2,-80(fp)
  8074b0:	10800058 	cmpnei	r2,r2,1
  8074b4:	1000031e 	bne	r2,zero,8074c4 <f_mkfs+0xad4>
  8074b8:	00804034 	movhi	r2,256
  8074bc:	10bfc004 	addi	r2,r2,-256
  8074c0:	00000106 	br	8074c8 <f_mkfs+0xad8>
  8074c4:	00bfc004 	movi	r2,-256
  8074c8:	e0fffb17 	ldw	r3,-20(fp)
  8074cc:	10c4b03a 	or	r2,r2,r3
  8074d0:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT12/16) */
  8074d4:	e0bffb17 	ldw	r2,-20(fp)
  8074d8:	1007883a 	mov	r3,r2
  8074dc:	e0bffa17 	ldw	r2,-24(fp)
  8074e0:	10c00005 	stb	r3,0(r2)
  8074e4:	e0bffa17 	ldw	r2,-24(fp)
  8074e8:	10800044 	addi	r2,r2,1
  8074ec:	e0fffb17 	ldw	r3,-20(fp)
  8074f0:	18ffffcc 	andi	r3,r3,65535
  8074f4:	1807d23a 	srai	r3,r3,8
  8074f8:	10c00005 	stb	r3,0(r2)
  8074fc:	e0bffa17 	ldw	r2,-24(fp)
  807500:	10800084 	addi	r2,r2,2
  807504:	e0fffb17 	ldw	r3,-20(fp)
  807508:	1806d43a 	srli	r3,r3,16
  80750c:	10c00005 	stb	r3,0(r2)
  807510:	e0bffa17 	ldw	r2,-24(fp)
  807514:	108000c4 	addi	r2,r2,3
  807518:	e0fffb17 	ldw	r3,-20(fp)
  80751c:	1806d63a 	srli	r3,r3,24
  807520:	10c00005 	stb	r3,0(r2)
  807524:	00003806 	br	807608 <f_mkfs+0xc18>
      } else {
         n |= 0xFFFFFF00;
  807528:	e0fffb17 	ldw	r3,-20(fp)
  80752c:	00bfc004 	movi	r2,-256
  807530:	1884b03a 	or	r2,r3,r2
  807534:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT32) */
  807538:	e0bffb17 	ldw	r2,-20(fp)
  80753c:	1007883a 	mov	r3,r2
  807540:	e0bffa17 	ldw	r2,-24(fp)
  807544:	10c00005 	stb	r3,0(r2)
  807548:	e0bffa17 	ldw	r2,-24(fp)
  80754c:	10800044 	addi	r2,r2,1
  807550:	e0fffb17 	ldw	r3,-20(fp)
  807554:	18ffffcc 	andi	r3,r3,65535
  807558:	1807d23a 	srai	r3,r3,8
  80755c:	10c00005 	stb	r3,0(r2)
  807560:	e0bffa17 	ldw	r2,-24(fp)
  807564:	10800084 	addi	r2,r2,2
  807568:	e0fffb17 	ldw	r3,-20(fp)
  80756c:	1806d43a 	srli	r3,r3,16
  807570:	10c00005 	stb	r3,0(r2)
  807574:	e0bffa17 	ldw	r2,-24(fp)
  807578:	108000c4 	addi	r2,r2,3
  80757c:	e0fffb17 	ldw	r3,-20(fp)
  807580:	1806d63a 	srli	r3,r3,24
  807584:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+4, 0xFFFFFFFF);
  807588:	e0bffa17 	ldw	r2,-24(fp)
  80758c:	10800104 	addi	r2,r2,4
  807590:	00ffffc4 	movi	r3,-1
  807594:	10c00005 	stb	r3,0(r2)
  807598:	e0bffa17 	ldw	r2,-24(fp)
  80759c:	10800144 	addi	r2,r2,5
  8075a0:	00ffffc4 	movi	r3,-1
  8075a4:	10c00005 	stb	r3,0(r2)
  8075a8:	e0bffa17 	ldw	r2,-24(fp)
  8075ac:	10800184 	addi	r2,r2,6
  8075b0:	00ffffc4 	movi	r3,-1
  8075b4:	10c00005 	stb	r3,0(r2)
  8075b8:	e0bffa17 	ldw	r2,-24(fp)
  8075bc:	108001c4 	addi	r2,r2,7
  8075c0:	00ffffc4 	movi	r3,-1
  8075c4:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
  8075c8:	e0bffa17 	ldw	r2,-24(fp)
  8075cc:	10800204 	addi	r2,r2,8
  8075d0:	00ffffc4 	movi	r3,-1
  8075d4:	10c00005 	stb	r3,0(r2)
  8075d8:	e0bffa17 	ldw	r2,-24(fp)
  8075dc:	10800244 	addi	r2,r2,9
  8075e0:	00ffffc4 	movi	r3,-1
  8075e4:	10c00005 	stb	r3,0(r2)
  8075e8:	e0bffa17 	ldw	r2,-24(fp)
  8075ec:	10800284 	addi	r2,r2,10
  8075f0:	00ffffc4 	movi	r3,-1
  8075f4:	10c00005 	stb	r3,0(r2)
  8075f8:	e0bffa17 	ldw	r2,-24(fp)
  8075fc:	108002c4 	addi	r2,r2,11
  807600:	00c003c4 	movi	r3,15
  807604:	10c00005 	stb	r3,0(r2)
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  807608:	e13ff403 	ldbu	r4,-48(fp)
  80760c:	e0bfed17 	ldw	r2,-76(fp)
  807610:	10c00044 	addi	r3,r2,1
  807614:	e0ffed15 	stw	r3,-76(fp)
  807618:	01c00044 	movi	r7,1
  80761c:	100d883a 	mov	r6,r2
  807620:	e17ffa17 	ldw	r5,-24(fp)
  807624:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  807628:	10000226 	beq	r2,zero,807634 <f_mkfs+0xc44>
         return FR_DISK_ERR;
  80762c:	00800044 	movi	r2,1
  807630:	00009a06 	br	80789c <f_mkfs+0xeac>
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
  807634:	01808004 	movi	r6,512
  807638:	000b883a 	mov	r5,zero
  80763c:	e13ffa17 	ldw	r4,-24(fp)
  807640:	08015f80 	call	8015f8 <mem_set>
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  807644:	00800044 	movi	r2,1
  807648:	e0bffb15 	stw	r2,-20(fp)
  80764c:	00000e06 	br	807688 <f_mkfs+0xc98>
         if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  807650:	e13ff403 	ldbu	r4,-48(fp)
  807654:	e0bfed17 	ldw	r2,-76(fp)
  807658:	10c00044 	addi	r3,r2,1
  80765c:	e0ffed15 	stw	r3,-76(fp)
  807660:	01c00044 	movi	r7,1
  807664:	100d883a 	mov	r6,r2
  807668:	e17ffa17 	ldw	r5,-24(fp)
  80766c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  807670:	10000226 	beq	r2,zero,80767c <f_mkfs+0xc8c>
            return FR_DISK_ERR;
  807674:	00800044 	movi	r2,1
  807678:	00008806 	br	80789c <f_mkfs+0xeac>
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
         return FR_DISK_ERR;
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  80767c:	e0bffb17 	ldw	r2,-20(fp)
  807680:	10800044 	addi	r2,r2,1
  807684:	e0bffb15 	stw	r2,-20(fp)
  807688:	e0fffb17 	ldw	r3,-20(fp)
  80768c:	e0bff117 	ldw	r2,-60(fp)
  807690:	18bfef36 	bltu	r3,r2,807650 <__alt_data_end+0xff807650>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
      disk_write(pdrv, tbl, b_vol + 6, 1);

   /* Initialize FAT area */
   wsect = b_fat;
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  807694:	e0bfee17 	ldw	r2,-72(fp)
  807698:	10800044 	addi	r2,r2,1
  80769c:	e0bfee15 	stw	r2,-72(fp)
  8076a0:	e0bfee17 	ldw	r2,-72(fp)
  8076a4:	103f7826 	beq	r2,zero,807488 <__alt_data_end+0xff807488>
            return FR_DISK_ERR;
      }
   }

   /* Initialize root directory */
   i = (fmt == FS_FAT32) ? au : n_dir;
  8076a8:	e0bfec03 	ldbu	r2,-80(fp)
  8076ac:	108000d8 	cmpnei	r2,r2,3
  8076b0:	1000021e 	bne	r2,zero,8076bc <f_mkfs+0xccc>
  8076b4:	e0bfff17 	ldw	r2,-4(fp)
  8076b8:	00000106 	br	8076c0 <f_mkfs+0xcd0>
  8076bc:	e0bff217 	ldw	r2,-56(fp)
  8076c0:	e0bfee15 	stw	r2,-72(fp)
   do {
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  8076c4:	e13ff403 	ldbu	r4,-48(fp)
  8076c8:	e0bfed17 	ldw	r2,-76(fp)
  8076cc:	10c00044 	addi	r3,r2,1
  8076d0:	e0ffed15 	stw	r3,-76(fp)
  8076d4:	01c00044 	movi	r7,1
  8076d8:	100d883a 	mov	r6,r2
  8076dc:	e17ffa17 	ldw	r5,-24(fp)
  8076e0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8076e4:	10000226 	beq	r2,zero,8076f0 <f_mkfs+0xd00>
         return FR_DISK_ERR;
  8076e8:	00800044 	movi	r2,1
  8076ec:	00006b06 	br	80789c <f_mkfs+0xeac>
   } while (--i);
  8076f0:	e0bfee17 	ldw	r2,-72(fp)
  8076f4:	10bfffc4 	addi	r2,r2,-1
  8076f8:	e0bfee15 	stw	r2,-72(fp)
  8076fc:	e0bfee17 	ldw	r2,-72(fp)
  807700:	103ff01e 	bne	r2,zero,8076c4 <__alt_data_end+0xff8076c4>
      disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
   }
#endif

   /* Create FSInfo if needed */
   if (fmt == FS_FAT32) {
  807704:	e0bfec03 	ldbu	r2,-80(fp)
  807708:	108000d8 	cmpnei	r2,r2,3
  80770c:	10005c1e 	bne	r2,zero,807880 <f_mkfs+0xe90>
      ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
  807710:	e0bffa17 	ldw	r2,-24(fp)
  807714:	00c01484 	movi	r3,82
  807718:	10c00005 	stb	r3,0(r2)
  80771c:	e0bffa17 	ldw	r2,-24(fp)
  807720:	10800044 	addi	r2,r2,1
  807724:	00c01484 	movi	r3,82
  807728:	10c00005 	stb	r3,0(r2)
  80772c:	e0bffa17 	ldw	r2,-24(fp)
  807730:	10800084 	addi	r2,r2,2
  807734:	00c01844 	movi	r3,97
  807738:	10c00005 	stb	r3,0(r2)
  80773c:	e0bffa17 	ldw	r2,-24(fp)
  807740:	108000c4 	addi	r2,r2,3
  807744:	00c01044 	movi	r3,65
  807748:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
  80774c:	e0bffa17 	ldw	r2,-24(fp)
  807750:	10807904 	addi	r2,r2,484
  807754:	00c01c84 	movi	r3,114
  807758:	10c00005 	stb	r3,0(r2)
  80775c:	e0bffa17 	ldw	r2,-24(fp)
  807760:	10807944 	addi	r2,r2,485
  807764:	00c01c84 	movi	r3,114
  807768:	10c00005 	stb	r3,0(r2)
  80776c:	e0bffa17 	ldw	r2,-24(fp)
  807770:	10807984 	addi	r2,r2,486
  807774:	00c01044 	movi	r3,65
  807778:	10c00005 	stb	r3,0(r2)
  80777c:	e0bffa17 	ldw	r2,-24(fp)
  807780:	108079c4 	addi	r2,r2,487
  807784:	00c01844 	movi	r3,97
  807788:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Free_Count, n_clst - 1); /* Number of free clusters */
  80778c:	e0bffa17 	ldw	r2,-24(fp)
  807790:	10807a04 	addi	r2,r2,488
  807794:	e0fff717 	ldw	r3,-36(fp)
  807798:	18ffffc4 	addi	r3,r3,-1
  80779c:	10c00005 	stb	r3,0(r2)
  8077a0:	e0bffa17 	ldw	r2,-24(fp)
  8077a4:	10807a44 	addi	r2,r2,489
  8077a8:	e0fff717 	ldw	r3,-36(fp)
  8077ac:	18ffffc4 	addi	r3,r3,-1
  8077b0:	18ffffcc 	andi	r3,r3,65535
  8077b4:	1806d23a 	srli	r3,r3,8
  8077b8:	10c00005 	stb	r3,0(r2)
  8077bc:	e0bffa17 	ldw	r2,-24(fp)
  8077c0:	10807a84 	addi	r2,r2,490
  8077c4:	e0fff717 	ldw	r3,-36(fp)
  8077c8:	18ffffc4 	addi	r3,r3,-1
  8077cc:	1806d43a 	srli	r3,r3,16
  8077d0:	10c00005 	stb	r3,0(r2)
  8077d4:	e0bffa17 	ldw	r2,-24(fp)
  8077d8:	10807ac4 	addi	r2,r2,491
  8077dc:	e0fff717 	ldw	r3,-36(fp)
  8077e0:	18ffffc4 	addi	r3,r3,-1
  8077e4:	1806d63a 	srli	r3,r3,24
  8077e8:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Nxt_Free, 2);            /* Last allocated cluster# */
  8077ec:	e0bffa17 	ldw	r2,-24(fp)
  8077f0:	10807b04 	addi	r2,r2,492
  8077f4:	00c00084 	movi	r3,2
  8077f8:	10c00005 	stb	r3,0(r2)
  8077fc:	e0bffa17 	ldw	r2,-24(fp)
  807800:	10807b44 	addi	r2,r2,493
  807804:	10000005 	stb	zero,0(r2)
  807808:	e0bffa17 	ldw	r2,-24(fp)
  80780c:	10807b84 	addi	r2,r2,494
  807810:	10000005 	stb	zero,0(r2)
  807814:	e0bffa17 	ldw	r2,-24(fp)
  807818:	10807bc4 	addi	r2,r2,495
  80781c:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BS_55AA, 0xAA55);
  807820:	e0bffa17 	ldw	r2,-24(fp)
  807824:	10807f84 	addi	r2,r2,510
  807828:	00c01544 	movi	r3,85
  80782c:	10c00005 	stb	r3,0(r2)
  807830:	e0bffa17 	ldw	r2,-24(fp)
  807834:	10807fc4 	addi	r2,r2,511
  807838:	00ffea84 	movi	r3,-86
  80783c:	10c00005 	stb	r3,0(r2)
      disk_write(pdrv, tbl, b_vol + 1, 1);   /* Write original (VBR+1) */
  807840:	e0fff403 	ldbu	r3,-48(fp)
  807844:	e0bff517 	ldw	r2,-44(fp)
  807848:	10800044 	addi	r2,r2,1
  80784c:	01c00044 	movi	r7,1
  807850:	100d883a 	mov	r6,r2
  807854:	e17ffa17 	ldw	r5,-24(fp)
  807858:	1809883a 	mov	r4,r3
  80785c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
      disk_write(pdrv, tbl, b_vol + 7, 1);   /* Write backup (VBR+7) */
  807860:	e0fff403 	ldbu	r3,-48(fp)
  807864:	e0bff517 	ldw	r2,-44(fp)
  807868:	108001c4 	addi	r2,r2,7
  80786c:	01c00044 	movi	r7,1
  807870:	100d883a 	mov	r6,r2
  807874:	e17ffa17 	ldw	r5,-24(fp)
  807878:	1809883a 	mov	r4,r3
  80787c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
   }

   return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
  807880:	e0bff403 	ldbu	r2,-48(fp)
  807884:	000d883a 	mov	r6,zero
  807888:	000b883a 	mov	r5,zero
  80788c:	1009883a 	mov	r4,r2
  807890:	08010980 	call	801098 <ffs_DiskIOIoctl>
  807894:	1004c03a 	cmpne	r2,r2,zero
  807898:	10803fcc 	andi	r2,r2,255
}
  80789c:	e037883a 	mov	sp,fp
  8078a0:	dfc00117 	ldw	ra,4(sp)
  8078a4:	df000017 	ldw	fp,0(sp)
  8078a8:	dec00204 	addi	sp,sp,8
  8078ac:	f800283a 	ret

008078b0 <f_gets>:
TCHAR* f_gets (
   TCHAR* buff,   /* Pointer to the string buffer to read */
   int len,    /* Size of string buffer (characters) */
   FIL* fil    /* Pointer to the file object */
)
{
  8078b0:	defff704 	addi	sp,sp,-36
  8078b4:	dfc00815 	stw	ra,32(sp)
  8078b8:	df000715 	stw	fp,28(sp)
  8078bc:	df000704 	addi	fp,sp,28
  8078c0:	e13ffd15 	stw	r4,-12(fp)
  8078c4:	e17ffe15 	stw	r5,-8(fp)
  8078c8:	e1bfff15 	stw	r6,-4(fp)
   int n = 0;
  8078cc:	e03ff915 	stw	zero,-28(fp)
   TCHAR c, *p = buff;
  8078d0:	e0bffd17 	ldw	r2,-12(fp)
  8078d4:	e0bffa15 	stw	r2,-24(fp)
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  8078d8:	00001706 	br	807938 <f_gets+0x88>
      f_read(fil, s, 1, &rc);
  8078dc:	e0fffc04 	addi	r3,fp,-16
  8078e0:	e0bffb44 	addi	r2,fp,-19
  8078e4:	180f883a 	mov	r7,r3
  8078e8:	01800044 	movi	r6,1
  8078ec:	100b883a 	mov	r5,r2
  8078f0:	e13fff17 	ldw	r4,-4(fp)
  8078f4:	08044780 	call	804478 <f_read>
      if (rc != 1) break;        /* Break on EOF or error */
  8078f8:	e0bffc17 	ldw	r2,-16(fp)
  8078fc:	10800060 	cmpeqi	r2,r2,1
  807900:	10001226 	beq	r2,zero,80794c <f_gets+0x9c>
      c = s[0];
  807904:	e0bffb43 	ldbu	r2,-19(fp)
  807908:	e0bffb05 	stb	r2,-20(fp)
      }
#endif
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
  80790c:	e0bffa17 	ldw	r2,-24(fp)
  807910:	10c00044 	addi	r3,r2,1
  807914:	e0fffa15 	stw	r3,-24(fp)
  807918:	e0fffb03 	ldbu	r3,-20(fp)
  80791c:	10c00005 	stb	r3,0(r2)
      n++;
  807920:	e0bff917 	ldw	r2,-28(fp)
  807924:	10800044 	addi	r2,r2,1
  807928:	e0bff915 	stw	r2,-28(fp)
      if (c == '\n') break;      /* Break on EOL */
  80792c:	e0bffb07 	ldb	r2,-20(fp)
  807930:	10800298 	cmpnei	r2,r2,10
  807934:	10000726 	beq	r2,zero,807954 <f_gets+0xa4>
   TCHAR c, *p = buff;
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  807938:	e0bffe17 	ldw	r2,-8(fp)
  80793c:	10bfffc4 	addi	r2,r2,-1
  807940:	e0fff917 	ldw	r3,-28(fp)
  807944:	18bfe516 	blt	r3,r2,8078dc <__alt_data_end+0xff8078dc>
  807948:	00000306 	br	807958 <f_gets+0xa8>
      f_read(fil, s, 1, &rc);
      if (rc != 1) break;        /* Break on EOF or error */
  80794c:	0001883a 	nop
  807950:	00000106 	br	807958 <f_gets+0xa8>
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
      n++;
      if (c == '\n') break;      /* Break on EOL */
  807954:	0001883a 	nop
   }
   *p = 0;
  807958:	e0bffa17 	ldw	r2,-24(fp)
  80795c:	10000005 	stb	zero,0(r2)
   return n ? buff : 0;       /* When no data read (eof or error), return with error. */
  807960:	e0bff917 	ldw	r2,-28(fp)
  807964:	10000226 	beq	r2,zero,807970 <f_gets+0xc0>
  807968:	e0bffd17 	ldw	r2,-12(fp)
  80796c:	00000106 	br	807974 <f_gets+0xc4>
  807970:	0005883a 	mov	r2,zero
}
  807974:	e037883a 	mov	sp,fp
  807978:	dfc00117 	ldw	ra,4(sp)
  80797c:	df000017 	ldw	fp,0(sp)
  807980:	dec00204 	addi	sp,sp,8
  807984:	f800283a 	ret

00807988 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
   TCHAR c, /* A character to be output */
   FIL* fil /* Pointer to the file object */
)
{
  807988:	defff904 	addi	sp,sp,-28
  80798c:	dfc00615 	stw	ra,24(sp)
  807990:	df000515 	stw	fp,20(sp)
  807994:	df000504 	addi	fp,sp,20
  807998:	2005883a 	mov	r2,r4
  80799c:	e17fff15 	stw	r5,-4(fp)
  8079a0:	e0bffe05 	stb	r2,-8(fp)
         s[2] = (uint8_t)(0x80 | (c & 0x3F));
         btw = 3;
      }
   }
#else          /* Write the character without conversion */
   s[0] = (uint8_t)c;
  8079a4:	e0bffe03 	ldbu	r2,-8(fp)
  8079a8:	e0bffd05 	stb	r2,-12(fp)
   btw = 1;
  8079ac:	00800044 	movi	r2,1
  8079b0:	e0bffb15 	stw	r2,-20(fp)
#endif
   f_write(fil, s, btw, &bw);    /* Write the char to the file */
  8079b4:	e0fffc04 	addi	r3,fp,-16
  8079b8:	e0bffd04 	addi	r2,fp,-12
  8079bc:	180f883a 	mov	r7,r3
  8079c0:	e1bffb17 	ldw	r6,-20(fp)
  8079c4:	100b883a 	mov	r5,r2
  8079c8:	e13fff17 	ldw	r4,-4(fp)
  8079cc:	08049600 	call	804960 <f_write>
   return (bw == btw) ? 1 : EOF; /* Return the result */
  8079d0:	e0fffc17 	ldw	r3,-16(fp)
  8079d4:	e0bffb17 	ldw	r2,-20(fp)
  8079d8:	1880021e 	bne	r3,r2,8079e4 <f_putc+0x5c>
  8079dc:	00800044 	movi	r2,1
  8079e0:	00000106 	br	8079e8 <f_putc+0x60>
  8079e4:	00bfffc4 	movi	r2,-1
}
  8079e8:	e037883a 	mov	sp,fp
  8079ec:	dfc00117 	ldw	ra,4(sp)
  8079f0:	df000017 	ldw	fp,0(sp)
  8079f4:	dec00204 	addi	sp,sp,8
  8079f8:	f800283a 	ret

008079fc <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
   const TCHAR* str, /* Pointer to the string to be output */
   FIL* fil       /* Pointer to the file object */
)
{
  8079fc:	defffb04 	addi	sp,sp,-20
  807a00:	dfc00415 	stw	ra,16(sp)
  807a04:	df000315 	stw	fp,12(sp)
  807a08:	df000304 	addi	fp,sp,12
  807a0c:	e13ffe15 	stw	r4,-8(fp)
  807a10:	e17fff15 	stw	r5,-4(fp)
   int n;


   for (n = 0; *str; str++, n++) {
  807a14:	e03ffd15 	stw	zero,-12(fp)
  807a18:	00001206 	br	807a64 <f_puts+0x68>
      if (f_putc(*str, fil) == EOF) return EOF;
  807a1c:	e0bffe17 	ldw	r2,-8(fp)
  807a20:	10800003 	ldbu	r2,0(r2)
  807a24:	10803fcc 	andi	r2,r2,255
  807a28:	1080201c 	xori	r2,r2,128
  807a2c:	10bfe004 	addi	r2,r2,-128
  807a30:	e17fff17 	ldw	r5,-4(fp)
  807a34:	1009883a 	mov	r4,r2
  807a38:	08079880 	call	807988 <f_putc>
  807a3c:	10bfffd8 	cmpnei	r2,r2,-1
  807a40:	1000021e 	bne	r2,zero,807a4c <f_puts+0x50>
  807a44:	00bfffc4 	movi	r2,-1
  807a48:	00000d06 	br	807a80 <f_puts+0x84>
)
{
   int n;


   for (n = 0; *str; str++, n++) {
  807a4c:	e0bffe17 	ldw	r2,-8(fp)
  807a50:	10800044 	addi	r2,r2,1
  807a54:	e0bffe15 	stw	r2,-8(fp)
  807a58:	e0bffd17 	ldw	r2,-12(fp)
  807a5c:	10800044 	addi	r2,r2,1
  807a60:	e0bffd15 	stw	r2,-12(fp)
  807a64:	e0bffe17 	ldw	r2,-8(fp)
  807a68:	10800003 	ldbu	r2,0(r2)
  807a6c:	10803fcc 	andi	r2,r2,255
  807a70:	1080201c 	xori	r2,r2,128
  807a74:	10bfe004 	addi	r2,r2,-128
  807a78:	103fe81e 	bne	r2,zero,807a1c <__alt_data_end+0xff807a1c>
      if (f_putc(*str, fil) == EOF) return EOF;
   }
   return n;
  807a7c:	e0bffd17 	ldw	r2,-12(fp)
}
  807a80:	e037883a 	mov	sp,fp
  807a84:	dfc00117 	ldw	ra,4(sp)
  807a88:	df000017 	ldw	fp,0(sp)
  807a8c:	dec00204 	addi	sp,sp,8
  807a90:	f800283a 	ret

00807a94 <f_printf>:
int f_printf (
   FIL* fil,         /* Pointer to the file object */
   const TCHAR* str, /* Pointer to the format string */
   ...               /* Optional arguments... */
)
{
  807a94:	deffeb04 	addi	sp,sp,-84
  807a98:	dfc01215 	stw	ra,72(sp)
  807a9c:	df001115 	stw	fp,68(sp)
  807aa0:	df001104 	addi	fp,sp,68
  807aa4:	e13ffe15 	stw	r4,-8(fp)
  807aa8:	e17fff15 	stw	r5,-4(fp)
  807aac:	e1800215 	stw	r6,8(fp)
  807ab0:	e1c00315 	stw	r7,12(fp)
   uint32_t v;
   TCHAR c, d, s[16], *p;
   int res, chc, cc;


   va_start(arp, str);
  807ab4:	e0800204 	addi	r2,fp,8
  807ab8:	e0bff915 	stw	r2,-28(fp)

   for (cc = res = 0; cc != EOF; res += cc) {
  807abc:	e03ff515 	stw	zero,-44(fp)
  807ac0:	e0bff517 	ldw	r2,-44(fp)
  807ac4:	e0bff715 	stw	r2,-36(fp)
  807ac8:	00017806 	br	8080ac <f_printf+0x618>
      c = *str++;
  807acc:	e0bfff17 	ldw	r2,-4(fp)
  807ad0:	10c00044 	addi	r3,r2,1
  807ad4:	e0ffff15 	stw	r3,-4(fp)
  807ad8:	10800003 	ldbu	r2,0(r2)
  807adc:	e0bff405 	stb	r2,-48(fp)
      if (c == 0) break;         /* End of string */
  807ae0:	e0bff407 	ldb	r2,-48(fp)
  807ae4:	10017526 	beq	r2,zero,8080bc <f_printf+0x628>
      if (c != '%') {            /* Non escape character */
  807ae8:	e0bff407 	ldb	r2,-48(fp)
  807aec:	10800960 	cmpeqi	r2,r2,37
  807af0:	10000b1e 	bne	r2,zero,807b20 <f_printf+0x8c>
         cc = f_putc(c, fil);
  807af4:	e0bff407 	ldb	r2,-48(fp)
  807af8:	e17ffe17 	ldw	r5,-8(fp)
  807afc:	1009883a 	mov	r4,r2
  807b00:	08079880 	call	807988 <f_putc>
  807b04:	e0bff715 	stw	r2,-36(fp)
         if (cc != EOF) cc = 1;
  807b08:	e0bff717 	ldw	r2,-36(fp)
  807b0c:	10bfffe0 	cmpeqi	r2,r2,-1
  807b10:	10015f1e 	bne	r2,zero,808090 <f_printf+0x5fc>
  807b14:	00800044 	movi	r2,1
  807b18:	e0bff715 	stw	r2,-36(fp)
         continue;
  807b1c:	00015c06 	br	808090 <f_printf+0x5fc>
      }
      w = f = 0;
  807b20:	e03fef05 	stb	zero,-68(fp)
  807b24:	e03ff215 	stw	zero,-56(fp)
      c = *str++;
  807b28:	e0bfff17 	ldw	r2,-4(fp)
  807b2c:	10c00044 	addi	r3,r2,1
  807b30:	e0ffff15 	stw	r3,-4(fp)
  807b34:	10800003 	ldbu	r2,0(r2)
  807b38:	e0bff405 	stb	r2,-48(fp)
      if (c == '0') {            /* Flag: '0' padding */
  807b3c:	e0bff407 	ldb	r2,-48(fp)
  807b40:	10800c18 	cmpnei	r2,r2,48
  807b44:	1000081e 	bne	r2,zero,807b68 <f_printf+0xd4>
         f = 1; c = *str++;
  807b48:	00800044 	movi	r2,1
  807b4c:	e0bfef05 	stb	r2,-68(fp)
  807b50:	e0bfff17 	ldw	r2,-4(fp)
  807b54:	10c00044 	addi	r3,r2,1
  807b58:	e0ffff15 	stw	r3,-4(fp)
  807b5c:	10800003 	ldbu	r2,0(r2)
  807b60:	e0bff405 	stb	r2,-48(fp)
  807b64:	00001606 	br	807bc0 <f_printf+0x12c>
      } else {
         if (c == '-') {         /* Flag: left justified */
  807b68:	e0bff407 	ldb	r2,-48(fp)
  807b6c:	10800b58 	cmpnei	r2,r2,45
  807b70:	1000131e 	bne	r2,zero,807bc0 <f_printf+0x12c>
            f = 2; c = *str++;
  807b74:	00800084 	movi	r2,2
  807b78:	e0bfef05 	stb	r2,-68(fp)
  807b7c:	e0bfff17 	ldw	r2,-4(fp)
  807b80:	10c00044 	addi	r3,r2,1
  807b84:	e0ffff15 	stw	r3,-4(fp)
  807b88:	10800003 	ldbu	r2,0(r2)
  807b8c:	e0bff405 	stb	r2,-48(fp)
         }
      }
      while (IsDigit(c)) {    /* Precision */
  807b90:	00000b06 	br	807bc0 <f_printf+0x12c>
         w = w * 10 + c - '0';
  807b94:	e0bff217 	ldw	r2,-56(fp)
  807b98:	10c002a4 	muli	r3,r2,10
  807b9c:	e0bff407 	ldb	r2,-48(fp)
  807ba0:	1885883a 	add	r2,r3,r2
  807ba4:	10bff404 	addi	r2,r2,-48
  807ba8:	e0bff215 	stw	r2,-56(fp)
         c = *str++;
  807bac:	e0bfff17 	ldw	r2,-4(fp)
  807bb0:	10c00044 	addi	r3,r2,1
  807bb4:	e0ffff15 	stw	r3,-4(fp)
  807bb8:	10800003 	ldbu	r2,0(r2)
  807bbc:	e0bff405 	stb	r2,-48(fp)
      } else {
         if (c == '-') {         /* Flag: left justified */
            f = 2; c = *str++;
         }
      }
      while (IsDigit(c)) {    /* Precision */
  807bc0:	e0bff407 	ldb	r2,-48(fp)
  807bc4:	10800c10 	cmplti	r2,r2,48
  807bc8:	1000031e 	bne	r2,zero,807bd8 <f_printf+0x144>
  807bcc:	e0bff407 	ldb	r2,-48(fp)
  807bd0:	10800e90 	cmplti	r2,r2,58
  807bd4:	103fef1e 	bne	r2,zero,807b94 <__alt_data_end+0xff807b94>
         w = w * 10 + c - '0';
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
  807bd8:	e0bff407 	ldb	r2,-48(fp)
  807bdc:	10801b20 	cmpeqi	r2,r2,108
  807be0:	1000031e 	bne	r2,zero,807bf0 <f_printf+0x15c>
  807be4:	e0bff407 	ldb	r2,-48(fp)
  807be8:	10801318 	cmpnei	r2,r2,76
  807bec:	1000081e 	bne	r2,zero,807c10 <f_printf+0x17c>
         f |= 4; c = *str++;
  807bf0:	e0bfef03 	ldbu	r2,-68(fp)
  807bf4:	10800114 	ori	r2,r2,4
  807bf8:	e0bfef05 	stb	r2,-68(fp)
  807bfc:	e0bfff17 	ldw	r2,-4(fp)
  807c00:	10c00044 	addi	r3,r2,1
  807c04:	e0ffff15 	stw	r3,-4(fp)
  807c08:	10800003 	ldbu	r2,0(r2)
  807c0c:	e0bff405 	stb	r2,-48(fp)
      }
      if (!c) break;
  807c10:	e0bff407 	ldb	r2,-48(fp)
  807c14:	10012b26 	beq	r2,zero,8080c4 <f_printf+0x630>
      d = c;
  807c18:	e0bff403 	ldbu	r2,-48(fp)
  807c1c:	e0bff445 	stb	r2,-47(fp)
      if (IsLower(d)) d -= 0x20;
  807c20:	e0bff447 	ldb	r2,-47(fp)
  807c24:	10801850 	cmplti	r2,r2,97
  807c28:	1000061e 	bne	r2,zero,807c44 <f_printf+0x1b0>
  807c2c:	e0bff447 	ldb	r2,-47(fp)
  807c30:	10801ec8 	cmpgei	r2,r2,123
  807c34:	1000031e 	bne	r2,zero,807c44 <f_printf+0x1b0>
  807c38:	e0bff443 	ldbu	r2,-47(fp)
  807c3c:	10bff804 	addi	r2,r2,-32
  807c40:	e0bff445 	stb	r2,-47(fp)
      switch (d) {            /* Type is... */
  807c44:	e0bff447 	ldb	r2,-47(fp)
  807c48:	10bfef84 	addi	r2,r2,-66
  807c4c:	10c005e8 	cmpgeui	r3,r2,23
  807c50:	1800751e 	bne	r3,zero,807e28 <f_printf+0x394>
  807c54:	100690ba 	slli	r3,r2,2
  807c58:	00802034 	movhi	r2,128
  807c5c:	109f1b04 	addi	r2,r2,31852
  807c60:	1885883a 	add	r2,r3,r2
  807c64:	10800017 	ldw	r2,0(r2)
  807c68:	1000683a 	jmp	r2
  807c6c:	00807df8 	rdprs	r2,zero,503
  807c70:	00807dc8 	cmpgei	r2,zero,503
  807c74:	00807e10 	cmplti	r2,zero,504
  807c78:	00807e28 	cmpgeui	r2,zero,504
  807c7c:	00807e28 	cmpgeui	r2,zero,504
  807c80:	00807e28 	cmpgeui	r2,zero,504
  807c84:	00807e28 	cmpgeui	r2,zero,504
  807c88:	00807e28 	cmpgeui	r2,zero,504
  807c8c:	00807e28 	cmpgeui	r2,zero,504
  807c90:	00807e28 	cmpgeui	r2,zero,504
  807c94:	00807e28 	cmpgeui	r2,zero,504
  807c98:	00807e28 	cmpgeui	r2,zero,504
  807c9c:	00807e28 	cmpgeui	r2,zero,504
  807ca0:	00807e04 	movi	r2,504
  807ca4:	00807e28 	cmpgeui	r2,zero,504
  807ca8:	00807e28 	cmpgeui	r2,zero,504
  807cac:	00807e28 	cmpgeui	r2,zero,504
  807cb0:	00807cc8 	cmpgei	r2,zero,499
  807cb4:	00807e28 	cmpgeui	r2,zero,504
  807cb8:	00807e10 	cmplti	r2,zero,504
  807cbc:	00807e28 	cmpgeui	r2,zero,504
  807cc0:	00807e28 	cmpgeui	r2,zero,504
  807cc4:	00807e1c 	xori	r2,zero,504
      case 'S' :              /* String */
         p = va_arg(arp, TCHAR*);
  807cc8:	e0bff917 	ldw	r2,-28(fp)
  807ccc:	10c00104 	addi	r3,r2,4
  807cd0:	e0fff915 	stw	r3,-28(fp)
  807cd4:	10800017 	ldw	r2,0(r2)
  807cd8:	e0bff815 	stw	r2,-32(fp)
         for (j = 0; p[j]; j++) ;
  807cdc:	e03ff115 	stw	zero,-60(fp)
  807ce0:	00000306 	br	807cf0 <f_printf+0x25c>
  807ce4:	e0bff117 	ldw	r2,-60(fp)
  807ce8:	10800044 	addi	r2,r2,1
  807cec:	e0bff115 	stw	r2,-60(fp)
  807cf0:	e0fff817 	ldw	r3,-32(fp)
  807cf4:	e0bff117 	ldw	r2,-60(fp)
  807cf8:	1885883a 	add	r2,r3,r2
  807cfc:	10800003 	ldbu	r2,0(r2)
  807d00:	10803fcc 	andi	r2,r2,255
  807d04:	1080201c 	xori	r2,r2,128
  807d08:	10bfe004 	addi	r2,r2,-128
  807d0c:	103ff51e 	bne	r2,zero,807ce4 <__alt_data_end+0xff807ce4>
         chc = 0;
  807d10:	e03ff615 	stw	zero,-40(fp)
         if (!(f & 2)) {
  807d14:	e0bfef03 	ldbu	r2,-68(fp)
  807d18:	1080008c 	andi	r2,r2,2
  807d1c:	10000e1e 	bne	r2,zero,807d58 <f_printf+0x2c4>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
  807d20:	00000806 	br	807d44 <f_printf+0x2b0>
  807d24:	e17ffe17 	ldw	r5,-8(fp)
  807d28:	01000804 	movi	r4,32
  807d2c:	08079880 	call	807988 <f_putc>
  807d30:	e0bff715 	stw	r2,-36(fp)
  807d34:	e0bff717 	ldw	r2,-36(fp)
  807d38:	e0fff617 	ldw	r3,-40(fp)
  807d3c:	1885883a 	add	r2,r3,r2
  807d40:	e0bff615 	stw	r2,-40(fp)
  807d44:	e0bff117 	ldw	r2,-60(fp)
  807d48:	10c00044 	addi	r3,r2,1
  807d4c:	e0fff115 	stw	r3,-60(fp)
  807d50:	e0fff217 	ldw	r3,-56(fp)
  807d54:	10fff336 	bltu	r2,r3,807d24 <__alt_data_end+0xff807d24>
         }
         chc += (cc = f_puts(p, fil));
  807d58:	e17ffe17 	ldw	r5,-8(fp)
  807d5c:	e13ff817 	ldw	r4,-32(fp)
  807d60:	08079fc0 	call	8079fc <f_puts>
  807d64:	e0bff715 	stw	r2,-36(fp)
  807d68:	e0bff717 	ldw	r2,-36(fp)
  807d6c:	e0fff617 	ldw	r3,-40(fp)
  807d70:	1885883a 	add	r2,r3,r2
  807d74:	e0bff615 	stw	r2,-40(fp)
         while (j++ < w) chc += (cc = f_putc(' ', fil));
  807d78:	00000806 	br	807d9c <f_printf+0x308>
  807d7c:	e17ffe17 	ldw	r5,-8(fp)
  807d80:	01000804 	movi	r4,32
  807d84:	08079880 	call	807988 <f_putc>
  807d88:	e0bff715 	stw	r2,-36(fp)
  807d8c:	e0bff717 	ldw	r2,-36(fp)
  807d90:	e0fff617 	ldw	r3,-40(fp)
  807d94:	1885883a 	add	r2,r3,r2
  807d98:	e0bff615 	stw	r2,-40(fp)
  807d9c:	e0bff117 	ldw	r2,-60(fp)
  807da0:	10c00044 	addi	r3,r2,1
  807da4:	e0fff115 	stw	r3,-60(fp)
  807da8:	e0fff217 	ldw	r3,-56(fp)
  807dac:	10fff336 	bltu	r2,r3,807d7c <__alt_data_end+0xff807d7c>
         if (cc != EOF) cc = chc;
  807db0:	e0bff717 	ldw	r2,-36(fp)
  807db4:	10bfffe0 	cmpeqi	r2,r2,-1
  807db8:	1000b71e 	bne	r2,zero,808098 <f_printf+0x604>
  807dbc:	e0bff617 	ldw	r2,-40(fp)
  807dc0:	e0bff715 	stw	r2,-36(fp)
         continue;
  807dc4:	0000b406 	br	808098 <f_printf+0x604>
      case 'C' :              /* Character */
         cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
  807dc8:	e0bff917 	ldw	r2,-28(fp)
  807dcc:	10c00104 	addi	r3,r2,4
  807dd0:	e0fff915 	stw	r3,-28(fp)
  807dd4:	10800017 	ldw	r2,0(r2)
  807dd8:	10803fcc 	andi	r2,r2,255
  807ddc:	1080201c 	xori	r2,r2,128
  807de0:	10bfe004 	addi	r2,r2,-128
  807de4:	e17ffe17 	ldw	r5,-8(fp)
  807de8:	1009883a 	mov	r4,r2
  807dec:	08079880 	call	807988 <f_putc>
  807df0:	e0bff715 	stw	r2,-36(fp)
  807df4:	0000a906 	br	80809c <f_printf+0x608>
      case 'B' :              /* Binary */
         r = 2; break;
  807df8:	00800084 	movi	r2,2
  807dfc:	e0bfef45 	stb	r2,-67(fp)
  807e00:	00000f06 	br	807e40 <f_printf+0x3ac>
      case 'O' :              /* Octal */
         r = 8; break;
  807e04:	00800204 	movi	r2,8
  807e08:	e0bfef45 	stb	r2,-67(fp)
  807e0c:	00000c06 	br	807e40 <f_printf+0x3ac>
      case 'D' :              /* Signed decimal */
      case 'U' :              /* Unsigned decimal */
         r = 10; break;
  807e10:	00800284 	movi	r2,10
  807e14:	e0bfef45 	stb	r2,-67(fp)
  807e18:	00000906 	br	807e40 <f_printf+0x3ac>
      case 'X' :              /* Hexdecimal */
         r = 16; break;
  807e1c:	00800404 	movi	r2,16
  807e20:	e0bfef45 	stb	r2,-67(fp)
  807e24:	00000606 	br	807e40 <f_printf+0x3ac>
      default:             /* Unknown type (passthrough) */
         cc = f_putc(c, fil); continue;
  807e28:	e0bff407 	ldb	r2,-48(fp)
  807e2c:	e17ffe17 	ldw	r5,-8(fp)
  807e30:	1009883a 	mov	r4,r2
  807e34:	08079880 	call	807988 <f_putc>
  807e38:	e0bff715 	stw	r2,-36(fp)
  807e3c:	00009706 	br	80809c <f_printf+0x608>
      }

      /* Get an argument and put it in numeral */
      v = (f & 4) ? (uint32_t)va_arg(arp, long) : ((d == 'D') ? (uint32_t)(long)va_arg(arp, int) : (uint32_t)va_arg(arp, unsigned int));
  807e40:	e0bfef03 	ldbu	r2,-68(fp)
  807e44:	1080010c 	andi	r2,r2,4
  807e48:	10000526 	beq	r2,zero,807e60 <f_printf+0x3cc>
  807e4c:	e0bff917 	ldw	r2,-28(fp)
  807e50:	10c00104 	addi	r3,r2,4
  807e54:	e0fff915 	stw	r3,-28(fp)
  807e58:	10800017 	ldw	r2,0(r2)
  807e5c:	00000c06 	br	807e90 <f_printf+0x3fc>
  807e60:	e0bff447 	ldb	r2,-47(fp)
  807e64:	10801118 	cmpnei	r2,r2,68
  807e68:	1000051e 	bne	r2,zero,807e80 <f_printf+0x3ec>
  807e6c:	e0bff917 	ldw	r2,-28(fp)
  807e70:	10c00104 	addi	r3,r2,4
  807e74:	e0fff915 	stw	r3,-28(fp)
  807e78:	10800017 	ldw	r2,0(r2)
  807e7c:	00000406 	br	807e90 <f_printf+0x3fc>
  807e80:	e0bff917 	ldw	r2,-28(fp)
  807e84:	10c00104 	addi	r3,r2,4
  807e88:	e0fff915 	stw	r3,-28(fp)
  807e8c:	10800017 	ldw	r2,0(r2)
  807e90:	e0bff315 	stw	r2,-52(fp)
      if (d == 'D' && (v & 0x80000000)) {
  807e94:	e0bff447 	ldb	r2,-47(fp)
  807e98:	10801118 	cmpnei	r2,r2,68
  807e9c:	1000081e 	bne	r2,zero,807ec0 <f_printf+0x42c>
  807ea0:	e0bff317 	ldw	r2,-52(fp)
  807ea4:	1000060e 	bge	r2,zero,807ec0 <f_printf+0x42c>
         v = 0 - v;
  807ea8:	e0bff317 	ldw	r2,-52(fp)
  807eac:	0085c83a 	sub	r2,zero,r2
  807eb0:	e0bff315 	stw	r2,-52(fp)
         f |= 8;
  807eb4:	e0bfef03 	ldbu	r2,-68(fp)
  807eb8:	10800214 	ori	r2,r2,8
  807ebc:	e0bfef05 	stb	r2,-68(fp)
      }
      i = 0;
  807ec0:	e03ff015 	stw	zero,-64(fp)
      do {
         d = (TCHAR)(v % r); v /= r;
  807ec4:	e0ffef43 	ldbu	r3,-67(fp)
  807ec8:	e0bff317 	ldw	r2,-52(fp)
  807ecc:	180b883a 	mov	r5,r3
  807ed0:	1009883a 	mov	r4,r2
  807ed4:	080a3bc0 	call	80a3bc <__umodsi3>
  807ed8:	e0bff445 	stb	r2,-47(fp)
  807edc:	e0bfef43 	ldbu	r2,-67(fp)
  807ee0:	100b883a 	mov	r5,r2
  807ee4:	e13ff317 	ldw	r4,-52(fp)
  807ee8:	080a3580 	call	80a358 <__udivsi3>
  807eec:	e0bff315 	stw	r2,-52(fp)
         if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  807ef0:	e0bff447 	ldb	r2,-47(fp)
  807ef4:	10800290 	cmplti	r2,r2,10
  807ef8:	1000091e 	bne	r2,zero,807f20 <f_printf+0x48c>
  807efc:	e0bff407 	ldb	r2,-48(fp)
  807f00:	10801e18 	cmpnei	r2,r2,120
  807f04:	1000021e 	bne	r2,zero,807f10 <f_printf+0x47c>
  807f08:	008009c4 	movi	r2,39
  807f0c:	00000106 	br	807f14 <f_printf+0x480>
  807f10:	008001c4 	movi	r2,7
  807f14:	e0fff443 	ldbu	r3,-47(fp)
  807f18:	10c5883a 	add	r2,r2,r3
  807f1c:	e0bff445 	stb	r2,-47(fp)
         s[i++] = d + '0';
  807f20:	e0bff017 	ldw	r2,-64(fp)
  807f24:	10c00044 	addi	r3,r2,1
  807f28:	e0fff015 	stw	r3,-64(fp)
  807f2c:	e0fff443 	ldbu	r3,-47(fp)
  807f30:	18c00c04 	addi	r3,r3,48
  807f34:	1809883a 	mov	r4,r3
  807f38:	e0fffa04 	addi	r3,fp,-24
  807f3c:	1885883a 	add	r2,r3,r2
  807f40:	11000005 	stb	r4,0(r2)
      } while (v && i < sizeof(s) / sizeof(s[0]));
  807f44:	e0bff317 	ldw	r2,-52(fp)
  807f48:	10000326 	beq	r2,zero,807f58 <f_printf+0x4c4>
  807f4c:	e0bff017 	ldw	r2,-64(fp)
  807f50:	10800430 	cmpltui	r2,r2,16
  807f54:	103fdb1e 	bne	r2,zero,807ec4 <__alt_data_end+0xff807ec4>
      if (f & 8) s[i++] = '-';
  807f58:	e0bfef03 	ldbu	r2,-68(fp)
  807f5c:	1080020c 	andi	r2,r2,8
  807f60:	10000726 	beq	r2,zero,807f80 <f_printf+0x4ec>
  807f64:	e0bff017 	ldw	r2,-64(fp)
  807f68:	10c00044 	addi	r3,r2,1
  807f6c:	e0fff015 	stw	r3,-64(fp)
  807f70:	e0fffa04 	addi	r3,fp,-24
  807f74:	1885883a 	add	r2,r3,r2
  807f78:	00c00b44 	movi	r3,45
  807f7c:	10c00005 	stb	r3,0(r2)
      j = i; d = (f & 1) ? '0' : ' ';
  807f80:	e0bff017 	ldw	r2,-64(fp)
  807f84:	e0bff115 	stw	r2,-60(fp)
  807f88:	e0bfef03 	ldbu	r2,-68(fp)
  807f8c:	1080004c 	andi	r2,r2,1
  807f90:	10000226 	beq	r2,zero,807f9c <f_printf+0x508>
  807f94:	00800c04 	movi	r2,48
  807f98:	00000106 	br	807fa0 <f_printf+0x50c>
  807f9c:	00800804 	movi	r2,32
  807fa0:	e0bff445 	stb	r2,-47(fp)
      res = 0;
  807fa4:	e03ff515 	stw	zero,-44(fp)
      while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
  807fa8:	00000906 	br	807fd0 <f_printf+0x53c>
  807fac:	e0bff447 	ldb	r2,-47(fp)
  807fb0:	e17ffe17 	ldw	r5,-8(fp)
  807fb4:	1009883a 	mov	r4,r2
  807fb8:	08079880 	call	807988 <f_putc>
  807fbc:	e0bff715 	stw	r2,-36(fp)
  807fc0:	e0bff717 	ldw	r2,-36(fp)
  807fc4:	e0fff517 	ldw	r3,-44(fp)
  807fc8:	1885883a 	add	r2,r3,r2
  807fcc:	e0bff515 	stw	r2,-44(fp)
  807fd0:	e0bfef03 	ldbu	r2,-68(fp)
  807fd4:	1080008c 	andi	r2,r2,2
  807fd8:	1000051e 	bne	r2,zero,807ff0 <f_printf+0x55c>
  807fdc:	e0bff117 	ldw	r2,-60(fp)
  807fe0:	10c00044 	addi	r3,r2,1
  807fe4:	e0fff115 	stw	r3,-60(fp)
  807fe8:	e0fff217 	ldw	r3,-56(fp)
  807fec:	10ffef36 	bltu	r2,r3,807fac <__alt_data_end+0xff807fac>
      do res += (cc = f_putc(s[--i], fil)); while(i);
  807ff0:	e0bff017 	ldw	r2,-64(fp)
  807ff4:	10bfffc4 	addi	r2,r2,-1
  807ff8:	e0bff015 	stw	r2,-64(fp)
  807ffc:	e0fffa04 	addi	r3,fp,-24
  808000:	e0bff017 	ldw	r2,-64(fp)
  808004:	1885883a 	add	r2,r3,r2
  808008:	10800003 	ldbu	r2,0(r2)
  80800c:	10803fcc 	andi	r2,r2,255
  808010:	1080201c 	xori	r2,r2,128
  808014:	10bfe004 	addi	r2,r2,-128
  808018:	e17ffe17 	ldw	r5,-8(fp)
  80801c:	1009883a 	mov	r4,r2
  808020:	08079880 	call	807988 <f_putc>
  808024:	e0bff715 	stw	r2,-36(fp)
  808028:	e0bff717 	ldw	r2,-36(fp)
  80802c:	e0fff517 	ldw	r3,-44(fp)
  808030:	1885883a 	add	r2,r3,r2
  808034:	e0bff515 	stw	r2,-44(fp)
  808038:	e0bff017 	ldw	r2,-64(fp)
  80803c:	103fec1e 	bne	r2,zero,807ff0 <__alt_data_end+0xff807ff0>
      while (j++ < w) res += (cc = f_putc(' ', fil));
  808040:	00000806 	br	808064 <f_printf+0x5d0>
  808044:	e17ffe17 	ldw	r5,-8(fp)
  808048:	01000804 	movi	r4,32
  80804c:	08079880 	call	807988 <f_putc>
  808050:	e0bff715 	stw	r2,-36(fp)
  808054:	e0bff717 	ldw	r2,-36(fp)
  808058:	e0fff517 	ldw	r3,-44(fp)
  80805c:	1885883a 	add	r2,r3,r2
  808060:	e0bff515 	stw	r2,-44(fp)
  808064:	e0bff117 	ldw	r2,-60(fp)
  808068:	10c00044 	addi	r3,r2,1
  80806c:	e0fff115 	stw	r3,-60(fp)
  808070:	e0fff217 	ldw	r3,-56(fp)
  808074:	10fff336 	bltu	r2,r3,808044 <__alt_data_end+0xff808044>
      if (cc != EOF) cc = res;
  808078:	e0bff717 	ldw	r2,-36(fp)
  80807c:	10bfffe0 	cmpeqi	r2,r2,-1
  808080:	1000061e 	bne	r2,zero,80809c <f_printf+0x608>
  808084:	e0bff517 	ldw	r2,-44(fp)
  808088:	e0bff715 	stw	r2,-36(fp)
  80808c:	00000306 	br	80809c <f_printf+0x608>
      c = *str++;
      if (c == 0) break;         /* End of string */
      if (c != '%') {            /* Non escape character */
         cc = f_putc(c, fil);
         if (cc != EOF) cc = 1;
         continue;
  808090:	0001883a 	nop
  808094:	00000106 	br	80809c <f_printf+0x608>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
         }
         chc += (cc = f_puts(p, fil));
         while (j++ < w) chc += (cc = f_putc(' ', fil));
         if (cc != EOF) cc = chc;
         continue;
  808098:	0001883a 	nop
   int res, chc, cc;


   va_start(arp, str);

   for (cc = res = 0; cc != EOF; res += cc) {
  80809c:	e0fff517 	ldw	r3,-44(fp)
  8080a0:	e0bff717 	ldw	r2,-36(fp)
  8080a4:	1885883a 	add	r2,r3,r2
  8080a8:	e0bff515 	stw	r2,-44(fp)
  8080ac:	e0bff717 	ldw	r2,-36(fp)
  8080b0:	10bfffd8 	cmpnei	r2,r2,-1
  8080b4:	103e851e 	bne	r2,zero,807acc <__alt_data_end+0xff807acc>
  8080b8:	00000306 	br	8080c8 <f_printf+0x634>
      c = *str++;
      if (c == 0) break;         /* End of string */
  8080bc:	0001883a 	nop
  8080c0:	00000106 	br	8080c8 <f_printf+0x634>
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
         f |= 4; c = *str++;
      }
      if (!c) break;
  8080c4:	0001883a 	nop
      while (j++ < w) res += (cc = f_putc(' ', fil));
      if (cc != EOF) cc = res;
   }

   va_end(arp);
   return (cc == EOF) ? cc : res;
  8080c8:	e0bff717 	ldw	r2,-36(fp)
  8080cc:	10bfffd8 	cmpnei	r2,r2,-1
  8080d0:	1000021e 	bne	r2,zero,8080dc <f_printf+0x648>
  8080d4:	e0bff717 	ldw	r2,-36(fp)
  8080d8:	00000106 	br	8080e0 <f_printf+0x64c>
  8080dc:	e0bff517 	ldw	r2,-44(fp)
}
  8080e0:	e037883a 	mov	sp,fp
  8080e4:	dfc00117 	ldw	ra,4(sp)
  8080e8:	df000017 	ldw	fp,0(sp)
  8080ec:	dec00404 	addi	sp,sp,16
  8080f0:	f800283a 	ret

008080f4 <TimerFunction>:
/*                                                                         */
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static alt_u32 TimerFunction(void *context) {
  8080f4:	defffd04 	addi	sp,sp,-12
  8080f8:	dfc00215 	stw	ra,8(sp)
  8080fc:	df000115 	stw	fp,4(sp)
  808100:	df000104 	addi	fp,sp,4
  808104:	e13fff15 	stw	r4,-4(fp)
	static unsigned short wTimer10ms = 0;

	(void) context;

	Systick++;
  808108:	d0a35d17 	ldw	r2,-29324(gp)
  80810c:	10800044 	addi	r2,r2,1
  808110:	d0a35d15 	stw	r2,-29324(gp)
	wTimer10ms++;
  808114:	d0a35e8b 	ldhu	r2,-29318(gp)
  808118:	10800044 	addi	r2,r2,1
  80811c:	d0a35e8d 	sth	r2,-29318(gp)
	Timer++; /* Performance counter for this module */
  808120:	d0a35e0b 	ldhu	r2,-29320(gp)
  808124:	10800044 	addi	r2,r2,1
  808128:	d0a35e0d 	sth	r2,-29320(gp)

	if (wTimer10ms == 10) {
  80812c:	d0a35e8b 	ldhu	r2,-29318(gp)
  808130:	10bfffcc 	andi	r2,r2,65535
  808134:	10800298 	cmpnei	r2,r2,10
  808138:	1000021e 	bne	r2,zero,808144 <TimerFunction+0x50>
		wTimer10ms = 0;
  80813c:	d0235e8d 	sth	zero,-29318(gp)
		ffs_DiskIOTimerproc(); /* Drive timer procedure of low level disk I/O module */
  808140:	0800a780 	call	800a78 <ffs_DiskIOTimerproc>
	}

	return (1);
  808144:	00800044 	movi	r2,1
} /* TimerFunction */
  808148:	e037883a 	mov	sp,fp
  80814c:	dfc00117 	ldw	ra,4(sp)
  808150:	df000017 	ldw	fp,0(sp)
  808154:	dec00204 	addi	sp,sp,8
  808158:	f800283a 	ret

0080815c <IoInit>:
/*                                                                         */
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void IoInit(void) {
  80815c:	defffe04 	addi	sp,sp,-8
  808160:	dfc00115 	stw	ra,4(sp)
  808164:	df000015 	stw	fp,0(sp)
  808168:	d839883a 	mov	fp,sp
	uart0_init(115200);
  80816c:	010000b4 	movhi	r4,2
  808170:	21308004 	addi	r4,r4,-15872
  808174:	080a1b00 	call	80a1b0 <uart0_init>

	/* Init diskio interface */
	ffs_DiskIOInit();
  808178:	0800a4c0 	call	800a4c <ffs_DiskIOInit>

	//SetHighSpeed();

	/* Init timer system */
	alt_alarm_start(&alarm, 1, &TimerFunction, NULL);
  80817c:	000f883a 	mov	r7,zero
  808180:	01802074 	movhi	r6,129
  808184:	31a03d04 	addi	r6,r6,-32524
  808188:	01400044 	movi	r5,1
  80818c:	010020b4 	movhi	r4,130
  808190:	21366e04 	addi	r4,r4,-9800
  808194:	08170340 	call	817034 <alt_alarm_start>

} /* IoInit */
  808198:	0001883a 	nop
  80819c:	e037883a 	mov	sp,fp
  8081a0:	dfc00117 	ldw	ra,4(sp)
  8081a4:	df000017 	ldw	fp,0(sp)
  8081a8:	dec00204 	addi	sp,sp,8
  8081ac:	f800283a 	ret

008081b0 <scan_files>:
FATFS Fatfs[_VOLUMES]; /* File system object for each logical drive */
FIL File1, File2; /* File objects */
DIR Dir; /* Directory object */
uint8_t Buff[512] __attribute__ ((aligned(4))); /* Working buffer */

static FRESULT scan_files(char *path) {
  8081b0:	defff304 	addi	sp,sp,-52
  8081b4:	dfc00c15 	stw	ra,48(sp)
  8081b8:	df000b15 	stw	fp,44(sp)
  8081bc:	df000b04 	addi	fp,sp,44
  8081c0:	e13fff15 	stw	r4,-4(fp)
	DIR dirs;
	FRESULT res;
	uint8_t i;
	char *fn;

	if ((res = f_opendir(&dirs, path)) == FR_OK) {
  8081c4:	e0bff804 	addi	r2,fp,-32
  8081c8:	e17fff17 	ldw	r5,-4(fp)
  8081cc:	1009883a 	mov	r4,r2
  8081d0:	08056a40 	call	8056a4 <f_opendir>
  8081d4:	e0bff515 	stw	r2,-44(fp)
  8081d8:	e0bff517 	ldw	r2,-44(fp)
  8081dc:	10003e1e 	bne	r2,zero,8082d8 <scan_files+0x128>
		i = (uint8_t) strlen(path);
  8081e0:	e13fff17 	ldw	r4,-4(fp)
  8081e4:	080a7d80 	call	80a7d8 <strlen>
  8081e8:	e0bff605 	stb	r2,-40(fp)
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  8081ec:	00002b06 	br	80829c <scan_files+0xec>
			if (_FS_RPATH && Finfo.fname[0] == '.')
				continue;
#if _USE_LFN
			fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
#else
			fn = Finfo.fname;
  8081f0:	008020b4 	movhi	r2,130
  8081f4:	10b79544 	addi	r2,r2,-8619
  8081f8:	e0bff715 	stw	r2,-36(fp)
#endif
			if (Finfo.fattrib & AM_DIR) {
  8081fc:	008020b4 	movhi	r2,130
  808200:	10b79304 	addi	r2,r2,-8628
  808204:	10800203 	ldbu	r2,8(r2)
  808208:	10803fcc 	andi	r2,r2,255
  80820c:	1080040c 	andi	r2,r2,16
  808210:	10001926 	beq	r2,zero,808278 <scan_files+0xc8>
				acc_dirs++;
  808214:	d0a35f0b 	ldhu	r2,-29316(gp)
  808218:	10800044 	addi	r2,r2,1
  80821c:	d0a35f0d 	sth	r2,-29316(gp)
				*(path + i) = '/';
  808220:	e0bff603 	ldbu	r2,-40(fp)
  808224:	e0ffff17 	ldw	r3,-4(fp)
  808228:	1885883a 	add	r2,r3,r2
  80822c:	00c00bc4 	movi	r3,47
  808230:	10c00005 	stb	r3,0(r2)
				strcpy(path + i + 1, fn);
  808234:	e0bff603 	ldbu	r2,-40(fp)
  808238:	10800044 	addi	r2,r2,1
  80823c:	e0ffff17 	ldw	r3,-4(fp)
  808240:	1885883a 	add	r2,r3,r2
  808244:	e17ff717 	ldw	r5,-36(fp)
  808248:	1009883a 	mov	r4,r2
  80824c:	080a7480 	call	80a748 <strcpy>
				res = scan_files(path);
  808250:	e13fff17 	ldw	r4,-4(fp)
  808254:	08081b00 	call	8081b0 <scan_files>
  808258:	e0bff515 	stw	r2,-44(fp)
				*(path + i) = '\0';
  80825c:	e0bff603 	ldbu	r2,-40(fp)
  808260:	e0ffff17 	ldw	r3,-4(fp)
  808264:	1885883a 	add	r2,r3,r2
  808268:	10000005 	stb	zero,0(r2)
				if (res != FR_OK)
  80826c:	e0bff517 	ldw	r2,-44(fp)
  808270:	10000a26 	beq	r2,zero,80829c <scan_files+0xec>
					break;
  808274:	00001806 	br	8082d8 <scan_files+0x128>
			} else {
				//      xprintf("%s/%s\n", path, fn);
				acc_files++;
  808278:	d0a35f8b 	ldhu	r2,-29314(gp)
  80827c:	10800044 	addi	r2,r2,1
  808280:	d0a35f8d 	sth	r2,-29314(gp)
				acc_size += Finfo.fsize;
  808284:	008020b4 	movhi	r2,130
  808288:	10b79304 	addi	r2,r2,-8628
  80828c:	10c00017 	ldw	r3,0(r2)
  808290:	d0a36017 	ldw	r2,-29312(gp)
  808294:	1885883a 	add	r2,r3,r2
  808298:	d0a36015 	stw	r2,-29312(gp)
	uint8_t i;
	char *fn;

	if ((res = f_opendir(&dirs, path)) == FR_OK) {
		i = (uint8_t) strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  80829c:	e0bff804 	addi	r2,fp,-32
  8082a0:	014020b4 	movhi	r5,130
  8082a4:	29779304 	addi	r5,r5,-8628
  8082a8:	1009883a 	mov	r4,r2
  8082ac:	08058140 	call	805814 <f_readdir>
  8082b0:	e0bff515 	stw	r2,-44(fp)
  8082b4:	e0bff517 	ldw	r2,-44(fp)
  8082b8:	1000071e 	bne	r2,zero,8082d8 <scan_files+0x128>
  8082bc:	008020b4 	movhi	r2,130
  8082c0:	10b79304 	addi	r2,r2,-8628
  8082c4:	10800243 	ldbu	r2,9(r2)
  8082c8:	10803fcc 	andi	r2,r2,255
  8082cc:	1080201c 	xori	r2,r2,128
  8082d0:	10bfe004 	addi	r2,r2,-128
  8082d4:	103fc61e 	bne	r2,zero,8081f0 <__alt_data_end+0xff8081f0>
				acc_size += Finfo.fsize;
			}
		}
	}

	return res;
  8082d8:	e0bff517 	ldw	r2,-44(fp)
}
  8082dc:	e037883a 	mov	sp,fp
  8082e0:	dfc00117 	ldw	ra,4(sp)
  8082e4:	df000017 	ldw	fp,0(sp)
  8082e8:	dec00204 	addi	sp,sp,8
  8082ec:	f800283a 	ret

008082f0 <put_rc>:

//                put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));

static
void put_rc(FRESULT rc) {
  8082f0:	defffb04 	addi	sp,sp,-20
  8082f4:	dfc00415 	stw	ra,16(sp)
  8082f8:	df000315 	stw	fp,12(sp)
  8082fc:	df000304 	addi	fp,sp,12
  808300:	e13fff15 	stw	r4,-4(fp)
	const char *str =
  808304:	008020b4 	movhi	r2,130
  808308:	10acc304 	addi	r2,r2,-19700
  80830c:	e0bffd15 	stw	r2,-12(fp)
					"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
					"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
					"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
  808310:	e03ffe15 	stw	zero,-8(fp)
  808314:	00000c06 	br	808348 <put_rc+0x58>
		while (*str++)
  808318:	0001883a 	nop
  80831c:	e0bffd17 	ldw	r2,-12(fp)
  808320:	10c00044 	addi	r3,r2,1
  808324:	e0fffd15 	stw	r3,-12(fp)
  808328:	10800003 	ldbu	r2,0(r2)
  80832c:	10803fcc 	andi	r2,r2,255
  808330:	1080201c 	xori	r2,r2,128
  808334:	10bfe004 	addi	r2,r2,-128
  808338:	103ff81e 	bne	r2,zero,80831c <__alt_data_end+0xff80831c>
					"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
					"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
					"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
  80833c:	e0bffe17 	ldw	r2,-8(fp)
  808340:	10800044 	addi	r2,r2,1
  808344:	e0bffe15 	stw	r2,-8(fp)
  808348:	e0fffe17 	ldw	r3,-8(fp)
  80834c:	e0bfff17 	ldw	r2,-4(fp)
  808350:	18800626 	beq	r3,r2,80836c <put_rc+0x7c>
  808354:	e0bffd17 	ldw	r2,-12(fp)
  808358:	10800003 	ldbu	r2,0(r2)
  80835c:	10803fcc 	andi	r2,r2,255
  808360:	1080201c 	xori	r2,r2,128
  808364:	10bfe004 	addi	r2,r2,-128
  808368:	103feb1e 	bne	r2,zero,808318 <__alt_data_end+0xff808318>
		while (*str++)
			;
	}
	xprintf("rc=%u FR_%s\n", (uint32_t) rc, str);
  80836c:	e1bffd17 	ldw	r6,-12(fp)
  808370:	e17fff17 	ldw	r5,-4(fp)
  808374:	010020b4 	movhi	r4,130
  808378:	212cf804 	addi	r4,r4,-19488
  80837c:	0809d0c0 	call	809d0c <xprintf>
}
  808380:	0001883a 	nop
  808384:	e037883a 	mov	sp,fp
  808388:	dfc00117 	ldw	ra,4(sp)
  80838c:	df000017 	ldw	fp,0(sp)
  808390:	dec00204 	addi	sp,sp,8
  808394:	f800283a 	ret

00808398 <display_help>:

static
void display_help(void) {
  808398:	defffe04 	addi	sp,sp,-8
  80839c:	dfc00115 	stw	ra,4(sp)
  8083a0:	df000015 	stw	fp,0(sp)
  8083a4:	d839883a 	mov	fp,sp
	xputs("dd <phy_drv#> [<sector>] - Dump sector\n"
  8083a8:	010020b4 	movhi	r4,130
  8083ac:	212cfc04 	addi	r4,r4,-19472
  8083b0:	0809ae00 	call	809ae0 <xputs>
			"fp -  (to be added by you) \n"
			"fr <len> - Read file\n"
			"fs [<path>] - Show logical drive status\n"
			"fz [<len>] - Get/Set transfer unit for fr/fw commands\n"
			"h view help (this)\n");
}
  8083b4:	0001883a 	nop
  8083b8:	e037883a 	mov	sp,fp
  8083bc:	dfc00117 	ldw	ra,4(sp)
  8083c0:	df000017 	ldw	fp,0(sp)
  8083c4:	dec00204 	addi	sp,sp,8
  8083c8:	f800283a 	ret

008083cc <main>:

/***************************************************************************/
/*  main                                                                   */
/***************************************************************************/
int main(void) {
  8083cc:	deffdd04 	addi	sp,sp,-140
  8083d0:	dfc02215 	stw	ra,136(sp)
  8083d4:	df002115 	stw	fp,132(sp)
  8083d8:	dc002015 	stw	r16,128(sp)
  8083dc:	df002104 	addi	fp,sp,132
	int fifospace;
	char *ptr, *ptr2;
	long p1, p2, p3;
	uint8_t res, b1, drv = 0;
  8083e0:	e03fe805 	stb	zero,-96(fp)
	uint16_t w1;
	uint32_t s1, s2, cnt, blen = sizeof(Buff);
  8083e4:	00808004 	movi	r2,512
  8083e8:	e0bfea15 	stw	r2,-88(fp)
	static const uint8_t ft[] = { 0, 12, 16, 32 };
	uint32_t ofs = 0, sect = 0, blk[2];
  8083ec:	e03feb15 	stw	zero,-84(fp)
  8083f0:	e03fec15 	stw	zero,-80(fp)
	alt_up_audio_dev * audio_dev;
	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;
	// open the Audio port
	audio_dev = alt_up_audio_open_dev("/dev/Audio");
  8083f4:	010020b4 	movhi	r4,130
  8083f8:	212d9804 	addi	r4,r4,-18848
  8083fc:	0819a9c0 	call	819a9c <alt_up_audio_open_dev>
  808400:	e0bfef15 	stw	r2,-68(fp)
	if (audio_dev == NULL)
  808404:	e0bfef17 	ldw	r2,-68(fp)
  808408:	1000041e 	bne	r2,zero,80841c <main+0x50>
		alt_printf("Error: could not open audio device \n");
  80840c:	010020b4 	movhi	r4,130
  808410:	212d9b04 	addi	r4,r4,-18836
  808414:	08177240 	call	817724 <alt_printf>
  808418:	00000306 	br	808428 <main+0x5c>
	else
		alt_printf("Opened audio device \n");
  80841c:	010020b4 	movhi	r4,130
  808420:	212da504 	addi	r4,r4,-18796
  808424:	08177240 	call	817724 <alt_printf>

	IoInit();
  808428:	080815c0 	call	80815c <IoInit>

	IOWR(SEVEN_SEG_PIO_BASE, 1, 0x0007);
  80842c:	00c001c4 	movi	r3,7
  808430:	00804034 	movhi	r2,256
  808434:	10842104 	addi	r2,r2,4228
  808438:	10c00035 	stwio	r3,0(r2)

	xputs(PSTR("FatFs module test monitor\n"));
  80843c:	010020b4 	movhi	r4,130
  808440:	212dab04 	addi	r4,r4,-18772
  808444:	0809ae00 	call	809ae0 <xputs>
	xputs(_USE_LFN ? "LFN Enabled" : "LFN Disabled");
  808448:	010020b4 	movhi	r4,130
  80844c:	212db204 	addi	r4,r4,-18744
  808450:	0809ae00 	call	809ae0 <xputs>
	xprintf(", Code page: %u\n", _CODE_PAGE);
  808454:	01413884 	movi	r5,1250
  808458:	010020b4 	movhi	r4,130
  80845c:	212db604 	addi	r4,r4,-18728
  808460:	0809d0c0 	call	809d0c <xprintf>

	display_help();
  808464:	08083980 	call	808398 <display_help>
	Finfo.lfsize = sizeof(Lfname);
#endif

	for (;;) {

		get_line(Line, sizeof(Line));
  808468:	01404004 	movi	r5,256
  80846c:	010020b4 	movhi	r4,130
  808470:	2138a904 	addi	r4,r4,-7516
  808474:	080a0f00 	call	80a0f0 <get_line>

		ptr = Line;
  808478:	008020b4 	movhi	r2,130
  80847c:	10b8a904 	addi	r2,r2,-7516
  808480:	e0bff315 	stw	r2,-52(fp)
		switch (*ptr++) {
  808484:	e0bff317 	ldw	r2,-52(fp)
  808488:	10c00044 	addi	r3,r2,1
  80848c:	e0fff315 	stw	r3,-52(fp)
  808490:	10800003 	ldbu	r2,0(r2)
  808494:	10803fcc 	andi	r2,r2,255
  808498:	1080201c 	xori	r2,r2,128
  80849c:	10bfe004 	addi	r2,r2,-128
  8084a0:	10bfe784 	addi	r2,r2,-98
  8084a4:	10c00328 	cmpgeui	r3,r2,12
  8084a8:	183fef1e 	bne	r3,zero,808468 <__alt_data_end+0xff808468>
  8084ac:	100690ba 	slli	r3,r2,2
  8084b0:	00802074 	movhi	r2,129
  8084b4:	10a13104 	addi	r2,r2,-31548
  8084b8:	1885883a 	add	r2,r3,r2
  8084bc:	10800017 	ldw	r2,0(r2)
  8084c0:	1000683a 	jmp	r2
  8084c4:	00808aa8 	cmpgeui	r2,zero,554
  8084c8:	00808468 	cmpgeui	r2,zero,529
  8084cc:	008085d8 	cmpnei	r2,zero,535
  8084d0:	00808468 	cmpgeui	r2,zero,529
  8084d4:	00808c54 	movui	r2,561
  8084d8:	00808468 	cmpgeui	r2,zero,529
  8084dc:	008097f8 	rdprs	r2,zero,607
  8084e0:	00808468 	cmpgeui	r2,zero,529
  8084e4:	00808468 	cmpgeui	r2,zero,529
  8084e8:	00808468 	cmpgeui	r2,zero,529
  8084ec:	00808468 	cmpgeui	r2,zero,529
  8084f0:	008084f4 	movhi	r2,531

		case 'm': /* System memroy/register controls */
			switch (*ptr++) {
  8084f4:	e0bff317 	ldw	r2,-52(fp)
  8084f8:	10c00044 	addi	r3,r2,1
  8084fc:	e0fff315 	stw	r3,-52(fp)
  808500:	10800003 	ldbu	r2,0(r2)
  808504:	10803fcc 	andi	r2,r2,255
  808508:	1080201c 	xori	r2,r2,128
  80850c:	10bfe004 	addi	r2,r2,-128
  808510:	10801920 	cmpeqi	r2,r2,100
  808514:	1000011e 	bne	r2,zero,80851c <main+0x150>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
				if (p2)
					put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
				break;
			}
			break;
  808518:	0004ba06 	br	809804 <main+0x1438>
		switch (*ptr++) {

		case 'm': /* System memroy/register controls */
			switch (*ptr++) {
			case 'd': /* md <address> [<count>] - Dump memory */
				if (!xatoi(&ptr, &p1))
  80851c:	e0fff404 	addi	r3,fp,-48
  808520:	e0bff304 	addi	r2,fp,-52
  808524:	180b883a 	mov	r5,r3
  808528:	1009883a 	mov	r4,r2
  80852c:	08098080 	call	809808 <xatoi>
  808530:	10002526 	beq	r2,zero,8085c8 <main+0x1fc>
					break;
				if (!xatoi(&ptr, &p2))
  808534:	e0fff504 	addi	r3,fp,-44
  808538:	e0bff304 	addi	r2,fp,-52
  80853c:	180b883a 	mov	r5,r3
  808540:	1009883a 	mov	r4,r2
  808544:	08098080 	call	809808 <xatoi>
  808548:	1000021e 	bne	r2,zero,808554 <main+0x188>
					p2 = 128;
  80854c:	00802004 	movi	r2,128
  808550:	e0bff515 	stw	r2,-44(fp)
				for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
  808554:	e0bff417 	ldw	r2,-48(fp)
  808558:	e0bff315 	stw	r2,-52(fp)
  80855c:	00000c06 	br	808590 <main+0x1c4>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
  808560:	e0bff317 	ldw	r2,-52(fp)
  808564:	e0fff317 	ldw	r3,-52(fp)
  808568:	01800404 	movi	r6,16
  80856c:	180b883a 	mov	r5,r3
  808570:	1009883a 	mov	r4,r2
  808574:	0809fd00 	call	809fd0 <put_dump>
			case 'd': /* md <address> [<count>] - Dump memory */
				if (!xatoi(&ptr, &p1))
					break;
				if (!xatoi(&ptr, &p2))
					p2 = 128;
				for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
  808578:	e0bff317 	ldw	r2,-52(fp)
  80857c:	10800404 	addi	r2,r2,16
  808580:	e0bff315 	stw	r2,-52(fp)
  808584:	e0bff517 	ldw	r2,-44(fp)
  808588:	10bffc04 	addi	r2,r2,-16
  80858c:	e0bff515 	stw	r2,-44(fp)
  808590:	e0bff517 	ldw	r2,-44(fp)
  808594:	10800408 	cmpgei	r2,r2,16
  808598:	103ff11e 	bne	r2,zero,808560 <__alt_data_end+0xff808560>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
				if (p2)
  80859c:	e0bff517 	ldw	r2,-44(fp)
  8085a0:	10000b26 	beq	r2,zero,8085d0 <main+0x204>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
  8085a4:	e0bff317 	ldw	r2,-52(fp)
  8085a8:	e0fff317 	ldw	r3,-52(fp)
  8085ac:	1809883a 	mov	r4,r3
  8085b0:	e0fff517 	ldw	r3,-44(fp)
  8085b4:	180d883a 	mov	r6,r3
  8085b8:	200b883a 	mov	r5,r4
  8085bc:	1009883a 	mov	r4,r2
  8085c0:	0809fd00 	call	809fd0 <put_dump>
				break;
  8085c4:	00000206 	br	8085d0 <main+0x204>

		case 'm': /* System memroy/register controls */
			switch (*ptr++) {
			case 'd': /* md <address> [<count>] - Dump memory */
				if (!xatoi(&ptr, &p1))
					break;
  8085c8:	0001883a 	nop
  8085cc:	00048d06 	br	809804 <main+0x1438>
					p2 = 128;
				for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
				if (p2)
					put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
				break;
  8085d0:	0001883a 	nop
			}
			break;
  8085d4:	00048b06 	br	809804 <main+0x1438>

		case 'd': /* Disk I/O layer controls */
			switch (*ptr++) {
  8085d8:	e0bff317 	ldw	r2,-52(fp)
  8085dc:	10c00044 	addi	r3,r2,1
  8085e0:	e0fff315 	stw	r3,-52(fp)
  8085e4:	10800003 	ldbu	r2,0(r2)
  8085e8:	10803fcc 	andi	r2,r2,255
  8085ec:	1080201c 	xori	r2,r2,128
  8085f0:	10bfe004 	addi	r2,r2,-128
  8085f4:	10c01920 	cmpeqi	r3,r2,100
  8085f8:	18000a1e 	bne	r3,zero,808624 <main+0x258>
  8085fc:	10c01948 	cmpgei	r3,r2,101
  808600:	1800031e 	bne	r3,zero,808610 <main+0x244>
  808604:	108018e0 	cmpeqi	r2,r2,99
  808608:	1000e11e 	bne	r2,zero,808990 <main+0x5c4>
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
			}
			break; // end of Disk Controls //
  80860c:	00047d06 	br	809804 <main+0x1438>
				break;
			}
			break;

		case 'd': /* Disk I/O layer controls */
			switch (*ptr++) {
  808610:	10c01a60 	cmpeqi	r3,r2,105
  808614:	1800461e 	bne	r3,zero,808730 <main+0x364>
  808618:	10801ce0 	cmpeqi	r2,r2,115
  80861c:	1000541e 	bne	r2,zero,808770 <main+0x3a4>
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
			}
			break; // end of Disk Controls //
  808620:	00047806 	br	809804 <main+0x1438>
			break;

		case 'd': /* Disk I/O layer controls */
			switch (*ptr++) {
			case 'd': /* dd [<drv> [<lba>]] - Dump secrtor */
				if (!xatoi(&ptr, &p1)) {
  808624:	e0fff404 	addi	r3,fp,-48
  808628:	e0bff304 	addi	r2,fp,-52
  80862c:	180b883a 	mov	r5,r3
  808630:	1009883a 	mov	r4,r2
  808634:	08098080 	call	809808 <xatoi>
  808638:	1000031e 	bne	r2,zero,808648 <main+0x27c>
					p1 = drv;
  80863c:	e0bfe803 	ldbu	r2,-96(fp)
  808640:	e0bff415 	stw	r2,-48(fp)
  808644:	00000806 	br	808668 <main+0x29c>
				} else {
					if (!xatoi(&ptr, &p2))
  808648:	e0fff504 	addi	r3,fp,-44
  80864c:	e0bff304 	addi	r2,fp,-52
  808650:	180b883a 	mov	r5,r3
  808654:	1009883a 	mov	r4,r2
  808658:	08098080 	call	809808 <xatoi>
  80865c:	1000021e 	bne	r2,zero,808668 <main+0x29c>
						p2 = sect;
  808660:	e0bfec17 	ldw	r2,-80(fp)
  808664:	e0bff515 	stw	r2,-44(fp)
				}
				drv = (uint8_t) p1;
  808668:	e0bff417 	ldw	r2,-48(fp)
  80866c:	e0bfe805 	stb	r2,-96(fp)
				sect = p2 + 1;
  808670:	e0bff517 	ldw	r2,-44(fp)
  808674:	10800044 	addi	r2,r2,1
  808678:	e0bfec15 	stw	r2,-80(fp)
				res = disk_read((uint8_t ) p1, Buff, p2, 1);
  80867c:	e0bff417 	ldw	r2,-48(fp)
  808680:	10803fcc 	andi	r2,r2,255
  808684:	e0fff517 	ldw	r3,-44(fp)
  808688:	01c00044 	movi	r7,1
  80868c:	180d883a 	mov	r6,r3
  808690:	014020b4 	movhi	r5,130
  808694:	29779904 	addi	r5,r5,-8604
  808698:	1009883a 	mov	r4,r2
  80869c:	0800e080 	call	800e08 <ffs_DiskIORead>
  8086a0:	e0bff005 	stb	r2,-64(fp)
				if (res) {
  8086a4:	e0bff003 	ldbu	r2,-64(fp)
  8086a8:	10000626 	beq	r2,zero,8086c4 <main+0x2f8>
					xprintf("rc=%d\n", (uint16_t) res);
  8086ac:	e0bff003 	ldbu	r2,-64(fp)
  8086b0:	100b883a 	mov	r5,r2
  8086b4:	010020b4 	movhi	r4,130
  8086b8:	212dbb04 	addi	r4,r4,-18708
  8086bc:	0809d0c0 	call	809d0c <xprintf>
					break;
  8086c0:	0000f806 	br	808aa4 <main+0x6d8>
				}
				xprintf("D:%lu S:%lu\n", p1, p2);
  8086c4:	e0bff417 	ldw	r2,-48(fp)
  8086c8:	e0fff517 	ldw	r3,-44(fp)
  8086cc:	180d883a 	mov	r6,r3
  8086d0:	100b883a 	mov	r5,r2
  8086d4:	010020b4 	movhi	r4,130
  8086d8:	212dbd04 	addi	r4,r4,-18700
  8086dc:	0809d0c0 	call	809d0c <xprintf>
				for (ptr = (char *) Buff, ofs = 0; ofs < 0x200;
  8086e0:	008020b4 	movhi	r2,130
  8086e4:	10b79904 	addi	r2,r2,-8604
  8086e8:	e0bff315 	stw	r2,-52(fp)
  8086ec:	e03feb15 	stw	zero,-84(fp)
  8086f0:	00000b06 	br	808720 <main+0x354>
						ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
  8086f4:	e0bff317 	ldw	r2,-52(fp)
  8086f8:	01800404 	movi	r6,16
  8086fc:	e17feb17 	ldw	r5,-84(fp)
  808700:	1009883a 	mov	r4,r2
  808704:	0809fd00 	call	809fd0 <put_dump>
					xprintf("rc=%d\n", (uint16_t) res);
					break;
				}
				xprintf("D:%lu S:%lu\n", p1, p2);
				for (ptr = (char *) Buff, ofs = 0; ofs < 0x200;
						ptr += 16, ofs += 16)
  808708:	e0bff317 	ldw	r2,-52(fp)
  80870c:	10800404 	addi	r2,r2,16
  808710:	e0bff315 	stw	r2,-52(fp)
  808714:	e0bfeb17 	ldw	r2,-84(fp)
  808718:	10800404 	addi	r2,r2,16
  80871c:	e0bfeb15 	stw	r2,-84(fp)
				if (res) {
					xprintf("rc=%d\n", (uint16_t) res);
					break;
				}
				xprintf("D:%lu S:%lu\n", p1, p2);
				for (ptr = (char *) Buff, ofs = 0; ofs < 0x200;
  808720:	e0bfeb17 	ldw	r2,-84(fp)
  808724:	10808030 	cmpltui	r2,r2,512
  808728:	103ff21e 	bne	r2,zero,8086f4 <__alt_data_end+0xff8086f4>
						ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
				break;
  80872c:	0000dd06 	br	808aa4 <main+0x6d8>

			case 'i': /* di <drv> - Initialize disk */
				if (!xatoi(&ptr, &p1))
  808730:	e0fff404 	addi	r3,fp,-48
  808734:	e0bff304 	addi	r2,fp,-52
  808738:	180b883a 	mov	r5,r3
  80873c:	1009883a 	mov	r4,r2
  808740:	08098080 	call	809808 <xatoi>
  808744:	1000d026 	beq	r2,zero,808a88 <main+0x6bc>
					break;
				xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t ) p1));
  808748:	e0bff417 	ldw	r2,-48(fp)
  80874c:	10803fcc 	andi	r2,r2,255
  808750:	1009883a 	mov	r4,r2
  808754:	0800b840 	call	800b84 <ffs_DiskIOInitialize>
  808758:	10803fcc 	andi	r2,r2,255
  80875c:	100b883a 	mov	r5,r2
  808760:	010020b4 	movhi	r4,130
  808764:	212dbb04 	addi	r4,r4,-18708
  808768:	0809d0c0 	call	809d0c <xprintf>
				break;
  80876c:	0000cd06 	br	808aa4 <main+0x6d8>

			case 's': /* ds <drv> - Show disk status */
				if (!xatoi(&ptr, &p1))
  808770:	e0fff404 	addi	r3,fp,-48
  808774:	e0bff304 	addi	r2,fp,-52
  808778:	180b883a 	mov	r5,r3
  80877c:	1009883a 	mov	r4,r2
  808780:	08098080 	call	809808 <xatoi>
  808784:	1000c226 	beq	r2,zero,808a90 <main+0x6c4>
					break;
				if (disk_ioctl((uint8_t) p1, GET_SECTOR_COUNT, &p2) == RES_OK) {
  808788:	e0bff417 	ldw	r2,-48(fp)
  80878c:	10803fcc 	andi	r2,r2,255
  808790:	e0fff504 	addi	r3,fp,-44
  808794:	180d883a 	mov	r6,r3
  808798:	01400044 	movi	r5,1
  80879c:	1009883a 	mov	r4,r2
  8087a0:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8087a4:	1000051e 	bne	r2,zero,8087bc <main+0x3f0>
					xprintf("Drive size: %lu sectors\n", p2);
  8087a8:	e0bff517 	ldw	r2,-44(fp)
  8087ac:	100b883a 	mov	r5,r2
  8087b0:	010020b4 	movhi	r4,130
  8087b4:	212dc104 	addi	r4,r4,-18684
  8087b8:	0809d0c0 	call	809d0c <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, GET_SECTOR_SIZE, &w1) == RES_OK) {
  8087bc:	e0bff417 	ldw	r2,-48(fp)
  8087c0:	10803fcc 	andi	r2,r2,255
  8087c4:	e0fff784 	addi	r3,fp,-34
  8087c8:	180d883a 	mov	r6,r3
  8087cc:	01400084 	movi	r5,2
  8087d0:	1009883a 	mov	r4,r2
  8087d4:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8087d8:	1000061e 	bne	r2,zero,8087f4 <main+0x428>
					xprintf("Sector size: %u bytes\n", w1);
  8087dc:	e0bff78b 	ldhu	r2,-34(fp)
  8087e0:	10bfffcc 	andi	r2,r2,65535
  8087e4:	100b883a 	mov	r5,r2
  8087e8:	010020b4 	movhi	r4,130
  8087ec:	212dc804 	addi	r4,r4,-18656
  8087f0:	0809d0c0 	call	809d0c <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, GET_BLOCK_SIZE, &p2) == RES_OK) {
  8087f4:	e0bff417 	ldw	r2,-48(fp)
  8087f8:	10803fcc 	andi	r2,r2,255
  8087fc:	e0fff504 	addi	r3,fp,-44
  808800:	180d883a 	mov	r6,r3
  808804:	014000c4 	movi	r5,3
  808808:	1009883a 	mov	r4,r2
  80880c:	08010980 	call	801098 <ffs_DiskIOIoctl>
  808810:	1000051e 	bne	r2,zero,808828 <main+0x45c>
					xprintf("Block size: %lu sectors\n", p2);
  808814:	e0bff517 	ldw	r2,-44(fp)
  808818:	100b883a 	mov	r5,r2
  80881c:	010020b4 	movhi	r4,130
  808820:	212dce04 	addi	r4,r4,-18632
  808824:	0809d0c0 	call	809d0c <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_TYPE, &b1) == RES_OK) {
  808828:	e0bff417 	ldw	r2,-48(fp)
  80882c:	10803fcc 	andi	r2,r2,255
  808830:	e0fff704 	addi	r3,fp,-36
  808834:	180d883a 	mov	r6,r3
  808838:	01400284 	movi	r5,10
  80883c:	1009883a 	mov	r4,r2
  808840:	08010980 	call	801098 <ffs_DiskIOIoctl>
  808844:	1000061e 	bne	r2,zero,808860 <main+0x494>
					xprintf("MMC/SDC type: %u\n", b1);
  808848:	e0bff703 	ldbu	r2,-36(fp)
  80884c:	10803fcc 	andi	r2,r2,255
  808850:	100b883a 	mov	r5,r2
  808854:	010020b4 	movhi	r4,130
  808858:	212dd504 	addi	r4,r4,-18604
  80885c:	0809d0c0 	call	809d0c <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_CSD, Buff) == RES_OK) {
  808860:	e0bff417 	ldw	r2,-48(fp)
  808864:	10803fcc 	andi	r2,r2,255
  808868:	018020b4 	movhi	r6,130
  80886c:	31b79904 	addi	r6,r6,-8604
  808870:	014002c4 	movi	r5,11
  808874:	1009883a 	mov	r4,r2
  808878:	08010980 	call	801098 <ffs_DiskIOIoctl>
  80887c:	1000081e 	bne	r2,zero,8088a0 <main+0x4d4>
					xputs("CSD:\n");
  808880:	010020b4 	movhi	r4,130
  808884:	212dda04 	addi	r4,r4,-18584
  808888:	0809ae00 	call	809ae0 <xputs>
					put_dump(Buff, 0, 16);
  80888c:	01800404 	movi	r6,16
  808890:	000b883a 	mov	r5,zero
  808894:	010020b4 	movhi	r4,130
  808898:	21379904 	addi	r4,r4,-8604
  80889c:	0809fd00 	call	809fd0 <put_dump>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_CID, Buff) == RES_OK) {
  8088a0:	e0bff417 	ldw	r2,-48(fp)
  8088a4:	10803fcc 	andi	r2,r2,255
  8088a8:	018020b4 	movhi	r6,130
  8088ac:	31b79904 	addi	r6,r6,-8604
  8088b0:	01400304 	movi	r5,12
  8088b4:	1009883a 	mov	r4,r2
  8088b8:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8088bc:	1000081e 	bne	r2,zero,8088e0 <main+0x514>
					xputs("CID:\n");
  8088c0:	010020b4 	movhi	r4,130
  8088c4:	212ddc04 	addi	r4,r4,-18576
  8088c8:	0809ae00 	call	809ae0 <xputs>
					put_dump(Buff, 0, 16);
  8088cc:	01800404 	movi	r6,16
  8088d0:	000b883a 	mov	r5,zero
  8088d4:	010020b4 	movhi	r4,130
  8088d8:	21379904 	addi	r4,r4,-8604
  8088dc:	0809fd00 	call	809fd0 <put_dump>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_OCR, Buff) == RES_OK) {
  8088e0:	e0bff417 	ldw	r2,-48(fp)
  8088e4:	10803fcc 	andi	r2,r2,255
  8088e8:	018020b4 	movhi	r6,130
  8088ec:	31b79904 	addi	r6,r6,-8604
  8088f0:	01400344 	movi	r5,13
  8088f4:	1009883a 	mov	r4,r2
  8088f8:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8088fc:	1000081e 	bne	r2,zero,808920 <main+0x554>
					xputs("OCR:\n");
  808900:	010020b4 	movhi	r4,130
  808904:	212dde04 	addi	r4,r4,-18568
  808908:	0809ae00 	call	809ae0 <xputs>
					put_dump(Buff, 0, 4);
  80890c:	01800104 	movi	r6,4
  808910:	000b883a 	mov	r5,zero
  808914:	010020b4 	movhi	r4,130
  808918:	21379904 	addi	r4,r4,-8604
  80891c:	0809fd00 	call	809fd0 <put_dump>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
  808920:	e0bff417 	ldw	r2,-48(fp)
  808924:	10803fcc 	andi	r2,r2,255
  808928:	018020b4 	movhi	r6,130
  80892c:	31b79904 	addi	r6,r6,-8604
  808930:	01400384 	movi	r5,14
  808934:	1009883a 	mov	r4,r2
  808938:	08010980 	call	801098 <ffs_DiskIOIoctl>
  80893c:	1000561e 	bne	r2,zero,808a98 <main+0x6cc>
					xputs("SD Status:\n");
  808940:	010020b4 	movhi	r4,130
  808944:	212de004 	addi	r4,r4,-18560
  808948:	0809ae00 	call	809ae0 <xputs>
					for (s1 = 0; s1 < 64; s1 += 16)
  80894c:	e03fe915 	stw	zero,-92(fp)
  808950:	00000b06 	br	808980 <main+0x5b4>
						put_dump(Buff + s1, s1, 16);
  808954:	e0ffe917 	ldw	r3,-92(fp)
  808958:	008020b4 	movhi	r2,130
  80895c:	10b79904 	addi	r2,r2,-8604
  808960:	1885883a 	add	r2,r3,r2
  808964:	01800404 	movi	r6,16
  808968:	e17fe917 	ldw	r5,-92(fp)
  80896c:	1009883a 	mov	r4,r2
  808970:	0809fd00 	call	809fd0 <put_dump>
					xputs("OCR:\n");
					put_dump(Buff, 0, 4);
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
					xputs("SD Status:\n");
					for (s1 = 0; s1 < 64; s1 += 16)
  808974:	e0bfe917 	ldw	r2,-92(fp)
  808978:	10800404 	addi	r2,r2,16
  80897c:	e0bfe915 	stw	r2,-92(fp)
  808980:	e0bfe917 	ldw	r2,-92(fp)
  808984:	10801030 	cmpltui	r2,r2,64
  808988:	103ff21e 	bne	r2,zero,808954 <__alt_data_end+0xff808954>
						put_dump(Buff + s1, s1, 16);
				}
				break;
  80898c:	00004206 	br	808a98 <main+0x6cc>

			case 'c': /* Disk ioctl */
				switch (*ptr++) {
  808990:	e0bff317 	ldw	r2,-52(fp)
  808994:	10c00044 	addi	r3,r2,1
  808998:	e0fff315 	stw	r3,-52(fp)
  80899c:	10800003 	ldbu	r2,0(r2)
  8089a0:	10803fcc 	andi	r2,r2,255
  8089a4:	1080201c 	xori	r2,r2,128
  8089a8:	10bfe004 	addi	r2,r2,-128
  8089ac:	10c01960 	cmpeqi	r3,r2,101
  8089b0:	1800141e 	bne	r3,zero,808a04 <main+0x638>
  8089b4:	10801ce0 	cmpeqi	r2,r2,115
  8089b8:	1000011e 	bne	r2,zero,8089c0 <main+0x5f4>
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
  8089bc:	00003806 	br	808aa0 <main+0x6d4>
				break;

			case 'c': /* Disk ioctl */
				switch (*ptr++) {
				case 's': /* dcs <drv> - CTRL_SYNC */
					if (!xatoi(&ptr, &p1))
  8089c0:	e0fff404 	addi	r3,fp,-48
  8089c4:	e0bff304 	addi	r2,fp,-52
  8089c8:	180b883a 	mov	r5,r3
  8089cc:	1009883a 	mov	r4,r2
  8089d0:	08098080 	call	809808 <xatoi>
  8089d4:	10002a26 	beq	r2,zero,808a80 <main+0x6b4>
						break;
					xprintf("rc=%d\n", disk_ioctl((uint8_t ) p1, CTRL_SYNC, 0));
  8089d8:	e0bff417 	ldw	r2,-48(fp)
  8089dc:	10803fcc 	andi	r2,r2,255
  8089e0:	000d883a 	mov	r6,zero
  8089e4:	000b883a 	mov	r5,zero
  8089e8:	1009883a 	mov	r4,r2
  8089ec:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8089f0:	100b883a 	mov	r5,r2
  8089f4:	010020b4 	movhi	r4,130
  8089f8:	212dbb04 	addi	r4,r4,-18708
  8089fc:	0809d0c0 	call	809d0c <xprintf>
					break;
  808a00:	00002006 	br	808a84 <main+0x6b8>
				case 'e': /* dce <drv> <start> <end> - CTRL_ERASE_SECTOR */
					if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long *) &blk[0])
  808a04:	e0fff404 	addi	r3,fp,-48
  808a08:	e0bff304 	addi	r2,fp,-52
  808a0c:	180b883a 	mov	r5,r3
  808a10:	1009883a 	mov	r4,r2
  808a14:	08098080 	call	809808 <xatoi>
  808a18:	10002126 	beq	r2,zero,808aa0 <main+0x6d4>
  808a1c:	e0fffa04 	addi	r3,fp,-24
  808a20:	e0bff304 	addi	r2,fp,-52
  808a24:	180b883a 	mov	r5,r3
  808a28:	1009883a 	mov	r4,r2
  808a2c:	08098080 	call	809808 <xatoi>
  808a30:	10001b26 	beq	r2,zero,808aa0 <main+0x6d4>
							|| !xatoi(&ptr, (long *) &blk[1]))
  808a34:	e0bffa04 	addi	r2,fp,-24
  808a38:	10c00104 	addi	r3,r2,4
  808a3c:	e0bff304 	addi	r2,fp,-52
  808a40:	180b883a 	mov	r5,r3
  808a44:	1009883a 	mov	r4,r2
  808a48:	08098080 	call	809808 <xatoi>
  808a4c:	10001426 	beq	r2,zero,808aa0 <main+0x6d4>
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
  808a50:	e0bff417 	ldw	r2,-48(fp)
  808a54:	10803fcc 	andi	r2,r2,255
  808a58:	e0fffa04 	addi	r3,fp,-24
  808a5c:	180d883a 	mov	r6,r3
  808a60:	01400104 	movi	r5,4
  808a64:	1009883a 	mov	r4,r2
  808a68:	08010980 	call	801098 <ffs_DiskIOIoctl>
					break;
				case 'e': /* dce <drv> <start> <end> - CTRL_ERASE_SECTOR */
					if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long *) &blk[0])
							|| !xatoi(&ptr, (long *) &blk[1]))
						break;
					xprintf("rc=%d\n",
  808a6c:	100b883a 	mov	r5,r2
  808a70:	010020b4 	movhi	r4,130
  808a74:	212dbb04 	addi	r4,r4,-18708
  808a78:	0809d0c0 	call	809d0c <xprintf>
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
  808a7c:	00000106 	br	808a84 <main+0x6b8>

			case 'c': /* Disk ioctl */
				switch (*ptr++) {
				case 's': /* dcs <drv> - CTRL_SYNC */
					if (!xatoi(&ptr, &p1))
						break;
  808a80:	0001883a 	nop
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
  808a84:	00000606 	br	808aa0 <main+0x6d4>
					put_dump((uint8_t *) ptr, ofs, 16);
				break;

			case 'i': /* di <drv> - Initialize disk */
				if (!xatoi(&ptr, &p1))
					break;
  808a88:	0001883a 	nop
  808a8c:	00035d06 	br	809804 <main+0x1438>
				xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t ) p1));
				break;

			case 's': /* ds <drv> - Show disk status */
				if (!xatoi(&ptr, &p1))
					break;
  808a90:	0001883a 	nop
  808a94:	00035b06 	br	809804 <main+0x1438>
				if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
					xputs("SD Status:\n");
					for (s1 = 0; s1 < 64; s1 += 16)
						put_dump(Buff + s1, s1, 16);
				}
				break;
  808a98:	0001883a 	nop
  808a9c:	00035906 	br	809804 <main+0x1438>
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
  808aa0:	0001883a 	nop
			}
			break; // end of Disk Controls //
  808aa4:	00035706 	br	809804 <main+0x1438>

		case 'b': /* Buffer controls */
			switch (*ptr++) {
  808aa8:	e0bff317 	ldw	r2,-52(fp)
  808aac:	10c00044 	addi	r3,r2,1
  808ab0:	e0fff315 	stw	r3,-52(fp)
  808ab4:	10800003 	ldbu	r2,0(r2)
  808ab8:	10803fcc 	andi	r2,r2,255
  808abc:	1080201c 	xori	r2,r2,128
  808ac0:	10bfe004 	addi	r2,r2,-128
  808ac4:	10c019a0 	cmpeqi	r3,r2,102
  808ac8:	18004c1e 	bne	r3,zero,808bfc <main+0x830>
  808acc:	10c01ca0 	cmpeqi	r3,r2,114
  808ad0:	1800241e 	bne	r3,zero,808b64 <main+0x798>
  808ad4:	10801920 	cmpeqi	r2,r2,100
  808ad8:	1000011e 	bne	r2,zero,808ae0 <main+0x714>
					break;
				memset(Buff, (uint8_t) p1, sizeof(Buff));
				break;

			}
			break; // end of Buffer Controls //
  808adc:	00034906 	br	809804 <main+0x1438>
			break; // end of Disk Controls //

		case 'b': /* Buffer controls */
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
  808ae0:	e0fff404 	addi	r3,fp,-48
  808ae4:	e0bff304 	addi	r2,fp,-52
  808ae8:	180b883a 	mov	r5,r3
  808aec:	1009883a 	mov	r4,r2
  808af0:	08098080 	call	809808 <xatoi>
  808af4:	10004f26 	beq	r2,zero,808c34 <main+0x868>
					break;
				for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt;
  808af8:	e0fff417 	ldw	r3,-48(fp)
  808afc:	008020b4 	movhi	r2,130
  808b00:	10b79904 	addi	r2,r2,-8604
  808b04:	1885883a 	add	r2,r3,r2
  808b08:	e0bff315 	stw	r2,-52(fp)
  808b0c:	e0bff417 	ldw	r2,-48(fp)
  808b10:	e0bfeb15 	stw	r2,-84(fp)
  808b14:	00800804 	movi	r2,32
  808b18:	e0bff915 	stw	r2,-28(fp)
  808b1c:	00000e06 	br	808b58 <main+0x78c>
						cnt--, ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
  808b20:	e0bff317 	ldw	r2,-52(fp)
  808b24:	01800404 	movi	r6,16
  808b28:	e17feb17 	ldw	r5,-84(fp)
  808b2c:	1009883a 	mov	r4,r2
  808b30:	0809fd00 	call	809fd0 <put_dump>
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
				for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt;
						cnt--, ptr += 16, ofs += 16)
  808b34:	e0bff917 	ldw	r2,-28(fp)
  808b38:	10bfffc4 	addi	r2,r2,-1
  808b3c:	e0bff915 	stw	r2,-28(fp)
  808b40:	e0bff317 	ldw	r2,-52(fp)
  808b44:	10800404 	addi	r2,r2,16
  808b48:	e0bff315 	stw	r2,-52(fp)
  808b4c:	e0bfeb17 	ldw	r2,-84(fp)
  808b50:	10800404 	addi	r2,r2,16
  808b54:	e0bfeb15 	stw	r2,-84(fp)
		case 'b': /* Buffer controls */
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
				for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt;
  808b58:	e0bff917 	ldw	r2,-28(fp)
  808b5c:	103ff01e 	bne	r2,zero,808b20 <__alt_data_end+0xff808b20>
						cnt--, ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
				break;
  808b60:	00003b06 	br	808c50 <main+0x884>

			case 'r': /* br <drv> <lba> [<num>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1))
  808b64:	e0fff404 	addi	r3,fp,-48
  808b68:	e0bff304 	addi	r2,fp,-52
  808b6c:	180b883a 	mov	r5,r3
  808b70:	1009883a 	mov	r4,r2
  808b74:	08098080 	call	809808 <xatoi>
  808b78:	10003026 	beq	r2,zero,808c3c <main+0x870>
					break;
				if (!xatoi(&ptr, &p2))
  808b7c:	e0fff504 	addi	r3,fp,-44
  808b80:	e0bff304 	addi	r2,fp,-52
  808b84:	180b883a 	mov	r5,r3
  808b88:	1009883a 	mov	r4,r2
  808b8c:	08098080 	call	809808 <xatoi>
  808b90:	10002c26 	beq	r2,zero,808c44 <main+0x878>
					break;
				if (!xatoi(&ptr, &p3))
  808b94:	e0fff604 	addi	r3,fp,-40
  808b98:	e0bff304 	addi	r2,fp,-52
  808b9c:	180b883a 	mov	r5,r3
  808ba0:	1009883a 	mov	r4,r2
  808ba4:	08098080 	call	809808 <xatoi>
  808ba8:	1000021e 	bne	r2,zero,808bb4 <main+0x7e8>
					p3 = 1;
  808bac:	00800044 	movi	r2,1
  808bb0:	e0bff615 	stw	r2,-40(fp)
				xprintf("rc=%u\n",
						(uint16_t) disk_read((uint8_t ) p1, Buff, p2, p3));
  808bb4:	e0bff417 	ldw	r2,-48(fp)
  808bb8:	10c03fcc 	andi	r3,r2,255
  808bbc:	e0bff517 	ldw	r2,-44(fp)
  808bc0:	1009883a 	mov	r4,r2
  808bc4:	e0bff617 	ldw	r2,-40(fp)
  808bc8:	10803fcc 	andi	r2,r2,255
  808bcc:	100f883a 	mov	r7,r2
  808bd0:	200d883a 	mov	r6,r4
  808bd4:	014020b4 	movhi	r5,130
  808bd8:	29779904 	addi	r5,r5,-8604
  808bdc:	1809883a 	mov	r4,r3
  808be0:	0800e080 	call	800e08 <ffs_DiskIORead>
					break;
				if (!xatoi(&ptr, &p2))
					break;
				if (!xatoi(&ptr, &p3))
					p3 = 1;
				xprintf("rc=%u\n",
  808be4:	10bfffcc 	andi	r2,r2,65535
  808be8:	100b883a 	mov	r5,r2
  808bec:	010020b4 	movhi	r4,130
  808bf0:	212de304 	addi	r4,r4,-18548
  808bf4:	0809d0c0 	call	809d0c <xprintf>
						(uint16_t) disk_read((uint8_t ) p1, Buff, p2, p3));
				break;
  808bf8:	00001506 	br	808c50 <main+0x884>

			case 'f': /* bf <val> - Fill working buffer */
				if (!xatoi(&ptr, &p1))
  808bfc:	e0fff404 	addi	r3,fp,-48
  808c00:	e0bff304 	addi	r2,fp,-52
  808c04:	180b883a 	mov	r5,r3
  808c08:	1009883a 	mov	r4,r2
  808c0c:	08098080 	call	809808 <xatoi>
  808c10:	10000e26 	beq	r2,zero,808c4c <main+0x880>
					break;
				memset(Buff, (uint8_t) p1, sizeof(Buff));
  808c14:	e0bff417 	ldw	r2,-48(fp)
  808c18:	10803fcc 	andi	r2,r2,255
  808c1c:	01808004 	movi	r6,512
  808c20:	100b883a 	mov	r5,r2
  808c24:	010020b4 	movhi	r4,130
  808c28:	21379904 	addi	r4,r4,-8604
  808c2c:	080a50c0 	call	80a50c <memset>
				break;
  808c30:	00000706 	br	808c50 <main+0x884>

		case 'b': /* Buffer controls */
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
  808c34:	0001883a 	nop
  808c38:	0002f206 	br	809804 <main+0x1438>
					put_dump((uint8_t *) ptr, ofs, 16);
				break;

			case 'r': /* br <drv> <lba> [<num>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
  808c3c:	0001883a 	nop
  808c40:	0002f006 	br	809804 <main+0x1438>
				if (!xatoi(&ptr, &p2))
					break;
  808c44:	0001883a 	nop
  808c48:	0002ee06 	br	809804 <main+0x1438>
						(uint16_t) disk_read((uint8_t ) p1, Buff, p2, p3));
				break;

			case 'f': /* bf <val> - Fill working buffer */
				if (!xatoi(&ptr, &p1))
					break;
  808c4c:	0001883a 	nop
				memset(Buff, (uint8_t) p1, sizeof(Buff));
				break;

			}
			break; // end of Buffer Controls //
  808c50:	0002ec06 	br	809804 <main+0x1438>

		case 'f': /* FatFS API controls */
			switch (*ptr++) {
  808c54:	e0bff317 	ldw	r2,-52(fp)
  808c58:	10c00044 	addi	r3,r2,1
  808c5c:	e0fff315 	stw	r3,-52(fp)
  808c60:	10800003 	ldbu	r2,0(r2)
  808c64:	10803fcc 	andi	r2,r2,255
  808c68:	1080201c 	xori	r2,r2,128
  808c6c:	10bfe004 	addi	r2,r2,-128
  808c70:	10bfe744 	addi	r2,r2,-99
  808c74:	10c00628 	cmpgeui	r3,r2,24
  808c78:	1802e11e 	bne	r3,zero,809800 <main+0x1434>
  808c7c:	100690ba 	slli	r3,r2,2
  808c80:	00802074 	movhi	r2,129
  808c84:	10a32504 	addi	r2,r2,-29548
  808c88:	1885883a 	add	r2,r3,r2
  808c8c:	10800017 	ldw	r2,0(r2)
  808c90:	1000683a 	jmp	r2
  808c94:	00808cf4 	movhi	r2,563
  808c98:	00808d0c 	andi	r2,zero,564
  808c9c:	00808de8 	cmpgeui	r2,zero,567
  808ca0:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808ca4:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808ca8:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cac:	00808e5c 	xori	r2,zero,569
  808cb0:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cb4:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cb8:	00808eb0 	cmpltui	r2,zero,570
  808cbc:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cc0:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cc4:	008091a0 	cmpeqi	r2,zero,582
  808cc8:	00809210 	cmplti	r2,zero,584
  808ccc:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cd0:	008094d8 	cmpnei	r2,zero,595
  808cd4:	008095f0 	cmpltui	r2,zero,599
  808cd8:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cdc:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808ce0:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808ce4:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808ce8:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cec:	00809800 	call	80980 <__alt_mem_sdram_0-0x77f680>
  808cf0:	00809778 	rdprs	r2,zero,605

			case 'c': /* fc - Close a file */
				put_rc(f_close(&File1));
  808cf4:	010020b4 	movhi	r4,130
  808cf8:	21370a04 	addi	r4,r4,-9176
  808cfc:	080516c0 	call	80516c <f_close>
  808d00:	1009883a 	mov	r4,r2
  808d04:	08082f00 	call	8082f0 <put_rc>
				break;
  808d08:	0002ba06 	br	8097f4 <main+0x1428>

			case 'd': /* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1))
  808d0c:	e0fff404 	addi	r3,fp,-48
  808d10:	e0bff304 	addi	r2,fp,-52
  808d14:	180b883a 	mov	r5,r3
  808d18:	1009883a 	mov	r4,r2
  808d1c:	08098080 	call	809808 <xatoi>
  808d20:	1002a726 	beq	r2,zero,8097c0 <main+0x13f4>
					break;
				ofs = File1.fptr;
  808d24:	008020b4 	movhi	r2,130
  808d28:	10b70a04 	addi	r2,r2,-9176
  808d2c:	10800217 	ldw	r2,8(r2)
  808d30:	e0bfeb15 	stw	r2,-84(fp)
				while (p1) {
  808d34:	00002706 	br	808dd4 <main+0xa08>
					if ((uint32_t) p1 >= 16) {
  808d38:	e0bff417 	ldw	r2,-48(fp)
  808d3c:	10800430 	cmpltui	r2,r2,16
  808d40:	1000061e 	bne	r2,zero,808d5c <main+0x990>
						cnt = 16;
  808d44:	00800404 	movi	r2,16
  808d48:	e0bff915 	stw	r2,-28(fp)
						p1 -= 16;
  808d4c:	e0bff417 	ldw	r2,-48(fp)
  808d50:	10bffc04 	addi	r2,r2,-16
  808d54:	e0bff415 	stw	r2,-48(fp)
  808d58:	00000306 	br	808d68 <main+0x99c>
					} else {
						cnt = p1;
  808d5c:	e0bff417 	ldw	r2,-48(fp)
  808d60:	e0bff915 	stw	r2,-28(fp)
						p1 = 0;
  808d64:	e03ff415 	stw	zero,-48(fp)
					}
					res = f_read(&File1, Buff, cnt, &cnt);
  808d68:	e0bff917 	ldw	r2,-28(fp)
  808d6c:	e0fff904 	addi	r3,fp,-28
  808d70:	180f883a 	mov	r7,r3
  808d74:	100d883a 	mov	r6,r2
  808d78:	014020b4 	movhi	r5,130
  808d7c:	29779904 	addi	r5,r5,-8604
  808d80:	010020b4 	movhi	r4,130
  808d84:	21370a04 	addi	r4,r4,-9176
  808d88:	08044780 	call	804478 <f_read>
  808d8c:	e0bff005 	stb	r2,-64(fp)
					if (res != FR_OK) {
  808d90:	e0bff003 	ldbu	r2,-64(fp)
  808d94:	10000426 	beq	r2,zero,808da8 <main+0x9dc>
						put_rc(res);
  808d98:	e0bff003 	ldbu	r2,-64(fp)
  808d9c:	1009883a 	mov	r4,r2
  808da0:	08082f00 	call	8082f0 <put_rc>
						break;
  808da4:	00000f06 	br	808de4 <main+0xa18>
					}
					if (!cnt)
  808da8:	e0bff917 	ldw	r2,-28(fp)
  808dac:	10000c26 	beq	r2,zero,808de0 <main+0xa14>
						break;

					put_dump(Buff, ofs, cnt);
  808db0:	e0bff917 	ldw	r2,-28(fp)
  808db4:	100d883a 	mov	r6,r2
  808db8:	e17feb17 	ldw	r5,-84(fp)
  808dbc:	010020b4 	movhi	r4,130
  808dc0:	21379904 	addi	r4,r4,-8604
  808dc4:	0809fd00 	call	809fd0 <put_dump>
					ofs += 16;
  808dc8:	e0bfeb17 	ldw	r2,-84(fp)
  808dcc:	10800404 	addi	r2,r2,16
  808dd0:	e0bfeb15 	stw	r2,-84(fp)

			case 'd': /* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1))
					break;
				ofs = File1.fptr;
				while (p1) {
  808dd4:	e0bff417 	ldw	r2,-48(fp)
  808dd8:	103fd71e 	bne	r2,zero,808d38 <__alt_data_end+0xff808d38>
						break;

					put_dump(Buff, ofs, cnt);
					ofs += 16;
				}
				break;
  808ddc:	00028506 	br	8097f4 <main+0x1428>
					if (res != FR_OK) {
						put_rc(res);
						break;
					}
					if (!cnt)
						break;
  808de0:	0001883a 	nop

					put_dump(Buff, ofs, cnt);
					ofs += 16;
				}
				break;
  808de4:	00028306 	br	8097f4 <main+0x1428>

			case 'e': /* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1))
  808de8:	e0fff404 	addi	r3,fp,-48
  808dec:	e0bff304 	addi	r2,fp,-52
  808df0:	180b883a 	mov	r5,r3
  808df4:	1009883a 	mov	r4,r2
  808df8:	08098080 	call	809808 <xatoi>
  808dfc:	10027226 	beq	r2,zero,8097c8 <main+0x13fc>
					break;
				res = f_lseek(&File1, p1);
  808e00:	e0bff417 	ldw	r2,-48(fp)
  808e04:	100b883a 	mov	r5,r2
  808e08:	010020b4 	movhi	r4,130
  808e0c:	21370a04 	addi	r4,r4,-9176
  808e10:	08051b40 	call	8051b4 <f_lseek>
  808e14:	e0bff005 	stb	r2,-64(fp)
				put_rc(res);
  808e18:	e0bff003 	ldbu	r2,-64(fp)
  808e1c:	1009883a 	mov	r4,r2
  808e20:	08082f00 	call	8082f0 <put_rc>
				if (res == FR_OK)
  808e24:	e0bff003 	ldbu	r2,-64(fp)
  808e28:	1002691e 	bne	r2,zero,8097d0 <main+0x1404>
					xprintf("fptr=%lu(0x%lX)\n", File1.fptr, File1.fptr);
  808e2c:	008020b4 	movhi	r2,130
  808e30:	10b70a04 	addi	r2,r2,-9176
  808e34:	10c00217 	ldw	r3,8(r2)
  808e38:	008020b4 	movhi	r2,130
  808e3c:	10b70a04 	addi	r2,r2,-9176
  808e40:	10800217 	ldw	r2,8(r2)
  808e44:	100d883a 	mov	r6,r2
  808e48:	180b883a 	mov	r5,r3
  808e4c:	010020b4 	movhi	r4,130
  808e50:	212de504 	addi	r4,r4,-18540
  808e54:	0809d0c0 	call	809d0c <xprintf>
				break;
  808e58:	00025d06 	br	8097d0 <main+0x1404>

			case 'i': /* fi <vol> - Force initialized the logical drive */
				if (!xatoi(&ptr, &p1))
  808e5c:	e0fff404 	addi	r3,fp,-48
  808e60:	e0bff304 	addi	r2,fp,-52
  808e64:	180b883a 	mov	r5,r3
  808e68:	1009883a 	mov	r4,r2
  808e6c:	08098080 	call	809808 <xatoi>
  808e70:	10025926 	beq	r2,zero,8097d8 <main+0x140c>
					break;
				put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));
  808e74:	e0bff417 	ldw	r2,-48(fp)
  808e78:	11003fcc 	andi	r4,r2,255
  808e7c:	e0bff417 	ldw	r2,-48(fp)
  808e80:	10c08c24 	muli	r3,r2,560
  808e84:	008020b4 	movhi	r2,130
  808e88:	10b67e04 	addi	r2,r2,-9736
  808e8c:	1885883a 	add	r2,r3,r2
  808e90:	100b883a 	mov	r5,r2
  808e94:	0803f600 	call	803f60 <f_mount>
  808e98:	1009883a 	mov	r4,r2
  808e9c:	08082f00 	call	8082f0 <put_rc>
				break;
  808ea0:	00025406 	br	8097f4 <main+0x1428>

			case 'l': /* fl [<path>] - Directory listing */
				while (*ptr == ' ')
					ptr++;
  808ea4:	e0bff317 	ldw	r2,-52(fp)
  808ea8:	10800044 	addi	r2,r2,1
  808eac:	e0bff315 	stw	r2,-52(fp)
					break;
				put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));
				break;

			case 'l': /* fl [<path>] - Directory listing */
				while (*ptr == ' ')
  808eb0:	e0bff317 	ldw	r2,-52(fp)
  808eb4:	10800003 	ldbu	r2,0(r2)
  808eb8:	10803fcc 	andi	r2,r2,255
  808ebc:	1080201c 	xori	r2,r2,128
  808ec0:	10bfe004 	addi	r2,r2,-128
  808ec4:	10800820 	cmpeqi	r2,r2,32
  808ec8:	103ff61e 	bne	r2,zero,808ea4 <__alt_data_end+0xff808ea4>
					ptr++;
				res = f_opendir(&Dir, ptr);
  808ecc:	e0bff317 	ldw	r2,-52(fp)
  808ed0:	100b883a 	mov	r5,r2
  808ed4:	010020b4 	movhi	r4,130
  808ed8:	2138a204 	addi	r4,r4,-7544
  808edc:	08056a40 	call	8056a4 <f_opendir>
  808ee0:	e0bff005 	stb	r2,-64(fp)
				if (res) // if res in non-zero there is an error; print the error.
  808ee4:	e0bff003 	ldbu	r2,-64(fp)
  808ee8:	10000426 	beq	r2,zero,808efc <main+0xb30>
				{
					put_rc(res);
  808eec:	e0bff003 	ldbu	r2,-64(fp)
  808ef0:	1009883a 	mov	r4,r2
  808ef4:	08082f00 	call	8082f0 <put_rc>
					break;
  808ef8:	00023e06 	br	8097f4 <main+0x1428>
				}
				p1 = s1 = s2 = 0; // otherwise initialize the pointers and proceed.
  808efc:	e03ff815 	stw	zero,-32(fp)
  808f00:	e0bff817 	ldw	r2,-32(fp)
  808f04:	e0bfe915 	stw	r2,-92(fp)
  808f08:	e0bfe917 	ldw	r2,-92(fp)
  808f0c:	e0bff415 	stw	r2,-48(fp)
				for (;;) {
					res = f_readdir(&Dir, &Finfo);
  808f10:	014020b4 	movhi	r5,130
  808f14:	29779304 	addi	r5,r5,-8628
  808f18:	010020b4 	movhi	r4,130
  808f1c:	2138a204 	addi	r4,r4,-7544
  808f20:	08058140 	call	805814 <f_readdir>
  808f24:	e0bff005 	stb	r2,-64(fp)
					if ((res != FR_OK) || !Finfo.fname[0])
  808f28:	e0bff003 	ldbu	r2,-64(fp)
  808f2c:	10007b1e 	bne	r2,zero,80911c <main+0xd50>
  808f30:	008020b4 	movhi	r2,130
  808f34:	10b79304 	addi	r2,r2,-8628
  808f38:	10800243 	ldbu	r2,9(r2)
  808f3c:	10803fcc 	andi	r2,r2,255
  808f40:	1080201c 	xori	r2,r2,128
  808f44:	10bfe004 	addi	r2,r2,-128
  808f48:	10007426 	beq	r2,zero,80911c <main+0xd50>
						break;
					if (Finfo.fattrib & AM_DIR) {
  808f4c:	008020b4 	movhi	r2,130
  808f50:	10b79304 	addi	r2,r2,-8628
  808f54:	10800203 	ldbu	r2,8(r2)
  808f58:	10803fcc 	andi	r2,r2,255
  808f5c:	1080040c 	andi	r2,r2,16
  808f60:	10000426 	beq	r2,zero,808f74 <main+0xba8>
						s2++;
  808f64:	e0bff817 	ldw	r2,-32(fp)
  808f68:	10800044 	addi	r2,r2,1
  808f6c:	e0bff815 	stw	r2,-32(fp)
  808f70:	00000906 	br	808f98 <main+0xbcc>
					} else {
						s1++;
  808f74:	e0bfe917 	ldw	r2,-92(fp)
  808f78:	10800044 	addi	r2,r2,1
  808f7c:	e0bfe915 	stw	r2,-92(fp)
						p1 += Finfo.fsize;
  808f80:	008020b4 	movhi	r2,130
  808f84:	10b79304 	addi	r2,r2,-8628
  808f88:	10800017 	ldw	r2,0(r2)
  808f8c:	e0fff417 	ldw	r3,-48(fp)
  808f90:	10c5883a 	add	r2,r2,r3
  808f94:	e0bff415 	stw	r2,-48(fp)
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
  808f98:	008020b4 	movhi	r2,130
  808f9c:	10b79304 	addi	r2,r2,-8628
  808fa0:	10800203 	ldbu	r2,8(r2)
  808fa4:	10803fcc 	andi	r2,r2,255
  808fa8:	1080040c 	andi	r2,r2,16
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808fac:	10000226 	beq	r2,zero,808fb8 <main+0xbec>
  808fb0:	01401104 	movi	r5,68
  808fb4:	00000106 	br	808fbc <main+0xbf0>
  808fb8:	01400b44 	movi	r5,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
  808fbc:	008020b4 	movhi	r2,130
  808fc0:	10b79304 	addi	r2,r2,-8628
  808fc4:	10800203 	ldbu	r2,8(r2)
  808fc8:	10803fcc 	andi	r2,r2,255
  808fcc:	1080004c 	andi	r2,r2,1
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808fd0:	10000226 	beq	r2,zero,808fdc <main+0xc10>
  808fd4:	01801484 	movi	r6,82
  808fd8:	00000106 	br	808fe0 <main+0xc14>
  808fdc:	01800b44 	movi	r6,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
  808fe0:	008020b4 	movhi	r2,130
  808fe4:	10b79304 	addi	r2,r2,-8628
  808fe8:	10800203 	ldbu	r2,8(r2)
  808fec:	10803fcc 	andi	r2,r2,255
  808ff0:	1080008c 	andi	r2,r2,2
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808ff4:	10000226 	beq	r2,zero,809000 <main+0xc34>
  808ff8:	01c01204 	movi	r7,72
  808ffc:	00000106 	br	809004 <main+0xc38>
  809000:	01c00b44 	movi	r7,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
  809004:	008020b4 	movhi	r2,130
  809008:	10b79304 	addi	r2,r2,-8628
  80900c:	10800203 	ldbu	r2,8(r2)
  809010:	10803fcc 	andi	r2,r2,255
  809014:	1080010c 	andi	r2,r2,4
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809018:	10000226 	beq	r2,zero,809024 <main+0xc58>
  80901c:	00c014c4 	movi	r3,83
  809020:	00000106 	br	809028 <main+0xc5c>
  809024:	00c00b44 	movi	r3,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
  809028:	008020b4 	movhi	r2,130
  80902c:	10b79304 	addi	r2,r2,-8628
  809030:	10800203 	ldbu	r2,8(r2)
  809034:	10803fcc 	andi	r2,r2,255
  809038:	1080080c 	andi	r2,r2,32
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  80903c:	10000226 	beq	r2,zero,809048 <main+0xc7c>
  809040:	01001044 	movi	r4,65
  809044:	00000106 	br	80904c <main+0xc80>
  809048:	01000b44 	movi	r4,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
  80904c:	008020b4 	movhi	r2,130
  809050:	10b79304 	addi	r2,r2,-8628
  809054:	1080010b 	ldhu	r2,4(r2)
  809058:	10bfffcc 	andi	r2,r2,65535
  80905c:	1004d27a 	srli	r2,r2,9
  809060:	10bfffcc 	andi	r2,r2,65535
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809064:	1201ef04 	addi	r8,r2,1980
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
  809068:	008020b4 	movhi	r2,130
  80906c:	10b79304 	addi	r2,r2,-8628
  809070:	1080010b 	ldhu	r2,4(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809074:	10bfffcc 	andi	r2,r2,65535
  809078:	1004d17a 	srli	r2,r2,5
  80907c:	10bfffcc 	andi	r2,r2,65535
  809080:	124003cc 	andi	r9,r2,15
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
							Finfo.fdate & 31, (Finfo.ftime >> 11),
  809084:	008020b4 	movhi	r2,130
  809088:	10b79304 	addi	r2,r2,-8628
  80908c:	1080010b 	ldhu	r2,4(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809090:	10bfffcc 	andi	r2,r2,65535
  809094:	128007cc 	andi	r10,r2,31
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
							Finfo.fdate & 31, (Finfo.ftime >> 11),
  809098:	008020b4 	movhi	r2,130
  80909c:	10b79304 	addi	r2,r2,-8628
  8090a0:	1080018b 	ldhu	r2,6(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  8090a4:	10bfffcc 	andi	r2,r2,65535
  8090a8:	1004d2fa 	srli	r2,r2,11
  8090ac:	12ffffcc 	andi	r11,r2,65535
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
							Finfo.fdate & 31, (Finfo.ftime >> 11),
							(Finfo.ftime >> 5) & 63, Finfo.fsize,
  8090b0:	008020b4 	movhi	r2,130
  8090b4:	10b79304 	addi	r2,r2,-8628
  8090b8:	1080018b 	ldhu	r2,6(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  8090bc:	10bfffcc 	andi	r2,r2,65535
  8090c0:	1004d17a 	srli	r2,r2,5
  8090c4:	10bfffcc 	andi	r2,r2,65535
  8090c8:	13000fcc 	andi	r12,r2,63
  8090cc:	008020b4 	movhi	r2,130
  8090d0:	10b79304 	addi	r2,r2,-8628
  8090d4:	13400017 	ldw	r13,0(r2)
  8090d8:	008020b4 	movhi	r2,130
  8090dc:	10b79544 	addi	r2,r2,-8619
  8090e0:	d8800815 	stw	r2,32(sp)
  8090e4:	db400715 	stw	r13,28(sp)
  8090e8:	db000615 	stw	r12,24(sp)
  8090ec:	dac00515 	stw	r11,20(sp)
  8090f0:	da800415 	stw	r10,16(sp)
  8090f4:	da400315 	stw	r9,12(sp)
  8090f8:	da000215 	stw	r8,8(sp)
  8090fc:	d9000115 	stw	r4,4(sp)
  809100:	d8c00015 	stw	r3,0(sp)
  809104:	010020b4 	movhi	r4,130
  809108:	212dea04 	addi	r4,r4,-18520
  80910c:	0809d0c0 	call	809d0c <xprintf>
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
					xputc(' ');
					xprintf("%s\n", Lfname);
#else
					xputc('\n');
  809110:	01000284 	movi	r4,10
  809114:	0809a8c0 	call	809a8c <xputc>
#endif
				}
  809118:	003f7d06 	br	808f10 <__alt_data_end+0xff808f10>
				xprintf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1,
  80911c:	e0bff417 	ldw	r2,-48(fp)
  809120:	e0fff817 	ldw	r3,-32(fp)
  809124:	180f883a 	mov	r7,r3
  809128:	100d883a 	mov	r6,r2
  80912c:	e17fe917 	ldw	r5,-92(fp)
  809130:	010020b4 	movhi	r4,130
  809134:	212df504 	addi	r4,r4,-18476
  809138:	0809d0c0 	call	809d0c <xprintf>
						s2);
				res = f_getfree(ptr, (uint32_t *) &p1, &fs);
  80913c:	e0bff317 	ldw	r2,-52(fp)
  809140:	e13ffc04 	addi	r4,fp,-16
  809144:	e0fff404 	addi	r3,fp,-48
  809148:	200d883a 	mov	r6,r4
  80914c:	180b883a 	mov	r5,r3
  809150:	1009883a 	mov	r4,r2
  809154:	08059980 	call	805998 <f_getfree>
  809158:	e0bff005 	stb	r2,-64(fp)
				if (res == FR_OK)
  80915c:	e0bff003 	ldbu	r2,-64(fp)
  809160:	10000b1e 	bne	r2,zero,809190 <main+0xdc4>
					xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
  809164:	e0bffc17 	ldw	r2,-16(fp)
  809168:	10800083 	ldbu	r2,2(r2)
  80916c:	10c03fcc 	andi	r3,r2,255
  809170:	e0bff417 	ldw	r2,-48(fp)
  809174:	1885383a 	mul	r2,r3,r2
  809178:	1004927a 	slli	r2,r2,9
  80917c:	100b883a 	mov	r5,r2
  809180:	010020b4 	movhi	r4,130
  809184:	212e0004 	addi	r4,r4,-18432
  809188:	0809d0c0 	call	809d0c <xprintf>
				else
					put_rc(res);
				break;
  80918c:	00019906 	br	8097f4 <main+0x1428>
						s2);
				res = f_getfree(ptr, (uint32_t *) &p1, &fs);
				if (res == FR_OK)
					xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
				else
					put_rc(res);
  809190:	e0bff003 	ldbu	r2,-64(fp)
  809194:	1009883a 	mov	r4,r2
  809198:	08082f00 	call	8082f0 <put_rc>
				break;
  80919c:	00019506 	br	8097f4 <main+0x1428>

			case 'o': /* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1))
  8091a0:	e0fff404 	addi	r3,fp,-48
  8091a4:	e0bff304 	addi	r2,fp,-52
  8091a8:	180b883a 	mov	r5,r3
  8091ac:	1009883a 	mov	r4,r2
  8091b0:	08098080 	call	809808 <xatoi>
  8091b4:	10018a26 	beq	r2,zero,8097e0 <main+0x1414>
					break;
				while (*ptr == ' ')
  8091b8:	00000306 	br	8091c8 <main+0xdfc>
					ptr++;
  8091bc:	e0bff317 	ldw	r2,-52(fp)
  8091c0:	10800044 	addi	r2,r2,1
  8091c4:	e0bff315 	stw	r2,-52(fp)
				break;

			case 'o': /* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1))
					break;
				while (*ptr == ' ')
  8091c8:	e0bff317 	ldw	r2,-52(fp)
  8091cc:	10800003 	ldbu	r2,0(r2)
  8091d0:	10803fcc 	andi	r2,r2,255
  8091d4:	1080201c 	xori	r2,r2,128
  8091d8:	10bfe004 	addi	r2,r2,-128
  8091dc:	10800820 	cmpeqi	r2,r2,32
  8091e0:	103ff61e 	bne	r2,zero,8091bc <__alt_data_end+0xff8091bc>
					ptr++;
				put_rc(f_open(&File1, ptr, (uint8_t) p1));
  8091e4:	e0fff317 	ldw	r3,-52(fp)
  8091e8:	e0bff417 	ldw	r2,-48(fp)
  8091ec:	10803fcc 	andi	r2,r2,255
  8091f0:	100d883a 	mov	r6,r2
  8091f4:	180b883a 	mov	r5,r3
  8091f8:	010020b4 	movhi	r4,130
  8091fc:	21370a04 	addi	r4,r4,-9176
  809200:	0803ff40 	call	803ff4 <f_open>
  809204:	1009883a 	mov	r4,r2
  809208:	08082f00 	call	8082f0 <put_rc>
				break;
  80920c:	00017906 	br	8097f4 <main+0x1428>

			case 'p': /* fp <len> - read and play file from current fp */
				if (!xatoi(&ptr, &p1))
  809210:	e0fff404 	addi	r3,fp,-48
  809214:	e0bff304 	addi	r2,fp,-52
  809218:	180b883a 	mov	r5,r3
  80921c:	1009883a 	mov	r4,r2
  809220:	08098080 	call	809808 <xatoi>
  809224:	10017026 	beq	r2,zero,8097e8 <main+0x141c>
					break;
				ofs = File1.fptr;
  809228:	008020b4 	movhi	r2,130
  80922c:	10b70a04 	addi	r2,r2,-9176
  809230:	10800217 	ldw	r2,8(r2)
  809234:	e0bfeb15 	stw	r2,-84(fp)
				int i = 3;
  809238:	008000c4 	movi	r2,3
  80923c:	e0bfed15 	stw	r2,-76(fp)
				/*
				 <<<<<<<<<<<<<<<<<<<<<<<<< YOUR fp CODE GOES IN HERE >>>>>>>>>>>>>>>>>>>>>>
				 */
				alt_up_audio_dev * audio_dev;
				audio_dev = alt_up_audio_open_dev("/dev/Audio");
  809240:	010020b4 	movhi	r4,130
  809244:	212d9804 	addi	r4,r4,-18848
  809248:	0819a9c0 	call	819a9c <alt_up_audio_open_dev>
  80924c:	e0bff115 	stw	r2,-60(fp)
				if (audio_dev == NULL)
  809250:	e0bff117 	ldw	r2,-60(fp)
  809254:	1000041e 	bne	r2,zero,809268 <main+0xe9c>
					alt_printf("Error: could not open audio device \n");
  809258:	010020b4 	movhi	r4,130
  80925c:	212d9b04 	addi	r4,r4,-18836
  809260:	08177240 	call	817724 <alt_printf>
  809264:	00000306 	br	809274 <main+0xea8>
				else
					alt_printf("Opened audio device \n");
  809268:	010020b4 	movhi	r4,130
  80926c:	212da504 	addi	r4,r4,-18796
  809270:	08177240 	call	817724 <alt_printf>
				uint32_t *pout = NULL;
  809274:	e03ff215 	stw	zero,-56(fp)
				int mode = 0;
  809278:	e03fee15 	stw	zero,-72(fp)
				if ((IORD(SWITCH_PIO_BASE, 0) & 0x03) == 1) {
  80927c:	00804034 	movhi	r2,256
  809280:	10843804 	addi	r2,r2,4320
  809284:	10800037 	ldwio	r2,0(r2)
  809288:	108000cc 	andi	r2,r2,3
  80928c:	10800058 	cmpnei	r2,r2,1
  809290:	1000031e 	bne	r2,zero,8092a0 <main+0xed4>
					mode = 1;
  809294:	00800044 	movi	r2,1
  809298:	e0bfee15 	stw	r2,-72(fp)
  80929c:	00008806 	br	8094c0 <main+0x10f4>
				} else if ((IORD(SWITCH_PIO_BASE, 0) & 0x03) == 2) {
  8092a0:	00804034 	movhi	r2,256
  8092a4:	10843804 	addi	r2,r2,4320
  8092a8:	10800037 	ldwio	r2,0(r2)
  8092ac:	108000cc 	andi	r2,r2,3
  8092b0:	10800098 	cmpnei	r2,r2,2
  8092b4:	1000031e 	bne	r2,zero,8092c4 <main+0xef8>
					mode = 2;
  8092b8:	00800084 	movi	r2,2
  8092bc:	e0bfee15 	stw	r2,-72(fp)
  8092c0:	00007f06 	br	8094c0 <main+0x10f4>
				} else if ((IORD(SWITCH_PIO_BASE, 0) & 0x03) == 3) {
  8092c4:	00804034 	movhi	r2,256
  8092c8:	10843804 	addi	r2,r2,4320
  8092cc:	10800037 	ldwio	r2,0(r2)
  8092d0:	108000cc 	andi	r2,r2,3
  8092d4:	108000d8 	cmpnei	r2,r2,3
  8092d8:	1000791e 	bne	r2,zero,8094c0 <main+0x10f4>
					mode = 3;
  8092dc:	008000c4 	movi	r2,3
  8092e0:	e0bfee15 	stw	r2,-72(fp)
				}
				while (p1) {
  8092e4:	00007606 	br	8094c0 <main+0x10f4>

					if (p1 >= blen) {
  8092e8:	e0bff417 	ldw	r2,-48(fp)
  8092ec:	1007883a 	mov	r3,r2
  8092f0:	e0bfea17 	ldw	r2,-88(fp)
  8092f4:	18800836 	bltu	r3,r2,809318 <main+0xf4c>
						cnt = blen;
  8092f8:	e0bfea17 	ldw	r2,-88(fp)
  8092fc:	e0bff915 	stw	r2,-28(fp)
						p1 -= blen;
  809300:	e0bff417 	ldw	r2,-48(fp)
  809304:	1007883a 	mov	r3,r2
  809308:	e0bfea17 	ldw	r2,-88(fp)
  80930c:	1885c83a 	sub	r2,r3,r2
  809310:	e0bff415 	stw	r2,-48(fp)
  809314:	00000306 	br	809324 <main+0xf58>
					} else {
						cnt = p1;
  809318:	e0bff417 	ldw	r2,-48(fp)
  80931c:	e0bff915 	stw	r2,-28(fp)
						p1 = 0;
  809320:	e03ff415 	stw	zero,-48(fp)
					}
					res = f_read(&File1, Buff, cnt, pout);
  809324:	e0bff917 	ldw	r2,-28(fp)
  809328:	e1fff217 	ldw	r7,-56(fp)
  80932c:	100d883a 	mov	r6,r2
  809330:	014020b4 	movhi	r5,130
  809334:	29779904 	addi	r5,r5,-8604
  809338:	010020b4 	movhi	r4,130
  80933c:	21370a04 	addi	r4,r4,-9176
  809340:	08044780 	call	804478 <f_read>
  809344:	e0bff005 	stb	r2,-64(fp)
					if (res != FR_OK)
  809348:	e0bff003 	ldbu	r2,-64(fp)
  80934c:	10005726 	beq	r2,zero,8094ac <main+0x10e0>
						printf("error");
  809350:	010020b4 	movhi	r4,130
  809354:	212e0504 	addi	r4,r4,-18412
  809358:	080a6640 	call	80a664 <printf>

					while (i < cnt) {
  80935c:	00005306 	br	8094ac <main+0x10e0>
						while (alt_up_audio_write_fifo_space(audio_dev,
  809360:	0001883a 	nop
  809364:	01400044 	movi	r5,1
  809368:	e13ff117 	ldw	r4,-60(fp)
  80936c:	0819e740 	call	819e74 <alt_up_audio_write_fifo_space>
  809370:	103ffc26 	beq	r2,zero,809364 <__alt_data_end+0xff809364>
						ALT_UP_AUDIO_RIGHT) == 0) {
						}
						r_buf = (Buff[i] << 8) | Buff[i - 1];
  809374:	008020b4 	movhi	r2,130
  809378:	10b79904 	addi	r2,r2,-8604
  80937c:	e0ffed17 	ldw	r3,-76(fp)
  809380:	10c5883a 	add	r2,r2,r3
  809384:	10800003 	ldbu	r2,0(r2)
  809388:	10803fcc 	andi	r2,r2,255
  80938c:	1006923a 	slli	r3,r2,8
  809390:	e0bfed17 	ldw	r2,-76(fp)
  809394:	113fffc4 	addi	r4,r2,-1
  809398:	008020b4 	movhi	r2,130
  80939c:	10b79904 	addi	r2,r2,-8604
  8093a0:	1105883a 	add	r2,r2,r4
  8093a4:	10800003 	ldbu	r2,0(r2)
  8093a8:	10803fcc 	andi	r2,r2,255
  8093ac:	1884b03a 	or	r2,r3,r2
  8093b0:	e0bffe15 	stw	r2,-8(fp)
						l_buf = (Buff[i - 2] << 8) | Buff[i - 3];
  8093b4:	e0bfed17 	ldw	r2,-76(fp)
  8093b8:	10ffff84 	addi	r3,r2,-2
  8093bc:	008020b4 	movhi	r2,130
  8093c0:	10b79904 	addi	r2,r2,-8604
  8093c4:	10c5883a 	add	r2,r2,r3
  8093c8:	10800003 	ldbu	r2,0(r2)
  8093cc:	10803fcc 	andi	r2,r2,255
  8093d0:	1006923a 	slli	r3,r2,8
  8093d4:	e0bfed17 	ldw	r2,-76(fp)
  8093d8:	113fff44 	addi	r4,r2,-3
  8093dc:	008020b4 	movhi	r2,130
  8093e0:	10b79904 	addi	r2,r2,-8604
  8093e4:	1105883a 	add	r2,r2,r4
  8093e8:	10800003 	ldbu	r2,0(r2)
  8093ec:	10803fcc 	andi	r2,r2,255
  8093f0:	1884b03a 	or	r2,r3,r2
  8093f4:	e0bffd15 	stw	r2,-12(fp)

						if (mode == 3) {
  8093f8:	e0bfee17 	ldw	r2,-72(fp)
  8093fc:	108000d8 	cmpnei	r2,r2,3
  809400:	10000d1e 	bne	r2,zero,809438 <main+0x106c>
							alt_up_audio_write_fifo(audio_dev, &(r_buf), 1,
  809404:	e0bffe04 	addi	r2,fp,-8
  809408:	000f883a 	mov	r7,zero
  80940c:	01800044 	movi	r6,1
  809410:	100b883a 	mov	r5,r2
  809414:	e13ff117 	ldw	r4,-60(fp)
  809418:	081a0840 	call	81a084 <alt_up_audio_write_fifo>
							ALT_UP_AUDIO_LEFT);
							alt_up_audio_write_fifo(audio_dev, &(r_buf), 1,
  80941c:	e0bffe04 	addi	r2,fp,-8
  809420:	01c00044 	movi	r7,1
  809424:	01800044 	movi	r6,1
  809428:	100b883a 	mov	r5,r2
  80942c:	e13ff117 	ldw	r4,-60(fp)
  809430:	081a0840 	call	81a084 <alt_up_audio_write_fifo>
  809434:	00000c06 	br	809468 <main+0x109c>
							ALT_UP_AUDIO_RIGHT);
						} else {
							alt_up_audio_write_fifo(audio_dev, &(l_buf), 1,
  809438:	e0bffd04 	addi	r2,fp,-12
  80943c:	000f883a 	mov	r7,zero
  809440:	01800044 	movi	r6,1
  809444:	100b883a 	mov	r5,r2
  809448:	e13ff117 	ldw	r4,-60(fp)
  80944c:	081a0840 	call	81a084 <alt_up_audio_write_fifo>
							ALT_UP_AUDIO_LEFT);
							alt_up_audio_write_fifo(audio_dev, &(r_buf), 1,
  809450:	e0bffe04 	addi	r2,fp,-8
  809454:	01c00044 	movi	r7,1
  809458:	01800044 	movi	r6,1
  80945c:	100b883a 	mov	r5,r2
  809460:	e13ff117 	ldw	r4,-60(fp)
  809464:	081a0840 	call	81a084 <alt_up_audio_write_fifo>
							ALT_UP_AUDIO_RIGHT);
						}
						if (mode == 1)
  809468:	e0bfee17 	ldw	r2,-72(fp)
  80946c:	10800058 	cmpnei	r2,r2,1
  809470:	1000041e 	bne	r2,zero,809484 <main+0x10b8>
							i += 8;
  809474:	e0bfed17 	ldw	r2,-76(fp)
  809478:	10800204 	addi	r2,r2,8
  80947c:	e0bfed15 	stw	r2,-76(fp)
  809480:	00000a06 	br	8094ac <main+0x10e0>
						else if (mode == 2)
  809484:	e0bfee17 	ldw	r2,-72(fp)
  809488:	10800098 	cmpnei	r2,r2,2
  80948c:	1000041e 	bne	r2,zero,8094a0 <main+0x10d4>
							i += 2;
  809490:	e0bfed17 	ldw	r2,-76(fp)
  809494:	10800084 	addi	r2,r2,2
  809498:	e0bfed15 	stw	r2,-76(fp)
  80949c:	00000306 	br	8094ac <main+0x10e0>
						else
							i += 4;
  8094a0:	e0bfed17 	ldw	r2,-76(fp)
  8094a4:	10800104 	addi	r2,r2,4
  8094a8:	e0bfed15 	stw	r2,-76(fp)
					}
					res = f_read(&File1, Buff, cnt, pout);
					if (res != FR_OK)
						printf("error");

					while (i < cnt) {
  8094ac:	e0ffed17 	ldw	r3,-76(fp)
  8094b0:	e0bff917 	ldw	r2,-28(fp)
  8094b4:	18bfaa36 	bltu	r3,r2,809360 <__alt_data_end+0xff809360>
						else if (mode == 2)
							i += 2;
						else
							i += 4;
					}
					i = 3;
  8094b8:	008000c4 	movi	r2,3
  8094bc:	e0bfed15 	stw	r2,-76(fp)
				} else if ((IORD(SWITCH_PIO_BASE, 0) & 0x03) == 2) {
					mode = 2;
				} else if ((IORD(SWITCH_PIO_BASE, 0) & 0x03) == 3) {
					mode = 3;
				}
				while (p1) {
  8094c0:	e0bff417 	ldw	r2,-48(fp)
  8094c4:	103f881e 	bne	r2,zero,8092e8 <__alt_data_end+0xff8092e8>
						else
							i += 4;
					}
					i = 3;
				}
				xprintf("done\n");
  8094c8:	010020b4 	movhi	r4,130
  8094cc:	212e0704 	addi	r4,r4,-18404
  8094d0:	0809d0c0 	call	809d0c <xprintf>
				break;
  8094d4:	0000c706 	br	8097f4 <main+0x1428>
			case 'r':
				/* fr <len> - read file */
				if (!xatoi(&ptr, &p1))
  8094d8:	e0fff404 	addi	r3,fp,-48
  8094dc:	e0bff304 	addi	r2,fp,-52
  8094e0:	180b883a 	mov	r5,r3
  8094e4:	1009883a 	mov	r4,r2
  8094e8:	08098080 	call	809808 <xatoi>
  8094ec:	1000c026 	beq	r2,zero,8097f0 <main+0x1424>
					break;
				p2 = 0;
  8094f0:	e03ff515 	stw	zero,-44(fp)
				Timer = 0;
  8094f4:	d0235e0d 	sth	zero,-29320(gp)
				while (p1) {
  8094f8:	00002706 	br	809598 <main+0x11cc>
					if ((uint32_t) p1 >= blen) {
  8094fc:	e0bff417 	ldw	r2,-48(fp)
  809500:	1007883a 	mov	r3,r2
  809504:	e0bfea17 	ldw	r2,-88(fp)
  809508:	18800836 	bltu	r3,r2,80952c <main+0x1160>
						cnt = blen;
  80950c:	e0bfea17 	ldw	r2,-88(fp)
  809510:	e0bff915 	stw	r2,-28(fp)
						p1 -= blen;
  809514:	e0bff417 	ldw	r2,-48(fp)
  809518:	1007883a 	mov	r3,r2
  80951c:	e0bfea17 	ldw	r2,-88(fp)
  809520:	1885c83a 	sub	r2,r3,r2
  809524:	e0bff415 	stw	r2,-48(fp)
  809528:	00000306 	br	809538 <main+0x116c>
					} else {
						cnt = p1;
  80952c:	e0bff417 	ldw	r2,-48(fp)
  809530:	e0bff915 	stw	r2,-28(fp)
						p1 = 0;
  809534:	e03ff415 	stw	zero,-48(fp)
					}
					res = f_read(&File1, Buff, cnt, &s2);
  809538:	e0bff917 	ldw	r2,-28(fp)
  80953c:	e0fff804 	addi	r3,fp,-32
  809540:	180f883a 	mov	r7,r3
  809544:	100d883a 	mov	r6,r2
  809548:	014020b4 	movhi	r5,130
  80954c:	29779904 	addi	r5,r5,-8604
  809550:	010020b4 	movhi	r4,130
  809554:	21370a04 	addi	r4,r4,-9176
  809558:	08044780 	call	804478 <f_read>
  80955c:	e0bff005 	stb	r2,-64(fp)
					if (res != FR_OK) {
  809560:	e0bff003 	ldbu	r2,-64(fp)
  809564:	10000426 	beq	r2,zero,809578 <main+0x11ac>
						put_rc(res); // output a read error if a read error occurs
  809568:	e0bff003 	ldbu	r2,-64(fp)
  80956c:	1009883a 	mov	r4,r2
  809570:	08082f00 	call	8082f0 <put_rc>
						break;
  809574:	00000c06 	br	8095a8 <main+0x11dc>
					}
					p2 += s2; // increment p2 by the s2 referenced value
  809578:	e0bff517 	ldw	r2,-44(fp)
  80957c:	1007883a 	mov	r3,r2
  809580:	e0bff817 	ldw	r2,-32(fp)
  809584:	1885883a 	add	r2,r3,r2
  809588:	e0bff515 	stw	r2,-44(fp)
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
  80958c:	e0fff917 	ldw	r3,-28(fp)
  809590:	e0bff817 	ldw	r2,-32(fp)
  809594:	1880031e 	bne	r3,r2,8095a4 <main+0x11d8>
				/* fr <len> - read file */
				if (!xatoi(&ptr, &p1))
					break;
				p2 = 0;
				Timer = 0;
				while (p1) {
  809598:	e0bff417 	ldw	r2,-48(fp)
  80959c:	103fd71e 	bne	r2,zero,8094fc <__alt_data_end+0xff8094fc>
  8095a0:	00000106 	br	8095a8 <main+0x11dc>
						put_rc(res); // output a read error if a read error occurs
						break;
					}
					p2 += s2; // increment p2 by the s2 referenced value
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
						break;
  8095a4:	0001883a 	nop
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2,
  8095a8:	e43ff517 	ldw	r16,-44(fp)
						Timer ? (p2 / Timer) : 0);
  8095ac:	d0a35e0b 	ldhu	r2,-29320(gp)
					}
					p2 += s2; // increment p2 by the s2 referenced value
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
						break;
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2,
  8095b0:	10bfffcc 	andi	r2,r2,65535
  8095b4:	10000726 	beq	r2,zero,8095d4 <main+0x1208>
						Timer ? (p2 / Timer) : 0);
  8095b8:	e0bff517 	ldw	r2,-44(fp)
  8095bc:	d0e35e0b 	ldhu	r3,-29320(gp)
  8095c0:	18ffffcc 	andi	r3,r3,65535
					}
					p2 += s2; // increment p2 by the s2 referenced value
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
						break;
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2,
  8095c4:	180b883a 	mov	r5,r3
  8095c8:	1009883a 	mov	r4,r2
  8095cc:	080a2600 	call	80a260 <__divsi3>
  8095d0:	00000106 	br	8095d8 <main+0x120c>
  8095d4:	0005883a 	mov	r2,zero
  8095d8:	100d883a 	mov	r6,r2
  8095dc:	800b883a 	mov	r5,r16
  8095e0:	010020b4 	movhi	r4,130
  8095e4:	212e0904 	addi	r4,r4,-18396
  8095e8:	0809d0c0 	call	809d0c <xprintf>
						Timer ? (p2 / Timer) : 0);
				break;
  8095ec:	00008106 	br	8097f4 <main+0x1428>

			case 's':
				/* fs [<path>] - Show volume status */
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
  8095f0:	e0bff317 	ldw	r2,-52(fp)
  8095f4:	e13ffc04 	addi	r4,fp,-16
  8095f8:	e0fff504 	addi	r3,fp,-44
  8095fc:	200d883a 	mov	r6,r4
  809600:	180b883a 	mov	r5,r3
  809604:	1009883a 	mov	r4,r2
  809608:	08059980 	call	805998 <f_getfree>
  80960c:	e0bff005 	stb	r2,-64(fp)
				if (res) {
  809610:	e0bff003 	ldbu	r2,-64(fp)
  809614:	10000426 	beq	r2,zero,809628 <main+0x125c>
					put_rc(res);
  809618:	e0bff003 	ldbu	r2,-64(fp)
  80961c:	1009883a 	mov	r4,r2
  809620:	08082f00 	call	8082f0 <put_rc>
					break;
  809624:	00007306 	br	8097f4 <main+0x1428>
				}
				xprintf(
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
  809628:	e0bffc17 	ldw	r2,-16(fp)
  80962c:	10800003 	ldbu	r2,0(r2)
  809630:	10803fcc 	andi	r2,r2,255
  809634:	10c000cc 	andi	r3,r2,3
  809638:	d0a00044 	addi	r2,gp,-32767
  80963c:	1885883a 	add	r2,r3,r2
  809640:	10800003 	ldbu	r2,0(r2)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809644:	12003fcc 	andi	r8,r2,255
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
  809648:	e0bffc17 	ldw	r2,-16(fp)
  80964c:	10800083 	ldbu	r2,2(r2)
  809650:	10803fcc 	andi	r2,r2,255
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809654:	1012927a 	slli	r9,r2,9
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
  809658:	e0bffc17 	ldw	r2,-16(fp)
  80965c:	108000c3 	ldbu	r2,3(r2)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809660:	12803fcc 	andi	r10,r2,255
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
  809664:	e0bffc17 	ldw	r2,-16(fp)
  809668:	1080020b 	ldhu	r2,8(r2)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  80966c:	10bfffcc 	andi	r2,r2,65535
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
  809670:	e0fffc17 	ldw	r3,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809674:	18c00717 	ldw	r3,28(r3)
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
  809678:	e13ffc17 	ldw	r4,-16(fp)
  80967c:	21000617 	ldw	r4,24(r4)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809680:	213fff84 	addi	r4,r4,-2
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
  809684:	e17ffc17 	ldw	r5,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809688:	29400817 	ldw	r5,32(r5)
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
  80968c:	e1bffc17 	ldw	r6,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809690:	31800917 	ldw	r6,36(r6)
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
						fs->database);
  809694:	e1fffc17 	ldw	r7,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  809698:	39c00a17 	ldw	r7,40(r7)
  80969c:	d9c00515 	stw	r7,20(sp)
  8096a0:	d9800415 	stw	r6,16(sp)
  8096a4:	d9400315 	stw	r5,12(sp)
  8096a8:	d9000215 	stw	r4,8(sp)
  8096ac:	d8c00115 	stw	r3,4(sp)
  8096b0:	d8800015 	stw	r2,0(sp)
  8096b4:	500f883a 	mov	r7,r10
  8096b8:	480d883a 	mov	r6,r9
  8096bc:	400b883a 	mov	r5,r8
  8096c0:	010020b4 	movhi	r4,130
  8096c4:	212e1204 	addi	r4,r4,-18360
  8096c8:	0809d0c0 	call	809d0c <xprintf>
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
						fs->database);
				acc_size = acc_files = acc_dirs = 0;
  8096cc:	d0235f0d 	sth	zero,-29316(gp)
  8096d0:	d0a35f0b 	ldhu	r2,-29316(gp)
  8096d4:	d0a35f8d 	sth	r2,-29314(gp)
  8096d8:	d0a35f8b 	ldhu	r2,-29314(gp)
  8096dc:	10bfffcc 	andi	r2,r2,65535
  8096e0:	d0a36015 	stw	r2,-29312(gp)
				res = scan_files(ptr);
  8096e4:	e0bff317 	ldw	r2,-52(fp)
  8096e8:	1009883a 	mov	r4,r2
  8096ec:	08081b00 	call	8081b0 <scan_files>
  8096f0:	e0bff005 	stb	r2,-64(fp)
				if (res) {
  8096f4:	e0bff003 	ldbu	r2,-64(fp)
  8096f8:	10000426 	beq	r2,zero,80970c <main+0x1340>
					put_rc(res);
  8096fc:	e0bff003 	ldbu	r2,-64(fp)
  809700:	1009883a 	mov	r4,r2
  809704:	08082f00 	call	8082f0 <put_rc>
					break;
  809708:	00003a06 	br	8097f4 <main+0x1428>
				}
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  80970c:	d0a35f8b 	ldhu	r2,-29314(gp)
  809710:	117fffcc 	andi	r5,r2,65535
  809714:	d1a36017 	ldw	r6,-29312(gp)
  809718:	d0a35f0b 	ldhu	r2,-29316(gp)
  80971c:	11ffffcc 	andi	r7,r2,65535
						"%lu KB total disk space.\n%lu KB available.\n",
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2),
  809720:	e0bffc17 	ldw	r2,-16(fp)
  809724:	10800617 	ldw	r2,24(r2)
  809728:	10ffff84 	addi	r3,r2,-2
  80972c:	e0bffc17 	ldw	r2,-16(fp)
  809730:	10800083 	ldbu	r2,2(r2)
				res = scan_files(ptr);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  809734:	10803fcc 	andi	r2,r2,255
  809738:	1004d07a 	srli	r2,r2,1
  80973c:	10803fcc 	andi	r2,r2,255
  809740:	1885383a 	mul	r2,r3,r2
						"%lu KB total disk space.\n%lu KB available.\n",
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2),
						p2 * (fs->csize / 2));
  809744:	e0fffc17 	ldw	r3,-16(fp)
  809748:	18c00083 	ldbu	r3,2(r3)
				res = scan_files(ptr);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  80974c:	18c03fcc 	andi	r3,r3,255
  809750:	1806d07a 	srli	r3,r3,1
  809754:	19003fcc 	andi	r4,r3,255
  809758:	e0fff517 	ldw	r3,-44(fp)
  80975c:	20c7383a 	mul	r3,r4,r3
  809760:	d8c00115 	stw	r3,4(sp)
  809764:	d8800015 	stw	r2,0(sp)
  809768:	010020b4 	movhi	r4,130
  80976c:	212e4504 	addi	r4,r4,-18156
  809770:	0809d0c0 	call	809d0c <xprintf>
						"%lu KB total disk space.\n%lu KB available.\n",
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2),
						p2 * (fs->csize / 2));
				break;
  809774:	00001f06 	br	8097f4 <main+0x1428>

			case 'z':
				/* fz [<rw size>] - Change R/W length for fr/fw/fx command */
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
  809778:	e0fff404 	addi	r3,fp,-48
  80977c:	e0bff304 	addi	r2,fp,-52
  809780:	180b883a 	mov	r5,r3
  809784:	1009883a 	mov	r4,r2
  809788:	08098080 	call	809808 <xatoi>
  80978c:	10000726 	beq	r2,zero,8097ac <main+0x13e0>
  809790:	e0bff417 	ldw	r2,-48(fp)
  809794:	0080050e 	bge	zero,r2,8097ac <main+0x13e0>
  809798:	e0bff417 	ldw	r2,-48(fp)
  80979c:	10808068 	cmpgeui	r2,r2,513
  8097a0:	1000021e 	bne	r2,zero,8097ac <main+0x13e0>
					blen = p1;
  8097a4:	e0bff417 	ldw	r2,-48(fp)
  8097a8:	e0bfea15 	stw	r2,-88(fp)
				xprintf("blen=%u\n", blen);
  8097ac:	e17fea17 	ldw	r5,-88(fp)
  8097b0:	010020b4 	movhi	r4,130
  8097b4:	212e5904 	addi	r4,r4,-18076
  8097b8:	0809d0c0 	call	809d0c <xprintf>
				break;
  8097bc:	00000d06 	br	8097f4 <main+0x1428>
				put_rc(f_close(&File1));
				break;

			case 'd': /* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1))
					break;
  8097c0:	0001883a 	nop
  8097c4:	00000e06 	br	809800 <main+0x1434>
				}
				break;

			case 'e': /* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1))
					break;
  8097c8:	0001883a 	nop
  8097cc:	00000c06 	br	809800 <main+0x1434>
				res = f_lseek(&File1, p1);
				put_rc(res);
				if (res == FR_OK)
					xprintf("fptr=%lu(0x%lX)\n", File1.fptr, File1.fptr);
				break;
  8097d0:	0001883a 	nop
  8097d4:	00000a06 	br	809800 <main+0x1434>

			case 'i': /* fi <vol> - Force initialized the logical drive */
				if (!xatoi(&ptr, &p1))
					break;
  8097d8:	0001883a 	nop
  8097dc:	00000806 	br	809800 <main+0x1434>
					put_rc(res);
				break;

			case 'o': /* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1))
					break;
  8097e0:	0001883a 	nop
  8097e4:	00000606 	br	809800 <main+0x1434>
				put_rc(f_open(&File1, ptr, (uint8_t) p1));
				break;

			case 'p': /* fp <len> - read and play file from current fp */
				if (!xatoi(&ptr, &p1))
					break;
  8097e8:	0001883a 	nop
  8097ec:	00000406 	br	809800 <main+0x1434>
				xprintf("done\n");
				break;
			case 'r':
				/* fr <len> - read file */
				if (!xatoi(&ptr, &p1))
					break;
  8097f0:	0001883a 	nop
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
					blen = p1;
				xprintf("blen=%u\n", blen);
				break;
			}
			break; // end of FatFS API controls //
  8097f4:	00000206 	br	809800 <main+0x1434>

		case 'h':
			display_help();
  8097f8:	08083980 	call	808398 <display_help>
			break;
  8097fc:	00000106 	br	809804 <main+0x1438>
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
					blen = p1;
				xprintf("blen=%u\n", blen);
				break;
			}
			break; // end of FatFS API controls //
  809800:	0001883a 	nop
		case 'h':
			display_help();
			break;

		}
	}
  809804:	003b1806 	br	808468 <__alt_data_end+0xff808468>

00809808 <xatoi>:
#include <stdarg.h>
#include "monitor.h"
#include "uart.h"

int xatoi (char **str, long *res)
{
  809808:	defffb04 	addi	sp,sp,-20
  80980c:	df000415 	stw	fp,16(sp)
  809810:	df000404 	addi	fp,sp,16
  809814:	e13ffe15 	stw	r4,-8(fp)
  809818:	e17fff15 	stw	r5,-4(fp)
  unsigned long val;
  unsigned char c, radix, s = 0;
  80981c:	e03ffd85 	stb	zero,-10(fp)


  while ((c = **str) == ' ') (*str)++;
  809820:	00000506 	br	809838 <xatoi+0x30>
  809824:	e0bffe17 	ldw	r2,-8(fp)
  809828:	10800017 	ldw	r2,0(r2)
  80982c:	10c00044 	addi	r3,r2,1
  809830:	e0bffe17 	ldw	r2,-8(fp)
  809834:	10c00015 	stw	r3,0(r2)
  809838:	e0bffe17 	ldw	r2,-8(fp)
  80983c:	10800017 	ldw	r2,0(r2)
  809840:	10800003 	ldbu	r2,0(r2)
  809844:	e0bffd05 	stb	r2,-12(fp)
  809848:	e0bffd03 	ldbu	r2,-12(fp)
  80984c:	10800820 	cmpeqi	r2,r2,32
  809850:	103ff41e 	bne	r2,zero,809824 <__alt_data_end+0xff809824>
  if (c == '-') {
  809854:	e0bffd03 	ldbu	r2,-12(fp)
  809858:	10800b58 	cmpnei	r2,r2,45
  80985c:	10000b1e 	bne	r2,zero,80988c <xatoi+0x84>
    s = 1;
  809860:	00800044 	movi	r2,1
  809864:	e0bffd85 	stb	r2,-10(fp)
    c = *(++(*str));
  809868:	e0bffe17 	ldw	r2,-8(fp)
  80986c:	10800017 	ldw	r2,0(r2)
  809870:	10c00044 	addi	r3,r2,1
  809874:	e0bffe17 	ldw	r2,-8(fp)
  809878:	10c00015 	stw	r3,0(r2)
  80987c:	e0bffe17 	ldw	r2,-8(fp)
  809880:	10800017 	ldw	r2,0(r2)
  809884:	10800003 	ldbu	r2,0(r2)
  809888:	e0bffd05 	stb	r2,-12(fp)
  }
  if (c == '0') {
  80988c:	e0bffd03 	ldbu	r2,-12(fp)
  809890:	10800c18 	cmpnei	r2,r2,48
  809894:	1000391e 	bne	r2,zero,80997c <xatoi+0x174>
    c = *(++(*str));
  809898:	e0bffe17 	ldw	r2,-8(fp)
  80989c:	10800017 	ldw	r2,0(r2)
  8098a0:	10c00044 	addi	r3,r2,1
  8098a4:	e0bffe17 	ldw	r2,-8(fp)
  8098a8:	10c00015 	stw	r3,0(r2)
  8098ac:	e0bffe17 	ldw	r2,-8(fp)
  8098b0:	10800017 	ldw	r2,0(r2)
  8098b4:	10800003 	ldbu	r2,0(r2)
  8098b8:	e0bffd05 	stb	r2,-12(fp)
    if (c <= ' ') {
  8098bc:	e0bffd03 	ldbu	r2,-12(fp)
  8098c0:	10800868 	cmpgeui	r2,r2,33
  8098c4:	1000041e 	bne	r2,zero,8098d8 <xatoi+0xd0>
      *res = 0; return 1;
  8098c8:	e0bfff17 	ldw	r2,-4(fp)
  8098cc:	10000015 	stw	zero,0(r2)
  8098d0:	00800044 	movi	r2,1
  8098d4:	00006906 	br	809a7c <xatoi+0x274>
    }
    if (c == 'x') {
  8098d8:	e0bffd03 	ldbu	r2,-12(fp)
  8098dc:	10801e18 	cmpnei	r2,r2,120
  8098e0:	10000c1e 	bne	r2,zero,809914 <xatoi+0x10c>
      radix = 16;
  8098e4:	00800404 	movi	r2,16
  8098e8:	e0bffd45 	stb	r2,-11(fp)
      c = *(++(*str));
  8098ec:	e0bffe17 	ldw	r2,-8(fp)
  8098f0:	10800017 	ldw	r2,0(r2)
  8098f4:	10c00044 	addi	r3,r2,1
  8098f8:	e0bffe17 	ldw	r2,-8(fp)
  8098fc:	10c00015 	stw	r3,0(r2)
  809900:	e0bffe17 	ldw	r2,-8(fp)
  809904:	10800017 	ldw	r2,0(r2)
  809908:	10800003 	ldbu	r2,0(r2)
  80990c:	e0bffd05 	stb	r2,-12(fp)
  809910:	00002406 	br	8099a4 <xatoi+0x19c>
    } else {
      if (c == 'b') {
  809914:	e0bffd03 	ldbu	r2,-12(fp)
  809918:	10801898 	cmpnei	r2,r2,98
  80991c:	10000c1e 	bne	r2,zero,809950 <xatoi+0x148>
        radix = 2;
  809920:	00800084 	movi	r2,2
  809924:	e0bffd45 	stb	r2,-11(fp)
        c = *(++(*str));
  809928:	e0bffe17 	ldw	r2,-8(fp)
  80992c:	10800017 	ldw	r2,0(r2)
  809930:	10c00044 	addi	r3,r2,1
  809934:	e0bffe17 	ldw	r2,-8(fp)
  809938:	10c00015 	stw	r3,0(r2)
  80993c:	e0bffe17 	ldw	r2,-8(fp)
  809940:	10800017 	ldw	r2,0(r2)
  809944:	10800003 	ldbu	r2,0(r2)
  809948:	e0bffd05 	stb	r2,-12(fp)
  80994c:	00001506 	br	8099a4 <xatoi+0x19c>
      } else {
        if ((c >= '0')&&(c <= '9'))
  809950:	e0bffd03 	ldbu	r2,-12(fp)
  809954:	10800c30 	cmpltui	r2,r2,48
  809958:	1000061e 	bne	r2,zero,809974 <xatoi+0x16c>
  80995c:	e0bffd03 	ldbu	r2,-12(fp)
  809960:	10800ea8 	cmpgeui	r2,r2,58
  809964:	1000031e 	bne	r2,zero,809974 <xatoi+0x16c>
          radix = 8;
  809968:	00800204 	movi	r2,8
  80996c:	e0bffd45 	stb	r2,-11(fp)
  809970:	00000c06 	br	8099a4 <xatoi+0x19c>
        else
          return 0;
  809974:	0005883a 	mov	r2,zero
  809978:	00004006 	br	809a7c <xatoi+0x274>
      }
    }
  } else {
    if ((c < '1')||(c > '9'))
  80997c:	e0bffd03 	ldbu	r2,-12(fp)
  809980:	10800c70 	cmpltui	r2,r2,49
  809984:	1000031e 	bne	r2,zero,809994 <xatoi+0x18c>
  809988:	e0bffd03 	ldbu	r2,-12(fp)
  80998c:	10800eb0 	cmpltui	r2,r2,58
  809990:	1000021e 	bne	r2,zero,80999c <xatoi+0x194>
      return 0;
  809994:	0005883a 	mov	r2,zero
  809998:	00003806 	br	809a7c <xatoi+0x274>
    radix = 10;
  80999c:	00800284 	movi	r2,10
  8099a0:	e0bffd45 	stb	r2,-11(fp)
  }
  val = 0;
  8099a4:	e03ffc15 	stw	zero,-16(fp)
  while (c > ' ') {
  8099a8:	00002806 	br	809a4c <xatoi+0x244>
    if (c >= 'a') c -= 0x20;
  8099ac:	e0bffd03 	ldbu	r2,-12(fp)
  8099b0:	10801870 	cmpltui	r2,r2,97
  8099b4:	1000031e 	bne	r2,zero,8099c4 <xatoi+0x1bc>
  8099b8:	e0bffd03 	ldbu	r2,-12(fp)
  8099bc:	10bff804 	addi	r2,r2,-32
  8099c0:	e0bffd05 	stb	r2,-12(fp)
    c -= '0';
  8099c4:	e0bffd03 	ldbu	r2,-12(fp)
  8099c8:	10bff404 	addi	r2,r2,-48
  8099cc:	e0bffd05 	stb	r2,-12(fp)
    if (c >= 17) {
  8099d0:	e0bffd03 	ldbu	r2,-12(fp)
  8099d4:	10800470 	cmpltui	r2,r2,17
  8099d8:	1000081e 	bne	r2,zero,8099fc <xatoi+0x1f4>
      c -= 7;
  8099dc:	e0bffd03 	ldbu	r2,-12(fp)
  8099e0:	10bffe44 	addi	r2,r2,-7
  8099e4:	e0bffd05 	stb	r2,-12(fp)
      if (c <= 9) return 0;
  8099e8:	e0bffd03 	ldbu	r2,-12(fp)
  8099ec:	108002a8 	cmpgeui	r2,r2,10
  8099f0:	1000021e 	bne	r2,zero,8099fc <xatoi+0x1f4>
  8099f4:	0005883a 	mov	r2,zero
  8099f8:	00002006 	br	809a7c <xatoi+0x274>
    }
    if (c >= radix) return 0;
  8099fc:	e0fffd03 	ldbu	r3,-12(fp)
  809a00:	e0bffd43 	ldbu	r2,-11(fp)
  809a04:	18800236 	bltu	r3,r2,809a10 <xatoi+0x208>
  809a08:	0005883a 	mov	r2,zero
  809a0c:	00001b06 	br	809a7c <xatoi+0x274>
    val = val * radix + c;
  809a10:	e0fffd43 	ldbu	r3,-11(fp)
  809a14:	e0bffc17 	ldw	r2,-16(fp)
  809a18:	1887383a 	mul	r3,r3,r2
  809a1c:	e0bffd03 	ldbu	r2,-12(fp)
  809a20:	1885883a 	add	r2,r3,r2
  809a24:	e0bffc15 	stw	r2,-16(fp)
    c = *(++(*str));
  809a28:	e0bffe17 	ldw	r2,-8(fp)
  809a2c:	10800017 	ldw	r2,0(r2)
  809a30:	10c00044 	addi	r3,r2,1
  809a34:	e0bffe17 	ldw	r2,-8(fp)
  809a38:	10c00015 	stw	r3,0(r2)
  809a3c:	e0bffe17 	ldw	r2,-8(fp)
  809a40:	10800017 	ldw	r2,0(r2)
  809a44:	10800003 	ldbu	r2,0(r2)
  809a48:	e0bffd05 	stb	r2,-12(fp)
    if ((c < '1')||(c > '9'))
      return 0;
    radix = 10;
  }
  val = 0;
  while (c > ' ') {
  809a4c:	e0bffd03 	ldbu	r2,-12(fp)
  809a50:	10800868 	cmpgeui	r2,r2,33
  809a54:	103fd51e 	bne	r2,zero,8099ac <__alt_data_end+0xff8099ac>
    }
    if (c >= radix) return 0;
    val = val * radix + c;
    c = *(++(*str));
  }
  if (s) val = -val;
  809a58:	e0bffd83 	ldbu	r2,-10(fp)
  809a5c:	10000326 	beq	r2,zero,809a6c <xatoi+0x264>
  809a60:	e0bffc17 	ldw	r2,-16(fp)
  809a64:	0085c83a 	sub	r2,zero,r2
  809a68:	e0bffc15 	stw	r2,-16(fp)
  *res = val;
  809a6c:	e0fffc17 	ldw	r3,-16(fp)
  809a70:	e0bfff17 	ldw	r2,-4(fp)
  809a74:	10c00015 	stw	r3,0(r2)
  return 1;
  809a78:	00800044 	movi	r2,1
}
  809a7c:	e037883a 	mov	sp,fp
  809a80:	df000017 	ldw	fp,0(sp)
  809a84:	dec00104 	addi	sp,sp,4
  809a88:	f800283a 	ret

00809a8c <xputc>:

void xputc (char c)
{
  809a8c:	defffd04 	addi	sp,sp,-12
  809a90:	dfc00215 	stw	ra,8(sp)
  809a94:	df000115 	stw	fp,4(sp)
  809a98:	df000104 	addi	fp,sp,4
  809a9c:	2005883a 	mov	r2,r4
  809aa0:	e0bfff05 	stb	r2,-4(fp)
  if (c == '\n') uart0_put('\r');
  809aa4:	e0bfff07 	ldb	r2,-4(fp)
  809aa8:	10800298 	cmpnei	r2,r2,10
  809aac:	1000021e 	bne	r2,zero,809ab8 <xputc+0x2c>
  809ab0:	01000344 	movi	r4,13
  809ab4:	080a1d40 	call	80a1d4 <uart0_put>
  uart0_put(c);
  809ab8:	e0bfff03 	ldbu	r2,-4(fp)
  809abc:	10803fcc 	andi	r2,r2,255
  809ac0:	1009883a 	mov	r4,r2
  809ac4:	080a1d40 	call	80a1d4 <uart0_put>
}
  809ac8:	0001883a 	nop
  809acc:	e037883a 	mov	sp,fp
  809ad0:	dfc00117 	ldw	ra,4(sp)
  809ad4:	df000017 	ldw	fp,0(sp)
  809ad8:	dec00204 	addi	sp,sp,8
  809adc:	f800283a 	ret

00809ae0 <xputs>:

void xputs (const char* str)
{
  809ae0:	defffd04 	addi	sp,sp,-12
  809ae4:	dfc00215 	stw	ra,8(sp)
  809ae8:	df000115 	stw	fp,4(sp)
  809aec:	df000104 	addi	fp,sp,4
  809af0:	e13fff15 	stw	r4,-4(fp)
  while (*str)
  809af4:	00000906 	br	809b1c <xputs+0x3c>
    xputc(*str++);
  809af8:	e0bfff17 	ldw	r2,-4(fp)
  809afc:	10c00044 	addi	r3,r2,1
  809b00:	e0ffff15 	stw	r3,-4(fp)
  809b04:	10800003 	ldbu	r2,0(r2)
  809b08:	10803fcc 	andi	r2,r2,255
  809b0c:	1080201c 	xori	r2,r2,128
  809b10:	10bfe004 	addi	r2,r2,-128
  809b14:	1009883a 	mov	r4,r2
  809b18:	0809a8c0 	call	809a8c <xputc>
  uart0_put(c);
}

void xputs (const char* str)
{
  while (*str)
  809b1c:	e0bfff17 	ldw	r2,-4(fp)
  809b20:	10800003 	ldbu	r2,0(r2)
  809b24:	10803fcc 	andi	r2,r2,255
  809b28:	1080201c 	xori	r2,r2,128
  809b2c:	10bfe004 	addi	r2,r2,-128
  809b30:	103ff11e 	bne	r2,zero,809af8 <__alt_data_end+0xff809af8>
    xputc(*str++);
}
  809b34:	0001883a 	nop
  809b38:	e037883a 	mov	sp,fp
  809b3c:	dfc00117 	ldw	ra,4(sp)
  809b40:	df000017 	ldw	fp,0(sp)
  809b44:	dec00204 	addi	sp,sp,8
  809b48:	f800283a 	ret

00809b4c <xitoa>:




void xitoa (signed long val, signed char radix, signed char len)
{
  809b4c:	defff304 	addi	sp,sp,-52
  809b50:	dfc00c15 	stw	ra,48(sp)
  809b54:	df000b15 	stw	fp,44(sp)
  809b58:	df000b04 	addi	fp,sp,44
  809b5c:	e13ffd15 	stw	r4,-12(fp)
  809b60:	2807883a 	mov	r3,r5
  809b64:	3005883a 	mov	r2,r6
  809b68:	e0fffe05 	stb	r3,-8(fp)
  809b6c:	e0bfff05 	stb	r2,-4(fp)
  unsigned char c, r, sgn = 0, pad = ' ';
  809b70:	e03ff545 	stb	zero,-43(fp)
  809b74:	00800804 	movi	r2,32
  809b78:	e0bff585 	stb	r2,-42(fp)
  unsigned char s[20], i = 0;
  809b7c:	e03ff5c5 	stb	zero,-41(fp)
  unsigned long v;


  if (radix < 0) {
  809b80:	e0bffe07 	ldb	r2,-8(fp)
  809b84:	10000a0e 	bge	r2,zero,809bb0 <xitoa+0x64>
    radix = -radix;
  809b88:	e0bffe03 	ldbu	r2,-8(fp)
  809b8c:	0085c83a 	sub	r2,zero,r2
  809b90:	e0bffe05 	stb	r2,-8(fp)
    if (val < 0) {
  809b94:	e0bffd17 	ldw	r2,-12(fp)
  809b98:	1000050e 	bge	r2,zero,809bb0 <xitoa+0x64>
      val = -val;
  809b9c:	e0bffd17 	ldw	r2,-12(fp)
  809ba0:	0085c83a 	sub	r2,zero,r2
  809ba4:	e0bffd15 	stw	r2,-12(fp)
      sgn = '-';
  809ba8:	00800b44 	movi	r2,45
  809bac:	e0bff545 	stb	r2,-43(fp)
    }
  }
  v = val;
  809bb0:	e0bffd17 	ldw	r2,-12(fp)
  809bb4:	e0bff615 	stw	r2,-40(fp)
  r = radix;
  809bb8:	e0bffe03 	ldbu	r2,-8(fp)
  809bbc:	e0bff705 	stb	r2,-36(fp)
  if (len < 0) {
  809bc0:	e0bfff07 	ldb	r2,-4(fp)
  809bc4:	1000050e 	bge	r2,zero,809bdc <xitoa+0x90>
    len = -len;
  809bc8:	e0bfff03 	ldbu	r2,-4(fp)
  809bcc:	0085c83a 	sub	r2,zero,r2
  809bd0:	e0bfff05 	stb	r2,-4(fp)
    pad = '0';
  809bd4:	00800c04 	movi	r2,48
  809bd8:	e0bff585 	stb	r2,-42(fp)
  }
  if (len > 20) return;
  809bdc:	e0bfff07 	ldb	r2,-4(fp)
  809be0:	10800550 	cmplti	r2,r2,21
  809be4:	10004326 	beq	r2,zero,809cf4 <xitoa+0x1a8>
  do {
    c = (unsigned char)(v % r);
  809be8:	e0fff703 	ldbu	r3,-36(fp)
  809bec:	e0bff617 	ldw	r2,-40(fp)
  809bf0:	180b883a 	mov	r5,r3
  809bf4:	1009883a 	mov	r4,r2
  809bf8:	080a3bc0 	call	80a3bc <__umodsi3>
  809bfc:	e0bff505 	stb	r2,-44(fp)
    if (c >= 10) c += 7;
  809c00:	e0bff503 	ldbu	r2,-44(fp)
  809c04:	108002b0 	cmpltui	r2,r2,10
  809c08:	1000031e 	bne	r2,zero,809c18 <xitoa+0xcc>
  809c0c:	e0bff503 	ldbu	r2,-44(fp)
  809c10:	108001c4 	addi	r2,r2,7
  809c14:	e0bff505 	stb	r2,-44(fp)
    c += '0';
  809c18:	e0bff503 	ldbu	r2,-44(fp)
  809c1c:	10800c04 	addi	r2,r2,48
  809c20:	e0bff505 	stb	r2,-44(fp)
    s[i++] = c;
  809c24:	e0bff5c3 	ldbu	r2,-41(fp)
  809c28:	10c00044 	addi	r3,r2,1
  809c2c:	e0fff5c5 	stb	r3,-41(fp)
  809c30:	10803fcc 	andi	r2,r2,255
  809c34:	e0fff744 	addi	r3,fp,-35
  809c38:	1885883a 	add	r2,r3,r2
  809c3c:	e0fff503 	ldbu	r3,-44(fp)
  809c40:	10c00005 	stb	r3,0(r2)
    v /= r;
  809c44:	e0bff703 	ldbu	r2,-36(fp)
  809c48:	100b883a 	mov	r5,r2
  809c4c:	e13ff617 	ldw	r4,-40(fp)
  809c50:	080a3580 	call	80a358 <__udivsi3>
  809c54:	e0bff615 	stw	r2,-40(fp)
  } while (v);
  809c58:	e0bff617 	ldw	r2,-40(fp)
  809c5c:	103fe21e 	bne	r2,zero,809be8 <__alt_data_end+0xff809be8>
  if (sgn) s[i++] = sgn;
  809c60:	e0bff543 	ldbu	r2,-43(fp)
  809c64:	10001126 	beq	r2,zero,809cac <xitoa+0x160>
  809c68:	e0bff5c3 	ldbu	r2,-41(fp)
  809c6c:	10c00044 	addi	r3,r2,1
  809c70:	e0fff5c5 	stb	r3,-41(fp)
  809c74:	10803fcc 	andi	r2,r2,255
  809c78:	e0fff744 	addi	r3,fp,-35
  809c7c:	1885883a 	add	r2,r3,r2
  809c80:	e0fff543 	ldbu	r3,-43(fp)
  809c84:	10c00005 	stb	r3,0(r2)
  while (i < len)
  809c88:	00000806 	br	809cac <xitoa+0x160>
    s[i++] = pad;
  809c8c:	e0bff5c3 	ldbu	r2,-41(fp)
  809c90:	10c00044 	addi	r3,r2,1
  809c94:	e0fff5c5 	stb	r3,-41(fp)
  809c98:	10803fcc 	andi	r2,r2,255
  809c9c:	e0fff744 	addi	r3,fp,-35
  809ca0:	1885883a 	add	r2,r3,r2
  809ca4:	e0fff583 	ldbu	r3,-42(fp)
  809ca8:	10c00005 	stb	r3,0(r2)
    c += '0';
    s[i++] = c;
    v /= r;
  } while (v);
  if (sgn) s[i++] = sgn;
  while (i < len)
  809cac:	e0fff5c3 	ldbu	r3,-41(fp)
  809cb0:	e0bfff07 	ldb	r2,-4(fp)
  809cb4:	18bff516 	blt	r3,r2,809c8c <__alt_data_end+0xff809c8c>
    s[i++] = pad;
  do
    xputc(s[--i]);
  809cb8:	e0bff5c3 	ldbu	r2,-41(fp)
  809cbc:	10bfffc4 	addi	r2,r2,-1
  809cc0:	e0bff5c5 	stb	r2,-41(fp)
  809cc4:	e0bff5c3 	ldbu	r2,-41(fp)
  809cc8:	e0fff744 	addi	r3,fp,-35
  809ccc:	1885883a 	add	r2,r3,r2
  809cd0:	10800003 	ldbu	r2,0(r2)
  809cd4:	10803fcc 	andi	r2,r2,255
  809cd8:	1080201c 	xori	r2,r2,128
  809cdc:	10bfe004 	addi	r2,r2,-128
  809ce0:	1009883a 	mov	r4,r2
  809ce4:	0809a8c0 	call	809a8c <xputc>
  while (i);
  809ce8:	e0bff5c3 	ldbu	r2,-41(fp)
  809cec:	103ff21e 	bne	r2,zero,809cb8 <__alt_data_end+0xff809cb8>
  809cf0:	00000106 	br	809cf8 <xitoa+0x1ac>
  r = radix;
  if (len < 0) {
    len = -len;
    pad = '0';
  }
  if (len > 20) return;
  809cf4:	0001883a 	nop
  while (i < len)
    s[i++] = pad;
  do
    xputc(s[--i]);
  while (i);
}
  809cf8:	e037883a 	mov	sp,fp
  809cfc:	dfc00117 	ldw	ra,4(sp)
  809d00:	df000017 	ldw	fp,0(sp)
  809d04:	dec00204 	addi	sp,sp,8
  809d08:	f800283a 	ret

00809d0c <xprintf>:




void xprintf (const char* str, ...)
{
  809d0c:	defff704 	addi	sp,sp,-36
  809d10:	dfc00515 	stw	ra,20(sp)
  809d14:	df000415 	stw	fp,16(sp)
  809d18:	df000404 	addi	fp,sp,16
  809d1c:	e13fff15 	stw	r4,-4(fp)
  809d20:	e1400215 	stw	r5,8(fp)
  809d24:	e1800315 	stw	r6,12(fp)
  809d28:	e1c00415 	stw	r7,16(fp)
  va_list arp;
  char d, r, w, s, l;


  va_start(arp, str);
  809d2c:	e0800204 	addi	r2,fp,8
  809d30:	e0bffe15 	stw	r2,-8(fp)

  while ((d = *str++) != 0) {
  809d34:	00009506 	br	809f8c <xprintf+0x280>
    if (d != '%') {
  809d38:	e0bffc07 	ldb	r2,-16(fp)
  809d3c:	10800960 	cmpeqi	r2,r2,37
  809d40:	1000041e 	bne	r2,zero,809d54 <xprintf+0x48>
      xputc(d); continue;
  809d44:	e0bffc07 	ldb	r2,-16(fp)
  809d48:	1009883a 	mov	r4,r2
  809d4c:	0809a8c0 	call	809a8c <xputc>
  809d50:	00008e06 	br	809f8c <xprintf+0x280>
    }
    d = *str++; w = r = s = l = 0;
  809d54:	e0bfff17 	ldw	r2,-4(fp)
  809d58:	10c00044 	addi	r3,r2,1
  809d5c:	e0ffff15 	stw	r3,-4(fp)
  809d60:	10800003 	ldbu	r2,0(r2)
  809d64:	e0bffc05 	stb	r2,-16(fp)
  809d68:	e03ffd05 	stb	zero,-12(fp)
  809d6c:	e0bffd03 	ldbu	r2,-12(fp)
  809d70:	e0bffcc5 	stb	r2,-13(fp)
  809d74:	e0bffcc3 	ldbu	r2,-13(fp)
  809d78:	e0bffc45 	stb	r2,-15(fp)
  809d7c:	e0bffc43 	ldbu	r2,-15(fp)
  809d80:	e0bffc85 	stb	r2,-14(fp)
    if (d == '0') {
  809d84:	e0bffc07 	ldb	r2,-16(fp)
  809d88:	10800c18 	cmpnei	r2,r2,48
  809d8c:	1000171e 	bne	r2,zero,809dec <xprintf+0xe0>
      d = *str++; s = 1;
  809d90:	e0bfff17 	ldw	r2,-4(fp)
  809d94:	10c00044 	addi	r3,r2,1
  809d98:	e0ffff15 	stw	r3,-4(fp)
  809d9c:	10800003 	ldbu	r2,0(r2)
  809da0:	e0bffc05 	stb	r2,-16(fp)
  809da4:	00800044 	movi	r2,1
  809da8:	e0bffcc5 	stb	r2,-13(fp)
    }
    while ((d >= '0')&&(d <= '9')) {
  809dac:	00000f06 	br	809dec <xprintf+0xe0>
      w += w * 10 + (d - '0');
  809db0:	e0bffc83 	ldbu	r2,-14(fp)
  809db4:	108002a4 	muli	r2,r2,10
  809db8:	1007883a 	mov	r3,r2
  809dbc:	e0bffc03 	ldbu	r2,-16(fp)
  809dc0:	1885883a 	add	r2,r3,r2
  809dc4:	1007883a 	mov	r3,r2
  809dc8:	e0bffc83 	ldbu	r2,-14(fp)
  809dcc:	1885883a 	add	r2,r3,r2
  809dd0:	10bff404 	addi	r2,r2,-48
  809dd4:	e0bffc85 	stb	r2,-14(fp)
      d = *str++;
  809dd8:	e0bfff17 	ldw	r2,-4(fp)
  809ddc:	10c00044 	addi	r3,r2,1
  809de0:	e0ffff15 	stw	r3,-4(fp)
  809de4:	10800003 	ldbu	r2,0(r2)
  809de8:	e0bffc05 	stb	r2,-16(fp)
    }
    d = *str++; w = r = s = l = 0;
    if (d == '0') {
      d = *str++; s = 1;
    }
    while ((d >= '0')&&(d <= '9')) {
  809dec:	e0bffc07 	ldb	r2,-16(fp)
  809df0:	10800c10 	cmplti	r2,r2,48
  809df4:	1000031e 	bne	r2,zero,809e04 <xprintf+0xf8>
  809df8:	e0bffc07 	ldb	r2,-16(fp)
  809dfc:	10800e90 	cmplti	r2,r2,58
  809e00:	103feb1e 	bne	r2,zero,809db0 <__alt_data_end+0xff809db0>
      w += w * 10 + (d - '0');
      d = *str++;
    }
    if (s) w = -w;
  809e04:	e0bffcc7 	ldb	r2,-13(fp)
  809e08:	10000326 	beq	r2,zero,809e18 <xprintf+0x10c>
  809e0c:	e0bffc83 	ldbu	r2,-14(fp)
  809e10:	0085c83a 	sub	r2,zero,r2
  809e14:	e0bffc85 	stb	r2,-14(fp)
    if (d == 'l') {
  809e18:	e0bffc07 	ldb	r2,-16(fp)
  809e1c:	10801b18 	cmpnei	r2,r2,108
  809e20:	1000071e 	bne	r2,zero,809e40 <xprintf+0x134>
      l = 1;
  809e24:	00800044 	movi	r2,1
  809e28:	e0bffd05 	stb	r2,-12(fp)
      d = *str++;
  809e2c:	e0bfff17 	ldw	r2,-4(fp)
  809e30:	10c00044 	addi	r3,r2,1
  809e34:	e0ffff15 	stw	r3,-4(fp)
  809e38:	10800003 	ldbu	r2,0(r2)
  809e3c:	e0bffc05 	stb	r2,-16(fp)
    }
    if (!d) break;
  809e40:	e0bffc07 	ldb	r2,-16(fp)
  809e44:	10005926 	beq	r2,zero,809fac <xprintf+0x2a0>
    if (d == 's') {
  809e48:	e0bffc07 	ldb	r2,-16(fp)
  809e4c:	10801cd8 	cmpnei	r2,r2,115
  809e50:	1000071e 	bne	r2,zero,809e70 <xprintf+0x164>
      xputs(va_arg(arp, char*));
  809e54:	e0bffe17 	ldw	r2,-8(fp)
  809e58:	10c00104 	addi	r3,r2,4
  809e5c:	e0fffe15 	stw	r3,-8(fp)
  809e60:	10800017 	ldw	r2,0(r2)
  809e64:	1009883a 	mov	r4,r2
  809e68:	0809ae00 	call	809ae0 <xputs>
      continue;
  809e6c:	00004706 	br	809f8c <xprintf+0x280>
    }
    if (d == 'c') {
  809e70:	e0bffc07 	ldb	r2,-16(fp)
  809e74:	108018d8 	cmpnei	r2,r2,99
  809e78:	10000a1e 	bne	r2,zero,809ea4 <xprintf+0x198>
      // xputc(va_arg(arp, char));
      xputc(va_arg(arp, int));
  809e7c:	e0bffe17 	ldw	r2,-8(fp)
  809e80:	10c00104 	addi	r3,r2,4
  809e84:	e0fffe15 	stw	r3,-8(fp)
  809e88:	10800017 	ldw	r2,0(r2)
  809e8c:	10803fcc 	andi	r2,r2,255
  809e90:	1080201c 	xori	r2,r2,128
  809e94:	10bfe004 	addi	r2,r2,-128
  809e98:	1009883a 	mov	r4,r2
  809e9c:	0809a8c0 	call	809a8c <xputc>
      continue;
  809ea0:	00003a06 	br	809f8c <xprintf+0x280>
    }
    if (d == 'u') r = 10;
  809ea4:	e0bffc07 	ldb	r2,-16(fp)
  809ea8:	10801d58 	cmpnei	r2,r2,117
  809eac:	1000021e 	bne	r2,zero,809eb8 <xprintf+0x1ac>
  809eb0:	00800284 	movi	r2,10
  809eb4:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'd') r = -10;
  809eb8:	e0bffc07 	ldb	r2,-16(fp)
  809ebc:	10801918 	cmpnei	r2,r2,100
  809ec0:	1000021e 	bne	r2,zero,809ecc <xprintf+0x1c0>
  809ec4:	00bffd84 	movi	r2,-10
  809ec8:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'X') r = 16;
  809ecc:	e0bffc07 	ldb	r2,-16(fp)
  809ed0:	10801618 	cmpnei	r2,r2,88
  809ed4:	1000021e 	bne	r2,zero,809ee0 <xprintf+0x1d4>
  809ed8:	00800404 	movi	r2,16
  809edc:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'b') r = 2;
  809ee0:	e0bffc07 	ldb	r2,-16(fp)
  809ee4:	10801898 	cmpnei	r2,r2,98
  809ee8:	1000021e 	bne	r2,zero,809ef4 <xprintf+0x1e8>
  809eec:	00800084 	movi	r2,2
  809ef0:	e0bffc45 	stb	r2,-15(fp)
    if (!r) break;
  809ef4:	e0bffc47 	ldb	r2,-15(fp)
  809ef8:	10002e26 	beq	r2,zero,809fb4 <xprintf+0x2a8>
    if (l) {
  809efc:	e0bffd07 	ldb	r2,-12(fp)
  809f00:	10000b26 	beq	r2,zero,809f30 <xprintf+0x224>
      xitoa((long)va_arg(arp, long), r, w);
  809f04:	e0bffe17 	ldw	r2,-8(fp)
  809f08:	10c00104 	addi	r3,r2,4
  809f0c:	e0fffe15 	stw	r3,-8(fp)
  809f10:	10800017 	ldw	r2,0(r2)
  809f14:	e0fffc47 	ldb	r3,-15(fp)
  809f18:	e13ffc87 	ldb	r4,-14(fp)
  809f1c:	200d883a 	mov	r6,r4
  809f20:	180b883a 	mov	r5,r3
  809f24:	1009883a 	mov	r4,r2
  809f28:	0809b4c0 	call	809b4c <xitoa>
  809f2c:	00001706 	br	809f8c <xprintf+0x280>
    } else {
      if (r > 0)
  809f30:	e0bffc47 	ldb	r2,-15(fp)
  809f34:	00800b0e 	bge	zero,r2,809f64 <xprintf+0x258>
        xitoa((unsigned long)va_arg(arp, int), r, w);
  809f38:	e0bffe17 	ldw	r2,-8(fp)
  809f3c:	10c00104 	addi	r3,r2,4
  809f40:	e0fffe15 	stw	r3,-8(fp)
  809f44:	10800017 	ldw	r2,0(r2)
  809f48:	e0fffc47 	ldb	r3,-15(fp)
  809f4c:	e13ffc87 	ldb	r4,-14(fp)
  809f50:	200d883a 	mov	r6,r4
  809f54:	180b883a 	mov	r5,r3
  809f58:	1009883a 	mov	r4,r2
  809f5c:	0809b4c0 	call	809b4c <xitoa>
  809f60:	00000a06 	br	809f8c <xprintf+0x280>
      else
        xitoa((long)va_arg(arp, int), r, w);
  809f64:	e0bffe17 	ldw	r2,-8(fp)
  809f68:	10c00104 	addi	r3,r2,4
  809f6c:	e0fffe15 	stw	r3,-8(fp)
  809f70:	10800017 	ldw	r2,0(r2)
  809f74:	e0fffc47 	ldb	r3,-15(fp)
  809f78:	e13ffc87 	ldb	r4,-14(fp)
  809f7c:	200d883a 	mov	r6,r4
  809f80:	180b883a 	mov	r5,r3
  809f84:	1009883a 	mov	r4,r2
  809f88:	0809b4c0 	call	809b4c <xitoa>
  char d, r, w, s, l;


  va_start(arp, str);

  while ((d = *str++) != 0) {
  809f8c:	e0bfff17 	ldw	r2,-4(fp)
  809f90:	10c00044 	addi	r3,r2,1
  809f94:	e0ffff15 	stw	r3,-4(fp)
  809f98:	10800003 	ldbu	r2,0(r2)
  809f9c:	e0bffc05 	stb	r2,-16(fp)
  809fa0:	e0bffc07 	ldb	r2,-16(fp)
  809fa4:	103f641e 	bne	r2,zero,809d38 <__alt_data_end+0xff809d38>
        xitoa((long)va_arg(arp, int), r, w);
    }
  }

  va_end(arp);
}
  809fa8:	00000306 	br	809fb8 <xprintf+0x2ac>
    if (s) w = -w;
    if (d == 'l') {
      l = 1;
      d = *str++;
    }
    if (!d) break;
  809fac:	0001883a 	nop
  809fb0:	00000106 	br	809fb8 <xprintf+0x2ac>
    }
    if (d == 'u') r = 10;
    if (d == 'd') r = -10;
    if (d == 'X') r = 16;
    if (d == 'b') r = 2;
    if (!r) break;
  809fb4:	0001883a 	nop
        xitoa((long)va_arg(arp, int), r, w);
    }
  }

  va_end(arp);
}
  809fb8:	0001883a 	nop
  809fbc:	e037883a 	mov	sp,fp
  809fc0:	dfc00117 	ldw	ra,4(sp)
  809fc4:	df000017 	ldw	fp,0(sp)
  809fc8:	dec00504 	addi	sp,sp,20
  809fcc:	f800283a 	ret

00809fd0 <put_dump>:




void put_dump (const unsigned char *buff, unsigned long ofs, int cnt)
{
  809fd0:	defffa04 	addi	sp,sp,-24
  809fd4:	dfc00515 	stw	ra,20(sp)
  809fd8:	df000415 	stw	fp,16(sp)
  809fdc:	df000404 	addi	fp,sp,16
  809fe0:	e13ffd15 	stw	r4,-12(fp)
  809fe4:	e17ffe15 	stw	r5,-8(fp)
  809fe8:	e1bfff15 	stw	r6,-4(fp)
  unsigned char n;


  xprintf("%08lX ", ofs);
  809fec:	e17ffe17 	ldw	r5,-8(fp)
  809ff0:	010020b4 	movhi	r4,130
  809ff4:	212e5c04 	addi	r4,r4,-18064
  809ff8:	0809d0c0 	call	809d0c <xprintf>
  for(n = 0; n < cnt; n++)
  809ffc:	e03ffc05 	stb	zero,-16(fp)
  80a000:	00000c06 	br	80a034 <put_dump+0x64>
    xprintf(" %02X", buff[n]);
  80a004:	e0bffc03 	ldbu	r2,-16(fp)
  80a008:	e0fffd17 	ldw	r3,-12(fp)
  80a00c:	1885883a 	add	r2,r3,r2
  80a010:	10800003 	ldbu	r2,0(r2)
  80a014:	10803fcc 	andi	r2,r2,255
  80a018:	100b883a 	mov	r5,r2
  80a01c:	010020b4 	movhi	r4,130
  80a020:	212e5e04 	addi	r4,r4,-18056
  80a024:	0809d0c0 	call	809d0c <xprintf>
{
  unsigned char n;


  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
  80a028:	e0bffc03 	ldbu	r2,-16(fp)
  80a02c:	10800044 	addi	r2,r2,1
  80a030:	e0bffc05 	stb	r2,-16(fp)
  80a034:	e0fffc03 	ldbu	r3,-16(fp)
  80a038:	e0bfff17 	ldw	r2,-4(fp)
  80a03c:	18bff116 	blt	r3,r2,80a004 <__alt_data_end+0xff80a004>
    xprintf(" %02X", buff[n]);
  xputc(' ');
  80a040:	01000804 	movi	r4,32
  80a044:	0809a8c0 	call	809a8c <xputc>
  for(n = 0; n < cnt; n++) {
  80a048:	e03ffc05 	stb	zero,-16(fp)
  80a04c:	00001d06 	br	80a0c4 <put_dump+0xf4>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
  80a050:	e0bffc03 	ldbu	r2,-16(fp)
  80a054:	e0fffd17 	ldw	r3,-12(fp)
  80a058:	1885883a 	add	r2,r3,r2
  80a05c:	10800003 	ldbu	r2,0(r2)
  80a060:	10803fcc 	andi	r2,r2,255
  80a064:	10800830 	cmpltui	r2,r2,32
  80a068:	1000071e 	bne	r2,zero,80a088 <put_dump+0xb8>
  80a06c:	e0bffc03 	ldbu	r2,-16(fp)
  80a070:	e0fffd17 	ldw	r3,-12(fp)
  80a074:	1885883a 	add	r2,r3,r2
  80a078:	10800003 	ldbu	r2,0(r2)
  80a07c:	10803fcc 	andi	r2,r2,255
  80a080:	10801ff0 	cmpltui	r2,r2,127
  80a084:	1000031e 	bne	r2,zero,80a094 <put_dump+0xc4>
      xputc('.');
  80a088:	01000b84 	movi	r4,46
  80a08c:	0809a8c0 	call	809a8c <xputc>
  80a090:	00000906 	br	80a0b8 <put_dump+0xe8>
    else
      xputc(buff[n]);
  80a094:	e0bffc03 	ldbu	r2,-16(fp)
  80a098:	e0fffd17 	ldw	r3,-12(fp)
  80a09c:	1885883a 	add	r2,r3,r2
  80a0a0:	10800003 	ldbu	r2,0(r2)
  80a0a4:	10803fcc 	andi	r2,r2,255
  80a0a8:	1080201c 	xori	r2,r2,128
  80a0ac:	10bfe004 	addi	r2,r2,-128
  80a0b0:	1009883a 	mov	r4,r2
  80a0b4:	0809a8c0 	call	809a8c <xputc>

  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
    xprintf(" %02X", buff[n]);
  xputc(' ');
  for(n = 0; n < cnt; n++) {
  80a0b8:	e0bffc03 	ldbu	r2,-16(fp)
  80a0bc:	10800044 	addi	r2,r2,1
  80a0c0:	e0bffc05 	stb	r2,-16(fp)
  80a0c4:	e0fffc03 	ldbu	r3,-16(fp)
  80a0c8:	e0bfff17 	ldw	r2,-4(fp)
  80a0cc:	18bfe016 	blt	r3,r2,80a050 <__alt_data_end+0xff80a050>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
      xputc('.');
    else
      xputc(buff[n]);
  }
  xputc('\n');
  80a0d0:	01000284 	movi	r4,10
  80a0d4:	0809a8c0 	call	809a8c <xputc>
}
  80a0d8:	0001883a 	nop
  80a0dc:	e037883a 	mov	sp,fp
  80a0e0:	dfc00117 	ldw	ra,4(sp)
  80a0e4:	df000017 	ldw	fp,0(sp)
  80a0e8:	dec00204 	addi	sp,sp,8
  80a0ec:	f800283a 	ret

0080a0f0 <get_line>:




void get_line (char *buff, int len)
{
  80a0f0:	defffa04 	addi	sp,sp,-24
  80a0f4:	dfc00515 	stw	ra,20(sp)
  80a0f8:	df000415 	stw	fp,16(sp)
  80a0fc:	df000404 	addi	fp,sp,16
  80a100:	e13ffe15 	stw	r4,-8(fp)
  80a104:	e17fff15 	stw	r5,-4(fp)
  char c;
  int idx = 0;
  80a108:	e03ffc15 	stw	zero,-16(fp)
//while(1);

  for (;;) {
    c = xgetc();
  80a10c:	080a2100 	call	80a210 <uart0_get>
  80a110:	e0bffd05 	stb	r2,-12(fp)
    //printf("%c",c);
    if (c == '\r')
  80a114:	e0bffd07 	ldb	r2,-12(fp)
  80a118:	10800358 	cmpnei	r2,r2,13
  80a11c:	10001926 	beq	r2,zero,80a184 <get_line+0x94>
    	break;
    if ((c == '\b') && idx) {
  80a120:	e0bffd07 	ldb	r2,-12(fp)
  80a124:	10800218 	cmpnei	r2,r2,8
  80a128:	1000051e 	bne	r2,zero,80a140 <get_line+0x50>
  80a12c:	e0bffc17 	ldw	r2,-16(fp)
  80a130:	10000326 	beq	r2,zero,80a140 <get_line+0x50>
      idx--;
  80a134:	e0bffc17 	ldw	r2,-16(fp)
  80a138:	10bfffc4 	addi	r2,r2,-1
  80a13c:	e0bffc15 	stw	r2,-16(fp)
    }
    if (((unsigned char)c >= ' ') && (idx < len - 1)) {
  80a140:	e0bffd03 	ldbu	r2,-12(fp)
  80a144:	10803fcc 	andi	r2,r2,255
  80a148:	10800830 	cmpltui	r2,r2,32
  80a14c:	103fef1e 	bne	r2,zero,80a10c <__alt_data_end+0xff80a10c>
  80a150:	e0bfff17 	ldw	r2,-4(fp)
  80a154:	10bfffc4 	addi	r2,r2,-1
  80a158:	e0fffc17 	ldw	r3,-16(fp)
  80a15c:	18bfeb0e 	bge	r3,r2,80a10c <__alt_data_end+0xff80a10c>
    	//printf(" space ");
        buff[idx++] = c;
  80a160:	e0bffc17 	ldw	r2,-16(fp)
  80a164:	10c00044 	addi	r3,r2,1
  80a168:	e0fffc15 	stw	r3,-16(fp)
  80a16c:	1007883a 	mov	r3,r2
  80a170:	e0bffe17 	ldw	r2,-8(fp)
  80a174:	10c5883a 	add	r2,r2,r3
  80a178:	e0fffd03 	ldbu	r3,-12(fp)
  80a17c:	10c00005 	stb	r3,0(r2)
    }

  }
  80a180:	003fe206 	br	80a10c <__alt_data_end+0xff80a10c>

  for (;;) {
    c = xgetc();
    //printf("%c",c);
    if (c == '\r')
    	break;
  80a184:	0001883a 	nop
    	//printf(" space ");
        buff[idx++] = c;
    }

  }
  buff[idx] = 0;
  80a188:	e0bffc17 	ldw	r2,-16(fp)
  80a18c:	e0fffe17 	ldw	r3,-8(fp)
  80a190:	1885883a 	add	r2,r3,r2
  80a194:	10000005 	stb	zero,0(r2)
  //xputc('\n');
}
  80a198:	0001883a 	nop
  80a19c:	e037883a 	mov	sp,fp
  80a1a0:	dfc00117 	ldw	ra,4(sp)
  80a1a4:	df000017 	ldw	fp,0(sp)
  80a1a8:	dec00204 	addi	sp,sp,8
  80a1ac:	f800283a 	ret

0080a1b0 <uart0_init>:
/*  In    : Baudrate                                                       */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_init (unsigned long Baudrate)
{
  80a1b0:	defffe04 	addi	sp,sp,-8
  80a1b4:	df000115 	stw	fp,4(sp)
  80a1b8:	df000104 	addi	fp,sp,4
  80a1bc:	e13fff15 	stw	r4,-4(fp)
//   /*
//    * Set baudrate
//    */
//   Divisor = (((UART_FREQ*10) / Baudrate) + 5) / 10;
//   IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, Divisor);
} /* uart0_init */
  80a1c0:	0001883a 	nop
  80a1c4:	e037883a 	mov	sp,fp
  80a1c8:	df000017 	ldw	fp,0(sp)
  80a1cc:	dec00104 	addi	sp,sp,4
  80a1d0:	f800283a 	ret

0080a1d4 <uart0_put>:
/*  In    : Data                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_put (unsigned char ch)
{
  80a1d4:	defffd04 	addi	sp,sp,-12
  80a1d8:	dfc00215 	stw	ra,8(sp)
  80a1dc:	df000115 	stw	fp,4(sp)
  80a1e0:	df000104 	addi	fp,sp,4
  80a1e4:	2005883a 	mov	r2,r4
  80a1e8:	e0bfff05 	stb	r2,-4(fp)
//   {
//      status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
//   }
//   IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ch);

		printf("%c",ch);
  80a1ec:	e0bfff03 	ldbu	r2,-4(fp)
  80a1f0:	1009883a 	mov	r4,r2
  80a1f4:	080a6a80 	call	80a6a8 <putchar>



} /* uart0_put */
  80a1f8:	0001883a 	nop
  80a1fc:	e037883a 	mov	sp,fp
  80a200:	dfc00117 	ldw	ra,4(sp)
  80a204:	df000017 	ldw	fp,0(sp)
  80a208:	dec00204 	addi	sp,sp,8
  80a20c:	f800283a 	ret

0080a210 <uart0_get>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
unsigned char uart0_get (void)
{
  80a210:	defffd04 	addi	sp,sp,-12
  80a214:	dfc00215 	stw	ra,8(sp)
  80a218:	df000115 	stw	fp,4(sp)
  80a21c:	df000104 	addi	fp,sp,4
//   //printf("%d",(char) data & 0xFF);
//
//      return ((char) data & 0xFF);


   ch = getc(stdin);
  80a220:	d0a00317 	ldw	r2,-32756(gp)
  80a224:	10800117 	ldw	r2,4(r2)
  80a228:	1009883a 	mov	r4,r2
  80a22c:	080a4840 	call	80a484 <getc>
  80a230:	e0bfff05 	stb	r2,-4(fp)
   if (ch == 10) ch = 13;
  80a234:	e0bfff07 	ldb	r2,-4(fp)
  80a238:	10800298 	cmpnei	r2,r2,10
  80a23c:	1000021e 	bne	r2,zero,80a248 <uart0_get+0x38>
  80a240:	00800344 	movi	r2,13
  80a244:	e0bfff05 	stb	r2,-4(fp)

   return(ch);
  80a248:	e0bfff03 	ldbu	r2,-4(fp)

} /* uart0_get */
  80a24c:	e037883a 	mov	sp,fp
  80a250:	dfc00117 	ldw	ra,4(sp)
  80a254:	df000017 	ldw	fp,0(sp)
  80a258:	dec00204 	addi	sp,sp,8
  80a25c:	f800283a 	ret

0080a260 <__divsi3>:
  80a260:	20001b16 	blt	r4,zero,80a2d0 <__divsi3+0x70>
  80a264:	000f883a 	mov	r7,zero
  80a268:	28001616 	blt	r5,zero,80a2c4 <__divsi3+0x64>
  80a26c:	200d883a 	mov	r6,r4
  80a270:	29001a2e 	bgeu	r5,r4,80a2dc <__divsi3+0x7c>
  80a274:	00800804 	movi	r2,32
  80a278:	00c00044 	movi	r3,1
  80a27c:	00000106 	br	80a284 <__divsi3+0x24>
  80a280:	10000d26 	beq	r2,zero,80a2b8 <__divsi3+0x58>
  80a284:	294b883a 	add	r5,r5,r5
  80a288:	10bfffc4 	addi	r2,r2,-1
  80a28c:	18c7883a 	add	r3,r3,r3
  80a290:	293ffb36 	bltu	r5,r4,80a280 <__alt_data_end+0xff80a280>
  80a294:	0005883a 	mov	r2,zero
  80a298:	18000726 	beq	r3,zero,80a2b8 <__divsi3+0x58>
  80a29c:	0005883a 	mov	r2,zero
  80a2a0:	31400236 	bltu	r6,r5,80a2ac <__divsi3+0x4c>
  80a2a4:	314dc83a 	sub	r6,r6,r5
  80a2a8:	10c4b03a 	or	r2,r2,r3
  80a2ac:	1806d07a 	srli	r3,r3,1
  80a2b0:	280ad07a 	srli	r5,r5,1
  80a2b4:	183ffa1e 	bne	r3,zero,80a2a0 <__alt_data_end+0xff80a2a0>
  80a2b8:	38000126 	beq	r7,zero,80a2c0 <__divsi3+0x60>
  80a2bc:	0085c83a 	sub	r2,zero,r2
  80a2c0:	f800283a 	ret
  80a2c4:	014bc83a 	sub	r5,zero,r5
  80a2c8:	39c0005c 	xori	r7,r7,1
  80a2cc:	003fe706 	br	80a26c <__alt_data_end+0xff80a26c>
  80a2d0:	0109c83a 	sub	r4,zero,r4
  80a2d4:	01c00044 	movi	r7,1
  80a2d8:	003fe306 	br	80a268 <__alt_data_end+0xff80a268>
  80a2dc:	00c00044 	movi	r3,1
  80a2e0:	003fee06 	br	80a29c <__alt_data_end+0xff80a29c>

0080a2e4 <__modsi3>:
  80a2e4:	20001716 	blt	r4,zero,80a344 <__modsi3+0x60>
  80a2e8:	000f883a 	mov	r7,zero
  80a2ec:	2005883a 	mov	r2,r4
  80a2f0:	28001216 	blt	r5,zero,80a33c <__modsi3+0x58>
  80a2f4:	2900162e 	bgeu	r5,r4,80a350 <__modsi3+0x6c>
  80a2f8:	01800804 	movi	r6,32
  80a2fc:	00c00044 	movi	r3,1
  80a300:	00000106 	br	80a308 <__modsi3+0x24>
  80a304:	30000a26 	beq	r6,zero,80a330 <__modsi3+0x4c>
  80a308:	294b883a 	add	r5,r5,r5
  80a30c:	31bfffc4 	addi	r6,r6,-1
  80a310:	18c7883a 	add	r3,r3,r3
  80a314:	293ffb36 	bltu	r5,r4,80a304 <__alt_data_end+0xff80a304>
  80a318:	18000526 	beq	r3,zero,80a330 <__modsi3+0x4c>
  80a31c:	1806d07a 	srli	r3,r3,1
  80a320:	11400136 	bltu	r2,r5,80a328 <__modsi3+0x44>
  80a324:	1145c83a 	sub	r2,r2,r5
  80a328:	280ad07a 	srli	r5,r5,1
  80a32c:	183ffb1e 	bne	r3,zero,80a31c <__alt_data_end+0xff80a31c>
  80a330:	38000126 	beq	r7,zero,80a338 <__modsi3+0x54>
  80a334:	0085c83a 	sub	r2,zero,r2
  80a338:	f800283a 	ret
  80a33c:	014bc83a 	sub	r5,zero,r5
  80a340:	003fec06 	br	80a2f4 <__alt_data_end+0xff80a2f4>
  80a344:	0109c83a 	sub	r4,zero,r4
  80a348:	01c00044 	movi	r7,1
  80a34c:	003fe706 	br	80a2ec <__alt_data_end+0xff80a2ec>
  80a350:	00c00044 	movi	r3,1
  80a354:	003ff106 	br	80a31c <__alt_data_end+0xff80a31c>

0080a358 <__udivsi3>:
  80a358:	200d883a 	mov	r6,r4
  80a35c:	2900152e 	bgeu	r5,r4,80a3b4 <__udivsi3+0x5c>
  80a360:	28001416 	blt	r5,zero,80a3b4 <__udivsi3+0x5c>
  80a364:	00800804 	movi	r2,32
  80a368:	00c00044 	movi	r3,1
  80a36c:	00000206 	br	80a378 <__udivsi3+0x20>
  80a370:	10000e26 	beq	r2,zero,80a3ac <__udivsi3+0x54>
  80a374:	28000516 	blt	r5,zero,80a38c <__udivsi3+0x34>
  80a378:	294b883a 	add	r5,r5,r5
  80a37c:	10bfffc4 	addi	r2,r2,-1
  80a380:	18c7883a 	add	r3,r3,r3
  80a384:	293ffa36 	bltu	r5,r4,80a370 <__alt_data_end+0xff80a370>
  80a388:	18000826 	beq	r3,zero,80a3ac <__udivsi3+0x54>
  80a38c:	0005883a 	mov	r2,zero
  80a390:	31400236 	bltu	r6,r5,80a39c <__udivsi3+0x44>
  80a394:	314dc83a 	sub	r6,r6,r5
  80a398:	10c4b03a 	or	r2,r2,r3
  80a39c:	1806d07a 	srli	r3,r3,1
  80a3a0:	280ad07a 	srli	r5,r5,1
  80a3a4:	183ffa1e 	bne	r3,zero,80a390 <__alt_data_end+0xff80a390>
  80a3a8:	f800283a 	ret
  80a3ac:	0005883a 	mov	r2,zero
  80a3b0:	f800283a 	ret
  80a3b4:	00c00044 	movi	r3,1
  80a3b8:	003ff406 	br	80a38c <__alt_data_end+0xff80a38c>

0080a3bc <__umodsi3>:
  80a3bc:	2005883a 	mov	r2,r4
  80a3c0:	2900122e 	bgeu	r5,r4,80a40c <__umodsi3+0x50>
  80a3c4:	28001116 	blt	r5,zero,80a40c <__umodsi3+0x50>
  80a3c8:	01800804 	movi	r6,32
  80a3cc:	00c00044 	movi	r3,1
  80a3d0:	00000206 	br	80a3dc <__umodsi3+0x20>
  80a3d4:	30000c26 	beq	r6,zero,80a408 <__umodsi3+0x4c>
  80a3d8:	28000516 	blt	r5,zero,80a3f0 <__umodsi3+0x34>
  80a3dc:	294b883a 	add	r5,r5,r5
  80a3e0:	31bfffc4 	addi	r6,r6,-1
  80a3e4:	18c7883a 	add	r3,r3,r3
  80a3e8:	293ffa36 	bltu	r5,r4,80a3d4 <__alt_data_end+0xff80a3d4>
  80a3ec:	18000626 	beq	r3,zero,80a408 <__umodsi3+0x4c>
  80a3f0:	1806d07a 	srli	r3,r3,1
  80a3f4:	11400136 	bltu	r2,r5,80a3fc <__umodsi3+0x40>
  80a3f8:	1145c83a 	sub	r2,r2,r5
  80a3fc:	280ad07a 	srli	r5,r5,1
  80a400:	183ffb1e 	bne	r3,zero,80a3f0 <__alt_data_end+0xff80a3f0>
  80a404:	f800283a 	ret
  80a408:	f800283a 	ret
  80a40c:	00c00044 	movi	r3,1
  80a410:	003ff706 	br	80a3f0 <__alt_data_end+0xff80a3f0>

0080a414 <_getc_r>:
  80a414:	defffd04 	addi	sp,sp,-12
  80a418:	dc000115 	stw	r16,4(sp)
  80a41c:	dfc00215 	stw	ra,8(sp)
  80a420:	2021883a 	mov	r16,r4
  80a424:	20000226 	beq	r4,zero,80a430 <_getc_r+0x1c>
  80a428:	20800e17 	ldw	r2,56(r4)
  80a42c:	10000c26 	beq	r2,zero,80a460 <_getc_r+0x4c>
  80a430:	28800117 	ldw	r2,4(r5)
  80a434:	10bfffc4 	addi	r2,r2,-1
  80a438:	28800115 	stw	r2,4(r5)
  80a43c:	10000c16 	blt	r2,zero,80a470 <_getc_r+0x5c>
  80a440:	28800017 	ldw	r2,0(r5)
  80a444:	10c00044 	addi	r3,r2,1
  80a448:	28c00015 	stw	r3,0(r5)
  80a44c:	10800003 	ldbu	r2,0(r2)
  80a450:	dfc00217 	ldw	ra,8(sp)
  80a454:	dc000117 	ldw	r16,4(sp)
  80a458:	dec00304 	addi	sp,sp,12
  80a45c:	f800283a 	ret
  80a460:	d9400015 	stw	r5,0(sp)
  80a464:	080eb140 	call	80eb14 <__sinit>
  80a468:	d9400017 	ldw	r5,0(sp)
  80a46c:	003ff006 	br	80a430 <__alt_data_end+0xff80a430>
  80a470:	8009883a 	mov	r4,r16
  80a474:	dfc00217 	ldw	ra,8(sp)
  80a478:	dc000117 	ldw	r16,4(sp)
  80a47c:	dec00304 	addi	sp,sp,12
  80a480:	080a6c01 	jmpi	80a6c0 <__srget_r>

0080a484 <getc>:
  80a484:	008020b4 	movhi	r2,130
  80a488:	defffd04 	addi	sp,sp,-12
  80a48c:	10b30204 	addi	r2,r2,-13304
  80a490:	dc400115 	stw	r17,4(sp)
  80a494:	14400017 	ldw	r17,0(r2)
  80a498:	dc000015 	stw	r16,0(sp)
  80a49c:	dfc00215 	stw	ra,8(sp)
  80a4a0:	2021883a 	mov	r16,r4
  80a4a4:	88000226 	beq	r17,zero,80a4b0 <getc+0x2c>
  80a4a8:	88800e17 	ldw	r2,56(r17)
  80a4ac:	10000d26 	beq	r2,zero,80a4e4 <getc+0x60>
  80a4b0:	80800117 	ldw	r2,4(r16)
  80a4b4:	10bfffc4 	addi	r2,r2,-1
  80a4b8:	80800115 	stw	r2,4(r16)
  80a4bc:	10000c16 	blt	r2,zero,80a4f0 <getc+0x6c>
  80a4c0:	80800017 	ldw	r2,0(r16)
  80a4c4:	10c00044 	addi	r3,r2,1
  80a4c8:	80c00015 	stw	r3,0(r16)
  80a4cc:	10800003 	ldbu	r2,0(r2)
  80a4d0:	dfc00217 	ldw	ra,8(sp)
  80a4d4:	dc400117 	ldw	r17,4(sp)
  80a4d8:	dc000017 	ldw	r16,0(sp)
  80a4dc:	dec00304 	addi	sp,sp,12
  80a4e0:	f800283a 	ret
  80a4e4:	8809883a 	mov	r4,r17
  80a4e8:	080eb140 	call	80eb14 <__sinit>
  80a4ec:	003ff006 	br	80a4b0 <__alt_data_end+0xff80a4b0>
  80a4f0:	800b883a 	mov	r5,r16
  80a4f4:	8809883a 	mov	r4,r17
  80a4f8:	dfc00217 	ldw	ra,8(sp)
  80a4fc:	dc400117 	ldw	r17,4(sp)
  80a500:	dc000017 	ldw	r16,0(sp)
  80a504:	dec00304 	addi	sp,sp,12
  80a508:	080a6c01 	jmpi	80a6c0 <__srget_r>

0080a50c <memset>:
  80a50c:	20c000cc 	andi	r3,r4,3
  80a510:	2005883a 	mov	r2,r4
  80a514:	18004426 	beq	r3,zero,80a628 <memset+0x11c>
  80a518:	31ffffc4 	addi	r7,r6,-1
  80a51c:	30004026 	beq	r6,zero,80a620 <memset+0x114>
  80a520:	2813883a 	mov	r9,r5
  80a524:	200d883a 	mov	r6,r4
  80a528:	2007883a 	mov	r3,r4
  80a52c:	00000406 	br	80a540 <memset+0x34>
  80a530:	3a3fffc4 	addi	r8,r7,-1
  80a534:	31800044 	addi	r6,r6,1
  80a538:	38003926 	beq	r7,zero,80a620 <memset+0x114>
  80a53c:	400f883a 	mov	r7,r8
  80a540:	18c00044 	addi	r3,r3,1
  80a544:	32400005 	stb	r9,0(r6)
  80a548:	1a0000cc 	andi	r8,r3,3
  80a54c:	403ff81e 	bne	r8,zero,80a530 <__alt_data_end+0xff80a530>
  80a550:	010000c4 	movi	r4,3
  80a554:	21c02d2e 	bgeu	r4,r7,80a60c <memset+0x100>
  80a558:	29003fcc 	andi	r4,r5,255
  80a55c:	200c923a 	slli	r6,r4,8
  80a560:	3108b03a 	or	r4,r6,r4
  80a564:	200c943a 	slli	r6,r4,16
  80a568:	218cb03a 	or	r6,r4,r6
  80a56c:	010003c4 	movi	r4,15
  80a570:	21c0182e 	bgeu	r4,r7,80a5d4 <memset+0xc8>
  80a574:	3b3ffc04 	addi	r12,r7,-16
  80a578:	6018d13a 	srli	r12,r12,4
  80a57c:	1a000104 	addi	r8,r3,4
  80a580:	1ac00204 	addi	r11,r3,8
  80a584:	6008913a 	slli	r4,r12,4
  80a588:	1a800304 	addi	r10,r3,12
  80a58c:	1813883a 	mov	r9,r3
  80a590:	21000504 	addi	r4,r4,20
  80a594:	1909883a 	add	r4,r3,r4
  80a598:	49800015 	stw	r6,0(r9)
  80a59c:	41800015 	stw	r6,0(r8)
  80a5a0:	59800015 	stw	r6,0(r11)
  80a5a4:	51800015 	stw	r6,0(r10)
  80a5a8:	42000404 	addi	r8,r8,16
  80a5ac:	4a400404 	addi	r9,r9,16
  80a5b0:	5ac00404 	addi	r11,r11,16
  80a5b4:	52800404 	addi	r10,r10,16
  80a5b8:	413ff71e 	bne	r8,r4,80a598 <__alt_data_end+0xff80a598>
  80a5bc:	63000044 	addi	r12,r12,1
  80a5c0:	6018913a 	slli	r12,r12,4
  80a5c4:	39c003cc 	andi	r7,r7,15
  80a5c8:	010000c4 	movi	r4,3
  80a5cc:	1b07883a 	add	r3,r3,r12
  80a5d0:	21c00e2e 	bgeu	r4,r7,80a60c <memset+0x100>
  80a5d4:	1813883a 	mov	r9,r3
  80a5d8:	3811883a 	mov	r8,r7
  80a5dc:	010000c4 	movi	r4,3
  80a5e0:	49800015 	stw	r6,0(r9)
  80a5e4:	423fff04 	addi	r8,r8,-4
  80a5e8:	4a400104 	addi	r9,r9,4
  80a5ec:	223ffc36 	bltu	r4,r8,80a5e0 <__alt_data_end+0xff80a5e0>
  80a5f0:	393fff04 	addi	r4,r7,-4
  80a5f4:	2008d0ba 	srli	r4,r4,2
  80a5f8:	39c000cc 	andi	r7,r7,3
  80a5fc:	21000044 	addi	r4,r4,1
  80a600:	2109883a 	add	r4,r4,r4
  80a604:	2109883a 	add	r4,r4,r4
  80a608:	1907883a 	add	r3,r3,r4
  80a60c:	38000526 	beq	r7,zero,80a624 <memset+0x118>
  80a610:	19cf883a 	add	r7,r3,r7
  80a614:	19400005 	stb	r5,0(r3)
  80a618:	18c00044 	addi	r3,r3,1
  80a61c:	38fffd1e 	bne	r7,r3,80a614 <__alt_data_end+0xff80a614>
  80a620:	f800283a 	ret
  80a624:	f800283a 	ret
  80a628:	2007883a 	mov	r3,r4
  80a62c:	300f883a 	mov	r7,r6
  80a630:	003fc706 	br	80a550 <__alt_data_end+0xff80a550>

0080a634 <_printf_r>:
  80a634:	defffd04 	addi	sp,sp,-12
  80a638:	2805883a 	mov	r2,r5
  80a63c:	dfc00015 	stw	ra,0(sp)
  80a640:	d9800115 	stw	r6,4(sp)
  80a644:	d9c00215 	stw	r7,8(sp)
  80a648:	21400217 	ldw	r5,8(r4)
  80a64c:	d9c00104 	addi	r7,sp,4
  80a650:	100d883a 	mov	r6,r2
  80a654:	080a8700 	call	80a870 <___vfprintf_internal_r>
  80a658:	dfc00017 	ldw	ra,0(sp)
  80a65c:	dec00304 	addi	sp,sp,12
  80a660:	f800283a 	ret

0080a664 <printf>:
  80a664:	defffc04 	addi	sp,sp,-16
  80a668:	dfc00015 	stw	ra,0(sp)
  80a66c:	d9400115 	stw	r5,4(sp)
  80a670:	d9800215 	stw	r6,8(sp)
  80a674:	d9c00315 	stw	r7,12(sp)
  80a678:	008020b4 	movhi	r2,130
  80a67c:	10b30204 	addi	r2,r2,-13304
  80a680:	10800017 	ldw	r2,0(r2)
  80a684:	200b883a 	mov	r5,r4
  80a688:	d9800104 	addi	r6,sp,4
  80a68c:	11000217 	ldw	r4,8(r2)
  80a690:	080ca680 	call	80ca68 <__vfprintf_internal>
  80a694:	dfc00017 	ldw	ra,0(sp)
  80a698:	dec00404 	addi	sp,sp,16
  80a69c:	f800283a 	ret

0080a6a0 <_putchar_r>:
  80a6a0:	21800217 	ldw	r6,8(r4)
  80a6a4:	0810dec1 	jmpi	810dec <_putc_r>

0080a6a8 <putchar>:
  80a6a8:	008020b4 	movhi	r2,130
  80a6ac:	10b30204 	addi	r2,r2,-13304
  80a6b0:	200b883a 	mov	r5,r4
  80a6b4:	11000017 	ldw	r4,0(r2)
  80a6b8:	21800217 	ldw	r6,8(r4)
  80a6bc:	0810dec1 	jmpi	810dec <_putc_r>

0080a6c0 <__srget_r>:
  80a6c0:	defffd04 	addi	sp,sp,-12
  80a6c4:	dc400115 	stw	r17,4(sp)
  80a6c8:	dc000015 	stw	r16,0(sp)
  80a6cc:	dfc00215 	stw	ra,8(sp)
  80a6d0:	2023883a 	mov	r17,r4
  80a6d4:	2821883a 	mov	r16,r5
  80a6d8:	20000226 	beq	r4,zero,80a6e4 <__srget_r+0x24>
  80a6dc:	20800e17 	ldw	r2,56(r4)
  80a6e0:	10001026 	beq	r2,zero,80a724 <__srget_r+0x64>
  80a6e4:	800b883a 	mov	r5,r16
  80a6e8:	8809883a 	mov	r4,r17
  80a6ec:	0810f700 	call	810f70 <__srefill_r>
  80a6f0:	10000e1e 	bne	r2,zero,80a72c <__srget_r+0x6c>
  80a6f4:	80c00017 	ldw	r3,0(r16)
  80a6f8:	80800117 	ldw	r2,4(r16)
  80a6fc:	19000044 	addi	r4,r3,1
  80a700:	10bfffc4 	addi	r2,r2,-1
  80a704:	80800115 	stw	r2,4(r16)
  80a708:	81000015 	stw	r4,0(r16)
  80a70c:	18800003 	ldbu	r2,0(r3)
  80a710:	dfc00217 	ldw	ra,8(sp)
  80a714:	dc400117 	ldw	r17,4(sp)
  80a718:	dc000017 	ldw	r16,0(sp)
  80a71c:	dec00304 	addi	sp,sp,12
  80a720:	f800283a 	ret
  80a724:	080eb140 	call	80eb14 <__sinit>
  80a728:	003fee06 	br	80a6e4 <__alt_data_end+0xff80a6e4>
  80a72c:	00bfffc4 	movi	r2,-1
  80a730:	003ff706 	br	80a710 <__alt_data_end+0xff80a710>

0080a734 <__srget>:
  80a734:	008020b4 	movhi	r2,130
  80a738:	10b30204 	addi	r2,r2,-13304
  80a73c:	200b883a 	mov	r5,r4
  80a740:	11000017 	ldw	r4,0(r2)
  80a744:	080a6c01 	jmpi	80a6c0 <__srget_r>

0080a748 <strcpy>:
  80a748:	2906b03a 	or	r3,r5,r4
  80a74c:	18c000cc 	andi	r3,r3,3
  80a750:	2005883a 	mov	r2,r4
  80a754:	1800161e 	bne	r3,zero,80a7b0 <strcpy+0x68>
  80a758:	29c00017 	ldw	r7,0(r5)
  80a75c:	02ffbff4 	movhi	r11,65279
  80a760:	5affbfc4 	addi	r11,r11,-257
  80a764:	02a02074 	movhi	r10,32897
  80a768:	01c6303a 	nor	r3,zero,r7
  80a76c:	3ac9883a 	add	r4,r7,r11
  80a770:	52a02004 	addi	r10,r10,-32640
  80a774:	20c6703a 	and	r3,r4,r3
  80a778:	1a86703a 	and	r3,r3,r10
  80a77c:	18000c1e 	bne	r3,zero,80a7b0 <strcpy+0x68>
  80a780:	1011883a 	mov	r8,r2
  80a784:	41c00015 	stw	r7,0(r8)
  80a788:	29400104 	addi	r5,r5,4
  80a78c:	29c00017 	ldw	r7,0(r5)
  80a790:	41800104 	addi	r6,r8,4
  80a794:	3011883a 	mov	r8,r6
  80a798:	3ad3883a 	add	r9,r7,r11
  80a79c:	01c6303a 	nor	r3,zero,r7
  80a7a0:	48c6703a 	and	r3,r9,r3
  80a7a4:	1a86703a 	and	r3,r3,r10
  80a7a8:	183ff626 	beq	r3,zero,80a784 <__alt_data_end+0xff80a784>
  80a7ac:	00000106 	br	80a7b4 <strcpy+0x6c>
  80a7b0:	100d883a 	mov	r6,r2
  80a7b4:	28c00003 	ldbu	r3,0(r5)
  80a7b8:	31800044 	addi	r6,r6,1
  80a7bc:	29400044 	addi	r5,r5,1
  80a7c0:	30ffffc5 	stb	r3,-1(r6)
  80a7c4:	18c03fcc 	andi	r3,r3,255
  80a7c8:	18c0201c 	xori	r3,r3,128
  80a7cc:	18ffe004 	addi	r3,r3,-128
  80a7d0:	183ff81e 	bne	r3,zero,80a7b4 <__alt_data_end+0xff80a7b4>
  80a7d4:	f800283a 	ret

0080a7d8 <strlen>:
  80a7d8:	208000cc 	andi	r2,r4,3
  80a7dc:	10002026 	beq	r2,zero,80a860 <strlen+0x88>
  80a7e0:	20800007 	ldb	r2,0(r4)
  80a7e4:	10002026 	beq	r2,zero,80a868 <strlen+0x90>
  80a7e8:	2005883a 	mov	r2,r4
  80a7ec:	00000206 	br	80a7f8 <strlen+0x20>
  80a7f0:	10c00007 	ldb	r3,0(r2)
  80a7f4:	18001826 	beq	r3,zero,80a858 <strlen+0x80>
  80a7f8:	10800044 	addi	r2,r2,1
  80a7fc:	10c000cc 	andi	r3,r2,3
  80a800:	183ffb1e 	bne	r3,zero,80a7f0 <__alt_data_end+0xff80a7f0>
  80a804:	10c00017 	ldw	r3,0(r2)
  80a808:	01ffbff4 	movhi	r7,65279
  80a80c:	39ffbfc4 	addi	r7,r7,-257
  80a810:	00ca303a 	nor	r5,zero,r3
  80a814:	01a02074 	movhi	r6,32897
  80a818:	19c7883a 	add	r3,r3,r7
  80a81c:	31a02004 	addi	r6,r6,-32640
  80a820:	1946703a 	and	r3,r3,r5
  80a824:	1986703a 	and	r3,r3,r6
  80a828:	1800091e 	bne	r3,zero,80a850 <strlen+0x78>
  80a82c:	10800104 	addi	r2,r2,4
  80a830:	10c00017 	ldw	r3,0(r2)
  80a834:	19cb883a 	add	r5,r3,r7
  80a838:	00c6303a 	nor	r3,zero,r3
  80a83c:	28c6703a 	and	r3,r5,r3
  80a840:	1986703a 	and	r3,r3,r6
  80a844:	183ff926 	beq	r3,zero,80a82c <__alt_data_end+0xff80a82c>
  80a848:	00000106 	br	80a850 <strlen+0x78>
  80a84c:	10800044 	addi	r2,r2,1
  80a850:	10c00007 	ldb	r3,0(r2)
  80a854:	183ffd1e 	bne	r3,zero,80a84c <__alt_data_end+0xff80a84c>
  80a858:	1105c83a 	sub	r2,r2,r4
  80a85c:	f800283a 	ret
  80a860:	2005883a 	mov	r2,r4
  80a864:	003fe706 	br	80a804 <__alt_data_end+0xff80a804>
  80a868:	0005883a 	mov	r2,zero
  80a86c:	f800283a 	ret

0080a870 <___vfprintf_internal_r>:
  80a870:	deffb804 	addi	sp,sp,-288
  80a874:	dfc04715 	stw	ra,284(sp)
  80a878:	ddc04515 	stw	r23,276(sp)
  80a87c:	dd404315 	stw	r21,268(sp)
  80a880:	d9002c15 	stw	r4,176(sp)
  80a884:	282f883a 	mov	r23,r5
  80a888:	302b883a 	mov	r21,r6
  80a88c:	d9c02d15 	stw	r7,180(sp)
  80a890:	df004615 	stw	fp,280(sp)
  80a894:	dd804415 	stw	r22,272(sp)
  80a898:	dd004215 	stw	r20,264(sp)
  80a89c:	dcc04115 	stw	r19,260(sp)
  80a8a0:	dc804015 	stw	r18,256(sp)
  80a8a4:	dc403f15 	stw	r17,252(sp)
  80a8a8:	dc003e15 	stw	r16,248(sp)
  80a8ac:	080f1cc0 	call	80f1cc <_localeconv_r>
  80a8b0:	10800017 	ldw	r2,0(r2)
  80a8b4:	1009883a 	mov	r4,r2
  80a8b8:	d8803415 	stw	r2,208(sp)
  80a8bc:	080a7d80 	call	80a7d8 <strlen>
  80a8c0:	d8803715 	stw	r2,220(sp)
  80a8c4:	d8802c17 	ldw	r2,176(sp)
  80a8c8:	10000226 	beq	r2,zero,80a8d4 <___vfprintf_internal_r+0x64>
  80a8cc:	10800e17 	ldw	r2,56(r2)
  80a8d0:	1000f926 	beq	r2,zero,80acb8 <___vfprintf_internal_r+0x448>
  80a8d4:	b880030b 	ldhu	r2,12(r23)
  80a8d8:	10c8000c 	andi	r3,r2,8192
  80a8dc:	1800061e 	bne	r3,zero,80a8f8 <___vfprintf_internal_r+0x88>
  80a8e0:	b9001917 	ldw	r4,100(r23)
  80a8e4:	00f7ffc4 	movi	r3,-8193
  80a8e8:	10880014 	ori	r2,r2,8192
  80a8ec:	20c6703a 	and	r3,r4,r3
  80a8f0:	b880030d 	sth	r2,12(r23)
  80a8f4:	b8c01915 	stw	r3,100(r23)
  80a8f8:	10c0020c 	andi	r3,r2,8
  80a8fc:	1800c126 	beq	r3,zero,80ac04 <___vfprintf_internal_r+0x394>
  80a900:	b8c00417 	ldw	r3,16(r23)
  80a904:	1800bf26 	beq	r3,zero,80ac04 <___vfprintf_internal_r+0x394>
  80a908:	1080068c 	andi	r2,r2,26
  80a90c:	00c00284 	movi	r3,10
  80a910:	10c0c426 	beq	r2,r3,80ac24 <___vfprintf_internal_r+0x3b4>
  80a914:	d8c00404 	addi	r3,sp,16
  80a918:	050020b4 	movhi	r20,130
  80a91c:	d9001e04 	addi	r4,sp,120
  80a920:	a52e7184 	addi	r20,r20,-17978
  80a924:	d8c01e15 	stw	r3,120(sp)
  80a928:	d8002015 	stw	zero,128(sp)
  80a92c:	d8001f15 	stw	zero,124(sp)
  80a930:	d8003315 	stw	zero,204(sp)
  80a934:	d8003615 	stw	zero,216(sp)
  80a938:	d8003815 	stw	zero,224(sp)
  80a93c:	1811883a 	mov	r8,r3
  80a940:	d8003915 	stw	zero,228(sp)
  80a944:	d8003a15 	stw	zero,232(sp)
  80a948:	d8002f15 	stw	zero,188(sp)
  80a94c:	d9002815 	stw	r4,160(sp)
  80a950:	a8800007 	ldb	r2,0(r21)
  80a954:	10027b26 	beq	r2,zero,80b344 <___vfprintf_internal_r+0xad4>
  80a958:	00c00944 	movi	r3,37
  80a95c:	a821883a 	mov	r16,r21
  80a960:	10c0021e 	bne	r2,r3,80a96c <___vfprintf_internal_r+0xfc>
  80a964:	00001406 	br	80a9b8 <___vfprintf_internal_r+0x148>
  80a968:	10c00326 	beq	r2,r3,80a978 <___vfprintf_internal_r+0x108>
  80a96c:	84000044 	addi	r16,r16,1
  80a970:	80800007 	ldb	r2,0(r16)
  80a974:	103ffc1e 	bne	r2,zero,80a968 <__alt_data_end+0xff80a968>
  80a978:	8563c83a 	sub	r17,r16,r21
  80a97c:	88000e26 	beq	r17,zero,80a9b8 <___vfprintf_internal_r+0x148>
  80a980:	d8c02017 	ldw	r3,128(sp)
  80a984:	d8801f17 	ldw	r2,124(sp)
  80a988:	45400015 	stw	r21,0(r8)
  80a98c:	1c47883a 	add	r3,r3,r17
  80a990:	10800044 	addi	r2,r2,1
  80a994:	d8c02015 	stw	r3,128(sp)
  80a998:	44400115 	stw	r17,4(r8)
  80a99c:	d8801f15 	stw	r2,124(sp)
  80a9a0:	00c001c4 	movi	r3,7
  80a9a4:	1880a716 	blt	r3,r2,80ac44 <___vfprintf_internal_r+0x3d4>
  80a9a8:	42000204 	addi	r8,r8,8
  80a9ac:	d9402f17 	ldw	r5,188(sp)
  80a9b0:	2c4b883a 	add	r5,r5,r17
  80a9b4:	d9402f15 	stw	r5,188(sp)
  80a9b8:	80800007 	ldb	r2,0(r16)
  80a9bc:	1000a826 	beq	r2,zero,80ac60 <___vfprintf_internal_r+0x3f0>
  80a9c0:	84400047 	ldb	r17,1(r16)
  80a9c4:	00bfffc4 	movi	r2,-1
  80a9c8:	85400044 	addi	r21,r16,1
  80a9cc:	d8002785 	stb	zero,158(sp)
  80a9d0:	0007883a 	mov	r3,zero
  80a9d4:	000f883a 	mov	r7,zero
  80a9d8:	d8802915 	stw	r2,164(sp)
  80a9dc:	d8003115 	stw	zero,196(sp)
  80a9e0:	0025883a 	mov	r18,zero
  80a9e4:	01401604 	movi	r5,88
  80a9e8:	01800244 	movi	r6,9
  80a9ec:	02800a84 	movi	r10,42
  80a9f0:	02401b04 	movi	r9,108
  80a9f4:	ad400044 	addi	r21,r21,1
  80a9f8:	88bff804 	addi	r2,r17,-32
  80a9fc:	28830436 	bltu	r5,r2,80b610 <___vfprintf_internal_r+0xda0>
  80aa00:	100490ba 	slli	r2,r2,2
  80aa04:	01002074 	movhi	r4,129
  80aa08:	212a8604 	addi	r4,r4,-21992
  80aa0c:	1105883a 	add	r2,r2,r4
  80aa10:	10800017 	ldw	r2,0(r2)
  80aa14:	1000683a 	jmp	r2
  80aa18:	0080b530 	cmpltui	r2,zero,724
  80aa1c:	0080b610 	cmplti	r2,zero,728
  80aa20:	0080b610 	cmplti	r2,zero,728
  80aa24:	0080b550 	cmplti	r2,zero,725
  80aa28:	0080b610 	cmplti	r2,zero,728
  80aa2c:	0080b610 	cmplti	r2,zero,728
  80aa30:	0080b610 	cmplti	r2,zero,728
  80aa34:	0080b610 	cmplti	r2,zero,728
  80aa38:	0080b610 	cmplti	r2,zero,728
  80aa3c:	0080b610 	cmplti	r2,zero,728
  80aa40:	0080acc4 	movi	r2,691
  80aa44:	0080b46c 	andhi	r2,zero,721
  80aa48:	0080b610 	cmplti	r2,zero,728
  80aa4c:	0080ab8c 	andi	r2,zero,686
  80aa50:	0080acec 	andhi	r2,zero,691
  80aa54:	0080b610 	cmplti	r2,zero,728
  80aa58:	0080ad2c 	andhi	r2,zero,692
  80aa5c:	0080ad38 	rdprs	r2,zero,692
  80aa60:	0080ad38 	rdprs	r2,zero,692
  80aa64:	0080ad38 	rdprs	r2,zero,692
  80aa68:	0080ad38 	rdprs	r2,zero,692
  80aa6c:	0080ad38 	rdprs	r2,zero,692
  80aa70:	0080ad38 	rdprs	r2,zero,692
  80aa74:	0080ad38 	rdprs	r2,zero,692
  80aa78:	0080ad38 	rdprs	r2,zero,692
  80aa7c:	0080ad38 	rdprs	r2,zero,692
  80aa80:	0080b610 	cmplti	r2,zero,728
  80aa84:	0080b610 	cmplti	r2,zero,728
  80aa88:	0080b610 	cmplti	r2,zero,728
  80aa8c:	0080b610 	cmplti	r2,zero,728
  80aa90:	0080b610 	cmplti	r2,zero,728
  80aa94:	0080b610 	cmplti	r2,zero,728
  80aa98:	0080b610 	cmplti	r2,zero,728
  80aa9c:	0080b610 	cmplti	r2,zero,728
  80aaa0:	0080b610 	cmplti	r2,zero,728
  80aaa4:	0080b610 	cmplti	r2,zero,728
  80aaa8:	0080ad6c 	andhi	r2,zero,693
  80aaac:	0080ae28 	cmpgeui	r2,zero,696
  80aab0:	0080b610 	cmplti	r2,zero,728
  80aab4:	0080ae28 	cmpgeui	r2,zero,696
  80aab8:	0080b610 	cmplti	r2,zero,728
  80aabc:	0080b610 	cmplti	r2,zero,728
  80aac0:	0080b610 	cmplti	r2,zero,728
  80aac4:	0080b610 	cmplti	r2,zero,728
  80aac8:	0080aec8 	cmpgei	r2,zero,699
  80aacc:	0080b610 	cmplti	r2,zero,728
  80aad0:	0080b610 	cmplti	r2,zero,728
  80aad4:	0080aed4 	movui	r2,699
  80aad8:	0080b610 	cmplti	r2,zero,728
  80aadc:	0080b610 	cmplti	r2,zero,728
  80aae0:	0080b610 	cmplti	r2,zero,728
  80aae4:	0080b610 	cmplti	r2,zero,728
  80aae8:	0080b610 	cmplti	r2,zero,728
  80aaec:	0080b34c 	andi	r2,zero,717
  80aaf0:	0080b610 	cmplti	r2,zero,728
  80aaf4:	0080b610 	cmplti	r2,zero,728
  80aaf8:	0080b3ac 	andhi	r2,zero,718
  80aafc:	0080b610 	cmplti	r2,zero,728
  80ab00:	0080b610 	cmplti	r2,zero,728
  80ab04:	0080b610 	cmplti	r2,zero,728
  80ab08:	0080b610 	cmplti	r2,zero,728
  80ab0c:	0080b610 	cmplti	r2,zero,728
  80ab10:	0080b610 	cmplti	r2,zero,728
  80ab14:	0080b610 	cmplti	r2,zero,728
  80ab18:	0080b610 	cmplti	r2,zero,728
  80ab1c:	0080b610 	cmplti	r2,zero,728
  80ab20:	0080b610 	cmplti	r2,zero,728
  80ab24:	0080b5bc 	xorhi	r2,zero,726
  80ab28:	0080b55c 	xori	r2,zero,725
  80ab2c:	0080ae28 	cmpgeui	r2,zero,696
  80ab30:	0080ae28 	cmpgeui	r2,zero,696
  80ab34:	0080ae28 	cmpgeui	r2,zero,696
  80ab38:	0080b56c 	andhi	r2,zero,725
  80ab3c:	0080b55c 	xori	r2,zero,725
  80ab40:	0080b610 	cmplti	r2,zero,728
  80ab44:	0080b610 	cmplti	r2,zero,728
  80ab48:	0080b578 	rdprs	r2,zero,725
  80ab4c:	0080b610 	cmplti	r2,zero,728
  80ab50:	0080b588 	cmpgei	r2,zero,726
  80ab54:	0080b45c 	xori	r2,zero,721
  80ab58:	0080ab98 	cmpnei	r2,zero,686
  80ab5c:	0080b47c 	xorhi	r2,zero,721
  80ab60:	0080b610 	cmplti	r2,zero,728
  80ab64:	0080b488 	cmpgei	r2,zero,722
  80ab68:	0080b610 	cmplti	r2,zero,728
  80ab6c:	0080b4e4 	muli	r2,zero,723
  80ab70:	0080b610 	cmplti	r2,zero,728
  80ab74:	0080b610 	cmplti	r2,zero,728
  80ab78:	0080b4f4 	movhi	r2,723
  80ab7c:	d9003117 	ldw	r4,196(sp)
  80ab80:	d8802d15 	stw	r2,180(sp)
  80ab84:	0109c83a 	sub	r4,zero,r4
  80ab88:	d9003115 	stw	r4,196(sp)
  80ab8c:	94800114 	ori	r18,r18,4
  80ab90:	ac400007 	ldb	r17,0(r21)
  80ab94:	003f9706 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80ab98:	00800c04 	movi	r2,48
  80ab9c:	d9002d17 	ldw	r4,180(sp)
  80aba0:	d9402917 	ldw	r5,164(sp)
  80aba4:	d8802705 	stb	r2,156(sp)
  80aba8:	00801e04 	movi	r2,120
  80abac:	d8802745 	stb	r2,157(sp)
  80abb0:	d8002785 	stb	zero,158(sp)
  80abb4:	20c00104 	addi	r3,r4,4
  80abb8:	24c00017 	ldw	r19,0(r4)
  80abbc:	002d883a 	mov	r22,zero
  80abc0:	90800094 	ori	r2,r18,2
  80abc4:	28029a16 	blt	r5,zero,80b630 <___vfprintf_internal_r+0xdc0>
  80abc8:	00bfdfc4 	movi	r2,-129
  80abcc:	90a4703a 	and	r18,r18,r2
  80abd0:	d8c02d15 	stw	r3,180(sp)
  80abd4:	94800094 	ori	r18,r18,2
  80abd8:	9802871e 	bne	r19,zero,80b5f8 <___vfprintf_internal_r+0xd88>
  80abdc:	008020b4 	movhi	r2,130
  80abe0:	10ae6a04 	addi	r2,r2,-18008
  80abe4:	d8803915 	stw	r2,228(sp)
  80abe8:	04401e04 	movi	r17,120
  80abec:	d8802917 	ldw	r2,164(sp)
  80abf0:	0039883a 	mov	fp,zero
  80abf4:	1001e926 	beq	r2,zero,80b39c <___vfprintf_internal_r+0xb2c>
  80abf8:	0027883a 	mov	r19,zero
  80abfc:	002d883a 	mov	r22,zero
  80ac00:	00020506 	br	80b418 <___vfprintf_internal_r+0xba8>
  80ac04:	d9002c17 	ldw	r4,176(sp)
  80ac08:	b80b883a 	mov	r5,r23
  80ac0c:	080cb400 	call	80cb40 <__swsetup_r>
  80ac10:	1005ac1e 	bne	r2,zero,80c2c4 <___vfprintf_internal_r+0x1a54>
  80ac14:	b880030b 	ldhu	r2,12(r23)
  80ac18:	00c00284 	movi	r3,10
  80ac1c:	1080068c 	andi	r2,r2,26
  80ac20:	10ff3c1e 	bne	r2,r3,80a914 <__alt_data_end+0xff80a914>
  80ac24:	b880038f 	ldh	r2,14(r23)
  80ac28:	103f3a16 	blt	r2,zero,80a914 <__alt_data_end+0xff80a914>
  80ac2c:	d9c02d17 	ldw	r7,180(sp)
  80ac30:	d9002c17 	ldw	r4,176(sp)
  80ac34:	a80d883a 	mov	r6,r21
  80ac38:	b80b883a 	mov	r5,r23
  80ac3c:	080ca840 	call	80ca84 <__sbprintf>
  80ac40:	00001106 	br	80ac88 <___vfprintf_internal_r+0x418>
  80ac44:	d9002c17 	ldw	r4,176(sp)
  80ac48:	d9801e04 	addi	r6,sp,120
  80ac4c:	b80b883a 	mov	r5,r23
  80ac50:	08115200 	call	811520 <__sprint_r>
  80ac54:	1000081e 	bne	r2,zero,80ac78 <___vfprintf_internal_r+0x408>
  80ac58:	da000404 	addi	r8,sp,16
  80ac5c:	003f5306 	br	80a9ac <__alt_data_end+0xff80a9ac>
  80ac60:	d8802017 	ldw	r2,128(sp)
  80ac64:	10000426 	beq	r2,zero,80ac78 <___vfprintf_internal_r+0x408>
  80ac68:	d9002c17 	ldw	r4,176(sp)
  80ac6c:	d9801e04 	addi	r6,sp,120
  80ac70:	b80b883a 	mov	r5,r23
  80ac74:	08115200 	call	811520 <__sprint_r>
  80ac78:	b880030b 	ldhu	r2,12(r23)
  80ac7c:	1080100c 	andi	r2,r2,64
  80ac80:	1005901e 	bne	r2,zero,80c2c4 <___vfprintf_internal_r+0x1a54>
  80ac84:	d8802f17 	ldw	r2,188(sp)
  80ac88:	dfc04717 	ldw	ra,284(sp)
  80ac8c:	df004617 	ldw	fp,280(sp)
  80ac90:	ddc04517 	ldw	r23,276(sp)
  80ac94:	dd804417 	ldw	r22,272(sp)
  80ac98:	dd404317 	ldw	r21,268(sp)
  80ac9c:	dd004217 	ldw	r20,264(sp)
  80aca0:	dcc04117 	ldw	r19,260(sp)
  80aca4:	dc804017 	ldw	r18,256(sp)
  80aca8:	dc403f17 	ldw	r17,252(sp)
  80acac:	dc003e17 	ldw	r16,248(sp)
  80acb0:	dec04804 	addi	sp,sp,288
  80acb4:	f800283a 	ret
  80acb8:	d9002c17 	ldw	r4,176(sp)
  80acbc:	080eb140 	call	80eb14 <__sinit>
  80acc0:	003f0406 	br	80a8d4 <__alt_data_end+0xff80a8d4>
  80acc4:	d8802d17 	ldw	r2,180(sp)
  80acc8:	d9002d17 	ldw	r4,180(sp)
  80accc:	10800017 	ldw	r2,0(r2)
  80acd0:	d8803115 	stw	r2,196(sp)
  80acd4:	20800104 	addi	r2,r4,4
  80acd8:	d9003117 	ldw	r4,196(sp)
  80acdc:	203fa716 	blt	r4,zero,80ab7c <__alt_data_end+0xff80ab7c>
  80ace0:	d8802d15 	stw	r2,180(sp)
  80ace4:	ac400007 	ldb	r17,0(r21)
  80ace8:	003f4206 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80acec:	ac400007 	ldb	r17,0(r21)
  80acf0:	aac00044 	addi	r11,r21,1
  80acf4:	8a872826 	beq	r17,r10,80c998 <___vfprintf_internal_r+0x2128>
  80acf8:	88bff404 	addi	r2,r17,-48
  80acfc:	0009883a 	mov	r4,zero
  80ad00:	30867d36 	bltu	r6,r2,80c6f8 <___vfprintf_internal_r+0x1e88>
  80ad04:	5c400007 	ldb	r17,0(r11)
  80ad08:	210002a4 	muli	r4,r4,10
  80ad0c:	5d400044 	addi	r21,r11,1
  80ad10:	a817883a 	mov	r11,r21
  80ad14:	2089883a 	add	r4,r4,r2
  80ad18:	88bff404 	addi	r2,r17,-48
  80ad1c:	30bff92e 	bgeu	r6,r2,80ad04 <__alt_data_end+0xff80ad04>
  80ad20:	2005c916 	blt	r4,zero,80c448 <___vfprintf_internal_r+0x1bd8>
  80ad24:	d9002915 	stw	r4,164(sp)
  80ad28:	003f3306 	br	80a9f8 <__alt_data_end+0xff80a9f8>
  80ad2c:	94802014 	ori	r18,r18,128
  80ad30:	ac400007 	ldb	r17,0(r21)
  80ad34:	003f2f06 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80ad38:	a809883a 	mov	r4,r21
  80ad3c:	d8003115 	stw	zero,196(sp)
  80ad40:	88bff404 	addi	r2,r17,-48
  80ad44:	0017883a 	mov	r11,zero
  80ad48:	24400007 	ldb	r17,0(r4)
  80ad4c:	5ac002a4 	muli	r11,r11,10
  80ad50:	ad400044 	addi	r21,r21,1
  80ad54:	a809883a 	mov	r4,r21
  80ad58:	12d7883a 	add	r11,r2,r11
  80ad5c:	88bff404 	addi	r2,r17,-48
  80ad60:	30bff92e 	bgeu	r6,r2,80ad48 <__alt_data_end+0xff80ad48>
  80ad64:	dac03115 	stw	r11,196(sp)
  80ad68:	003f2306 	br	80a9f8 <__alt_data_end+0xff80a9f8>
  80ad6c:	18c03fcc 	andi	r3,r3,255
  80ad70:	18072b1e 	bne	r3,zero,80ca20 <___vfprintf_internal_r+0x21b0>
  80ad74:	94800414 	ori	r18,r18,16
  80ad78:	9080080c 	andi	r2,r18,32
  80ad7c:	10037b26 	beq	r2,zero,80bb6c <___vfprintf_internal_r+0x12fc>
  80ad80:	d9402d17 	ldw	r5,180(sp)
  80ad84:	28800117 	ldw	r2,4(r5)
  80ad88:	2cc00017 	ldw	r19,0(r5)
  80ad8c:	29400204 	addi	r5,r5,8
  80ad90:	d9402d15 	stw	r5,180(sp)
  80ad94:	102d883a 	mov	r22,r2
  80ad98:	10044b16 	blt	r2,zero,80bec8 <___vfprintf_internal_r+0x1658>
  80ad9c:	d9402917 	ldw	r5,164(sp)
  80ada0:	df002783 	ldbu	fp,158(sp)
  80ada4:	2803bc16 	blt	r5,zero,80bc98 <___vfprintf_internal_r+0x1428>
  80ada8:	00ffdfc4 	movi	r3,-129
  80adac:	9d84b03a 	or	r2,r19,r22
  80adb0:	90e4703a 	and	r18,r18,r3
  80adb4:	10017726 	beq	r2,zero,80b394 <___vfprintf_internal_r+0xb24>
  80adb8:	b0038326 	beq	r22,zero,80bbc8 <___vfprintf_internal_r+0x1358>
  80adbc:	dc402a15 	stw	r17,168(sp)
  80adc0:	dc001e04 	addi	r16,sp,120
  80adc4:	b023883a 	mov	r17,r22
  80adc8:	402d883a 	mov	r22,r8
  80adcc:	9809883a 	mov	r4,r19
  80add0:	880b883a 	mov	r5,r17
  80add4:	01800284 	movi	r6,10
  80add8:	000f883a 	mov	r7,zero
  80addc:	08144940 	call	814494 <__umoddi3>
  80ade0:	10800c04 	addi	r2,r2,48
  80ade4:	843fffc4 	addi	r16,r16,-1
  80ade8:	9809883a 	mov	r4,r19
  80adec:	880b883a 	mov	r5,r17
  80adf0:	80800005 	stb	r2,0(r16)
  80adf4:	01800284 	movi	r6,10
  80adf8:	000f883a 	mov	r7,zero
  80adfc:	0813f1c0 	call	813f1c <__udivdi3>
  80ae00:	1027883a 	mov	r19,r2
  80ae04:	10c4b03a 	or	r2,r2,r3
  80ae08:	1823883a 	mov	r17,r3
  80ae0c:	103fef1e 	bne	r2,zero,80adcc <__alt_data_end+0xff80adcc>
  80ae10:	d8c02817 	ldw	r3,160(sp)
  80ae14:	dc402a17 	ldw	r17,168(sp)
  80ae18:	b011883a 	mov	r8,r22
  80ae1c:	1c07c83a 	sub	r3,r3,r16
  80ae20:	d8c02e15 	stw	r3,184(sp)
  80ae24:	00005906 	br	80af8c <___vfprintf_internal_r+0x71c>
  80ae28:	18c03fcc 	andi	r3,r3,255
  80ae2c:	1806fa1e 	bne	r3,zero,80ca18 <___vfprintf_internal_r+0x21a8>
  80ae30:	9080020c 	andi	r2,r18,8
  80ae34:	10048a26 	beq	r2,zero,80c060 <___vfprintf_internal_r+0x17f0>
  80ae38:	d8c02d17 	ldw	r3,180(sp)
  80ae3c:	d9002d17 	ldw	r4,180(sp)
  80ae40:	d9402d17 	ldw	r5,180(sp)
  80ae44:	18c00017 	ldw	r3,0(r3)
  80ae48:	21000117 	ldw	r4,4(r4)
  80ae4c:	29400204 	addi	r5,r5,8
  80ae50:	d8c03615 	stw	r3,216(sp)
  80ae54:	d9003815 	stw	r4,224(sp)
  80ae58:	d9402d15 	stw	r5,180(sp)
  80ae5c:	d9003617 	ldw	r4,216(sp)
  80ae60:	d9403817 	ldw	r5,224(sp)
  80ae64:	da003d15 	stw	r8,244(sp)
  80ae68:	04000044 	movi	r16,1
  80ae6c:	08111440 	call	811144 <__fpclassifyd>
  80ae70:	da003d17 	ldw	r8,244(sp)
  80ae74:	14041f1e 	bne	r2,r16,80bef4 <___vfprintf_internal_r+0x1684>
  80ae78:	d9003617 	ldw	r4,216(sp)
  80ae7c:	d9403817 	ldw	r5,224(sp)
  80ae80:	000d883a 	mov	r6,zero
  80ae84:	000f883a 	mov	r7,zero
  80ae88:	0815cc40 	call	815cc4 <__ledf2>
  80ae8c:	da003d17 	ldw	r8,244(sp)
  80ae90:	1005be16 	blt	r2,zero,80c58c <___vfprintf_internal_r+0x1d1c>
  80ae94:	df002783 	ldbu	fp,158(sp)
  80ae98:	008011c4 	movi	r2,71
  80ae9c:	1445330e 	bge	r2,r17,80c36c <___vfprintf_internal_r+0x1afc>
  80aea0:	040020b4 	movhi	r16,130
  80aea4:	842e6204 	addi	r16,r16,-18040
  80aea8:	00c000c4 	movi	r3,3
  80aeac:	00bfdfc4 	movi	r2,-129
  80aeb0:	d8c02a15 	stw	r3,168(sp)
  80aeb4:	90a4703a 	and	r18,r18,r2
  80aeb8:	d8c02e15 	stw	r3,184(sp)
  80aebc:	d8002915 	stw	zero,164(sp)
  80aec0:	d8003215 	stw	zero,200(sp)
  80aec4:	00003706 	br	80afa4 <___vfprintf_internal_r+0x734>
  80aec8:	94800214 	ori	r18,r18,8
  80aecc:	ac400007 	ldb	r17,0(r21)
  80aed0:	003ec806 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80aed4:	18c03fcc 	andi	r3,r3,255
  80aed8:	1806db1e 	bne	r3,zero,80ca48 <___vfprintf_internal_r+0x21d8>
  80aedc:	94800414 	ori	r18,r18,16
  80aee0:	9080080c 	andi	r2,r18,32
  80aee4:	1002d826 	beq	r2,zero,80ba48 <___vfprintf_internal_r+0x11d8>
  80aee8:	d9402d17 	ldw	r5,180(sp)
  80aeec:	d8c02917 	ldw	r3,164(sp)
  80aef0:	d8002785 	stb	zero,158(sp)
  80aef4:	28800204 	addi	r2,r5,8
  80aef8:	2cc00017 	ldw	r19,0(r5)
  80aefc:	2d800117 	ldw	r22,4(r5)
  80af00:	18048f16 	blt	r3,zero,80c140 <___vfprintf_internal_r+0x18d0>
  80af04:	013fdfc4 	movi	r4,-129
  80af08:	9d86b03a 	or	r3,r19,r22
  80af0c:	d8802d15 	stw	r2,180(sp)
  80af10:	9124703a 	and	r18,r18,r4
  80af14:	1802d91e 	bne	r3,zero,80ba7c <___vfprintf_internal_r+0x120c>
  80af18:	d8c02917 	ldw	r3,164(sp)
  80af1c:	0039883a 	mov	fp,zero
  80af20:	1805c326 	beq	r3,zero,80c630 <___vfprintf_internal_r+0x1dc0>
  80af24:	0027883a 	mov	r19,zero
  80af28:	002d883a 	mov	r22,zero
  80af2c:	dc001e04 	addi	r16,sp,120
  80af30:	9806d0fa 	srli	r3,r19,3
  80af34:	b008977a 	slli	r4,r22,29
  80af38:	b02cd0fa 	srli	r22,r22,3
  80af3c:	9cc001cc 	andi	r19,r19,7
  80af40:	98800c04 	addi	r2,r19,48
  80af44:	843fffc4 	addi	r16,r16,-1
  80af48:	20e6b03a 	or	r19,r4,r3
  80af4c:	80800005 	stb	r2,0(r16)
  80af50:	9d86b03a 	or	r3,r19,r22
  80af54:	183ff61e 	bne	r3,zero,80af30 <__alt_data_end+0xff80af30>
  80af58:	90c0004c 	andi	r3,r18,1
  80af5c:	18013b26 	beq	r3,zero,80b44c <___vfprintf_internal_r+0xbdc>
  80af60:	10803fcc 	andi	r2,r2,255
  80af64:	1080201c 	xori	r2,r2,128
  80af68:	10bfe004 	addi	r2,r2,-128
  80af6c:	00c00c04 	movi	r3,48
  80af70:	10c13626 	beq	r2,r3,80b44c <___vfprintf_internal_r+0xbdc>
  80af74:	80ffffc5 	stb	r3,-1(r16)
  80af78:	d8c02817 	ldw	r3,160(sp)
  80af7c:	80bfffc4 	addi	r2,r16,-1
  80af80:	1021883a 	mov	r16,r2
  80af84:	1887c83a 	sub	r3,r3,r2
  80af88:	d8c02e15 	stw	r3,184(sp)
  80af8c:	d8802e17 	ldw	r2,184(sp)
  80af90:	d9002917 	ldw	r4,164(sp)
  80af94:	1100010e 	bge	r2,r4,80af9c <___vfprintf_internal_r+0x72c>
  80af98:	2005883a 	mov	r2,r4
  80af9c:	d8802a15 	stw	r2,168(sp)
  80afa0:	d8003215 	stw	zero,200(sp)
  80afa4:	e7003fcc 	andi	fp,fp,255
  80afa8:	e700201c 	xori	fp,fp,128
  80afac:	e73fe004 	addi	fp,fp,-128
  80afb0:	e0000326 	beq	fp,zero,80afc0 <___vfprintf_internal_r+0x750>
  80afb4:	d8c02a17 	ldw	r3,168(sp)
  80afb8:	18c00044 	addi	r3,r3,1
  80afbc:	d8c02a15 	stw	r3,168(sp)
  80afc0:	90c0008c 	andi	r3,r18,2
  80afc4:	d8c02b15 	stw	r3,172(sp)
  80afc8:	18000326 	beq	r3,zero,80afd8 <___vfprintf_internal_r+0x768>
  80afcc:	d8c02a17 	ldw	r3,168(sp)
  80afd0:	18c00084 	addi	r3,r3,2
  80afd4:	d8c02a15 	stw	r3,168(sp)
  80afd8:	90c0210c 	andi	r3,r18,132
  80afdc:	d8c03015 	stw	r3,192(sp)
  80afe0:	1801a31e 	bne	r3,zero,80b670 <___vfprintf_internal_r+0xe00>
  80afe4:	d9003117 	ldw	r4,196(sp)
  80afe8:	d8c02a17 	ldw	r3,168(sp)
  80afec:	20e7c83a 	sub	r19,r4,r3
  80aff0:	04c19f0e 	bge	zero,r19,80b670 <___vfprintf_internal_r+0xe00>
  80aff4:	02400404 	movi	r9,16
  80aff8:	d8c02017 	ldw	r3,128(sp)
  80affc:	d8801f17 	ldw	r2,124(sp)
  80b000:	4cc50d0e 	bge	r9,r19,80c438 <___vfprintf_internal_r+0x1bc8>
  80b004:	014020b4 	movhi	r5,130
  80b008:	296e7584 	addi	r5,r5,-17962
  80b00c:	dc403b15 	stw	r17,236(sp)
  80b010:	d9403515 	stw	r5,212(sp)
  80b014:	9823883a 	mov	r17,r19
  80b018:	482d883a 	mov	r22,r9
  80b01c:	9027883a 	mov	r19,r18
  80b020:	070001c4 	movi	fp,7
  80b024:	8025883a 	mov	r18,r16
  80b028:	dc002c17 	ldw	r16,176(sp)
  80b02c:	00000306 	br	80b03c <___vfprintf_internal_r+0x7cc>
  80b030:	8c7ffc04 	addi	r17,r17,-16
  80b034:	42000204 	addi	r8,r8,8
  80b038:	b440130e 	bge	r22,r17,80b088 <___vfprintf_internal_r+0x818>
  80b03c:	010020b4 	movhi	r4,130
  80b040:	18c00404 	addi	r3,r3,16
  80b044:	10800044 	addi	r2,r2,1
  80b048:	212e7584 	addi	r4,r4,-17962
  80b04c:	41000015 	stw	r4,0(r8)
  80b050:	45800115 	stw	r22,4(r8)
  80b054:	d8c02015 	stw	r3,128(sp)
  80b058:	d8801f15 	stw	r2,124(sp)
  80b05c:	e0bff40e 	bge	fp,r2,80b030 <__alt_data_end+0xff80b030>
  80b060:	d9801e04 	addi	r6,sp,120
  80b064:	b80b883a 	mov	r5,r23
  80b068:	8009883a 	mov	r4,r16
  80b06c:	08115200 	call	811520 <__sprint_r>
  80b070:	103f011e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b074:	8c7ffc04 	addi	r17,r17,-16
  80b078:	d8c02017 	ldw	r3,128(sp)
  80b07c:	d8801f17 	ldw	r2,124(sp)
  80b080:	da000404 	addi	r8,sp,16
  80b084:	b47fed16 	blt	r22,r17,80b03c <__alt_data_end+0xff80b03c>
  80b088:	9021883a 	mov	r16,r18
  80b08c:	9825883a 	mov	r18,r19
  80b090:	8827883a 	mov	r19,r17
  80b094:	dc403b17 	ldw	r17,236(sp)
  80b098:	d9403517 	ldw	r5,212(sp)
  80b09c:	98c7883a 	add	r3,r19,r3
  80b0a0:	10800044 	addi	r2,r2,1
  80b0a4:	41400015 	stw	r5,0(r8)
  80b0a8:	44c00115 	stw	r19,4(r8)
  80b0ac:	d8c02015 	stw	r3,128(sp)
  80b0b0:	d8801f15 	stw	r2,124(sp)
  80b0b4:	010001c4 	movi	r4,7
  80b0b8:	2082a316 	blt	r4,r2,80bb48 <___vfprintf_internal_r+0x12d8>
  80b0bc:	df002787 	ldb	fp,158(sp)
  80b0c0:	42000204 	addi	r8,r8,8
  80b0c4:	e0000c26 	beq	fp,zero,80b0f8 <___vfprintf_internal_r+0x888>
  80b0c8:	d8801f17 	ldw	r2,124(sp)
  80b0cc:	d9002784 	addi	r4,sp,158
  80b0d0:	18c00044 	addi	r3,r3,1
  80b0d4:	10800044 	addi	r2,r2,1
  80b0d8:	41000015 	stw	r4,0(r8)
  80b0dc:	01000044 	movi	r4,1
  80b0e0:	41000115 	stw	r4,4(r8)
  80b0e4:	d8c02015 	stw	r3,128(sp)
  80b0e8:	d8801f15 	stw	r2,124(sp)
  80b0ec:	010001c4 	movi	r4,7
  80b0f0:	20823c16 	blt	r4,r2,80b9e4 <___vfprintf_internal_r+0x1174>
  80b0f4:	42000204 	addi	r8,r8,8
  80b0f8:	d8802b17 	ldw	r2,172(sp)
  80b0fc:	10000c26 	beq	r2,zero,80b130 <___vfprintf_internal_r+0x8c0>
  80b100:	d8801f17 	ldw	r2,124(sp)
  80b104:	d9002704 	addi	r4,sp,156
  80b108:	18c00084 	addi	r3,r3,2
  80b10c:	10800044 	addi	r2,r2,1
  80b110:	41000015 	stw	r4,0(r8)
  80b114:	01000084 	movi	r4,2
  80b118:	41000115 	stw	r4,4(r8)
  80b11c:	d8c02015 	stw	r3,128(sp)
  80b120:	d8801f15 	stw	r2,124(sp)
  80b124:	010001c4 	movi	r4,7
  80b128:	20823616 	blt	r4,r2,80ba04 <___vfprintf_internal_r+0x1194>
  80b12c:	42000204 	addi	r8,r8,8
  80b130:	d9003017 	ldw	r4,192(sp)
  80b134:	00802004 	movi	r2,128
  80b138:	20819926 	beq	r4,r2,80b7a0 <___vfprintf_internal_r+0xf30>
  80b13c:	d9402917 	ldw	r5,164(sp)
  80b140:	d8802e17 	ldw	r2,184(sp)
  80b144:	28adc83a 	sub	r22,r5,r2
  80b148:	0580310e 	bge	zero,r22,80b210 <___vfprintf_internal_r+0x9a0>
  80b14c:	07000404 	movi	fp,16
  80b150:	d8801f17 	ldw	r2,124(sp)
  80b154:	e584140e 	bge	fp,r22,80c1a8 <___vfprintf_internal_r+0x1938>
  80b158:	014020b4 	movhi	r5,130
  80b15c:	296e7184 	addi	r5,r5,-17978
  80b160:	dc402915 	stw	r17,164(sp)
  80b164:	d9402b15 	stw	r5,172(sp)
  80b168:	b023883a 	mov	r17,r22
  80b16c:	04c001c4 	movi	r19,7
  80b170:	a82d883a 	mov	r22,r21
  80b174:	902b883a 	mov	r21,r18
  80b178:	8025883a 	mov	r18,r16
  80b17c:	dc002c17 	ldw	r16,176(sp)
  80b180:	00000306 	br	80b190 <___vfprintf_internal_r+0x920>
  80b184:	8c7ffc04 	addi	r17,r17,-16
  80b188:	42000204 	addi	r8,r8,8
  80b18c:	e440110e 	bge	fp,r17,80b1d4 <___vfprintf_internal_r+0x964>
  80b190:	18c00404 	addi	r3,r3,16
  80b194:	10800044 	addi	r2,r2,1
  80b198:	45000015 	stw	r20,0(r8)
  80b19c:	47000115 	stw	fp,4(r8)
  80b1a0:	d8c02015 	stw	r3,128(sp)
  80b1a4:	d8801f15 	stw	r2,124(sp)
  80b1a8:	98bff60e 	bge	r19,r2,80b184 <__alt_data_end+0xff80b184>
  80b1ac:	d9801e04 	addi	r6,sp,120
  80b1b0:	b80b883a 	mov	r5,r23
  80b1b4:	8009883a 	mov	r4,r16
  80b1b8:	08115200 	call	811520 <__sprint_r>
  80b1bc:	103eae1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b1c0:	8c7ffc04 	addi	r17,r17,-16
  80b1c4:	d8c02017 	ldw	r3,128(sp)
  80b1c8:	d8801f17 	ldw	r2,124(sp)
  80b1cc:	da000404 	addi	r8,sp,16
  80b1d0:	e47fef16 	blt	fp,r17,80b190 <__alt_data_end+0xff80b190>
  80b1d4:	9021883a 	mov	r16,r18
  80b1d8:	a825883a 	mov	r18,r21
  80b1dc:	b02b883a 	mov	r21,r22
  80b1e0:	882d883a 	mov	r22,r17
  80b1e4:	dc402917 	ldw	r17,164(sp)
  80b1e8:	d9002b17 	ldw	r4,172(sp)
  80b1ec:	1d87883a 	add	r3,r3,r22
  80b1f0:	10800044 	addi	r2,r2,1
  80b1f4:	41000015 	stw	r4,0(r8)
  80b1f8:	45800115 	stw	r22,4(r8)
  80b1fc:	d8c02015 	stw	r3,128(sp)
  80b200:	d8801f15 	stw	r2,124(sp)
  80b204:	010001c4 	movi	r4,7
  80b208:	2081ee16 	blt	r4,r2,80b9c4 <___vfprintf_internal_r+0x1154>
  80b20c:	42000204 	addi	r8,r8,8
  80b210:	9080400c 	andi	r2,r18,256
  80b214:	1001181e 	bne	r2,zero,80b678 <___vfprintf_internal_r+0xe08>
  80b218:	d9402e17 	ldw	r5,184(sp)
  80b21c:	d8801f17 	ldw	r2,124(sp)
  80b220:	44000015 	stw	r16,0(r8)
  80b224:	1947883a 	add	r3,r3,r5
  80b228:	10800044 	addi	r2,r2,1
  80b22c:	41400115 	stw	r5,4(r8)
  80b230:	d8c02015 	stw	r3,128(sp)
  80b234:	d8801f15 	stw	r2,124(sp)
  80b238:	010001c4 	movi	r4,7
  80b23c:	2081d316 	blt	r4,r2,80b98c <___vfprintf_internal_r+0x111c>
  80b240:	42000204 	addi	r8,r8,8
  80b244:	9480010c 	andi	r18,r18,4
  80b248:	90003226 	beq	r18,zero,80b314 <___vfprintf_internal_r+0xaa4>
  80b24c:	d9403117 	ldw	r5,196(sp)
  80b250:	d8802a17 	ldw	r2,168(sp)
  80b254:	28a1c83a 	sub	r16,r5,r2
  80b258:	04002e0e 	bge	zero,r16,80b314 <___vfprintf_internal_r+0xaa4>
  80b25c:	04400404 	movi	r17,16
  80b260:	d8801f17 	ldw	r2,124(sp)
  80b264:	8c04a20e 	bge	r17,r16,80c4f0 <___vfprintf_internal_r+0x1c80>
  80b268:	014020b4 	movhi	r5,130
  80b26c:	296e7584 	addi	r5,r5,-17962
  80b270:	d9403515 	stw	r5,212(sp)
  80b274:	048001c4 	movi	r18,7
  80b278:	dcc02c17 	ldw	r19,176(sp)
  80b27c:	00000306 	br	80b28c <___vfprintf_internal_r+0xa1c>
  80b280:	843ffc04 	addi	r16,r16,-16
  80b284:	42000204 	addi	r8,r8,8
  80b288:	8c00130e 	bge	r17,r16,80b2d8 <___vfprintf_internal_r+0xa68>
  80b28c:	010020b4 	movhi	r4,130
  80b290:	18c00404 	addi	r3,r3,16
  80b294:	10800044 	addi	r2,r2,1
  80b298:	212e7584 	addi	r4,r4,-17962
  80b29c:	41000015 	stw	r4,0(r8)
  80b2a0:	44400115 	stw	r17,4(r8)
  80b2a4:	d8c02015 	stw	r3,128(sp)
  80b2a8:	d8801f15 	stw	r2,124(sp)
  80b2ac:	90bff40e 	bge	r18,r2,80b280 <__alt_data_end+0xff80b280>
  80b2b0:	d9801e04 	addi	r6,sp,120
  80b2b4:	b80b883a 	mov	r5,r23
  80b2b8:	9809883a 	mov	r4,r19
  80b2bc:	08115200 	call	811520 <__sprint_r>
  80b2c0:	103e6d1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b2c4:	843ffc04 	addi	r16,r16,-16
  80b2c8:	d8c02017 	ldw	r3,128(sp)
  80b2cc:	d8801f17 	ldw	r2,124(sp)
  80b2d0:	da000404 	addi	r8,sp,16
  80b2d4:	8c3fed16 	blt	r17,r16,80b28c <__alt_data_end+0xff80b28c>
  80b2d8:	d9403517 	ldw	r5,212(sp)
  80b2dc:	1c07883a 	add	r3,r3,r16
  80b2e0:	10800044 	addi	r2,r2,1
  80b2e4:	41400015 	stw	r5,0(r8)
  80b2e8:	44000115 	stw	r16,4(r8)
  80b2ec:	d8c02015 	stw	r3,128(sp)
  80b2f0:	d8801f15 	stw	r2,124(sp)
  80b2f4:	010001c4 	movi	r4,7
  80b2f8:	2080060e 	bge	r4,r2,80b314 <___vfprintf_internal_r+0xaa4>
  80b2fc:	d9002c17 	ldw	r4,176(sp)
  80b300:	d9801e04 	addi	r6,sp,120
  80b304:	b80b883a 	mov	r5,r23
  80b308:	08115200 	call	811520 <__sprint_r>
  80b30c:	103e5a1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b310:	d8c02017 	ldw	r3,128(sp)
  80b314:	d8803117 	ldw	r2,196(sp)
  80b318:	d9002a17 	ldw	r4,168(sp)
  80b31c:	1100010e 	bge	r2,r4,80b324 <___vfprintf_internal_r+0xab4>
  80b320:	2005883a 	mov	r2,r4
  80b324:	d9402f17 	ldw	r5,188(sp)
  80b328:	288b883a 	add	r5,r5,r2
  80b32c:	d9402f15 	stw	r5,188(sp)
  80b330:	18019e1e 	bne	r3,zero,80b9ac <___vfprintf_internal_r+0x113c>
  80b334:	a8800007 	ldb	r2,0(r21)
  80b338:	d8001f15 	stw	zero,124(sp)
  80b33c:	da000404 	addi	r8,sp,16
  80b340:	103d851e 	bne	r2,zero,80a958 <__alt_data_end+0xff80a958>
  80b344:	a821883a 	mov	r16,r21
  80b348:	003d9b06 	br	80a9b8 <__alt_data_end+0xff80a9b8>
  80b34c:	18c03fcc 	andi	r3,r3,255
  80b350:	1805c11e 	bne	r3,zero,80ca58 <___vfprintf_internal_r+0x21e8>
  80b354:	94800414 	ori	r18,r18,16
  80b358:	9080080c 	andi	r2,r18,32
  80b35c:	10020c26 	beq	r2,zero,80bb90 <___vfprintf_internal_r+0x1320>
  80b360:	d8802d17 	ldw	r2,180(sp)
  80b364:	d9002917 	ldw	r4,164(sp)
  80b368:	d8002785 	stb	zero,158(sp)
  80b36c:	10c00204 	addi	r3,r2,8
  80b370:	14c00017 	ldw	r19,0(r2)
  80b374:	15800117 	ldw	r22,4(r2)
  80b378:	20040f16 	blt	r4,zero,80c3b8 <___vfprintf_internal_r+0x1b48>
  80b37c:	013fdfc4 	movi	r4,-129
  80b380:	9d84b03a 	or	r2,r19,r22
  80b384:	d8c02d15 	stw	r3,180(sp)
  80b388:	9124703a 	and	r18,r18,r4
  80b38c:	0039883a 	mov	fp,zero
  80b390:	103e891e 	bne	r2,zero,80adb8 <__alt_data_end+0xff80adb8>
  80b394:	d9002917 	ldw	r4,164(sp)
  80b398:	2002c11e 	bne	r4,zero,80bea0 <___vfprintf_internal_r+0x1630>
  80b39c:	d8002915 	stw	zero,164(sp)
  80b3a0:	d8002e15 	stw	zero,184(sp)
  80b3a4:	dc001e04 	addi	r16,sp,120
  80b3a8:	003ef806 	br	80af8c <__alt_data_end+0xff80af8c>
  80b3ac:	18c03fcc 	andi	r3,r3,255
  80b3b0:	18059d1e 	bne	r3,zero,80ca28 <___vfprintf_internal_r+0x21b8>
  80b3b4:	014020b4 	movhi	r5,130
  80b3b8:	296e6504 	addi	r5,r5,-18028
  80b3bc:	d9403915 	stw	r5,228(sp)
  80b3c0:	9080080c 	andi	r2,r18,32
  80b3c4:	10005226 	beq	r2,zero,80b510 <___vfprintf_internal_r+0xca0>
  80b3c8:	d8802d17 	ldw	r2,180(sp)
  80b3cc:	14c00017 	ldw	r19,0(r2)
  80b3d0:	15800117 	ldw	r22,4(r2)
  80b3d4:	10800204 	addi	r2,r2,8
  80b3d8:	d8802d15 	stw	r2,180(sp)
  80b3dc:	9080004c 	andi	r2,r18,1
  80b3e0:	10019026 	beq	r2,zero,80ba24 <___vfprintf_internal_r+0x11b4>
  80b3e4:	9d84b03a 	or	r2,r19,r22
  80b3e8:	10036926 	beq	r2,zero,80c190 <___vfprintf_internal_r+0x1920>
  80b3ec:	d8c02917 	ldw	r3,164(sp)
  80b3f0:	00800c04 	movi	r2,48
  80b3f4:	d8802705 	stb	r2,156(sp)
  80b3f8:	dc402745 	stb	r17,157(sp)
  80b3fc:	d8002785 	stb	zero,158(sp)
  80b400:	90800094 	ori	r2,r18,2
  80b404:	18045d16 	blt	r3,zero,80c57c <___vfprintf_internal_r+0x1d0c>
  80b408:	00bfdfc4 	movi	r2,-129
  80b40c:	90a4703a 	and	r18,r18,r2
  80b410:	94800094 	ori	r18,r18,2
  80b414:	0039883a 	mov	fp,zero
  80b418:	d9003917 	ldw	r4,228(sp)
  80b41c:	dc001e04 	addi	r16,sp,120
  80b420:	988003cc 	andi	r2,r19,15
  80b424:	b006973a 	slli	r3,r22,28
  80b428:	2085883a 	add	r2,r4,r2
  80b42c:	9826d13a 	srli	r19,r19,4
  80b430:	10800003 	ldbu	r2,0(r2)
  80b434:	b02cd13a 	srli	r22,r22,4
  80b438:	843fffc4 	addi	r16,r16,-1
  80b43c:	1ce6b03a 	or	r19,r3,r19
  80b440:	80800005 	stb	r2,0(r16)
  80b444:	9d84b03a 	or	r2,r19,r22
  80b448:	103ff51e 	bne	r2,zero,80b420 <__alt_data_end+0xff80b420>
  80b44c:	d8c02817 	ldw	r3,160(sp)
  80b450:	1c07c83a 	sub	r3,r3,r16
  80b454:	d8c02e15 	stw	r3,184(sp)
  80b458:	003ecc06 	br	80af8c <__alt_data_end+0xff80af8c>
  80b45c:	18c03fcc 	andi	r3,r3,255
  80b460:	183e9f26 	beq	r3,zero,80aee0 <__alt_data_end+0xff80aee0>
  80b464:	d9c02785 	stb	r7,158(sp)
  80b468:	003e9d06 	br	80aee0 <__alt_data_end+0xff80aee0>
  80b46c:	00c00044 	movi	r3,1
  80b470:	01c00ac4 	movi	r7,43
  80b474:	ac400007 	ldb	r17,0(r21)
  80b478:	003d5e06 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80b47c:	94800814 	ori	r18,r18,32
  80b480:	ac400007 	ldb	r17,0(r21)
  80b484:	003d5b06 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80b488:	d8c02d17 	ldw	r3,180(sp)
  80b48c:	d8002785 	stb	zero,158(sp)
  80b490:	1c000017 	ldw	r16,0(r3)
  80b494:	1cc00104 	addi	r19,r3,4
  80b498:	80041926 	beq	r16,zero,80c500 <___vfprintf_internal_r+0x1c90>
  80b49c:	d9002917 	ldw	r4,164(sp)
  80b4a0:	2003d016 	blt	r4,zero,80c3e4 <___vfprintf_internal_r+0x1b74>
  80b4a4:	200d883a 	mov	r6,r4
  80b4a8:	000b883a 	mov	r5,zero
  80b4ac:	8009883a 	mov	r4,r16
  80b4b0:	da003d15 	stw	r8,244(sp)
  80b4b4:	080fbc40 	call	80fbc4 <memchr>
  80b4b8:	da003d17 	ldw	r8,244(sp)
  80b4bc:	10045426 	beq	r2,zero,80c610 <___vfprintf_internal_r+0x1da0>
  80b4c0:	1405c83a 	sub	r2,r2,r16
  80b4c4:	d8802e15 	stw	r2,184(sp)
  80b4c8:	1003cc16 	blt	r2,zero,80c3fc <___vfprintf_internal_r+0x1b8c>
  80b4cc:	df002783 	ldbu	fp,158(sp)
  80b4d0:	d8802a15 	stw	r2,168(sp)
  80b4d4:	dcc02d15 	stw	r19,180(sp)
  80b4d8:	d8002915 	stw	zero,164(sp)
  80b4dc:	d8003215 	stw	zero,200(sp)
  80b4e0:	003eb006 	br	80afa4 <__alt_data_end+0xff80afa4>
  80b4e4:	18c03fcc 	andi	r3,r3,255
  80b4e8:	183f9b26 	beq	r3,zero,80b358 <__alt_data_end+0xff80b358>
  80b4ec:	d9c02785 	stb	r7,158(sp)
  80b4f0:	003f9906 	br	80b358 <__alt_data_end+0xff80b358>
  80b4f4:	18c03fcc 	andi	r3,r3,255
  80b4f8:	1805551e 	bne	r3,zero,80ca50 <___vfprintf_internal_r+0x21e0>
  80b4fc:	014020b4 	movhi	r5,130
  80b500:	296e6a04 	addi	r5,r5,-18008
  80b504:	d9403915 	stw	r5,228(sp)
  80b508:	9080080c 	andi	r2,r18,32
  80b50c:	103fae1e 	bne	r2,zero,80b3c8 <__alt_data_end+0xff80b3c8>
  80b510:	9080040c 	andi	r2,r18,16
  80b514:	1002de26 	beq	r2,zero,80c090 <___vfprintf_internal_r+0x1820>
  80b518:	d8c02d17 	ldw	r3,180(sp)
  80b51c:	002d883a 	mov	r22,zero
  80b520:	1cc00017 	ldw	r19,0(r3)
  80b524:	18c00104 	addi	r3,r3,4
  80b528:	d8c02d15 	stw	r3,180(sp)
  80b52c:	003fab06 	br	80b3dc <__alt_data_end+0xff80b3dc>
  80b530:	38803fcc 	andi	r2,r7,255
  80b534:	1080201c 	xori	r2,r2,128
  80b538:	10bfe004 	addi	r2,r2,-128
  80b53c:	1002d21e 	bne	r2,zero,80c088 <___vfprintf_internal_r+0x1818>
  80b540:	00c00044 	movi	r3,1
  80b544:	01c00804 	movi	r7,32
  80b548:	ac400007 	ldb	r17,0(r21)
  80b54c:	003d2906 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80b550:	94800054 	ori	r18,r18,1
  80b554:	ac400007 	ldb	r17,0(r21)
  80b558:	003d2606 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80b55c:	18c03fcc 	andi	r3,r3,255
  80b560:	183e0526 	beq	r3,zero,80ad78 <__alt_data_end+0xff80ad78>
  80b564:	d9c02785 	stb	r7,158(sp)
  80b568:	003e0306 	br	80ad78 <__alt_data_end+0xff80ad78>
  80b56c:	94801014 	ori	r18,r18,64
  80b570:	ac400007 	ldb	r17,0(r21)
  80b574:	003d1f06 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80b578:	ac400007 	ldb	r17,0(r21)
  80b57c:	8a438726 	beq	r17,r9,80c39c <___vfprintf_internal_r+0x1b2c>
  80b580:	94800414 	ori	r18,r18,16
  80b584:	003d1b06 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80b588:	18c03fcc 	andi	r3,r3,255
  80b58c:	1805341e 	bne	r3,zero,80ca60 <___vfprintf_internal_r+0x21f0>
  80b590:	9080080c 	andi	r2,r18,32
  80b594:	1002cd26 	beq	r2,zero,80c0cc <___vfprintf_internal_r+0x185c>
  80b598:	d9402d17 	ldw	r5,180(sp)
  80b59c:	d9002f17 	ldw	r4,188(sp)
  80b5a0:	28800017 	ldw	r2,0(r5)
  80b5a4:	2007d7fa 	srai	r3,r4,31
  80b5a8:	29400104 	addi	r5,r5,4
  80b5ac:	d9402d15 	stw	r5,180(sp)
  80b5b0:	11000015 	stw	r4,0(r2)
  80b5b4:	10c00115 	stw	r3,4(r2)
  80b5b8:	003ce506 	br	80a950 <__alt_data_end+0xff80a950>
  80b5bc:	d8c02d17 	ldw	r3,180(sp)
  80b5c0:	d9002d17 	ldw	r4,180(sp)
  80b5c4:	d8002785 	stb	zero,158(sp)
  80b5c8:	18800017 	ldw	r2,0(r3)
  80b5cc:	21000104 	addi	r4,r4,4
  80b5d0:	00c00044 	movi	r3,1
  80b5d4:	d8c02a15 	stw	r3,168(sp)
  80b5d8:	d8801405 	stb	r2,80(sp)
  80b5dc:	d9002d15 	stw	r4,180(sp)
  80b5e0:	d8c02e15 	stw	r3,184(sp)
  80b5e4:	d8002915 	stw	zero,164(sp)
  80b5e8:	d8003215 	stw	zero,200(sp)
  80b5ec:	dc001404 	addi	r16,sp,80
  80b5f0:	0039883a 	mov	fp,zero
  80b5f4:	003e7206 	br	80afc0 <__alt_data_end+0xff80afc0>
  80b5f8:	010020b4 	movhi	r4,130
  80b5fc:	212e6a04 	addi	r4,r4,-18008
  80b600:	0039883a 	mov	fp,zero
  80b604:	d9003915 	stw	r4,228(sp)
  80b608:	04401e04 	movi	r17,120
  80b60c:	003f8206 	br	80b418 <__alt_data_end+0xff80b418>
  80b610:	18c03fcc 	andi	r3,r3,255
  80b614:	1805061e 	bne	r3,zero,80ca30 <___vfprintf_internal_r+0x21c0>
  80b618:	883d9126 	beq	r17,zero,80ac60 <__alt_data_end+0xff80ac60>
  80b61c:	00c00044 	movi	r3,1
  80b620:	d8c02a15 	stw	r3,168(sp)
  80b624:	dc401405 	stb	r17,80(sp)
  80b628:	d8002785 	stb	zero,158(sp)
  80b62c:	003fec06 	br	80b5e0 <__alt_data_end+0xff80b5e0>
  80b630:	014020b4 	movhi	r5,130
  80b634:	296e6a04 	addi	r5,r5,-18008
  80b638:	d9403915 	stw	r5,228(sp)
  80b63c:	d8c02d15 	stw	r3,180(sp)
  80b640:	1025883a 	mov	r18,r2
  80b644:	04401e04 	movi	r17,120
  80b648:	9d84b03a 	or	r2,r19,r22
  80b64c:	1000fc1e 	bne	r2,zero,80ba40 <___vfprintf_internal_r+0x11d0>
  80b650:	0039883a 	mov	fp,zero
  80b654:	00800084 	movi	r2,2
  80b658:	10803fcc 	andi	r2,r2,255
  80b65c:	00c00044 	movi	r3,1
  80b660:	10c20f26 	beq	r2,r3,80bea0 <___vfprintf_internal_r+0x1630>
  80b664:	00c00084 	movi	r3,2
  80b668:	10fd6326 	beq	r2,r3,80abf8 <__alt_data_end+0xff80abf8>
  80b66c:	003e2d06 	br	80af24 <__alt_data_end+0xff80af24>
  80b670:	d8c02017 	ldw	r3,128(sp)
  80b674:	003e9306 	br	80b0c4 <__alt_data_end+0xff80b0c4>
  80b678:	00801944 	movi	r2,101
  80b67c:	14407e0e 	bge	r2,r17,80b878 <___vfprintf_internal_r+0x1008>
  80b680:	d9003617 	ldw	r4,216(sp)
  80b684:	d9403817 	ldw	r5,224(sp)
  80b688:	000d883a 	mov	r6,zero
  80b68c:	000f883a 	mov	r7,zero
  80b690:	d8c03c15 	stw	r3,240(sp)
  80b694:	da003d15 	stw	r8,244(sp)
  80b698:	0815b600 	call	815b60 <__eqdf2>
  80b69c:	d8c03c17 	ldw	r3,240(sp)
  80b6a0:	da003d17 	ldw	r8,244(sp)
  80b6a4:	1000f71e 	bne	r2,zero,80ba84 <___vfprintf_internal_r+0x1214>
  80b6a8:	d8801f17 	ldw	r2,124(sp)
  80b6ac:	010020b4 	movhi	r4,130
  80b6b0:	212e7104 	addi	r4,r4,-17980
  80b6b4:	18c00044 	addi	r3,r3,1
  80b6b8:	10800044 	addi	r2,r2,1
  80b6bc:	41000015 	stw	r4,0(r8)
  80b6c0:	01000044 	movi	r4,1
  80b6c4:	41000115 	stw	r4,4(r8)
  80b6c8:	d8c02015 	stw	r3,128(sp)
  80b6cc:	d8801f15 	stw	r2,124(sp)
  80b6d0:	010001c4 	movi	r4,7
  80b6d4:	2082b816 	blt	r4,r2,80c1b8 <___vfprintf_internal_r+0x1948>
  80b6d8:	42000204 	addi	r8,r8,8
  80b6dc:	d8802617 	ldw	r2,152(sp)
  80b6e0:	d9403317 	ldw	r5,204(sp)
  80b6e4:	11400216 	blt	r2,r5,80b6f0 <___vfprintf_internal_r+0xe80>
  80b6e8:	9080004c 	andi	r2,r18,1
  80b6ec:	103ed526 	beq	r2,zero,80b244 <__alt_data_end+0xff80b244>
  80b6f0:	d8803717 	ldw	r2,220(sp)
  80b6f4:	d9003417 	ldw	r4,208(sp)
  80b6f8:	d9403717 	ldw	r5,220(sp)
  80b6fc:	1887883a 	add	r3,r3,r2
  80b700:	d8801f17 	ldw	r2,124(sp)
  80b704:	41000015 	stw	r4,0(r8)
  80b708:	41400115 	stw	r5,4(r8)
  80b70c:	10800044 	addi	r2,r2,1
  80b710:	d8c02015 	stw	r3,128(sp)
  80b714:	d8801f15 	stw	r2,124(sp)
  80b718:	010001c4 	movi	r4,7
  80b71c:	20832916 	blt	r4,r2,80c3c4 <___vfprintf_internal_r+0x1b54>
  80b720:	42000204 	addi	r8,r8,8
  80b724:	d8803317 	ldw	r2,204(sp)
  80b728:	143fffc4 	addi	r16,r2,-1
  80b72c:	043ec50e 	bge	zero,r16,80b244 <__alt_data_end+0xff80b244>
  80b730:	04400404 	movi	r17,16
  80b734:	d8801f17 	ldw	r2,124(sp)
  80b738:	8c00880e 	bge	r17,r16,80b95c <___vfprintf_internal_r+0x10ec>
  80b73c:	014020b4 	movhi	r5,130
  80b740:	296e7184 	addi	r5,r5,-17978
  80b744:	d9402b15 	stw	r5,172(sp)
  80b748:	058001c4 	movi	r22,7
  80b74c:	dcc02c17 	ldw	r19,176(sp)
  80b750:	00000306 	br	80b760 <___vfprintf_internal_r+0xef0>
  80b754:	42000204 	addi	r8,r8,8
  80b758:	843ffc04 	addi	r16,r16,-16
  80b75c:	8c00820e 	bge	r17,r16,80b968 <___vfprintf_internal_r+0x10f8>
  80b760:	18c00404 	addi	r3,r3,16
  80b764:	10800044 	addi	r2,r2,1
  80b768:	45000015 	stw	r20,0(r8)
  80b76c:	44400115 	stw	r17,4(r8)
  80b770:	d8c02015 	stw	r3,128(sp)
  80b774:	d8801f15 	stw	r2,124(sp)
  80b778:	b0bff60e 	bge	r22,r2,80b754 <__alt_data_end+0xff80b754>
  80b77c:	d9801e04 	addi	r6,sp,120
  80b780:	b80b883a 	mov	r5,r23
  80b784:	9809883a 	mov	r4,r19
  80b788:	08115200 	call	811520 <__sprint_r>
  80b78c:	103d3a1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b790:	d8c02017 	ldw	r3,128(sp)
  80b794:	d8801f17 	ldw	r2,124(sp)
  80b798:	da000404 	addi	r8,sp,16
  80b79c:	003fee06 	br	80b758 <__alt_data_end+0xff80b758>
  80b7a0:	d9403117 	ldw	r5,196(sp)
  80b7a4:	d8802a17 	ldw	r2,168(sp)
  80b7a8:	28adc83a 	sub	r22,r5,r2
  80b7ac:	05be630e 	bge	zero,r22,80b13c <__alt_data_end+0xff80b13c>
  80b7b0:	07000404 	movi	fp,16
  80b7b4:	d8801f17 	ldw	r2,124(sp)
  80b7b8:	e5838f0e 	bge	fp,r22,80c5f8 <___vfprintf_internal_r+0x1d88>
  80b7bc:	014020b4 	movhi	r5,130
  80b7c0:	296e7184 	addi	r5,r5,-17978
  80b7c4:	dc403015 	stw	r17,192(sp)
  80b7c8:	d9402b15 	stw	r5,172(sp)
  80b7cc:	b023883a 	mov	r17,r22
  80b7d0:	04c001c4 	movi	r19,7
  80b7d4:	a82d883a 	mov	r22,r21
  80b7d8:	902b883a 	mov	r21,r18
  80b7dc:	8025883a 	mov	r18,r16
  80b7e0:	dc002c17 	ldw	r16,176(sp)
  80b7e4:	00000306 	br	80b7f4 <___vfprintf_internal_r+0xf84>
  80b7e8:	8c7ffc04 	addi	r17,r17,-16
  80b7ec:	42000204 	addi	r8,r8,8
  80b7f0:	e440110e 	bge	fp,r17,80b838 <___vfprintf_internal_r+0xfc8>
  80b7f4:	18c00404 	addi	r3,r3,16
  80b7f8:	10800044 	addi	r2,r2,1
  80b7fc:	45000015 	stw	r20,0(r8)
  80b800:	47000115 	stw	fp,4(r8)
  80b804:	d8c02015 	stw	r3,128(sp)
  80b808:	d8801f15 	stw	r2,124(sp)
  80b80c:	98bff60e 	bge	r19,r2,80b7e8 <__alt_data_end+0xff80b7e8>
  80b810:	d9801e04 	addi	r6,sp,120
  80b814:	b80b883a 	mov	r5,r23
  80b818:	8009883a 	mov	r4,r16
  80b81c:	08115200 	call	811520 <__sprint_r>
  80b820:	103d151e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b824:	8c7ffc04 	addi	r17,r17,-16
  80b828:	d8c02017 	ldw	r3,128(sp)
  80b82c:	d8801f17 	ldw	r2,124(sp)
  80b830:	da000404 	addi	r8,sp,16
  80b834:	e47fef16 	blt	fp,r17,80b7f4 <__alt_data_end+0xff80b7f4>
  80b838:	9021883a 	mov	r16,r18
  80b83c:	a825883a 	mov	r18,r21
  80b840:	b02b883a 	mov	r21,r22
  80b844:	882d883a 	mov	r22,r17
  80b848:	dc403017 	ldw	r17,192(sp)
  80b84c:	d9002b17 	ldw	r4,172(sp)
  80b850:	1d87883a 	add	r3,r3,r22
  80b854:	10800044 	addi	r2,r2,1
  80b858:	41000015 	stw	r4,0(r8)
  80b85c:	45800115 	stw	r22,4(r8)
  80b860:	d8c02015 	stw	r3,128(sp)
  80b864:	d8801f15 	stw	r2,124(sp)
  80b868:	010001c4 	movi	r4,7
  80b86c:	20818e16 	blt	r4,r2,80bea8 <___vfprintf_internal_r+0x1638>
  80b870:	42000204 	addi	r8,r8,8
  80b874:	003e3106 	br	80b13c <__alt_data_end+0xff80b13c>
  80b878:	d9403317 	ldw	r5,204(sp)
  80b87c:	00800044 	movi	r2,1
  80b880:	18c00044 	addi	r3,r3,1
  80b884:	1141530e 	bge	r2,r5,80bdd4 <___vfprintf_internal_r+0x1564>
  80b888:	dc401f17 	ldw	r17,124(sp)
  80b88c:	00800044 	movi	r2,1
  80b890:	40800115 	stw	r2,4(r8)
  80b894:	8c400044 	addi	r17,r17,1
  80b898:	44000015 	stw	r16,0(r8)
  80b89c:	d8c02015 	stw	r3,128(sp)
  80b8a0:	dc401f15 	stw	r17,124(sp)
  80b8a4:	008001c4 	movi	r2,7
  80b8a8:	14416b16 	blt	r2,r17,80be58 <___vfprintf_internal_r+0x15e8>
  80b8ac:	42000204 	addi	r8,r8,8
  80b8b0:	d8803717 	ldw	r2,220(sp)
  80b8b4:	d9003417 	ldw	r4,208(sp)
  80b8b8:	8c400044 	addi	r17,r17,1
  80b8bc:	10c7883a 	add	r3,r2,r3
  80b8c0:	40800115 	stw	r2,4(r8)
  80b8c4:	41000015 	stw	r4,0(r8)
  80b8c8:	d8c02015 	stw	r3,128(sp)
  80b8cc:	dc401f15 	stw	r17,124(sp)
  80b8d0:	008001c4 	movi	r2,7
  80b8d4:	14416916 	blt	r2,r17,80be7c <___vfprintf_internal_r+0x160c>
  80b8d8:	45800204 	addi	r22,r8,8
  80b8dc:	d9003617 	ldw	r4,216(sp)
  80b8e0:	d9403817 	ldw	r5,224(sp)
  80b8e4:	000d883a 	mov	r6,zero
  80b8e8:	000f883a 	mov	r7,zero
  80b8ec:	d8c03c15 	stw	r3,240(sp)
  80b8f0:	0815b600 	call	815b60 <__eqdf2>
  80b8f4:	d8c03c17 	ldw	r3,240(sp)
  80b8f8:	1000bc26 	beq	r2,zero,80bbec <___vfprintf_internal_r+0x137c>
  80b8fc:	d9403317 	ldw	r5,204(sp)
  80b900:	84000044 	addi	r16,r16,1
  80b904:	8c400044 	addi	r17,r17,1
  80b908:	28bfffc4 	addi	r2,r5,-1
  80b90c:	1887883a 	add	r3,r3,r2
  80b910:	b0800115 	stw	r2,4(r22)
  80b914:	b4000015 	stw	r16,0(r22)
  80b918:	d8c02015 	stw	r3,128(sp)
  80b91c:	dc401f15 	stw	r17,124(sp)
  80b920:	008001c4 	movi	r2,7
  80b924:	14414316 	blt	r2,r17,80be34 <___vfprintf_internal_r+0x15c4>
  80b928:	b5800204 	addi	r22,r22,8
  80b92c:	d9003a17 	ldw	r4,232(sp)
  80b930:	df0022c4 	addi	fp,sp,139
  80b934:	8c400044 	addi	r17,r17,1
  80b938:	20c7883a 	add	r3,r4,r3
  80b93c:	b7000015 	stw	fp,0(r22)
  80b940:	b1000115 	stw	r4,4(r22)
  80b944:	d8c02015 	stw	r3,128(sp)
  80b948:	dc401f15 	stw	r17,124(sp)
  80b94c:	008001c4 	movi	r2,7
  80b950:	14400e16 	blt	r2,r17,80b98c <___vfprintf_internal_r+0x111c>
  80b954:	b2000204 	addi	r8,r22,8
  80b958:	003e3a06 	br	80b244 <__alt_data_end+0xff80b244>
  80b95c:	010020b4 	movhi	r4,130
  80b960:	212e7184 	addi	r4,r4,-17978
  80b964:	d9002b15 	stw	r4,172(sp)
  80b968:	d9002b17 	ldw	r4,172(sp)
  80b96c:	1c07883a 	add	r3,r3,r16
  80b970:	44000115 	stw	r16,4(r8)
  80b974:	41000015 	stw	r4,0(r8)
  80b978:	10800044 	addi	r2,r2,1
  80b97c:	d8c02015 	stw	r3,128(sp)
  80b980:	d8801f15 	stw	r2,124(sp)
  80b984:	010001c4 	movi	r4,7
  80b988:	20be2d0e 	bge	r4,r2,80b240 <__alt_data_end+0xff80b240>
  80b98c:	d9002c17 	ldw	r4,176(sp)
  80b990:	d9801e04 	addi	r6,sp,120
  80b994:	b80b883a 	mov	r5,r23
  80b998:	08115200 	call	811520 <__sprint_r>
  80b99c:	103cb61e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b9a0:	d8c02017 	ldw	r3,128(sp)
  80b9a4:	da000404 	addi	r8,sp,16
  80b9a8:	003e2606 	br	80b244 <__alt_data_end+0xff80b244>
  80b9ac:	d9002c17 	ldw	r4,176(sp)
  80b9b0:	d9801e04 	addi	r6,sp,120
  80b9b4:	b80b883a 	mov	r5,r23
  80b9b8:	08115200 	call	811520 <__sprint_r>
  80b9bc:	103e5d26 	beq	r2,zero,80b334 <__alt_data_end+0xff80b334>
  80b9c0:	003cad06 	br	80ac78 <__alt_data_end+0xff80ac78>
  80b9c4:	d9002c17 	ldw	r4,176(sp)
  80b9c8:	d9801e04 	addi	r6,sp,120
  80b9cc:	b80b883a 	mov	r5,r23
  80b9d0:	08115200 	call	811520 <__sprint_r>
  80b9d4:	103ca81e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b9d8:	d8c02017 	ldw	r3,128(sp)
  80b9dc:	da000404 	addi	r8,sp,16
  80b9e0:	003e0b06 	br	80b210 <__alt_data_end+0xff80b210>
  80b9e4:	d9002c17 	ldw	r4,176(sp)
  80b9e8:	d9801e04 	addi	r6,sp,120
  80b9ec:	b80b883a 	mov	r5,r23
  80b9f0:	08115200 	call	811520 <__sprint_r>
  80b9f4:	103ca01e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80b9f8:	d8c02017 	ldw	r3,128(sp)
  80b9fc:	da000404 	addi	r8,sp,16
  80ba00:	003dbd06 	br	80b0f8 <__alt_data_end+0xff80b0f8>
  80ba04:	d9002c17 	ldw	r4,176(sp)
  80ba08:	d9801e04 	addi	r6,sp,120
  80ba0c:	b80b883a 	mov	r5,r23
  80ba10:	08115200 	call	811520 <__sprint_r>
  80ba14:	103c981e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80ba18:	d8c02017 	ldw	r3,128(sp)
  80ba1c:	da000404 	addi	r8,sp,16
  80ba20:	003dc306 	br	80b130 <__alt_data_end+0xff80b130>
  80ba24:	d8802917 	ldw	r2,164(sp)
  80ba28:	d8002785 	stb	zero,158(sp)
  80ba2c:	103f0616 	blt	r2,zero,80b648 <__alt_data_end+0xff80b648>
  80ba30:	00ffdfc4 	movi	r3,-129
  80ba34:	9d84b03a 	or	r2,r19,r22
  80ba38:	90e4703a 	and	r18,r18,r3
  80ba3c:	103c6b26 	beq	r2,zero,80abec <__alt_data_end+0xff80abec>
  80ba40:	0039883a 	mov	fp,zero
  80ba44:	003e7406 	br	80b418 <__alt_data_end+0xff80b418>
  80ba48:	9080040c 	andi	r2,r18,16
  80ba4c:	1001b326 	beq	r2,zero,80c11c <___vfprintf_internal_r+0x18ac>
  80ba50:	d9002d17 	ldw	r4,180(sp)
  80ba54:	d9402917 	ldw	r5,164(sp)
  80ba58:	d8002785 	stb	zero,158(sp)
  80ba5c:	20800104 	addi	r2,r4,4
  80ba60:	24c00017 	ldw	r19,0(r4)
  80ba64:	002d883a 	mov	r22,zero
  80ba68:	2801b516 	blt	r5,zero,80c140 <___vfprintf_internal_r+0x18d0>
  80ba6c:	00ffdfc4 	movi	r3,-129
  80ba70:	d8802d15 	stw	r2,180(sp)
  80ba74:	90e4703a 	and	r18,r18,r3
  80ba78:	983d2726 	beq	r19,zero,80af18 <__alt_data_end+0xff80af18>
  80ba7c:	0039883a 	mov	fp,zero
  80ba80:	003d2a06 	br	80af2c <__alt_data_end+0xff80af2c>
  80ba84:	dc402617 	ldw	r17,152(sp)
  80ba88:	0441d30e 	bge	zero,r17,80c1d8 <___vfprintf_internal_r+0x1968>
  80ba8c:	dc403217 	ldw	r17,200(sp)
  80ba90:	d8803317 	ldw	r2,204(sp)
  80ba94:	1440010e 	bge	r2,r17,80ba9c <___vfprintf_internal_r+0x122c>
  80ba98:	1023883a 	mov	r17,r2
  80ba9c:	04400a0e 	bge	zero,r17,80bac8 <___vfprintf_internal_r+0x1258>
  80baa0:	d8801f17 	ldw	r2,124(sp)
  80baa4:	1c47883a 	add	r3,r3,r17
  80baa8:	44000015 	stw	r16,0(r8)
  80baac:	10800044 	addi	r2,r2,1
  80bab0:	44400115 	stw	r17,4(r8)
  80bab4:	d8c02015 	stw	r3,128(sp)
  80bab8:	d8801f15 	stw	r2,124(sp)
  80babc:	010001c4 	movi	r4,7
  80bac0:	20826516 	blt	r4,r2,80c458 <___vfprintf_internal_r+0x1be8>
  80bac4:	42000204 	addi	r8,r8,8
  80bac8:	88026116 	blt	r17,zero,80c450 <___vfprintf_internal_r+0x1be0>
  80bacc:	d9003217 	ldw	r4,200(sp)
  80bad0:	2463c83a 	sub	r17,r4,r17
  80bad4:	04407b0e 	bge	zero,r17,80bcc4 <___vfprintf_internal_r+0x1454>
  80bad8:	05800404 	movi	r22,16
  80badc:	d8801f17 	ldw	r2,124(sp)
  80bae0:	b4419d0e 	bge	r22,r17,80c158 <___vfprintf_internal_r+0x18e8>
  80bae4:	010020b4 	movhi	r4,130
  80bae8:	212e7184 	addi	r4,r4,-17978
  80baec:	d9002b15 	stw	r4,172(sp)
  80baf0:	070001c4 	movi	fp,7
  80baf4:	dcc02c17 	ldw	r19,176(sp)
  80baf8:	00000306 	br	80bb08 <___vfprintf_internal_r+0x1298>
  80bafc:	42000204 	addi	r8,r8,8
  80bb00:	8c7ffc04 	addi	r17,r17,-16
  80bb04:	b441970e 	bge	r22,r17,80c164 <___vfprintf_internal_r+0x18f4>
  80bb08:	18c00404 	addi	r3,r3,16
  80bb0c:	10800044 	addi	r2,r2,1
  80bb10:	45000015 	stw	r20,0(r8)
  80bb14:	45800115 	stw	r22,4(r8)
  80bb18:	d8c02015 	stw	r3,128(sp)
  80bb1c:	d8801f15 	stw	r2,124(sp)
  80bb20:	e0bff60e 	bge	fp,r2,80bafc <__alt_data_end+0xff80bafc>
  80bb24:	d9801e04 	addi	r6,sp,120
  80bb28:	b80b883a 	mov	r5,r23
  80bb2c:	9809883a 	mov	r4,r19
  80bb30:	08115200 	call	811520 <__sprint_r>
  80bb34:	103c501e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80bb38:	d8c02017 	ldw	r3,128(sp)
  80bb3c:	d8801f17 	ldw	r2,124(sp)
  80bb40:	da000404 	addi	r8,sp,16
  80bb44:	003fee06 	br	80bb00 <__alt_data_end+0xff80bb00>
  80bb48:	d9002c17 	ldw	r4,176(sp)
  80bb4c:	d9801e04 	addi	r6,sp,120
  80bb50:	b80b883a 	mov	r5,r23
  80bb54:	08115200 	call	811520 <__sprint_r>
  80bb58:	103c471e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80bb5c:	d8c02017 	ldw	r3,128(sp)
  80bb60:	df002787 	ldb	fp,158(sp)
  80bb64:	da000404 	addi	r8,sp,16
  80bb68:	003d5606 	br	80b0c4 <__alt_data_end+0xff80b0c4>
  80bb6c:	9080040c 	andi	r2,r18,16
  80bb70:	10016126 	beq	r2,zero,80c0f8 <___vfprintf_internal_r+0x1888>
  80bb74:	d8802d17 	ldw	r2,180(sp)
  80bb78:	14c00017 	ldw	r19,0(r2)
  80bb7c:	10800104 	addi	r2,r2,4
  80bb80:	d8802d15 	stw	r2,180(sp)
  80bb84:	982dd7fa 	srai	r22,r19,31
  80bb88:	b005883a 	mov	r2,r22
  80bb8c:	003c8206 	br	80ad98 <__alt_data_end+0xff80ad98>
  80bb90:	9080040c 	andi	r2,r18,16
  80bb94:	10003526 	beq	r2,zero,80bc6c <___vfprintf_internal_r+0x13fc>
  80bb98:	d9402d17 	ldw	r5,180(sp)
  80bb9c:	d8c02917 	ldw	r3,164(sp)
  80bba0:	d8002785 	stb	zero,158(sp)
  80bba4:	28800104 	addi	r2,r5,4
  80bba8:	2cc00017 	ldw	r19,0(r5)
  80bbac:	002d883a 	mov	r22,zero
  80bbb0:	18003716 	blt	r3,zero,80bc90 <___vfprintf_internal_r+0x1420>
  80bbb4:	00ffdfc4 	movi	r3,-129
  80bbb8:	d8802d15 	stw	r2,180(sp)
  80bbbc:	90e4703a 	and	r18,r18,r3
  80bbc0:	0039883a 	mov	fp,zero
  80bbc4:	983df326 	beq	r19,zero,80b394 <__alt_data_end+0xff80b394>
  80bbc8:	00800244 	movi	r2,9
  80bbcc:	14fc7b36 	bltu	r2,r19,80adbc <__alt_data_end+0xff80adbc>
  80bbd0:	d8c02817 	ldw	r3,160(sp)
  80bbd4:	dc001dc4 	addi	r16,sp,119
  80bbd8:	9cc00c04 	addi	r19,r19,48
  80bbdc:	1c07c83a 	sub	r3,r3,r16
  80bbe0:	dcc01dc5 	stb	r19,119(sp)
  80bbe4:	d8c02e15 	stw	r3,184(sp)
  80bbe8:	003ce806 	br	80af8c <__alt_data_end+0xff80af8c>
  80bbec:	d8803317 	ldw	r2,204(sp)
  80bbf0:	143fffc4 	addi	r16,r2,-1
  80bbf4:	043f4d0e 	bge	zero,r16,80b92c <__alt_data_end+0xff80b92c>
  80bbf8:	07000404 	movi	fp,16
  80bbfc:	e400810e 	bge	fp,r16,80be04 <___vfprintf_internal_r+0x1594>
  80bc00:	014020b4 	movhi	r5,130
  80bc04:	296e7184 	addi	r5,r5,-17978
  80bc08:	d9402b15 	stw	r5,172(sp)
  80bc0c:	01c001c4 	movi	r7,7
  80bc10:	dcc02c17 	ldw	r19,176(sp)
  80bc14:	00000306 	br	80bc24 <___vfprintf_internal_r+0x13b4>
  80bc18:	b5800204 	addi	r22,r22,8
  80bc1c:	843ffc04 	addi	r16,r16,-16
  80bc20:	e4007b0e 	bge	fp,r16,80be10 <___vfprintf_internal_r+0x15a0>
  80bc24:	18c00404 	addi	r3,r3,16
  80bc28:	8c400044 	addi	r17,r17,1
  80bc2c:	b5000015 	stw	r20,0(r22)
  80bc30:	b7000115 	stw	fp,4(r22)
  80bc34:	d8c02015 	stw	r3,128(sp)
  80bc38:	dc401f15 	stw	r17,124(sp)
  80bc3c:	3c7ff60e 	bge	r7,r17,80bc18 <__alt_data_end+0xff80bc18>
  80bc40:	d9801e04 	addi	r6,sp,120
  80bc44:	b80b883a 	mov	r5,r23
  80bc48:	9809883a 	mov	r4,r19
  80bc4c:	d9c03c15 	stw	r7,240(sp)
  80bc50:	08115200 	call	811520 <__sprint_r>
  80bc54:	d9c03c17 	ldw	r7,240(sp)
  80bc58:	103c071e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80bc5c:	d8c02017 	ldw	r3,128(sp)
  80bc60:	dc401f17 	ldw	r17,124(sp)
  80bc64:	dd800404 	addi	r22,sp,16
  80bc68:	003fec06 	br	80bc1c <__alt_data_end+0xff80bc1c>
  80bc6c:	9080100c 	andi	r2,r18,64
  80bc70:	d8002785 	stb	zero,158(sp)
  80bc74:	10010e26 	beq	r2,zero,80c0b0 <___vfprintf_internal_r+0x1840>
  80bc78:	d9002d17 	ldw	r4,180(sp)
  80bc7c:	d9402917 	ldw	r5,164(sp)
  80bc80:	002d883a 	mov	r22,zero
  80bc84:	20800104 	addi	r2,r4,4
  80bc88:	24c0000b 	ldhu	r19,0(r4)
  80bc8c:	283fc90e 	bge	r5,zero,80bbb4 <__alt_data_end+0xff80bbb4>
  80bc90:	d8802d15 	stw	r2,180(sp)
  80bc94:	0039883a 	mov	fp,zero
  80bc98:	9d84b03a 	or	r2,r19,r22
  80bc9c:	103c461e 	bne	r2,zero,80adb8 <__alt_data_end+0xff80adb8>
  80bca0:	00800044 	movi	r2,1
  80bca4:	003e6c06 	br	80b658 <__alt_data_end+0xff80b658>
  80bca8:	d9002c17 	ldw	r4,176(sp)
  80bcac:	d9801e04 	addi	r6,sp,120
  80bcb0:	b80b883a 	mov	r5,r23
  80bcb4:	08115200 	call	811520 <__sprint_r>
  80bcb8:	103bef1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80bcbc:	d8c02017 	ldw	r3,128(sp)
  80bcc0:	da000404 	addi	r8,sp,16
  80bcc4:	d9003217 	ldw	r4,200(sp)
  80bcc8:	d8802617 	ldw	r2,152(sp)
  80bccc:	d9403317 	ldw	r5,204(sp)
  80bcd0:	8123883a 	add	r17,r16,r4
  80bcd4:	11400216 	blt	r2,r5,80bce0 <___vfprintf_internal_r+0x1470>
  80bcd8:	9100004c 	andi	r4,r18,1
  80bcdc:	20000d26 	beq	r4,zero,80bd14 <___vfprintf_internal_r+0x14a4>
  80bce0:	d9003717 	ldw	r4,220(sp)
  80bce4:	d9403417 	ldw	r5,208(sp)
  80bce8:	1907883a 	add	r3,r3,r4
  80bcec:	d9001f17 	ldw	r4,124(sp)
  80bcf0:	41400015 	stw	r5,0(r8)
  80bcf4:	d9403717 	ldw	r5,220(sp)
  80bcf8:	21000044 	addi	r4,r4,1
  80bcfc:	d8c02015 	stw	r3,128(sp)
  80bd00:	41400115 	stw	r5,4(r8)
  80bd04:	d9001f15 	stw	r4,124(sp)
  80bd08:	014001c4 	movi	r5,7
  80bd0c:	2901e816 	blt	r5,r4,80c4b0 <___vfprintf_internal_r+0x1c40>
  80bd10:	42000204 	addi	r8,r8,8
  80bd14:	d9003317 	ldw	r4,204(sp)
  80bd18:	8121883a 	add	r16,r16,r4
  80bd1c:	2085c83a 	sub	r2,r4,r2
  80bd20:	8461c83a 	sub	r16,r16,r17
  80bd24:	1400010e 	bge	r2,r16,80bd2c <___vfprintf_internal_r+0x14bc>
  80bd28:	1021883a 	mov	r16,r2
  80bd2c:	04000a0e 	bge	zero,r16,80bd58 <___vfprintf_internal_r+0x14e8>
  80bd30:	d9001f17 	ldw	r4,124(sp)
  80bd34:	1c07883a 	add	r3,r3,r16
  80bd38:	44400015 	stw	r17,0(r8)
  80bd3c:	21000044 	addi	r4,r4,1
  80bd40:	44000115 	stw	r16,4(r8)
  80bd44:	d8c02015 	stw	r3,128(sp)
  80bd48:	d9001f15 	stw	r4,124(sp)
  80bd4c:	014001c4 	movi	r5,7
  80bd50:	2901fb16 	blt	r5,r4,80c540 <___vfprintf_internal_r+0x1cd0>
  80bd54:	42000204 	addi	r8,r8,8
  80bd58:	8001f716 	blt	r16,zero,80c538 <___vfprintf_internal_r+0x1cc8>
  80bd5c:	1421c83a 	sub	r16,r2,r16
  80bd60:	043d380e 	bge	zero,r16,80b244 <__alt_data_end+0xff80b244>
  80bd64:	04400404 	movi	r17,16
  80bd68:	d8801f17 	ldw	r2,124(sp)
  80bd6c:	8c3efb0e 	bge	r17,r16,80b95c <__alt_data_end+0xff80b95c>
  80bd70:	014020b4 	movhi	r5,130
  80bd74:	296e7184 	addi	r5,r5,-17978
  80bd78:	d9402b15 	stw	r5,172(sp)
  80bd7c:	058001c4 	movi	r22,7
  80bd80:	dcc02c17 	ldw	r19,176(sp)
  80bd84:	00000306 	br	80bd94 <___vfprintf_internal_r+0x1524>
  80bd88:	42000204 	addi	r8,r8,8
  80bd8c:	843ffc04 	addi	r16,r16,-16
  80bd90:	8c3ef50e 	bge	r17,r16,80b968 <__alt_data_end+0xff80b968>
  80bd94:	18c00404 	addi	r3,r3,16
  80bd98:	10800044 	addi	r2,r2,1
  80bd9c:	45000015 	stw	r20,0(r8)
  80bda0:	44400115 	stw	r17,4(r8)
  80bda4:	d8c02015 	stw	r3,128(sp)
  80bda8:	d8801f15 	stw	r2,124(sp)
  80bdac:	b0bff60e 	bge	r22,r2,80bd88 <__alt_data_end+0xff80bd88>
  80bdb0:	d9801e04 	addi	r6,sp,120
  80bdb4:	b80b883a 	mov	r5,r23
  80bdb8:	9809883a 	mov	r4,r19
  80bdbc:	08115200 	call	811520 <__sprint_r>
  80bdc0:	103bad1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80bdc4:	d8c02017 	ldw	r3,128(sp)
  80bdc8:	d8801f17 	ldw	r2,124(sp)
  80bdcc:	da000404 	addi	r8,sp,16
  80bdd0:	003fee06 	br	80bd8c <__alt_data_end+0xff80bd8c>
  80bdd4:	9088703a 	and	r4,r18,r2
  80bdd8:	203eab1e 	bne	r4,zero,80b888 <__alt_data_end+0xff80b888>
  80bddc:	dc401f17 	ldw	r17,124(sp)
  80bde0:	40800115 	stw	r2,4(r8)
  80bde4:	44000015 	stw	r16,0(r8)
  80bde8:	8c400044 	addi	r17,r17,1
  80bdec:	d8c02015 	stw	r3,128(sp)
  80bdf0:	dc401f15 	stw	r17,124(sp)
  80bdf4:	008001c4 	movi	r2,7
  80bdf8:	14400e16 	blt	r2,r17,80be34 <___vfprintf_internal_r+0x15c4>
  80bdfc:	45800204 	addi	r22,r8,8
  80be00:	003eca06 	br	80b92c <__alt_data_end+0xff80b92c>
  80be04:	010020b4 	movhi	r4,130
  80be08:	212e7184 	addi	r4,r4,-17978
  80be0c:	d9002b15 	stw	r4,172(sp)
  80be10:	d8802b17 	ldw	r2,172(sp)
  80be14:	1c07883a 	add	r3,r3,r16
  80be18:	8c400044 	addi	r17,r17,1
  80be1c:	b0800015 	stw	r2,0(r22)
  80be20:	b4000115 	stw	r16,4(r22)
  80be24:	d8c02015 	stw	r3,128(sp)
  80be28:	dc401f15 	stw	r17,124(sp)
  80be2c:	008001c4 	movi	r2,7
  80be30:	147ebd0e 	bge	r2,r17,80b928 <__alt_data_end+0xff80b928>
  80be34:	d9002c17 	ldw	r4,176(sp)
  80be38:	d9801e04 	addi	r6,sp,120
  80be3c:	b80b883a 	mov	r5,r23
  80be40:	08115200 	call	811520 <__sprint_r>
  80be44:	103b8c1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80be48:	d8c02017 	ldw	r3,128(sp)
  80be4c:	dc401f17 	ldw	r17,124(sp)
  80be50:	dd800404 	addi	r22,sp,16
  80be54:	003eb506 	br	80b92c <__alt_data_end+0xff80b92c>
  80be58:	d9002c17 	ldw	r4,176(sp)
  80be5c:	d9801e04 	addi	r6,sp,120
  80be60:	b80b883a 	mov	r5,r23
  80be64:	08115200 	call	811520 <__sprint_r>
  80be68:	103b831e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80be6c:	d8c02017 	ldw	r3,128(sp)
  80be70:	dc401f17 	ldw	r17,124(sp)
  80be74:	da000404 	addi	r8,sp,16
  80be78:	003e8d06 	br	80b8b0 <__alt_data_end+0xff80b8b0>
  80be7c:	d9002c17 	ldw	r4,176(sp)
  80be80:	d9801e04 	addi	r6,sp,120
  80be84:	b80b883a 	mov	r5,r23
  80be88:	08115200 	call	811520 <__sprint_r>
  80be8c:	103b7a1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80be90:	d8c02017 	ldw	r3,128(sp)
  80be94:	dc401f17 	ldw	r17,124(sp)
  80be98:	dd800404 	addi	r22,sp,16
  80be9c:	003e8f06 	br	80b8dc <__alt_data_end+0xff80b8dc>
  80bea0:	0027883a 	mov	r19,zero
  80bea4:	003f4a06 	br	80bbd0 <__alt_data_end+0xff80bbd0>
  80bea8:	d9002c17 	ldw	r4,176(sp)
  80beac:	d9801e04 	addi	r6,sp,120
  80beb0:	b80b883a 	mov	r5,r23
  80beb4:	08115200 	call	811520 <__sprint_r>
  80beb8:	103b6f1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80bebc:	d8c02017 	ldw	r3,128(sp)
  80bec0:	da000404 	addi	r8,sp,16
  80bec4:	003c9d06 	br	80b13c <__alt_data_end+0xff80b13c>
  80bec8:	04e7c83a 	sub	r19,zero,r19
  80becc:	9804c03a 	cmpne	r2,r19,zero
  80bed0:	05adc83a 	sub	r22,zero,r22
  80bed4:	b0adc83a 	sub	r22,r22,r2
  80bed8:	d8802917 	ldw	r2,164(sp)
  80bedc:	07000b44 	movi	fp,45
  80bee0:	df002785 	stb	fp,158(sp)
  80bee4:	10017b16 	blt	r2,zero,80c4d4 <___vfprintf_internal_r+0x1c64>
  80bee8:	00bfdfc4 	movi	r2,-129
  80beec:	90a4703a 	and	r18,r18,r2
  80bef0:	003bb106 	br	80adb8 <__alt_data_end+0xff80adb8>
  80bef4:	d9003617 	ldw	r4,216(sp)
  80bef8:	d9403817 	ldw	r5,224(sp)
  80befc:	da003d15 	stw	r8,244(sp)
  80bf00:	08111440 	call	811144 <__fpclassifyd>
  80bf04:	da003d17 	ldw	r8,244(sp)
  80bf08:	1000f026 	beq	r2,zero,80c2cc <___vfprintf_internal_r+0x1a5c>
  80bf0c:	d9002917 	ldw	r4,164(sp)
  80bf10:	05bff7c4 	movi	r22,-33
  80bf14:	00bfffc4 	movi	r2,-1
  80bf18:	8dac703a 	and	r22,r17,r22
  80bf1c:	20820026 	beq	r4,r2,80c720 <___vfprintf_internal_r+0x1eb0>
  80bf20:	008011c4 	movi	r2,71
  80bf24:	b081f726 	beq	r22,r2,80c704 <___vfprintf_internal_r+0x1e94>
  80bf28:	d9003817 	ldw	r4,224(sp)
  80bf2c:	90c04014 	ori	r3,r18,256
  80bf30:	d8c02b15 	stw	r3,172(sp)
  80bf34:	20021516 	blt	r4,zero,80c78c <___vfprintf_internal_r+0x1f1c>
  80bf38:	dcc03817 	ldw	r19,224(sp)
  80bf3c:	d8002a05 	stb	zero,168(sp)
  80bf40:	00801984 	movi	r2,102
  80bf44:	8881f926 	beq	r17,r2,80c72c <___vfprintf_internal_r+0x1ebc>
  80bf48:	00801184 	movi	r2,70
  80bf4c:	88821c26 	beq	r17,r2,80c7c0 <___vfprintf_internal_r+0x1f50>
  80bf50:	00801144 	movi	r2,69
  80bf54:	b081ef26 	beq	r22,r2,80c714 <___vfprintf_internal_r+0x1ea4>
  80bf58:	d8c02917 	ldw	r3,164(sp)
  80bf5c:	d8802104 	addi	r2,sp,132
  80bf60:	d8800315 	stw	r2,12(sp)
  80bf64:	d9403617 	ldw	r5,216(sp)
  80bf68:	d8802504 	addi	r2,sp,148
  80bf6c:	d9002c17 	ldw	r4,176(sp)
  80bf70:	d8800215 	stw	r2,8(sp)
  80bf74:	d8802604 	addi	r2,sp,152
  80bf78:	d8c00015 	stw	r3,0(sp)
  80bf7c:	d8800115 	stw	r2,4(sp)
  80bf80:	01c00084 	movi	r7,2
  80bf84:	980d883a 	mov	r6,r19
  80bf88:	d8c03c15 	stw	r3,240(sp)
  80bf8c:	da003d15 	stw	r8,244(sp)
  80bf90:	080ce940 	call	80ce94 <_dtoa_r>
  80bf94:	1021883a 	mov	r16,r2
  80bf98:	008019c4 	movi	r2,103
  80bf9c:	d8c03c17 	ldw	r3,240(sp)
  80bfa0:	da003d17 	ldw	r8,244(sp)
  80bfa4:	88817126 	beq	r17,r2,80c56c <___vfprintf_internal_r+0x1cfc>
  80bfa8:	008011c4 	movi	r2,71
  80bfac:	88829226 	beq	r17,r2,80c9f8 <___vfprintf_internal_r+0x2188>
  80bfb0:	80f9883a 	add	fp,r16,r3
  80bfb4:	d9003617 	ldw	r4,216(sp)
  80bfb8:	000d883a 	mov	r6,zero
  80bfbc:	000f883a 	mov	r7,zero
  80bfc0:	980b883a 	mov	r5,r19
  80bfc4:	da003d15 	stw	r8,244(sp)
  80bfc8:	0815b600 	call	815b60 <__eqdf2>
  80bfcc:	da003d17 	ldw	r8,244(sp)
  80bfd0:	10018d26 	beq	r2,zero,80c608 <___vfprintf_internal_r+0x1d98>
  80bfd4:	d8802117 	ldw	r2,132(sp)
  80bfd8:	1700062e 	bgeu	r2,fp,80bff4 <___vfprintf_internal_r+0x1784>
  80bfdc:	01000c04 	movi	r4,48
  80bfe0:	10c00044 	addi	r3,r2,1
  80bfe4:	d8c02115 	stw	r3,132(sp)
  80bfe8:	11000005 	stb	r4,0(r2)
  80bfec:	d8802117 	ldw	r2,132(sp)
  80bff0:	173ffb36 	bltu	r2,fp,80bfe0 <__alt_data_end+0xff80bfe0>
  80bff4:	1405c83a 	sub	r2,r2,r16
  80bff8:	d8803315 	stw	r2,204(sp)
  80bffc:	008011c4 	movi	r2,71
  80c000:	b0817626 	beq	r22,r2,80c5dc <___vfprintf_internal_r+0x1d6c>
  80c004:	00801944 	movi	r2,101
  80c008:	1442810e 	bge	r2,r17,80ca10 <___vfprintf_internal_r+0x21a0>
  80c00c:	d8c02617 	ldw	r3,152(sp)
  80c010:	00801984 	movi	r2,102
  80c014:	d8c03215 	stw	r3,200(sp)
  80c018:	8881fe26 	beq	r17,r2,80c814 <___vfprintf_internal_r+0x1fa4>
  80c01c:	d8c03217 	ldw	r3,200(sp)
  80c020:	d9003317 	ldw	r4,204(sp)
  80c024:	1901dd16 	blt	r3,r4,80c79c <___vfprintf_internal_r+0x1f2c>
  80c028:	9480004c 	andi	r18,r18,1
  80c02c:	90022b1e 	bne	r18,zero,80c8dc <___vfprintf_internal_r+0x206c>
  80c030:	1805883a 	mov	r2,r3
  80c034:	18028016 	blt	r3,zero,80ca38 <___vfprintf_internal_r+0x21c8>
  80c038:	d8c03217 	ldw	r3,200(sp)
  80c03c:	044019c4 	movi	r17,103
  80c040:	d8c02e15 	stw	r3,184(sp)
  80c044:	df002a07 	ldb	fp,168(sp)
  80c048:	e001531e 	bne	fp,zero,80c598 <___vfprintf_internal_r+0x1d28>
  80c04c:	df002783 	ldbu	fp,158(sp)
  80c050:	d8802a15 	stw	r2,168(sp)
  80c054:	dc802b17 	ldw	r18,172(sp)
  80c058:	d8002915 	stw	zero,164(sp)
  80c05c:	003bd106 	br	80afa4 <__alt_data_end+0xff80afa4>
  80c060:	d8802d17 	ldw	r2,180(sp)
  80c064:	d8c02d17 	ldw	r3,180(sp)
  80c068:	d9002d17 	ldw	r4,180(sp)
  80c06c:	10800017 	ldw	r2,0(r2)
  80c070:	18c00117 	ldw	r3,4(r3)
  80c074:	21000204 	addi	r4,r4,8
  80c078:	d8803615 	stw	r2,216(sp)
  80c07c:	d8c03815 	stw	r3,224(sp)
  80c080:	d9002d15 	stw	r4,180(sp)
  80c084:	003b7506 	br	80ae5c <__alt_data_end+0xff80ae5c>
  80c088:	ac400007 	ldb	r17,0(r21)
  80c08c:	003a5906 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80c090:	9080100c 	andi	r2,r18,64
  80c094:	1000a826 	beq	r2,zero,80c338 <___vfprintf_internal_r+0x1ac8>
  80c098:	d9002d17 	ldw	r4,180(sp)
  80c09c:	002d883a 	mov	r22,zero
  80c0a0:	24c0000b 	ldhu	r19,0(r4)
  80c0a4:	21000104 	addi	r4,r4,4
  80c0a8:	d9002d15 	stw	r4,180(sp)
  80c0ac:	003ccb06 	br	80b3dc <__alt_data_end+0xff80b3dc>
  80c0b0:	d8c02d17 	ldw	r3,180(sp)
  80c0b4:	d9002917 	ldw	r4,164(sp)
  80c0b8:	002d883a 	mov	r22,zero
  80c0bc:	18800104 	addi	r2,r3,4
  80c0c0:	1cc00017 	ldw	r19,0(r3)
  80c0c4:	203ebb0e 	bge	r4,zero,80bbb4 <__alt_data_end+0xff80bbb4>
  80c0c8:	003ef106 	br	80bc90 <__alt_data_end+0xff80bc90>
  80c0cc:	9080040c 	andi	r2,r18,16
  80c0d0:	1000921e 	bne	r2,zero,80c31c <___vfprintf_internal_r+0x1aac>
  80c0d4:	9480100c 	andi	r18,r18,64
  80c0d8:	90013926 	beq	r18,zero,80c5c0 <___vfprintf_internal_r+0x1d50>
  80c0dc:	d9002d17 	ldw	r4,180(sp)
  80c0e0:	d9402f17 	ldw	r5,188(sp)
  80c0e4:	20800017 	ldw	r2,0(r4)
  80c0e8:	21000104 	addi	r4,r4,4
  80c0ec:	d9002d15 	stw	r4,180(sp)
  80c0f0:	1140000d 	sth	r5,0(r2)
  80c0f4:	003a1606 	br	80a950 <__alt_data_end+0xff80a950>
  80c0f8:	9080100c 	andi	r2,r18,64
  80c0fc:	10008026 	beq	r2,zero,80c300 <___vfprintf_internal_r+0x1a90>
  80c100:	d8c02d17 	ldw	r3,180(sp)
  80c104:	1cc0000f 	ldh	r19,0(r3)
  80c108:	18c00104 	addi	r3,r3,4
  80c10c:	d8c02d15 	stw	r3,180(sp)
  80c110:	982dd7fa 	srai	r22,r19,31
  80c114:	b005883a 	mov	r2,r22
  80c118:	003b1f06 	br	80ad98 <__alt_data_end+0xff80ad98>
  80c11c:	9080100c 	andi	r2,r18,64
  80c120:	d8002785 	stb	zero,158(sp)
  80c124:	10008a1e 	bne	r2,zero,80c350 <___vfprintf_internal_r+0x1ae0>
  80c128:	d9402d17 	ldw	r5,180(sp)
  80c12c:	d8c02917 	ldw	r3,164(sp)
  80c130:	002d883a 	mov	r22,zero
  80c134:	28800104 	addi	r2,r5,4
  80c138:	2cc00017 	ldw	r19,0(r5)
  80c13c:	183e4b0e 	bge	r3,zero,80ba6c <__alt_data_end+0xff80ba6c>
  80c140:	9d86b03a 	or	r3,r19,r22
  80c144:	d8802d15 	stw	r2,180(sp)
  80c148:	183e4c1e 	bne	r3,zero,80ba7c <__alt_data_end+0xff80ba7c>
  80c14c:	0039883a 	mov	fp,zero
  80c150:	0005883a 	mov	r2,zero
  80c154:	003d4006 	br	80b658 <__alt_data_end+0xff80b658>
  80c158:	014020b4 	movhi	r5,130
  80c15c:	296e7184 	addi	r5,r5,-17978
  80c160:	d9402b15 	stw	r5,172(sp)
  80c164:	d9402b17 	ldw	r5,172(sp)
  80c168:	1c47883a 	add	r3,r3,r17
  80c16c:	10800044 	addi	r2,r2,1
  80c170:	41400015 	stw	r5,0(r8)
  80c174:	44400115 	stw	r17,4(r8)
  80c178:	d8c02015 	stw	r3,128(sp)
  80c17c:	d8801f15 	stw	r2,124(sp)
  80c180:	010001c4 	movi	r4,7
  80c184:	20bec816 	blt	r4,r2,80bca8 <__alt_data_end+0xff80bca8>
  80c188:	42000204 	addi	r8,r8,8
  80c18c:	003ecd06 	br	80bcc4 <__alt_data_end+0xff80bcc4>
  80c190:	d9002917 	ldw	r4,164(sp)
  80c194:	d8002785 	stb	zero,158(sp)
  80c198:	203d2d16 	blt	r4,zero,80b650 <__alt_data_end+0xff80b650>
  80c19c:	00bfdfc4 	movi	r2,-129
  80c1a0:	90a4703a 	and	r18,r18,r2
  80c1a4:	003a9106 	br	80abec <__alt_data_end+0xff80abec>
  80c1a8:	010020b4 	movhi	r4,130
  80c1ac:	212e7184 	addi	r4,r4,-17978
  80c1b0:	d9002b15 	stw	r4,172(sp)
  80c1b4:	003c0c06 	br	80b1e8 <__alt_data_end+0xff80b1e8>
  80c1b8:	d9002c17 	ldw	r4,176(sp)
  80c1bc:	d9801e04 	addi	r6,sp,120
  80c1c0:	b80b883a 	mov	r5,r23
  80c1c4:	08115200 	call	811520 <__sprint_r>
  80c1c8:	103aab1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c1cc:	d8c02017 	ldw	r3,128(sp)
  80c1d0:	da000404 	addi	r8,sp,16
  80c1d4:	003d4106 	br	80b6dc <__alt_data_end+0xff80b6dc>
  80c1d8:	d8801f17 	ldw	r2,124(sp)
  80c1dc:	014020b4 	movhi	r5,130
  80c1e0:	01000044 	movi	r4,1
  80c1e4:	18c00044 	addi	r3,r3,1
  80c1e8:	10800044 	addi	r2,r2,1
  80c1ec:	296e7104 	addi	r5,r5,-17980
  80c1f0:	41000115 	stw	r4,4(r8)
  80c1f4:	41400015 	stw	r5,0(r8)
  80c1f8:	d8c02015 	stw	r3,128(sp)
  80c1fc:	d8801f15 	stw	r2,124(sp)
  80c200:	010001c4 	movi	r4,7
  80c204:	20805c16 	blt	r4,r2,80c378 <___vfprintf_internal_r+0x1b08>
  80c208:	42000204 	addi	r8,r8,8
  80c20c:	8800041e 	bne	r17,zero,80c220 <___vfprintf_internal_r+0x19b0>
  80c210:	d8803317 	ldw	r2,204(sp)
  80c214:	1000021e 	bne	r2,zero,80c220 <___vfprintf_internal_r+0x19b0>
  80c218:	9080004c 	andi	r2,r18,1
  80c21c:	103c0926 	beq	r2,zero,80b244 <__alt_data_end+0xff80b244>
  80c220:	d9003717 	ldw	r4,220(sp)
  80c224:	d8801f17 	ldw	r2,124(sp)
  80c228:	d9403417 	ldw	r5,208(sp)
  80c22c:	20c7883a 	add	r3,r4,r3
  80c230:	10800044 	addi	r2,r2,1
  80c234:	41000115 	stw	r4,4(r8)
  80c238:	41400015 	stw	r5,0(r8)
  80c23c:	d8c02015 	stw	r3,128(sp)
  80c240:	d8801f15 	stw	r2,124(sp)
  80c244:	010001c4 	movi	r4,7
  80c248:	20812116 	blt	r4,r2,80c6d0 <___vfprintf_internal_r+0x1e60>
  80c24c:	42000204 	addi	r8,r8,8
  80c250:	0463c83a 	sub	r17,zero,r17
  80c254:	0440730e 	bge	zero,r17,80c424 <___vfprintf_internal_r+0x1bb4>
  80c258:	05800404 	movi	r22,16
  80c25c:	b440860e 	bge	r22,r17,80c478 <___vfprintf_internal_r+0x1c08>
  80c260:	014020b4 	movhi	r5,130
  80c264:	296e7184 	addi	r5,r5,-17978
  80c268:	d9402b15 	stw	r5,172(sp)
  80c26c:	070001c4 	movi	fp,7
  80c270:	dcc02c17 	ldw	r19,176(sp)
  80c274:	00000306 	br	80c284 <___vfprintf_internal_r+0x1a14>
  80c278:	42000204 	addi	r8,r8,8
  80c27c:	8c7ffc04 	addi	r17,r17,-16
  80c280:	b440800e 	bge	r22,r17,80c484 <___vfprintf_internal_r+0x1c14>
  80c284:	18c00404 	addi	r3,r3,16
  80c288:	10800044 	addi	r2,r2,1
  80c28c:	45000015 	stw	r20,0(r8)
  80c290:	45800115 	stw	r22,4(r8)
  80c294:	d8c02015 	stw	r3,128(sp)
  80c298:	d8801f15 	stw	r2,124(sp)
  80c29c:	e0bff60e 	bge	fp,r2,80c278 <__alt_data_end+0xff80c278>
  80c2a0:	d9801e04 	addi	r6,sp,120
  80c2a4:	b80b883a 	mov	r5,r23
  80c2a8:	9809883a 	mov	r4,r19
  80c2ac:	08115200 	call	811520 <__sprint_r>
  80c2b0:	103a711e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c2b4:	d8c02017 	ldw	r3,128(sp)
  80c2b8:	d8801f17 	ldw	r2,124(sp)
  80c2bc:	da000404 	addi	r8,sp,16
  80c2c0:	003fee06 	br	80c27c <__alt_data_end+0xff80c27c>
  80c2c4:	00bfffc4 	movi	r2,-1
  80c2c8:	003a6f06 	br	80ac88 <__alt_data_end+0xff80ac88>
  80c2cc:	008011c4 	movi	r2,71
  80c2d0:	1440b816 	blt	r2,r17,80c5b4 <___vfprintf_internal_r+0x1d44>
  80c2d4:	040020b4 	movhi	r16,130
  80c2d8:	842e6304 	addi	r16,r16,-18036
  80c2dc:	00c000c4 	movi	r3,3
  80c2e0:	00bfdfc4 	movi	r2,-129
  80c2e4:	d8c02a15 	stw	r3,168(sp)
  80c2e8:	90a4703a 	and	r18,r18,r2
  80c2ec:	df002783 	ldbu	fp,158(sp)
  80c2f0:	d8c02e15 	stw	r3,184(sp)
  80c2f4:	d8002915 	stw	zero,164(sp)
  80c2f8:	d8003215 	stw	zero,200(sp)
  80c2fc:	003b2906 	br	80afa4 <__alt_data_end+0xff80afa4>
  80c300:	d9002d17 	ldw	r4,180(sp)
  80c304:	24c00017 	ldw	r19,0(r4)
  80c308:	21000104 	addi	r4,r4,4
  80c30c:	d9002d15 	stw	r4,180(sp)
  80c310:	982dd7fa 	srai	r22,r19,31
  80c314:	b005883a 	mov	r2,r22
  80c318:	003a9f06 	br	80ad98 <__alt_data_end+0xff80ad98>
  80c31c:	d9402d17 	ldw	r5,180(sp)
  80c320:	d8c02f17 	ldw	r3,188(sp)
  80c324:	28800017 	ldw	r2,0(r5)
  80c328:	29400104 	addi	r5,r5,4
  80c32c:	d9402d15 	stw	r5,180(sp)
  80c330:	10c00015 	stw	r3,0(r2)
  80c334:	00398606 	br	80a950 <__alt_data_end+0xff80a950>
  80c338:	d9402d17 	ldw	r5,180(sp)
  80c33c:	002d883a 	mov	r22,zero
  80c340:	2cc00017 	ldw	r19,0(r5)
  80c344:	29400104 	addi	r5,r5,4
  80c348:	d9402d15 	stw	r5,180(sp)
  80c34c:	003c2306 	br	80b3dc <__alt_data_end+0xff80b3dc>
  80c350:	d8c02d17 	ldw	r3,180(sp)
  80c354:	d9002917 	ldw	r4,164(sp)
  80c358:	002d883a 	mov	r22,zero
  80c35c:	18800104 	addi	r2,r3,4
  80c360:	1cc0000b 	ldhu	r19,0(r3)
  80c364:	203dc10e 	bge	r4,zero,80ba6c <__alt_data_end+0xff80ba6c>
  80c368:	003f7506 	br	80c140 <__alt_data_end+0xff80c140>
  80c36c:	040020b4 	movhi	r16,130
  80c370:	842e6104 	addi	r16,r16,-18044
  80c374:	003acc06 	br	80aea8 <__alt_data_end+0xff80aea8>
  80c378:	d9002c17 	ldw	r4,176(sp)
  80c37c:	d9801e04 	addi	r6,sp,120
  80c380:	b80b883a 	mov	r5,r23
  80c384:	08115200 	call	811520 <__sprint_r>
  80c388:	103a3b1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c38c:	dc402617 	ldw	r17,152(sp)
  80c390:	d8c02017 	ldw	r3,128(sp)
  80c394:	da000404 	addi	r8,sp,16
  80c398:	003f9c06 	br	80c20c <__alt_data_end+0xff80c20c>
  80c39c:	ac400043 	ldbu	r17,1(r21)
  80c3a0:	94800814 	ori	r18,r18,32
  80c3a4:	ad400044 	addi	r21,r21,1
  80c3a8:	8c403fcc 	andi	r17,r17,255
  80c3ac:	8c40201c 	xori	r17,r17,128
  80c3b0:	8c7fe004 	addi	r17,r17,-128
  80c3b4:	00398f06 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80c3b8:	d8c02d15 	stw	r3,180(sp)
  80c3bc:	0039883a 	mov	fp,zero
  80c3c0:	003e3506 	br	80bc98 <__alt_data_end+0xff80bc98>
  80c3c4:	d9002c17 	ldw	r4,176(sp)
  80c3c8:	d9801e04 	addi	r6,sp,120
  80c3cc:	b80b883a 	mov	r5,r23
  80c3d0:	08115200 	call	811520 <__sprint_r>
  80c3d4:	103a281e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c3d8:	d8c02017 	ldw	r3,128(sp)
  80c3dc:	da000404 	addi	r8,sp,16
  80c3e0:	003cd006 	br	80b724 <__alt_data_end+0xff80b724>
  80c3e4:	8009883a 	mov	r4,r16
  80c3e8:	da003d15 	stw	r8,244(sp)
  80c3ec:	080a7d80 	call	80a7d8 <strlen>
  80c3f0:	d8802e15 	stw	r2,184(sp)
  80c3f4:	da003d17 	ldw	r8,244(sp)
  80c3f8:	103c340e 	bge	r2,zero,80b4cc <__alt_data_end+0xff80b4cc>
  80c3fc:	0005883a 	mov	r2,zero
  80c400:	003c3206 	br	80b4cc <__alt_data_end+0xff80b4cc>
  80c404:	d9002c17 	ldw	r4,176(sp)
  80c408:	d9801e04 	addi	r6,sp,120
  80c40c:	b80b883a 	mov	r5,r23
  80c410:	08115200 	call	811520 <__sprint_r>
  80c414:	103a181e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c418:	d8c02017 	ldw	r3,128(sp)
  80c41c:	d8801f17 	ldw	r2,124(sp)
  80c420:	da000404 	addi	r8,sp,16
  80c424:	d9403317 	ldw	r5,204(sp)
  80c428:	10800044 	addi	r2,r2,1
  80c42c:	44000015 	stw	r16,0(r8)
  80c430:	28c7883a 	add	r3,r5,r3
  80c434:	003b7d06 	br	80b22c <__alt_data_end+0xff80b22c>
  80c438:	010020b4 	movhi	r4,130
  80c43c:	212e7584 	addi	r4,r4,-17962
  80c440:	d9003515 	stw	r4,212(sp)
  80c444:	003b1406 	br	80b098 <__alt_data_end+0xff80b098>
  80c448:	013fffc4 	movi	r4,-1
  80c44c:	003a3506 	br	80ad24 <__alt_data_end+0xff80ad24>
  80c450:	0023883a 	mov	r17,zero
  80c454:	003d9d06 	br	80bacc <__alt_data_end+0xff80bacc>
  80c458:	d9002c17 	ldw	r4,176(sp)
  80c45c:	d9801e04 	addi	r6,sp,120
  80c460:	b80b883a 	mov	r5,r23
  80c464:	08115200 	call	811520 <__sprint_r>
  80c468:	103a031e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c46c:	d8c02017 	ldw	r3,128(sp)
  80c470:	da000404 	addi	r8,sp,16
  80c474:	003d9406 	br	80bac8 <__alt_data_end+0xff80bac8>
  80c478:	010020b4 	movhi	r4,130
  80c47c:	212e7184 	addi	r4,r4,-17978
  80c480:	d9002b15 	stw	r4,172(sp)
  80c484:	d9002b17 	ldw	r4,172(sp)
  80c488:	1c47883a 	add	r3,r3,r17
  80c48c:	10800044 	addi	r2,r2,1
  80c490:	41000015 	stw	r4,0(r8)
  80c494:	44400115 	stw	r17,4(r8)
  80c498:	d8c02015 	stw	r3,128(sp)
  80c49c:	d8801f15 	stw	r2,124(sp)
  80c4a0:	010001c4 	movi	r4,7
  80c4a4:	20bfd716 	blt	r4,r2,80c404 <__alt_data_end+0xff80c404>
  80c4a8:	42000204 	addi	r8,r8,8
  80c4ac:	003fdd06 	br	80c424 <__alt_data_end+0xff80c424>
  80c4b0:	d9002c17 	ldw	r4,176(sp)
  80c4b4:	d9801e04 	addi	r6,sp,120
  80c4b8:	b80b883a 	mov	r5,r23
  80c4bc:	08115200 	call	811520 <__sprint_r>
  80c4c0:	1039ed1e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c4c4:	d8802617 	ldw	r2,152(sp)
  80c4c8:	d8c02017 	ldw	r3,128(sp)
  80c4cc:	da000404 	addi	r8,sp,16
  80c4d0:	003e1006 	br	80bd14 <__alt_data_end+0xff80bd14>
  80c4d4:	00800044 	movi	r2,1
  80c4d8:	10803fcc 	andi	r2,r2,255
  80c4dc:	00c00044 	movi	r3,1
  80c4e0:	10fa3526 	beq	r2,r3,80adb8 <__alt_data_end+0xff80adb8>
  80c4e4:	00c00084 	movi	r3,2
  80c4e8:	10fbcb26 	beq	r2,r3,80b418 <__alt_data_end+0xff80b418>
  80c4ec:	003a8f06 	br	80af2c <__alt_data_end+0xff80af2c>
  80c4f0:	010020b4 	movhi	r4,130
  80c4f4:	212e7584 	addi	r4,r4,-17962
  80c4f8:	d9003515 	stw	r4,212(sp)
  80c4fc:	003b7606 	br	80b2d8 <__alt_data_end+0xff80b2d8>
  80c500:	d8802917 	ldw	r2,164(sp)
  80c504:	00c00184 	movi	r3,6
  80c508:	1880012e 	bgeu	r3,r2,80c510 <___vfprintf_internal_r+0x1ca0>
  80c50c:	1805883a 	mov	r2,r3
  80c510:	d8802e15 	stw	r2,184(sp)
  80c514:	1000ef16 	blt	r2,zero,80c8d4 <___vfprintf_internal_r+0x2064>
  80c518:	040020b4 	movhi	r16,130
  80c51c:	d8802a15 	stw	r2,168(sp)
  80c520:	dcc02d15 	stw	r19,180(sp)
  80c524:	d8002915 	stw	zero,164(sp)
  80c528:	d8003215 	stw	zero,200(sp)
  80c52c:	842e6f04 	addi	r16,r16,-17988
  80c530:	0039883a 	mov	fp,zero
  80c534:	003aa206 	br	80afc0 <__alt_data_end+0xff80afc0>
  80c538:	0021883a 	mov	r16,zero
  80c53c:	003e0706 	br	80bd5c <__alt_data_end+0xff80bd5c>
  80c540:	d9002c17 	ldw	r4,176(sp)
  80c544:	d9801e04 	addi	r6,sp,120
  80c548:	b80b883a 	mov	r5,r23
  80c54c:	08115200 	call	811520 <__sprint_r>
  80c550:	1039c91e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c554:	d8802617 	ldw	r2,152(sp)
  80c558:	d9403317 	ldw	r5,204(sp)
  80c55c:	d8c02017 	ldw	r3,128(sp)
  80c560:	da000404 	addi	r8,sp,16
  80c564:	2885c83a 	sub	r2,r5,r2
  80c568:	003dfb06 	br	80bd58 <__alt_data_end+0xff80bd58>
  80c56c:	9080004c 	andi	r2,r18,1
  80c570:	103e8f1e 	bne	r2,zero,80bfb0 <__alt_data_end+0xff80bfb0>
  80c574:	d8802117 	ldw	r2,132(sp)
  80c578:	003e9e06 	br	80bff4 <__alt_data_end+0xff80bff4>
  80c57c:	1025883a 	mov	r18,r2
  80c580:	0039883a 	mov	fp,zero
  80c584:	00800084 	movi	r2,2
  80c588:	003fd306 	br	80c4d8 <__alt_data_end+0xff80c4d8>
  80c58c:	07000b44 	movi	fp,45
  80c590:	df002785 	stb	fp,158(sp)
  80c594:	003a4006 	br	80ae98 <__alt_data_end+0xff80ae98>
  80c598:	00c00b44 	movi	r3,45
  80c59c:	d8c02785 	stb	r3,158(sp)
  80c5a0:	d8802a15 	stw	r2,168(sp)
  80c5a4:	dc802b17 	ldw	r18,172(sp)
  80c5a8:	d8002915 	stw	zero,164(sp)
  80c5ac:	07000b44 	movi	fp,45
  80c5b0:	003a8006 	br	80afb4 <__alt_data_end+0xff80afb4>
  80c5b4:	040020b4 	movhi	r16,130
  80c5b8:	842e6404 	addi	r16,r16,-18032
  80c5bc:	003f4706 	br	80c2dc <__alt_data_end+0xff80c2dc>
  80c5c0:	d8c02d17 	ldw	r3,180(sp)
  80c5c4:	d9002f17 	ldw	r4,188(sp)
  80c5c8:	18800017 	ldw	r2,0(r3)
  80c5cc:	18c00104 	addi	r3,r3,4
  80c5d0:	d8c02d15 	stw	r3,180(sp)
  80c5d4:	11000015 	stw	r4,0(r2)
  80c5d8:	0038dd06 	br	80a950 <__alt_data_end+0xff80a950>
  80c5dc:	dd802617 	ldw	r22,152(sp)
  80c5e0:	00bfff44 	movi	r2,-3
  80c5e4:	b0801c16 	blt	r22,r2,80c658 <___vfprintf_internal_r+0x1de8>
  80c5e8:	d9402917 	ldw	r5,164(sp)
  80c5ec:	2d801a16 	blt	r5,r22,80c658 <___vfprintf_internal_r+0x1de8>
  80c5f0:	dd803215 	stw	r22,200(sp)
  80c5f4:	003e8906 	br	80c01c <__alt_data_end+0xff80c01c>
  80c5f8:	010020b4 	movhi	r4,130
  80c5fc:	212e7184 	addi	r4,r4,-17978
  80c600:	d9002b15 	stw	r4,172(sp)
  80c604:	003c9106 	br	80b84c <__alt_data_end+0xff80b84c>
  80c608:	e005883a 	mov	r2,fp
  80c60c:	003e7906 	br	80bff4 <__alt_data_end+0xff80bff4>
  80c610:	d9402917 	ldw	r5,164(sp)
  80c614:	df002783 	ldbu	fp,158(sp)
  80c618:	dcc02d15 	stw	r19,180(sp)
  80c61c:	d9402a15 	stw	r5,168(sp)
  80c620:	d9402e15 	stw	r5,184(sp)
  80c624:	d8002915 	stw	zero,164(sp)
  80c628:	d8003215 	stw	zero,200(sp)
  80c62c:	003a5d06 	br	80afa4 <__alt_data_end+0xff80afa4>
  80c630:	9080004c 	andi	r2,r18,1
  80c634:	0039883a 	mov	fp,zero
  80c638:	10000426 	beq	r2,zero,80c64c <___vfprintf_internal_r+0x1ddc>
  80c63c:	00800c04 	movi	r2,48
  80c640:	dc001dc4 	addi	r16,sp,119
  80c644:	d8801dc5 	stb	r2,119(sp)
  80c648:	003b8006 	br	80b44c <__alt_data_end+0xff80b44c>
  80c64c:	d8002e15 	stw	zero,184(sp)
  80c650:	dc001e04 	addi	r16,sp,120
  80c654:	003a4d06 	br	80af8c <__alt_data_end+0xff80af8c>
  80c658:	8c7fff84 	addi	r17,r17,-2
  80c65c:	b5bfffc4 	addi	r22,r22,-1
  80c660:	dd802615 	stw	r22,152(sp)
  80c664:	dc4022c5 	stb	r17,139(sp)
  80c668:	b000bf16 	blt	r22,zero,80c968 <___vfprintf_internal_r+0x20f8>
  80c66c:	00800ac4 	movi	r2,43
  80c670:	d8802305 	stb	r2,140(sp)
  80c674:	00800244 	movi	r2,9
  80c678:	15807016 	blt	r2,r22,80c83c <___vfprintf_internal_r+0x1fcc>
  80c67c:	00800c04 	movi	r2,48
  80c680:	b5800c04 	addi	r22,r22,48
  80c684:	d8802345 	stb	r2,141(sp)
  80c688:	dd802385 	stb	r22,142(sp)
  80c68c:	d88023c4 	addi	r2,sp,143
  80c690:	df0022c4 	addi	fp,sp,139
  80c694:	d8c03317 	ldw	r3,204(sp)
  80c698:	1739c83a 	sub	fp,r2,fp
  80c69c:	d9003317 	ldw	r4,204(sp)
  80c6a0:	e0c7883a 	add	r3,fp,r3
  80c6a4:	df003a15 	stw	fp,232(sp)
  80c6a8:	d8c02e15 	stw	r3,184(sp)
  80c6ac:	00800044 	movi	r2,1
  80c6b0:	1100b30e 	bge	r2,r4,80c980 <___vfprintf_internal_r+0x2110>
  80c6b4:	d8c02e17 	ldw	r3,184(sp)
  80c6b8:	18c00044 	addi	r3,r3,1
  80c6bc:	d8c02e15 	stw	r3,184(sp)
  80c6c0:	1805883a 	mov	r2,r3
  80c6c4:	1800ac16 	blt	r3,zero,80c978 <___vfprintf_internal_r+0x2108>
  80c6c8:	d8003215 	stw	zero,200(sp)
  80c6cc:	003e5d06 	br	80c044 <__alt_data_end+0xff80c044>
  80c6d0:	d9002c17 	ldw	r4,176(sp)
  80c6d4:	d9801e04 	addi	r6,sp,120
  80c6d8:	b80b883a 	mov	r5,r23
  80c6dc:	08115200 	call	811520 <__sprint_r>
  80c6e0:	1039651e 	bne	r2,zero,80ac78 <__alt_data_end+0xff80ac78>
  80c6e4:	dc402617 	ldw	r17,152(sp)
  80c6e8:	d8c02017 	ldw	r3,128(sp)
  80c6ec:	d8801f17 	ldw	r2,124(sp)
  80c6f0:	da000404 	addi	r8,sp,16
  80c6f4:	003ed606 	br	80c250 <__alt_data_end+0xff80c250>
  80c6f8:	582b883a 	mov	r21,r11
  80c6fc:	d8002915 	stw	zero,164(sp)
  80c700:	0038bd06 	br	80a9f8 <__alt_data_end+0xff80a9f8>
  80c704:	d8802917 	ldw	r2,164(sp)
  80c708:	103e071e 	bne	r2,zero,80bf28 <__alt_data_end+0xff80bf28>
  80c70c:	dc002915 	stw	r16,164(sp)
  80c710:	003e0506 	br	80bf28 <__alt_data_end+0xff80bf28>
  80c714:	d9002917 	ldw	r4,164(sp)
  80c718:	20c00044 	addi	r3,r4,1
  80c71c:	003e0f06 	br	80bf5c <__alt_data_end+0xff80bf5c>
  80c720:	01400184 	movi	r5,6
  80c724:	d9402915 	stw	r5,164(sp)
  80c728:	003dff06 	br	80bf28 <__alt_data_end+0xff80bf28>
  80c72c:	d8802104 	addi	r2,sp,132
  80c730:	d8800315 	stw	r2,12(sp)
  80c734:	d8802504 	addi	r2,sp,148
  80c738:	d8800215 	stw	r2,8(sp)
  80c73c:	d8802604 	addi	r2,sp,152
  80c740:	d8800115 	stw	r2,4(sp)
  80c744:	d8802917 	ldw	r2,164(sp)
  80c748:	d9403617 	ldw	r5,216(sp)
  80c74c:	d9002c17 	ldw	r4,176(sp)
  80c750:	d8800015 	stw	r2,0(sp)
  80c754:	01c000c4 	movi	r7,3
  80c758:	980d883a 	mov	r6,r19
  80c75c:	da003d15 	stw	r8,244(sp)
  80c760:	080ce940 	call	80ce94 <_dtoa_r>
  80c764:	d8c02917 	ldw	r3,164(sp)
  80c768:	da003d17 	ldw	r8,244(sp)
  80c76c:	1021883a 	mov	r16,r2
  80c770:	10f9883a 	add	fp,r2,r3
  80c774:	81000007 	ldb	r4,0(r16)
  80c778:	00800c04 	movi	r2,48
  80c77c:	20805e26 	beq	r4,r2,80c8f8 <___vfprintf_internal_r+0x2088>
  80c780:	d8c02617 	ldw	r3,152(sp)
  80c784:	e0f9883a 	add	fp,fp,r3
  80c788:	003e0a06 	br	80bfb4 <__alt_data_end+0xff80bfb4>
  80c78c:	00c00b44 	movi	r3,45
  80c790:	24e0003c 	xorhi	r19,r4,32768
  80c794:	d8c02a05 	stb	r3,168(sp)
  80c798:	003de906 	br	80bf40 <__alt_data_end+0xff80bf40>
  80c79c:	d8c03217 	ldw	r3,200(sp)
  80c7a0:	00c07a0e 	bge	zero,r3,80c98c <___vfprintf_internal_r+0x211c>
  80c7a4:	00800044 	movi	r2,1
  80c7a8:	d9003317 	ldw	r4,204(sp)
  80c7ac:	1105883a 	add	r2,r2,r4
  80c7b0:	d8802e15 	stw	r2,184(sp)
  80c7b4:	10004e16 	blt	r2,zero,80c8f0 <___vfprintf_internal_r+0x2080>
  80c7b8:	044019c4 	movi	r17,103
  80c7bc:	003e2106 	br	80c044 <__alt_data_end+0xff80c044>
  80c7c0:	d9002917 	ldw	r4,164(sp)
  80c7c4:	d8802104 	addi	r2,sp,132
  80c7c8:	d8800315 	stw	r2,12(sp)
  80c7cc:	d9000015 	stw	r4,0(sp)
  80c7d0:	d8802504 	addi	r2,sp,148
  80c7d4:	d9403617 	ldw	r5,216(sp)
  80c7d8:	d9002c17 	ldw	r4,176(sp)
  80c7dc:	d8800215 	stw	r2,8(sp)
  80c7e0:	d8802604 	addi	r2,sp,152
  80c7e4:	d8800115 	stw	r2,4(sp)
  80c7e8:	01c000c4 	movi	r7,3
  80c7ec:	980d883a 	mov	r6,r19
  80c7f0:	da003d15 	stw	r8,244(sp)
  80c7f4:	080ce940 	call	80ce94 <_dtoa_r>
  80c7f8:	d8c02917 	ldw	r3,164(sp)
  80c7fc:	da003d17 	ldw	r8,244(sp)
  80c800:	1021883a 	mov	r16,r2
  80c804:	00801184 	movi	r2,70
  80c808:	80f9883a 	add	fp,r16,r3
  80c80c:	88bfd926 	beq	r17,r2,80c774 <__alt_data_end+0xff80c774>
  80c810:	003de806 	br	80bfb4 <__alt_data_end+0xff80bfb4>
  80c814:	d9002917 	ldw	r4,164(sp)
  80c818:	00c04d0e 	bge	zero,r3,80c950 <___vfprintf_internal_r+0x20e0>
  80c81c:	2000441e 	bne	r4,zero,80c930 <___vfprintf_internal_r+0x20c0>
  80c820:	9480004c 	andi	r18,r18,1
  80c824:	9000421e 	bne	r18,zero,80c930 <___vfprintf_internal_r+0x20c0>
  80c828:	1805883a 	mov	r2,r3
  80c82c:	18007016 	blt	r3,zero,80c9f0 <___vfprintf_internal_r+0x2180>
  80c830:	d8c03217 	ldw	r3,200(sp)
  80c834:	d8c02e15 	stw	r3,184(sp)
  80c838:	003e0206 	br	80c044 <__alt_data_end+0xff80c044>
  80c83c:	df0022c4 	addi	fp,sp,139
  80c840:	dc002915 	stw	r16,164(sp)
  80c844:	4027883a 	mov	r19,r8
  80c848:	e021883a 	mov	r16,fp
  80c84c:	b009883a 	mov	r4,r22
  80c850:	01400284 	movi	r5,10
  80c854:	080a2e40 	call	80a2e4 <__modsi3>
  80c858:	10800c04 	addi	r2,r2,48
  80c85c:	843fffc4 	addi	r16,r16,-1
  80c860:	b009883a 	mov	r4,r22
  80c864:	01400284 	movi	r5,10
  80c868:	80800005 	stb	r2,0(r16)
  80c86c:	080a2600 	call	80a260 <__divsi3>
  80c870:	102d883a 	mov	r22,r2
  80c874:	00800244 	movi	r2,9
  80c878:	15bff416 	blt	r2,r22,80c84c <__alt_data_end+0xff80c84c>
  80c87c:	9811883a 	mov	r8,r19
  80c880:	b0800c04 	addi	r2,r22,48
  80c884:	8027883a 	mov	r19,r16
  80c888:	997fffc4 	addi	r5,r19,-1
  80c88c:	98bfffc5 	stb	r2,-1(r19)
  80c890:	dc002917 	ldw	r16,164(sp)
  80c894:	2f006a2e 	bgeu	r5,fp,80ca40 <___vfprintf_internal_r+0x21d0>
  80c898:	d9c02384 	addi	r7,sp,142
  80c89c:	3ccfc83a 	sub	r7,r7,r19
  80c8a0:	d9002344 	addi	r4,sp,141
  80c8a4:	e1cf883a 	add	r7,fp,r7
  80c8a8:	00000106 	br	80c8b0 <___vfprintf_internal_r+0x2040>
  80c8ac:	28800003 	ldbu	r2,0(r5)
  80c8b0:	20800005 	stb	r2,0(r4)
  80c8b4:	21000044 	addi	r4,r4,1
  80c8b8:	29400044 	addi	r5,r5,1
  80c8bc:	393ffb1e 	bne	r7,r4,80c8ac <__alt_data_end+0xff80c8ac>
  80c8c0:	d8802304 	addi	r2,sp,140
  80c8c4:	14c5c83a 	sub	r2,r2,r19
  80c8c8:	d8c02344 	addi	r3,sp,141
  80c8cc:	1885883a 	add	r2,r3,r2
  80c8d0:	003f7006 	br	80c694 <__alt_data_end+0xff80c694>
  80c8d4:	0005883a 	mov	r2,zero
  80c8d8:	003f0f06 	br	80c518 <__alt_data_end+0xff80c518>
  80c8dc:	d8c03217 	ldw	r3,200(sp)
  80c8e0:	18c00044 	addi	r3,r3,1
  80c8e4:	d8c02e15 	stw	r3,184(sp)
  80c8e8:	1805883a 	mov	r2,r3
  80c8ec:	183fb20e 	bge	r3,zero,80c7b8 <__alt_data_end+0xff80c7b8>
  80c8f0:	0005883a 	mov	r2,zero
  80c8f4:	003fb006 	br	80c7b8 <__alt_data_end+0xff80c7b8>
  80c8f8:	d9003617 	ldw	r4,216(sp)
  80c8fc:	000d883a 	mov	r6,zero
  80c900:	000f883a 	mov	r7,zero
  80c904:	980b883a 	mov	r5,r19
  80c908:	d8c03c15 	stw	r3,240(sp)
  80c90c:	da003d15 	stw	r8,244(sp)
  80c910:	0815b600 	call	815b60 <__eqdf2>
  80c914:	d8c03c17 	ldw	r3,240(sp)
  80c918:	da003d17 	ldw	r8,244(sp)
  80c91c:	103f9826 	beq	r2,zero,80c780 <__alt_data_end+0xff80c780>
  80c920:	00800044 	movi	r2,1
  80c924:	10c7c83a 	sub	r3,r2,r3
  80c928:	d8c02615 	stw	r3,152(sp)
  80c92c:	003f9506 	br	80c784 <__alt_data_end+0xff80c784>
  80c930:	d9002917 	ldw	r4,164(sp)
  80c934:	d8c03217 	ldw	r3,200(sp)
  80c938:	20800044 	addi	r2,r4,1
  80c93c:	1885883a 	add	r2,r3,r2
  80c940:	d8802e15 	stw	r2,184(sp)
  80c944:	103dbf0e 	bge	r2,zero,80c044 <__alt_data_end+0xff80c044>
  80c948:	0005883a 	mov	r2,zero
  80c94c:	003dbd06 	br	80c044 <__alt_data_end+0xff80c044>
  80c950:	2000211e 	bne	r4,zero,80c9d8 <___vfprintf_internal_r+0x2168>
  80c954:	9480004c 	andi	r18,r18,1
  80c958:	90001f1e 	bne	r18,zero,80c9d8 <___vfprintf_internal_r+0x2168>
  80c95c:	00800044 	movi	r2,1
  80c960:	d8802e15 	stw	r2,184(sp)
  80c964:	003db706 	br	80c044 <__alt_data_end+0xff80c044>
  80c968:	00800b44 	movi	r2,45
  80c96c:	05adc83a 	sub	r22,zero,r22
  80c970:	d8802305 	stb	r2,140(sp)
  80c974:	003f3f06 	br	80c674 <__alt_data_end+0xff80c674>
  80c978:	0005883a 	mov	r2,zero
  80c97c:	003f5206 	br	80c6c8 <__alt_data_end+0xff80c6c8>
  80c980:	90a4703a 	and	r18,r18,r2
  80c984:	903f4e26 	beq	r18,zero,80c6c0 <__alt_data_end+0xff80c6c0>
  80c988:	003f4a06 	br	80c6b4 <__alt_data_end+0xff80c6b4>
  80c98c:	00800084 	movi	r2,2
  80c990:	10c5c83a 	sub	r2,r2,r3
  80c994:	003f8406 	br	80c7a8 <__alt_data_end+0xff80c7a8>
  80c998:	d8802d17 	ldw	r2,180(sp)
  80c99c:	d9002d17 	ldw	r4,180(sp)
  80c9a0:	ac400043 	ldbu	r17,1(r21)
  80c9a4:	10800017 	ldw	r2,0(r2)
  80c9a8:	582b883a 	mov	r21,r11
  80c9ac:	d8802915 	stw	r2,164(sp)
  80c9b0:	20800104 	addi	r2,r4,4
  80c9b4:	d9002917 	ldw	r4,164(sp)
  80c9b8:	d8802d15 	stw	r2,180(sp)
  80c9bc:	203e7a0e 	bge	r4,zero,80c3a8 <__alt_data_end+0xff80c3a8>
  80c9c0:	8c403fcc 	andi	r17,r17,255
  80c9c4:	00bfffc4 	movi	r2,-1
  80c9c8:	8c40201c 	xori	r17,r17,128
  80c9cc:	d8802915 	stw	r2,164(sp)
  80c9d0:	8c7fe004 	addi	r17,r17,-128
  80c9d4:	00380706 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80c9d8:	d8c02917 	ldw	r3,164(sp)
  80c9dc:	18c00084 	addi	r3,r3,2
  80c9e0:	d8c02e15 	stw	r3,184(sp)
  80c9e4:	1805883a 	mov	r2,r3
  80c9e8:	183d960e 	bge	r3,zero,80c044 <__alt_data_end+0xff80c044>
  80c9ec:	003fd606 	br	80c948 <__alt_data_end+0xff80c948>
  80c9f0:	0005883a 	mov	r2,zero
  80c9f4:	003f8e06 	br	80c830 <__alt_data_end+0xff80c830>
  80c9f8:	9080004c 	andi	r2,r18,1
  80c9fc:	103f811e 	bne	r2,zero,80c804 <__alt_data_end+0xff80c804>
  80ca00:	d8802117 	ldw	r2,132(sp)
  80ca04:	1405c83a 	sub	r2,r2,r16
  80ca08:	d8803315 	stw	r2,204(sp)
  80ca0c:	b47ef326 	beq	r22,r17,80c5dc <__alt_data_end+0xff80c5dc>
  80ca10:	dd802617 	ldw	r22,152(sp)
  80ca14:	003f1106 	br	80c65c <__alt_data_end+0xff80c65c>
  80ca18:	d9c02785 	stb	r7,158(sp)
  80ca1c:	00390406 	br	80ae30 <__alt_data_end+0xff80ae30>
  80ca20:	d9c02785 	stb	r7,158(sp)
  80ca24:	0038d306 	br	80ad74 <__alt_data_end+0xff80ad74>
  80ca28:	d9c02785 	stb	r7,158(sp)
  80ca2c:	003a6106 	br	80b3b4 <__alt_data_end+0xff80b3b4>
  80ca30:	d9c02785 	stb	r7,158(sp)
  80ca34:	003af806 	br	80b618 <__alt_data_end+0xff80b618>
  80ca38:	0005883a 	mov	r2,zero
  80ca3c:	003d7e06 	br	80c038 <__alt_data_end+0xff80c038>
  80ca40:	d8802344 	addi	r2,sp,141
  80ca44:	003f1306 	br	80c694 <__alt_data_end+0xff80c694>
  80ca48:	d9c02785 	stb	r7,158(sp)
  80ca4c:	00392306 	br	80aedc <__alt_data_end+0xff80aedc>
  80ca50:	d9c02785 	stb	r7,158(sp)
  80ca54:	003aa906 	br	80b4fc <__alt_data_end+0xff80b4fc>
  80ca58:	d9c02785 	stb	r7,158(sp)
  80ca5c:	003a3d06 	br	80b354 <__alt_data_end+0xff80b354>
  80ca60:	d9c02785 	stb	r7,158(sp)
  80ca64:	003aca06 	br	80b590 <__alt_data_end+0xff80b590>

0080ca68 <__vfprintf_internal>:
  80ca68:	008020b4 	movhi	r2,130
  80ca6c:	10b30204 	addi	r2,r2,-13304
  80ca70:	300f883a 	mov	r7,r6
  80ca74:	280d883a 	mov	r6,r5
  80ca78:	200b883a 	mov	r5,r4
  80ca7c:	11000017 	ldw	r4,0(r2)
  80ca80:	080a8701 	jmpi	80a870 <___vfprintf_internal_r>

0080ca84 <__sbprintf>:
  80ca84:	2880030b 	ldhu	r2,12(r5)
  80ca88:	2ac01917 	ldw	r11,100(r5)
  80ca8c:	2a80038b 	ldhu	r10,14(r5)
  80ca90:	2a400717 	ldw	r9,28(r5)
  80ca94:	2a000917 	ldw	r8,36(r5)
  80ca98:	defee204 	addi	sp,sp,-1144
  80ca9c:	00c10004 	movi	r3,1024
  80caa0:	dc011a15 	stw	r16,1128(sp)
  80caa4:	10bfff4c 	andi	r2,r2,65533
  80caa8:	2821883a 	mov	r16,r5
  80caac:	d8cb883a 	add	r5,sp,r3
  80cab0:	dc811c15 	stw	r18,1136(sp)
  80cab4:	dc411b15 	stw	r17,1132(sp)
  80cab8:	dfc11d15 	stw	ra,1140(sp)
  80cabc:	2025883a 	mov	r18,r4
  80cac0:	d881030d 	sth	r2,1036(sp)
  80cac4:	dac11915 	stw	r11,1124(sp)
  80cac8:	da81038d 	sth	r10,1038(sp)
  80cacc:	da410715 	stw	r9,1052(sp)
  80cad0:	da010915 	stw	r8,1060(sp)
  80cad4:	dec10015 	stw	sp,1024(sp)
  80cad8:	dec10415 	stw	sp,1040(sp)
  80cadc:	d8c10215 	stw	r3,1032(sp)
  80cae0:	d8c10515 	stw	r3,1044(sp)
  80cae4:	d8010615 	stw	zero,1048(sp)
  80cae8:	080a8700 	call	80a870 <___vfprintf_internal_r>
  80caec:	1023883a 	mov	r17,r2
  80caf0:	10000416 	blt	r2,zero,80cb04 <__sbprintf+0x80>
  80caf4:	d9410004 	addi	r5,sp,1024
  80caf8:	9009883a 	mov	r4,r18
  80cafc:	080e7380 	call	80e738 <_fflush_r>
  80cb00:	10000d1e 	bne	r2,zero,80cb38 <__sbprintf+0xb4>
  80cb04:	d881030b 	ldhu	r2,1036(sp)
  80cb08:	1080100c 	andi	r2,r2,64
  80cb0c:	10000326 	beq	r2,zero,80cb1c <__sbprintf+0x98>
  80cb10:	8080030b 	ldhu	r2,12(r16)
  80cb14:	10801014 	ori	r2,r2,64
  80cb18:	8080030d 	sth	r2,12(r16)
  80cb1c:	8805883a 	mov	r2,r17
  80cb20:	dfc11d17 	ldw	ra,1140(sp)
  80cb24:	dc811c17 	ldw	r18,1136(sp)
  80cb28:	dc411b17 	ldw	r17,1132(sp)
  80cb2c:	dc011a17 	ldw	r16,1128(sp)
  80cb30:	dec11e04 	addi	sp,sp,1144
  80cb34:	f800283a 	ret
  80cb38:	047fffc4 	movi	r17,-1
  80cb3c:	003ff106 	br	80cb04 <__alt_data_end+0xff80cb04>

0080cb40 <__swsetup_r>:
  80cb40:	008020b4 	movhi	r2,130
  80cb44:	defffd04 	addi	sp,sp,-12
  80cb48:	10b30204 	addi	r2,r2,-13304
  80cb4c:	dc400115 	stw	r17,4(sp)
  80cb50:	2023883a 	mov	r17,r4
  80cb54:	11000017 	ldw	r4,0(r2)
  80cb58:	dc000015 	stw	r16,0(sp)
  80cb5c:	dfc00215 	stw	ra,8(sp)
  80cb60:	2821883a 	mov	r16,r5
  80cb64:	20000226 	beq	r4,zero,80cb70 <__swsetup_r+0x30>
  80cb68:	20800e17 	ldw	r2,56(r4)
  80cb6c:	10003126 	beq	r2,zero,80cc34 <__swsetup_r+0xf4>
  80cb70:	8080030b 	ldhu	r2,12(r16)
  80cb74:	10c0020c 	andi	r3,r2,8
  80cb78:	1009883a 	mov	r4,r2
  80cb7c:	18000f26 	beq	r3,zero,80cbbc <__swsetup_r+0x7c>
  80cb80:	80c00417 	ldw	r3,16(r16)
  80cb84:	18001526 	beq	r3,zero,80cbdc <__swsetup_r+0x9c>
  80cb88:	1100004c 	andi	r4,r2,1
  80cb8c:	20001c1e 	bne	r4,zero,80cc00 <__swsetup_r+0xc0>
  80cb90:	1080008c 	andi	r2,r2,2
  80cb94:	1000291e 	bne	r2,zero,80cc3c <__swsetup_r+0xfc>
  80cb98:	80800517 	ldw	r2,20(r16)
  80cb9c:	80800215 	stw	r2,8(r16)
  80cba0:	18001c26 	beq	r3,zero,80cc14 <__swsetup_r+0xd4>
  80cba4:	0005883a 	mov	r2,zero
  80cba8:	dfc00217 	ldw	ra,8(sp)
  80cbac:	dc400117 	ldw	r17,4(sp)
  80cbb0:	dc000017 	ldw	r16,0(sp)
  80cbb4:	dec00304 	addi	sp,sp,12
  80cbb8:	f800283a 	ret
  80cbbc:	2080040c 	andi	r2,r4,16
  80cbc0:	10002e26 	beq	r2,zero,80cc7c <__swsetup_r+0x13c>
  80cbc4:	2080010c 	andi	r2,r4,4
  80cbc8:	10001e1e 	bne	r2,zero,80cc44 <__swsetup_r+0x104>
  80cbcc:	80c00417 	ldw	r3,16(r16)
  80cbd0:	20800214 	ori	r2,r4,8
  80cbd4:	8080030d 	sth	r2,12(r16)
  80cbd8:	183feb1e 	bne	r3,zero,80cb88 <__alt_data_end+0xff80cb88>
  80cbdc:	1100a00c 	andi	r4,r2,640
  80cbe0:	01408004 	movi	r5,512
  80cbe4:	217fe826 	beq	r4,r5,80cb88 <__alt_data_end+0xff80cb88>
  80cbe8:	800b883a 	mov	r5,r16
  80cbec:	8809883a 	mov	r4,r17
  80cbf0:	080f1fc0 	call	80f1fc <__smakebuf_r>
  80cbf4:	8080030b 	ldhu	r2,12(r16)
  80cbf8:	80c00417 	ldw	r3,16(r16)
  80cbfc:	003fe206 	br	80cb88 <__alt_data_end+0xff80cb88>
  80cc00:	80800517 	ldw	r2,20(r16)
  80cc04:	80000215 	stw	zero,8(r16)
  80cc08:	0085c83a 	sub	r2,zero,r2
  80cc0c:	80800615 	stw	r2,24(r16)
  80cc10:	183fe41e 	bne	r3,zero,80cba4 <__alt_data_end+0xff80cba4>
  80cc14:	80c0030b 	ldhu	r3,12(r16)
  80cc18:	0005883a 	mov	r2,zero
  80cc1c:	1900200c 	andi	r4,r3,128
  80cc20:	203fe126 	beq	r4,zero,80cba8 <__alt_data_end+0xff80cba8>
  80cc24:	18c01014 	ori	r3,r3,64
  80cc28:	80c0030d 	sth	r3,12(r16)
  80cc2c:	00bfffc4 	movi	r2,-1
  80cc30:	003fdd06 	br	80cba8 <__alt_data_end+0xff80cba8>
  80cc34:	080eb140 	call	80eb14 <__sinit>
  80cc38:	003fcd06 	br	80cb70 <__alt_data_end+0xff80cb70>
  80cc3c:	0005883a 	mov	r2,zero
  80cc40:	003fd606 	br	80cb9c <__alt_data_end+0xff80cb9c>
  80cc44:	81400c17 	ldw	r5,48(r16)
  80cc48:	28000626 	beq	r5,zero,80cc64 <__swsetup_r+0x124>
  80cc4c:	80801004 	addi	r2,r16,64
  80cc50:	28800326 	beq	r5,r2,80cc60 <__swsetup_r+0x120>
  80cc54:	8809883a 	mov	r4,r17
  80cc58:	080ec880 	call	80ec88 <_free_r>
  80cc5c:	8100030b 	ldhu	r4,12(r16)
  80cc60:	80000c15 	stw	zero,48(r16)
  80cc64:	80c00417 	ldw	r3,16(r16)
  80cc68:	00bff6c4 	movi	r2,-37
  80cc6c:	1108703a 	and	r4,r2,r4
  80cc70:	80000115 	stw	zero,4(r16)
  80cc74:	80c00015 	stw	r3,0(r16)
  80cc78:	003fd506 	br	80cbd0 <__alt_data_end+0xff80cbd0>
  80cc7c:	00800244 	movi	r2,9
  80cc80:	88800015 	stw	r2,0(r17)
  80cc84:	20801014 	ori	r2,r4,64
  80cc88:	8080030d 	sth	r2,12(r16)
  80cc8c:	00bfffc4 	movi	r2,-1
  80cc90:	003fc506 	br	80cba8 <__alt_data_end+0xff80cba8>

0080cc94 <quorem>:
  80cc94:	defff704 	addi	sp,sp,-36
  80cc98:	dc800215 	stw	r18,8(sp)
  80cc9c:	20800417 	ldw	r2,16(r4)
  80cca0:	2c800417 	ldw	r18,16(r5)
  80cca4:	dfc00815 	stw	ra,32(sp)
  80cca8:	ddc00715 	stw	r23,28(sp)
  80ccac:	dd800615 	stw	r22,24(sp)
  80ccb0:	dd400515 	stw	r21,20(sp)
  80ccb4:	dd000415 	stw	r20,16(sp)
  80ccb8:	dcc00315 	stw	r19,12(sp)
  80ccbc:	dc400115 	stw	r17,4(sp)
  80ccc0:	dc000015 	stw	r16,0(sp)
  80ccc4:	14807116 	blt	r2,r18,80ce8c <quorem+0x1f8>
  80ccc8:	94bfffc4 	addi	r18,r18,-1
  80cccc:	94ad883a 	add	r22,r18,r18
  80ccd0:	b5ad883a 	add	r22,r22,r22
  80ccd4:	2c400504 	addi	r17,r5,20
  80ccd8:	8da9883a 	add	r20,r17,r22
  80ccdc:	25400504 	addi	r21,r4,20
  80cce0:	282f883a 	mov	r23,r5
  80cce4:	adad883a 	add	r22,r21,r22
  80cce8:	a1400017 	ldw	r5,0(r20)
  80ccec:	2021883a 	mov	r16,r4
  80ccf0:	b1000017 	ldw	r4,0(r22)
  80ccf4:	29400044 	addi	r5,r5,1
  80ccf8:	080a3580 	call	80a358 <__udivsi3>
  80ccfc:	1027883a 	mov	r19,r2
  80cd00:	10002c26 	beq	r2,zero,80cdb4 <quorem+0x120>
  80cd04:	a813883a 	mov	r9,r21
  80cd08:	880b883a 	mov	r5,r17
  80cd0c:	0009883a 	mov	r4,zero
  80cd10:	000d883a 	mov	r6,zero
  80cd14:	2a000017 	ldw	r8,0(r5)
  80cd18:	49c00017 	ldw	r7,0(r9)
  80cd1c:	29400104 	addi	r5,r5,4
  80cd20:	40bfffcc 	andi	r2,r8,65535
  80cd24:	14c5383a 	mul	r2,r2,r19
  80cd28:	4010d43a 	srli	r8,r8,16
  80cd2c:	38ffffcc 	andi	r3,r7,65535
  80cd30:	1105883a 	add	r2,r2,r4
  80cd34:	1008d43a 	srli	r4,r2,16
  80cd38:	44d1383a 	mul	r8,r8,r19
  80cd3c:	198d883a 	add	r6,r3,r6
  80cd40:	10ffffcc 	andi	r3,r2,65535
  80cd44:	30c7c83a 	sub	r3,r6,r3
  80cd48:	380ed43a 	srli	r7,r7,16
  80cd4c:	4105883a 	add	r2,r8,r4
  80cd50:	180dd43a 	srai	r6,r3,16
  80cd54:	113fffcc 	andi	r4,r2,65535
  80cd58:	390fc83a 	sub	r7,r7,r4
  80cd5c:	398d883a 	add	r6,r7,r6
  80cd60:	300e943a 	slli	r7,r6,16
  80cd64:	18ffffcc 	andi	r3,r3,65535
  80cd68:	1008d43a 	srli	r4,r2,16
  80cd6c:	38ceb03a 	or	r7,r7,r3
  80cd70:	49c00015 	stw	r7,0(r9)
  80cd74:	300dd43a 	srai	r6,r6,16
  80cd78:	4a400104 	addi	r9,r9,4
  80cd7c:	a17fe52e 	bgeu	r20,r5,80cd14 <__alt_data_end+0xff80cd14>
  80cd80:	b0800017 	ldw	r2,0(r22)
  80cd84:	10000b1e 	bne	r2,zero,80cdb4 <quorem+0x120>
  80cd88:	b0bfff04 	addi	r2,r22,-4
  80cd8c:	a880082e 	bgeu	r21,r2,80cdb0 <quorem+0x11c>
  80cd90:	b0ffff17 	ldw	r3,-4(r22)
  80cd94:	18000326 	beq	r3,zero,80cda4 <quorem+0x110>
  80cd98:	00000506 	br	80cdb0 <quorem+0x11c>
  80cd9c:	10c00017 	ldw	r3,0(r2)
  80cda0:	1800031e 	bne	r3,zero,80cdb0 <quorem+0x11c>
  80cda4:	10bfff04 	addi	r2,r2,-4
  80cda8:	94bfffc4 	addi	r18,r18,-1
  80cdac:	a8bffb36 	bltu	r21,r2,80cd9c <__alt_data_end+0xff80cd9c>
  80cdb0:	84800415 	stw	r18,16(r16)
  80cdb4:	b80b883a 	mov	r5,r23
  80cdb8:	8009883a 	mov	r4,r16
  80cdbc:	08106b80 	call	8106b8 <__mcmp>
  80cdc0:	10002616 	blt	r2,zero,80ce5c <quorem+0x1c8>
  80cdc4:	9cc00044 	addi	r19,r19,1
  80cdc8:	a805883a 	mov	r2,r21
  80cdcc:	000b883a 	mov	r5,zero
  80cdd0:	11000017 	ldw	r4,0(r2)
  80cdd4:	89800017 	ldw	r6,0(r17)
  80cdd8:	10800104 	addi	r2,r2,4
  80cddc:	20ffffcc 	andi	r3,r4,65535
  80cde0:	194b883a 	add	r5,r3,r5
  80cde4:	30ffffcc 	andi	r3,r6,65535
  80cde8:	28c7c83a 	sub	r3,r5,r3
  80cdec:	300cd43a 	srli	r6,r6,16
  80cdf0:	2008d43a 	srli	r4,r4,16
  80cdf4:	180bd43a 	srai	r5,r3,16
  80cdf8:	18ffffcc 	andi	r3,r3,65535
  80cdfc:	2189c83a 	sub	r4,r4,r6
  80ce00:	2149883a 	add	r4,r4,r5
  80ce04:	200c943a 	slli	r6,r4,16
  80ce08:	8c400104 	addi	r17,r17,4
  80ce0c:	200bd43a 	srai	r5,r4,16
  80ce10:	30c6b03a 	or	r3,r6,r3
  80ce14:	10ffff15 	stw	r3,-4(r2)
  80ce18:	a47fed2e 	bgeu	r20,r17,80cdd0 <__alt_data_end+0xff80cdd0>
  80ce1c:	9485883a 	add	r2,r18,r18
  80ce20:	1085883a 	add	r2,r2,r2
  80ce24:	a887883a 	add	r3,r21,r2
  80ce28:	18800017 	ldw	r2,0(r3)
  80ce2c:	10000b1e 	bne	r2,zero,80ce5c <quorem+0x1c8>
  80ce30:	18bfff04 	addi	r2,r3,-4
  80ce34:	a880082e 	bgeu	r21,r2,80ce58 <quorem+0x1c4>
  80ce38:	18ffff17 	ldw	r3,-4(r3)
  80ce3c:	18000326 	beq	r3,zero,80ce4c <quorem+0x1b8>
  80ce40:	00000506 	br	80ce58 <quorem+0x1c4>
  80ce44:	10c00017 	ldw	r3,0(r2)
  80ce48:	1800031e 	bne	r3,zero,80ce58 <quorem+0x1c4>
  80ce4c:	10bfff04 	addi	r2,r2,-4
  80ce50:	94bfffc4 	addi	r18,r18,-1
  80ce54:	a8bffb36 	bltu	r21,r2,80ce44 <__alt_data_end+0xff80ce44>
  80ce58:	84800415 	stw	r18,16(r16)
  80ce5c:	9805883a 	mov	r2,r19
  80ce60:	dfc00817 	ldw	ra,32(sp)
  80ce64:	ddc00717 	ldw	r23,28(sp)
  80ce68:	dd800617 	ldw	r22,24(sp)
  80ce6c:	dd400517 	ldw	r21,20(sp)
  80ce70:	dd000417 	ldw	r20,16(sp)
  80ce74:	dcc00317 	ldw	r19,12(sp)
  80ce78:	dc800217 	ldw	r18,8(sp)
  80ce7c:	dc400117 	ldw	r17,4(sp)
  80ce80:	dc000017 	ldw	r16,0(sp)
  80ce84:	dec00904 	addi	sp,sp,36
  80ce88:	f800283a 	ret
  80ce8c:	0005883a 	mov	r2,zero
  80ce90:	003ff306 	br	80ce60 <__alt_data_end+0xff80ce60>

0080ce94 <_dtoa_r>:
  80ce94:	20801017 	ldw	r2,64(r4)
  80ce98:	deffde04 	addi	sp,sp,-136
  80ce9c:	df002015 	stw	fp,128(sp)
  80cea0:	dcc01b15 	stw	r19,108(sp)
  80cea4:	dc801a15 	stw	r18,104(sp)
  80cea8:	dc401915 	stw	r17,100(sp)
  80ceac:	dc001815 	stw	r16,96(sp)
  80ceb0:	dfc02115 	stw	ra,132(sp)
  80ceb4:	ddc01f15 	stw	r23,124(sp)
  80ceb8:	dd801e15 	stw	r22,120(sp)
  80cebc:	dd401d15 	stw	r21,116(sp)
  80cec0:	dd001c15 	stw	r20,112(sp)
  80cec4:	d9c00315 	stw	r7,12(sp)
  80cec8:	2039883a 	mov	fp,r4
  80cecc:	3023883a 	mov	r17,r6
  80ced0:	2825883a 	mov	r18,r5
  80ced4:	dc002417 	ldw	r16,144(sp)
  80ced8:	3027883a 	mov	r19,r6
  80cedc:	10000826 	beq	r2,zero,80cf00 <_dtoa_r+0x6c>
  80cee0:	21801117 	ldw	r6,68(r4)
  80cee4:	00c00044 	movi	r3,1
  80cee8:	100b883a 	mov	r5,r2
  80ceec:	1986983a 	sll	r3,r3,r6
  80cef0:	11800115 	stw	r6,4(r2)
  80cef4:	10c00215 	stw	r3,8(r2)
  80cef8:	080fe980 	call	80fe98 <_Bfree>
  80cefc:	e0001015 	stw	zero,64(fp)
  80cf00:	88002e16 	blt	r17,zero,80cfbc <_dtoa_r+0x128>
  80cf04:	80000015 	stw	zero,0(r16)
  80cf08:	889ffc2c 	andhi	r2,r17,32752
  80cf0c:	00dffc34 	movhi	r3,32752
  80cf10:	10c01c26 	beq	r2,r3,80cf84 <_dtoa_r+0xf0>
  80cf14:	000d883a 	mov	r6,zero
  80cf18:	000f883a 	mov	r7,zero
  80cf1c:	9009883a 	mov	r4,r18
  80cf20:	980b883a 	mov	r5,r19
  80cf24:	0815b600 	call	815b60 <__eqdf2>
  80cf28:	10002b1e 	bne	r2,zero,80cfd8 <_dtoa_r+0x144>
  80cf2c:	d9c02317 	ldw	r7,140(sp)
  80cf30:	00800044 	movi	r2,1
  80cf34:	38800015 	stw	r2,0(r7)
  80cf38:	d8802517 	ldw	r2,148(sp)
  80cf3c:	10019e26 	beq	r2,zero,80d5b8 <_dtoa_r+0x724>
  80cf40:	d8c02517 	ldw	r3,148(sp)
  80cf44:	008020b4 	movhi	r2,130
  80cf48:	10ae7144 	addi	r2,r2,-17979
  80cf4c:	18800015 	stw	r2,0(r3)
  80cf50:	10bfffc4 	addi	r2,r2,-1
  80cf54:	dfc02117 	ldw	ra,132(sp)
  80cf58:	df002017 	ldw	fp,128(sp)
  80cf5c:	ddc01f17 	ldw	r23,124(sp)
  80cf60:	dd801e17 	ldw	r22,120(sp)
  80cf64:	dd401d17 	ldw	r21,116(sp)
  80cf68:	dd001c17 	ldw	r20,112(sp)
  80cf6c:	dcc01b17 	ldw	r19,108(sp)
  80cf70:	dc801a17 	ldw	r18,104(sp)
  80cf74:	dc401917 	ldw	r17,100(sp)
  80cf78:	dc001817 	ldw	r16,96(sp)
  80cf7c:	dec02204 	addi	sp,sp,136
  80cf80:	f800283a 	ret
  80cf84:	d8c02317 	ldw	r3,140(sp)
  80cf88:	0089c3c4 	movi	r2,9999
  80cf8c:	18800015 	stw	r2,0(r3)
  80cf90:	90017726 	beq	r18,zero,80d570 <_dtoa_r+0x6dc>
  80cf94:	008020b4 	movhi	r2,130
  80cf98:	10ae7d04 	addi	r2,r2,-17932
  80cf9c:	d9002517 	ldw	r4,148(sp)
  80cfa0:	203fec26 	beq	r4,zero,80cf54 <__alt_data_end+0xff80cf54>
  80cfa4:	10c000c7 	ldb	r3,3(r2)
  80cfa8:	1801781e 	bne	r3,zero,80d58c <_dtoa_r+0x6f8>
  80cfac:	10c000c4 	addi	r3,r2,3
  80cfb0:	d9802517 	ldw	r6,148(sp)
  80cfb4:	30c00015 	stw	r3,0(r6)
  80cfb8:	003fe606 	br	80cf54 <__alt_data_end+0xff80cf54>
  80cfbc:	04e00034 	movhi	r19,32768
  80cfc0:	9cffffc4 	addi	r19,r19,-1
  80cfc4:	00800044 	movi	r2,1
  80cfc8:	8ce6703a 	and	r19,r17,r19
  80cfcc:	80800015 	stw	r2,0(r16)
  80cfd0:	9823883a 	mov	r17,r19
  80cfd4:	003fcc06 	br	80cf08 <__alt_data_end+0xff80cf08>
  80cfd8:	d8800204 	addi	r2,sp,8
  80cfdc:	d8800015 	stw	r2,0(sp)
  80cfe0:	d9c00104 	addi	r7,sp,4
  80cfe4:	900b883a 	mov	r5,r18
  80cfe8:	980d883a 	mov	r6,r19
  80cfec:	e009883a 	mov	r4,fp
  80cff0:	8820d53a 	srli	r16,r17,20
  80cff4:	0810a840 	call	810a84 <__d2b>
  80cff8:	d8800915 	stw	r2,36(sp)
  80cffc:	8001651e 	bne	r16,zero,80d594 <_dtoa_r+0x700>
  80d000:	dd800217 	ldw	r22,8(sp)
  80d004:	dc000117 	ldw	r16,4(sp)
  80d008:	00800804 	movi	r2,32
  80d00c:	b421883a 	add	r16,r22,r16
  80d010:	80c10c84 	addi	r3,r16,1074
  80d014:	10c2d10e 	bge	r2,r3,80db5c <_dtoa_r+0xcc8>
  80d018:	00801004 	movi	r2,64
  80d01c:	81010484 	addi	r4,r16,1042
  80d020:	10c7c83a 	sub	r3,r2,r3
  80d024:	9108d83a 	srl	r4,r18,r4
  80d028:	88e2983a 	sll	r17,r17,r3
  80d02c:	2448b03a 	or	r4,r4,r17
  80d030:	0816f280 	call	816f28 <__floatunsidf>
  80d034:	017f8434 	movhi	r5,65040
  80d038:	01800044 	movi	r6,1
  80d03c:	1009883a 	mov	r4,r2
  80d040:	194b883a 	add	r5,r3,r5
  80d044:	843fffc4 	addi	r16,r16,-1
  80d048:	d9801115 	stw	r6,68(sp)
  80d04c:	000d883a 	mov	r6,zero
  80d050:	01cffe34 	movhi	r7,16376
  80d054:	08164d00 	call	8164d0 <__subdf3>
  80d058:	0198dbf4 	movhi	r6,25455
  80d05c:	01cff4f4 	movhi	r7,16339
  80d060:	3190d844 	addi	r6,r6,17249
  80d064:	39e1e9c4 	addi	r7,r7,-30809
  80d068:	1009883a 	mov	r4,r2
  80d06c:	180b883a 	mov	r5,r3
  80d070:	0815db80 	call	815db8 <__muldf3>
  80d074:	01a2d874 	movhi	r6,35681
  80d078:	01cff1f4 	movhi	r7,16327
  80d07c:	31b22cc4 	addi	r6,r6,-14157
  80d080:	39e28a04 	addi	r7,r7,-30168
  80d084:	180b883a 	mov	r5,r3
  80d088:	1009883a 	mov	r4,r2
  80d08c:	08149cc0 	call	8149cc <__adddf3>
  80d090:	8009883a 	mov	r4,r16
  80d094:	1029883a 	mov	r20,r2
  80d098:	1823883a 	mov	r17,r3
  80d09c:	0816e4c0 	call	816e4c <__floatsidf>
  80d0a0:	019427f4 	movhi	r6,20639
  80d0a4:	01cff4f4 	movhi	r7,16339
  80d0a8:	319e7ec4 	addi	r6,r6,31227
  80d0ac:	39d104c4 	addi	r7,r7,17427
  80d0b0:	1009883a 	mov	r4,r2
  80d0b4:	180b883a 	mov	r5,r3
  80d0b8:	0815db80 	call	815db8 <__muldf3>
  80d0bc:	100d883a 	mov	r6,r2
  80d0c0:	180f883a 	mov	r7,r3
  80d0c4:	a009883a 	mov	r4,r20
  80d0c8:	880b883a 	mov	r5,r17
  80d0cc:	08149cc0 	call	8149cc <__adddf3>
  80d0d0:	1009883a 	mov	r4,r2
  80d0d4:	180b883a 	mov	r5,r3
  80d0d8:	1029883a 	mov	r20,r2
  80d0dc:	1823883a 	mov	r17,r3
  80d0e0:	0816dcc0 	call	816dcc <__fixdfsi>
  80d0e4:	000d883a 	mov	r6,zero
  80d0e8:	000f883a 	mov	r7,zero
  80d0ec:	a009883a 	mov	r4,r20
  80d0f0:	880b883a 	mov	r5,r17
  80d0f4:	d8800515 	stw	r2,20(sp)
  80d0f8:	0815cc40 	call	815cc4 <__ledf2>
  80d0fc:	10028716 	blt	r2,zero,80db1c <_dtoa_r+0xc88>
  80d100:	d8c00517 	ldw	r3,20(sp)
  80d104:	00800584 	movi	r2,22
  80d108:	10c27536 	bltu	r2,r3,80dae0 <_dtoa_r+0xc4c>
  80d10c:	180490fa 	slli	r2,r3,3
  80d110:	00c020b4 	movhi	r3,130
  80d114:	18ee9804 	addi	r3,r3,-17824
  80d118:	1885883a 	add	r2,r3,r2
  80d11c:	11000017 	ldw	r4,0(r2)
  80d120:	11400117 	ldw	r5,4(r2)
  80d124:	900d883a 	mov	r6,r18
  80d128:	980f883a 	mov	r7,r19
  80d12c:	0815be80 	call	815be8 <__gedf2>
  80d130:	00828d0e 	bge	zero,r2,80db68 <_dtoa_r+0xcd4>
  80d134:	d9000517 	ldw	r4,20(sp)
  80d138:	d8000e15 	stw	zero,56(sp)
  80d13c:	213fffc4 	addi	r4,r4,-1
  80d140:	d9000515 	stw	r4,20(sp)
  80d144:	b42dc83a 	sub	r22,r22,r16
  80d148:	b5bfffc4 	addi	r22,r22,-1
  80d14c:	b0026f16 	blt	r22,zero,80db0c <_dtoa_r+0xc78>
  80d150:	d8000815 	stw	zero,32(sp)
  80d154:	d9c00517 	ldw	r7,20(sp)
  80d158:	38026416 	blt	r7,zero,80daec <_dtoa_r+0xc58>
  80d15c:	b1ed883a 	add	r22,r22,r7
  80d160:	d9c00d15 	stw	r7,52(sp)
  80d164:	d8000a15 	stw	zero,40(sp)
  80d168:	d9800317 	ldw	r6,12(sp)
  80d16c:	00800244 	movi	r2,9
  80d170:	11811436 	bltu	r2,r6,80d5c4 <_dtoa_r+0x730>
  80d174:	00800144 	movi	r2,5
  80d178:	1184e10e 	bge	r2,r6,80e500 <_dtoa_r+0x166c>
  80d17c:	31bfff04 	addi	r6,r6,-4
  80d180:	d9800315 	stw	r6,12(sp)
  80d184:	0023883a 	mov	r17,zero
  80d188:	d9800317 	ldw	r6,12(sp)
  80d18c:	008000c4 	movi	r2,3
  80d190:	30836726 	beq	r6,r2,80df30 <_dtoa_r+0x109c>
  80d194:	1183410e 	bge	r2,r6,80de9c <_dtoa_r+0x1008>
  80d198:	d9c00317 	ldw	r7,12(sp)
  80d19c:	00800104 	movi	r2,4
  80d1a0:	38827c26 	beq	r7,r2,80db94 <_dtoa_r+0xd00>
  80d1a4:	00800144 	movi	r2,5
  80d1a8:	3884c41e 	bne	r7,r2,80e4bc <_dtoa_r+0x1628>
  80d1ac:	00800044 	movi	r2,1
  80d1b0:	d8800b15 	stw	r2,44(sp)
  80d1b4:	d8c00517 	ldw	r3,20(sp)
  80d1b8:	d9002217 	ldw	r4,136(sp)
  80d1bc:	1907883a 	add	r3,r3,r4
  80d1c0:	19800044 	addi	r6,r3,1
  80d1c4:	d8c00c15 	stw	r3,48(sp)
  80d1c8:	d9800615 	stw	r6,24(sp)
  80d1cc:	0183a40e 	bge	zero,r6,80e060 <_dtoa_r+0x11cc>
  80d1d0:	d9800617 	ldw	r6,24(sp)
  80d1d4:	3021883a 	mov	r16,r6
  80d1d8:	e0001115 	stw	zero,68(fp)
  80d1dc:	008005c4 	movi	r2,23
  80d1e0:	1184c92e 	bgeu	r2,r6,80e508 <_dtoa_r+0x1674>
  80d1e4:	00c00044 	movi	r3,1
  80d1e8:	00800104 	movi	r2,4
  80d1ec:	1085883a 	add	r2,r2,r2
  80d1f0:	11000504 	addi	r4,r2,20
  80d1f4:	180b883a 	mov	r5,r3
  80d1f8:	18c00044 	addi	r3,r3,1
  80d1fc:	313ffb2e 	bgeu	r6,r4,80d1ec <__alt_data_end+0xff80d1ec>
  80d200:	e1401115 	stw	r5,68(fp)
  80d204:	e009883a 	mov	r4,fp
  80d208:	080fdf00 	call	80fdf0 <_Balloc>
  80d20c:	d8800715 	stw	r2,28(sp)
  80d210:	e0801015 	stw	r2,64(fp)
  80d214:	00800384 	movi	r2,14
  80d218:	1400f736 	bltu	r2,r16,80d5f8 <_dtoa_r+0x764>
  80d21c:	8800f626 	beq	r17,zero,80d5f8 <_dtoa_r+0x764>
  80d220:	d9c00517 	ldw	r7,20(sp)
  80d224:	01c39a0e 	bge	zero,r7,80e090 <_dtoa_r+0x11fc>
  80d228:	388003cc 	andi	r2,r7,15
  80d22c:	100490fa 	slli	r2,r2,3
  80d230:	382bd13a 	srai	r21,r7,4
  80d234:	00c020b4 	movhi	r3,130
  80d238:	18ee9804 	addi	r3,r3,-17824
  80d23c:	1885883a 	add	r2,r3,r2
  80d240:	a8c0040c 	andi	r3,r21,16
  80d244:	12400017 	ldw	r9,0(r2)
  80d248:	12000117 	ldw	r8,4(r2)
  80d24c:	18037926 	beq	r3,zero,80e034 <_dtoa_r+0x11a0>
  80d250:	008020b4 	movhi	r2,130
  80d254:	10ae8e04 	addi	r2,r2,-17864
  80d258:	11800817 	ldw	r6,32(r2)
  80d25c:	11c00917 	ldw	r7,36(r2)
  80d260:	9009883a 	mov	r4,r18
  80d264:	980b883a 	mov	r5,r19
  80d268:	da001715 	stw	r8,92(sp)
  80d26c:	da401615 	stw	r9,88(sp)
  80d270:	08152780 	call	815278 <__divdf3>
  80d274:	da001717 	ldw	r8,92(sp)
  80d278:	da401617 	ldw	r9,88(sp)
  80d27c:	ad4003cc 	andi	r21,r21,15
  80d280:	040000c4 	movi	r16,3
  80d284:	1023883a 	mov	r17,r2
  80d288:	1829883a 	mov	r20,r3
  80d28c:	a8001126 	beq	r21,zero,80d2d4 <_dtoa_r+0x440>
  80d290:	05c020b4 	movhi	r23,130
  80d294:	bdee8e04 	addi	r23,r23,-17864
  80d298:	4805883a 	mov	r2,r9
  80d29c:	4007883a 	mov	r3,r8
  80d2a0:	a980004c 	andi	r6,r21,1
  80d2a4:	1009883a 	mov	r4,r2
  80d2a8:	a82bd07a 	srai	r21,r21,1
  80d2ac:	180b883a 	mov	r5,r3
  80d2b0:	30000426 	beq	r6,zero,80d2c4 <_dtoa_r+0x430>
  80d2b4:	b9800017 	ldw	r6,0(r23)
  80d2b8:	b9c00117 	ldw	r7,4(r23)
  80d2bc:	84000044 	addi	r16,r16,1
  80d2c0:	0815db80 	call	815db8 <__muldf3>
  80d2c4:	bdc00204 	addi	r23,r23,8
  80d2c8:	a83ff51e 	bne	r21,zero,80d2a0 <__alt_data_end+0xff80d2a0>
  80d2cc:	1013883a 	mov	r9,r2
  80d2d0:	1811883a 	mov	r8,r3
  80d2d4:	480d883a 	mov	r6,r9
  80d2d8:	400f883a 	mov	r7,r8
  80d2dc:	8809883a 	mov	r4,r17
  80d2e0:	a00b883a 	mov	r5,r20
  80d2e4:	08152780 	call	815278 <__divdf3>
  80d2e8:	d8800f15 	stw	r2,60(sp)
  80d2ec:	d8c01015 	stw	r3,64(sp)
  80d2f0:	d8c00e17 	ldw	r3,56(sp)
  80d2f4:	18000626 	beq	r3,zero,80d310 <_dtoa_r+0x47c>
  80d2f8:	d9000f17 	ldw	r4,60(sp)
  80d2fc:	d9401017 	ldw	r5,64(sp)
  80d300:	000d883a 	mov	r6,zero
  80d304:	01cffc34 	movhi	r7,16368
  80d308:	0815cc40 	call	815cc4 <__ledf2>
  80d30c:	10040b16 	blt	r2,zero,80e33c <_dtoa_r+0x14a8>
  80d310:	8009883a 	mov	r4,r16
  80d314:	0816e4c0 	call	816e4c <__floatsidf>
  80d318:	d9800f17 	ldw	r6,60(sp)
  80d31c:	d9c01017 	ldw	r7,64(sp)
  80d320:	1009883a 	mov	r4,r2
  80d324:	180b883a 	mov	r5,r3
  80d328:	0815db80 	call	815db8 <__muldf3>
  80d32c:	000d883a 	mov	r6,zero
  80d330:	01d00734 	movhi	r7,16412
  80d334:	1009883a 	mov	r4,r2
  80d338:	180b883a 	mov	r5,r3
  80d33c:	08149cc0 	call	8149cc <__adddf3>
  80d340:	1021883a 	mov	r16,r2
  80d344:	d8800617 	ldw	r2,24(sp)
  80d348:	047f3034 	movhi	r17,64704
  80d34c:	1c63883a 	add	r17,r3,r17
  80d350:	10031826 	beq	r2,zero,80dfb4 <_dtoa_r+0x1120>
  80d354:	d8c00517 	ldw	r3,20(sp)
  80d358:	db000617 	ldw	r12,24(sp)
  80d35c:	d8c01315 	stw	r3,76(sp)
  80d360:	d9000b17 	ldw	r4,44(sp)
  80d364:	20038f26 	beq	r4,zero,80e1a4 <_dtoa_r+0x1310>
  80d368:	60bfffc4 	addi	r2,r12,-1
  80d36c:	100490fa 	slli	r2,r2,3
  80d370:	00c020b4 	movhi	r3,130
  80d374:	18ee9804 	addi	r3,r3,-17824
  80d378:	1885883a 	add	r2,r3,r2
  80d37c:	11800017 	ldw	r6,0(r2)
  80d380:	11c00117 	ldw	r7,4(r2)
  80d384:	d8800717 	ldw	r2,28(sp)
  80d388:	0009883a 	mov	r4,zero
  80d38c:	014ff834 	movhi	r5,16352
  80d390:	db001615 	stw	r12,88(sp)
  80d394:	15c00044 	addi	r23,r2,1
  80d398:	08152780 	call	815278 <__divdf3>
  80d39c:	800d883a 	mov	r6,r16
  80d3a0:	880f883a 	mov	r7,r17
  80d3a4:	1009883a 	mov	r4,r2
  80d3a8:	180b883a 	mov	r5,r3
  80d3ac:	08164d00 	call	8164d0 <__subdf3>
  80d3b0:	d9401017 	ldw	r5,64(sp)
  80d3b4:	d9000f17 	ldw	r4,60(sp)
  80d3b8:	102b883a 	mov	r21,r2
  80d3bc:	d8c01215 	stw	r3,72(sp)
  80d3c0:	0816dcc0 	call	816dcc <__fixdfsi>
  80d3c4:	1009883a 	mov	r4,r2
  80d3c8:	1029883a 	mov	r20,r2
  80d3cc:	0816e4c0 	call	816e4c <__floatsidf>
  80d3d0:	d9000f17 	ldw	r4,60(sp)
  80d3d4:	d9401017 	ldw	r5,64(sp)
  80d3d8:	100d883a 	mov	r6,r2
  80d3dc:	180f883a 	mov	r7,r3
  80d3e0:	08164d00 	call	8164d0 <__subdf3>
  80d3e4:	1823883a 	mov	r17,r3
  80d3e8:	d8c00717 	ldw	r3,28(sp)
  80d3ec:	d9401217 	ldw	r5,72(sp)
  80d3f0:	a2000c04 	addi	r8,r20,48
  80d3f4:	1021883a 	mov	r16,r2
  80d3f8:	1a000005 	stb	r8,0(r3)
  80d3fc:	800d883a 	mov	r6,r16
  80d400:	880f883a 	mov	r7,r17
  80d404:	a809883a 	mov	r4,r21
  80d408:	4029883a 	mov	r20,r8
  80d40c:	0815be80 	call	815be8 <__gedf2>
  80d410:	00841d16 	blt	zero,r2,80e488 <_dtoa_r+0x15f4>
  80d414:	800d883a 	mov	r6,r16
  80d418:	880f883a 	mov	r7,r17
  80d41c:	0009883a 	mov	r4,zero
  80d420:	014ffc34 	movhi	r5,16368
  80d424:	08164d00 	call	8164d0 <__subdf3>
  80d428:	d9401217 	ldw	r5,72(sp)
  80d42c:	100d883a 	mov	r6,r2
  80d430:	180f883a 	mov	r7,r3
  80d434:	a809883a 	mov	r4,r21
  80d438:	0815be80 	call	815be8 <__gedf2>
  80d43c:	db001617 	ldw	r12,88(sp)
  80d440:	00840e16 	blt	zero,r2,80e47c <_dtoa_r+0x15e8>
  80d444:	00800044 	movi	r2,1
  80d448:	13006b0e 	bge	r2,r12,80d5f8 <_dtoa_r+0x764>
  80d44c:	d9000717 	ldw	r4,28(sp)
  80d450:	dd800f15 	stw	r22,60(sp)
  80d454:	dcc01015 	stw	r19,64(sp)
  80d458:	2319883a 	add	r12,r4,r12
  80d45c:	dcc01217 	ldw	r19,72(sp)
  80d460:	602d883a 	mov	r22,r12
  80d464:	dc801215 	stw	r18,72(sp)
  80d468:	b825883a 	mov	r18,r23
  80d46c:	00000906 	br	80d494 <_dtoa_r+0x600>
  80d470:	08164d00 	call	8164d0 <__subdf3>
  80d474:	a80d883a 	mov	r6,r21
  80d478:	980f883a 	mov	r7,r19
  80d47c:	1009883a 	mov	r4,r2
  80d480:	180b883a 	mov	r5,r3
  80d484:	0815cc40 	call	815cc4 <__ledf2>
  80d488:	1003e816 	blt	r2,zero,80e42c <_dtoa_r+0x1598>
  80d48c:	b825883a 	mov	r18,r23
  80d490:	bd83e926 	beq	r23,r22,80e438 <_dtoa_r+0x15a4>
  80d494:	a809883a 	mov	r4,r21
  80d498:	980b883a 	mov	r5,r19
  80d49c:	000d883a 	mov	r6,zero
  80d4a0:	01d00934 	movhi	r7,16420
  80d4a4:	0815db80 	call	815db8 <__muldf3>
  80d4a8:	000d883a 	mov	r6,zero
  80d4ac:	01d00934 	movhi	r7,16420
  80d4b0:	8009883a 	mov	r4,r16
  80d4b4:	880b883a 	mov	r5,r17
  80d4b8:	102b883a 	mov	r21,r2
  80d4bc:	1827883a 	mov	r19,r3
  80d4c0:	0815db80 	call	815db8 <__muldf3>
  80d4c4:	180b883a 	mov	r5,r3
  80d4c8:	1009883a 	mov	r4,r2
  80d4cc:	1821883a 	mov	r16,r3
  80d4d0:	1023883a 	mov	r17,r2
  80d4d4:	0816dcc0 	call	816dcc <__fixdfsi>
  80d4d8:	1009883a 	mov	r4,r2
  80d4dc:	1029883a 	mov	r20,r2
  80d4e0:	0816e4c0 	call	816e4c <__floatsidf>
  80d4e4:	8809883a 	mov	r4,r17
  80d4e8:	800b883a 	mov	r5,r16
  80d4ec:	100d883a 	mov	r6,r2
  80d4f0:	180f883a 	mov	r7,r3
  80d4f4:	08164d00 	call	8164d0 <__subdf3>
  80d4f8:	a5000c04 	addi	r20,r20,48
  80d4fc:	a80d883a 	mov	r6,r21
  80d500:	980f883a 	mov	r7,r19
  80d504:	1009883a 	mov	r4,r2
  80d508:	180b883a 	mov	r5,r3
  80d50c:	95000005 	stb	r20,0(r18)
  80d510:	1021883a 	mov	r16,r2
  80d514:	1823883a 	mov	r17,r3
  80d518:	0815cc40 	call	815cc4 <__ledf2>
  80d51c:	bdc00044 	addi	r23,r23,1
  80d520:	800d883a 	mov	r6,r16
  80d524:	880f883a 	mov	r7,r17
  80d528:	0009883a 	mov	r4,zero
  80d52c:	014ffc34 	movhi	r5,16368
  80d530:	103fcf0e 	bge	r2,zero,80d470 <__alt_data_end+0xff80d470>
  80d534:	d8c01317 	ldw	r3,76(sp)
  80d538:	d8c00515 	stw	r3,20(sp)
  80d53c:	d9400917 	ldw	r5,36(sp)
  80d540:	e009883a 	mov	r4,fp
  80d544:	080fe980 	call	80fe98 <_Bfree>
  80d548:	d9000517 	ldw	r4,20(sp)
  80d54c:	d9802317 	ldw	r6,140(sp)
  80d550:	d9c02517 	ldw	r7,148(sp)
  80d554:	b8000005 	stb	zero,0(r23)
  80d558:	20800044 	addi	r2,r4,1
  80d55c:	30800015 	stw	r2,0(r6)
  80d560:	3802aa26 	beq	r7,zero,80e00c <_dtoa_r+0x1178>
  80d564:	3dc00015 	stw	r23,0(r7)
  80d568:	d8800717 	ldw	r2,28(sp)
  80d56c:	003e7906 	br	80cf54 <__alt_data_end+0xff80cf54>
  80d570:	00800434 	movhi	r2,16
  80d574:	10bfffc4 	addi	r2,r2,-1
  80d578:	88a2703a 	and	r17,r17,r2
  80d57c:	883e851e 	bne	r17,zero,80cf94 <__alt_data_end+0xff80cf94>
  80d580:	008020b4 	movhi	r2,130
  80d584:	10ae7a04 	addi	r2,r2,-17944
  80d588:	003e8406 	br	80cf9c <__alt_data_end+0xff80cf9c>
  80d58c:	10c00204 	addi	r3,r2,8
  80d590:	003e8706 	br	80cfb0 <__alt_data_end+0xff80cfb0>
  80d594:	01400434 	movhi	r5,16
  80d598:	297fffc4 	addi	r5,r5,-1
  80d59c:	994a703a 	and	r5,r19,r5
  80d5a0:	9009883a 	mov	r4,r18
  80d5a4:	843f0044 	addi	r16,r16,-1023
  80d5a8:	294ffc34 	orhi	r5,r5,16368
  80d5ac:	dd800217 	ldw	r22,8(sp)
  80d5b0:	d8001115 	stw	zero,68(sp)
  80d5b4:	003ea506 	br	80d04c <__alt_data_end+0xff80d04c>
  80d5b8:	008020b4 	movhi	r2,130
  80d5bc:	10ae7104 	addi	r2,r2,-17980
  80d5c0:	003e6406 	br	80cf54 <__alt_data_end+0xff80cf54>
  80d5c4:	e0001115 	stw	zero,68(fp)
  80d5c8:	000b883a 	mov	r5,zero
  80d5cc:	e009883a 	mov	r4,fp
  80d5d0:	080fdf00 	call	80fdf0 <_Balloc>
  80d5d4:	01bfffc4 	movi	r6,-1
  80d5d8:	01c00044 	movi	r7,1
  80d5dc:	d8800715 	stw	r2,28(sp)
  80d5e0:	d9800c15 	stw	r6,48(sp)
  80d5e4:	e0801015 	stw	r2,64(fp)
  80d5e8:	d8000315 	stw	zero,12(sp)
  80d5ec:	d9c00b15 	stw	r7,44(sp)
  80d5f0:	d9800615 	stw	r6,24(sp)
  80d5f4:	d8002215 	stw	zero,136(sp)
  80d5f8:	d8800117 	ldw	r2,4(sp)
  80d5fc:	10008916 	blt	r2,zero,80d824 <_dtoa_r+0x990>
  80d600:	d9000517 	ldw	r4,20(sp)
  80d604:	00c00384 	movi	r3,14
  80d608:	19008616 	blt	r3,r4,80d824 <_dtoa_r+0x990>
  80d60c:	200490fa 	slli	r2,r4,3
  80d610:	00c020b4 	movhi	r3,130
  80d614:	d9802217 	ldw	r6,136(sp)
  80d618:	18ee9804 	addi	r3,r3,-17824
  80d61c:	1885883a 	add	r2,r3,r2
  80d620:	14000017 	ldw	r16,0(r2)
  80d624:	14400117 	ldw	r17,4(r2)
  80d628:	30016316 	blt	r6,zero,80dbb8 <_dtoa_r+0xd24>
  80d62c:	800d883a 	mov	r6,r16
  80d630:	880f883a 	mov	r7,r17
  80d634:	9009883a 	mov	r4,r18
  80d638:	980b883a 	mov	r5,r19
  80d63c:	08152780 	call	815278 <__divdf3>
  80d640:	180b883a 	mov	r5,r3
  80d644:	1009883a 	mov	r4,r2
  80d648:	0816dcc0 	call	816dcc <__fixdfsi>
  80d64c:	1009883a 	mov	r4,r2
  80d650:	102b883a 	mov	r21,r2
  80d654:	0816e4c0 	call	816e4c <__floatsidf>
  80d658:	800d883a 	mov	r6,r16
  80d65c:	880f883a 	mov	r7,r17
  80d660:	1009883a 	mov	r4,r2
  80d664:	180b883a 	mov	r5,r3
  80d668:	0815db80 	call	815db8 <__muldf3>
  80d66c:	100d883a 	mov	r6,r2
  80d670:	180f883a 	mov	r7,r3
  80d674:	9009883a 	mov	r4,r18
  80d678:	980b883a 	mov	r5,r19
  80d67c:	08164d00 	call	8164d0 <__subdf3>
  80d680:	d9c00717 	ldw	r7,28(sp)
  80d684:	1009883a 	mov	r4,r2
  80d688:	a8800c04 	addi	r2,r21,48
  80d68c:	38800005 	stb	r2,0(r7)
  80d690:	3dc00044 	addi	r23,r7,1
  80d694:	d9c00617 	ldw	r7,24(sp)
  80d698:	01800044 	movi	r6,1
  80d69c:	180b883a 	mov	r5,r3
  80d6a0:	2005883a 	mov	r2,r4
  80d6a4:	39803826 	beq	r7,r6,80d788 <_dtoa_r+0x8f4>
  80d6a8:	000d883a 	mov	r6,zero
  80d6ac:	01d00934 	movhi	r7,16420
  80d6b0:	0815db80 	call	815db8 <__muldf3>
  80d6b4:	000d883a 	mov	r6,zero
  80d6b8:	000f883a 	mov	r7,zero
  80d6bc:	1009883a 	mov	r4,r2
  80d6c0:	180b883a 	mov	r5,r3
  80d6c4:	1025883a 	mov	r18,r2
  80d6c8:	1827883a 	mov	r19,r3
  80d6cc:	0815b600 	call	815b60 <__eqdf2>
  80d6d0:	103f9a26 	beq	r2,zero,80d53c <__alt_data_end+0xff80d53c>
  80d6d4:	d9c00617 	ldw	r7,24(sp)
  80d6d8:	d8c00717 	ldw	r3,28(sp)
  80d6dc:	b829883a 	mov	r20,r23
  80d6e0:	38bfffc4 	addi	r2,r7,-1
  80d6e4:	18ad883a 	add	r22,r3,r2
  80d6e8:	00000a06 	br	80d714 <_dtoa_r+0x880>
  80d6ec:	0815db80 	call	815db8 <__muldf3>
  80d6f0:	000d883a 	mov	r6,zero
  80d6f4:	000f883a 	mov	r7,zero
  80d6f8:	1009883a 	mov	r4,r2
  80d6fc:	180b883a 	mov	r5,r3
  80d700:	1025883a 	mov	r18,r2
  80d704:	1827883a 	mov	r19,r3
  80d708:	b829883a 	mov	r20,r23
  80d70c:	0815b600 	call	815b60 <__eqdf2>
  80d710:	103f8a26 	beq	r2,zero,80d53c <__alt_data_end+0xff80d53c>
  80d714:	800d883a 	mov	r6,r16
  80d718:	880f883a 	mov	r7,r17
  80d71c:	9009883a 	mov	r4,r18
  80d720:	980b883a 	mov	r5,r19
  80d724:	08152780 	call	815278 <__divdf3>
  80d728:	180b883a 	mov	r5,r3
  80d72c:	1009883a 	mov	r4,r2
  80d730:	0816dcc0 	call	816dcc <__fixdfsi>
  80d734:	1009883a 	mov	r4,r2
  80d738:	102b883a 	mov	r21,r2
  80d73c:	0816e4c0 	call	816e4c <__floatsidf>
  80d740:	800d883a 	mov	r6,r16
  80d744:	880f883a 	mov	r7,r17
  80d748:	1009883a 	mov	r4,r2
  80d74c:	180b883a 	mov	r5,r3
  80d750:	0815db80 	call	815db8 <__muldf3>
  80d754:	100d883a 	mov	r6,r2
  80d758:	180f883a 	mov	r7,r3
  80d75c:	9009883a 	mov	r4,r18
  80d760:	980b883a 	mov	r5,r19
  80d764:	08164d00 	call	8164d0 <__subdf3>
  80d768:	aa000c04 	addi	r8,r21,48
  80d76c:	a2000005 	stb	r8,0(r20)
  80d770:	000d883a 	mov	r6,zero
  80d774:	01d00934 	movhi	r7,16420
  80d778:	1009883a 	mov	r4,r2
  80d77c:	180b883a 	mov	r5,r3
  80d780:	a5c00044 	addi	r23,r20,1
  80d784:	b53fd91e 	bne	r22,r20,80d6ec <__alt_data_end+0xff80d6ec>
  80d788:	100d883a 	mov	r6,r2
  80d78c:	180f883a 	mov	r7,r3
  80d790:	1009883a 	mov	r4,r2
  80d794:	180b883a 	mov	r5,r3
  80d798:	08149cc0 	call	8149cc <__adddf3>
  80d79c:	100d883a 	mov	r6,r2
  80d7a0:	180f883a 	mov	r7,r3
  80d7a4:	8009883a 	mov	r4,r16
  80d7a8:	880b883a 	mov	r5,r17
  80d7ac:	1027883a 	mov	r19,r2
  80d7b0:	1825883a 	mov	r18,r3
  80d7b4:	0815cc40 	call	815cc4 <__ledf2>
  80d7b8:	10000816 	blt	r2,zero,80d7dc <_dtoa_r+0x948>
  80d7bc:	980d883a 	mov	r6,r19
  80d7c0:	900f883a 	mov	r7,r18
  80d7c4:	8009883a 	mov	r4,r16
  80d7c8:	880b883a 	mov	r5,r17
  80d7cc:	0815b600 	call	815b60 <__eqdf2>
  80d7d0:	103f5a1e 	bne	r2,zero,80d53c <__alt_data_end+0xff80d53c>
  80d7d4:	ad40004c 	andi	r21,r21,1
  80d7d8:	a83f5826 	beq	r21,zero,80d53c <__alt_data_end+0xff80d53c>
  80d7dc:	bd3fffc3 	ldbu	r20,-1(r23)
  80d7e0:	b8bfffc4 	addi	r2,r23,-1
  80d7e4:	1007883a 	mov	r3,r2
  80d7e8:	01400e44 	movi	r5,57
  80d7ec:	d9800717 	ldw	r6,28(sp)
  80d7f0:	00000506 	br	80d808 <_dtoa_r+0x974>
  80d7f4:	18ffffc4 	addi	r3,r3,-1
  80d7f8:	11824726 	beq	r2,r6,80e118 <_dtoa_r+0x1284>
  80d7fc:	1d000003 	ldbu	r20,0(r3)
  80d800:	102f883a 	mov	r23,r2
  80d804:	10bfffc4 	addi	r2,r2,-1
  80d808:	a1003fcc 	andi	r4,r20,255
  80d80c:	2100201c 	xori	r4,r4,128
  80d810:	213fe004 	addi	r4,r4,-128
  80d814:	217ff726 	beq	r4,r5,80d7f4 <__alt_data_end+0xff80d7f4>
  80d818:	a2000044 	addi	r8,r20,1
  80d81c:	12000005 	stb	r8,0(r2)
  80d820:	003f4606 	br	80d53c <__alt_data_end+0xff80d53c>
  80d824:	d9000b17 	ldw	r4,44(sp)
  80d828:	2000c826 	beq	r4,zero,80db4c <_dtoa_r+0xcb8>
  80d82c:	d9800317 	ldw	r6,12(sp)
  80d830:	00c00044 	movi	r3,1
  80d834:	1980f90e 	bge	r3,r6,80dc1c <_dtoa_r+0xd88>
  80d838:	d8800617 	ldw	r2,24(sp)
  80d83c:	d8c00a17 	ldw	r3,40(sp)
  80d840:	157fffc4 	addi	r21,r2,-1
  80d844:	1d41f316 	blt	r3,r21,80e014 <_dtoa_r+0x1180>
  80d848:	1d6bc83a 	sub	r21,r3,r21
  80d84c:	d9c00617 	ldw	r7,24(sp)
  80d850:	3802aa16 	blt	r7,zero,80e2fc <_dtoa_r+0x1468>
  80d854:	dd000817 	ldw	r20,32(sp)
  80d858:	d8800617 	ldw	r2,24(sp)
  80d85c:	d8c00817 	ldw	r3,32(sp)
  80d860:	01400044 	movi	r5,1
  80d864:	e009883a 	mov	r4,fp
  80d868:	1887883a 	add	r3,r3,r2
  80d86c:	d8c00815 	stw	r3,32(sp)
  80d870:	b0ad883a 	add	r22,r22,r2
  80d874:	08101fc0 	call	8101fc <__i2b>
  80d878:	1023883a 	mov	r17,r2
  80d87c:	a0000826 	beq	r20,zero,80d8a0 <_dtoa_r+0xa0c>
  80d880:	0580070e 	bge	zero,r22,80d8a0 <_dtoa_r+0xa0c>
  80d884:	a005883a 	mov	r2,r20
  80d888:	b500b916 	blt	r22,r20,80db70 <_dtoa_r+0xcdc>
  80d88c:	d9000817 	ldw	r4,32(sp)
  80d890:	a0a9c83a 	sub	r20,r20,r2
  80d894:	b0adc83a 	sub	r22,r22,r2
  80d898:	2089c83a 	sub	r4,r4,r2
  80d89c:	d9000815 	stw	r4,32(sp)
  80d8a0:	d9800a17 	ldw	r6,40(sp)
  80d8a4:	0181810e 	bge	zero,r6,80deac <_dtoa_r+0x1018>
  80d8a8:	d9c00b17 	ldw	r7,44(sp)
  80d8ac:	3800b326 	beq	r7,zero,80db7c <_dtoa_r+0xce8>
  80d8b0:	a800b226 	beq	r21,zero,80db7c <_dtoa_r+0xce8>
  80d8b4:	880b883a 	mov	r5,r17
  80d8b8:	a80d883a 	mov	r6,r21
  80d8bc:	e009883a 	mov	r4,fp
  80d8c0:	08104300 	call	810430 <__pow5mult>
  80d8c4:	d9800917 	ldw	r6,36(sp)
  80d8c8:	100b883a 	mov	r5,r2
  80d8cc:	e009883a 	mov	r4,fp
  80d8d0:	1023883a 	mov	r17,r2
  80d8d4:	08102380 	call	810238 <__multiply>
  80d8d8:	1021883a 	mov	r16,r2
  80d8dc:	d8800a17 	ldw	r2,40(sp)
  80d8e0:	d9400917 	ldw	r5,36(sp)
  80d8e4:	e009883a 	mov	r4,fp
  80d8e8:	1545c83a 	sub	r2,r2,r21
  80d8ec:	d8800a15 	stw	r2,40(sp)
  80d8f0:	080fe980 	call	80fe98 <_Bfree>
  80d8f4:	d8c00a17 	ldw	r3,40(sp)
  80d8f8:	18009f1e 	bne	r3,zero,80db78 <_dtoa_r+0xce4>
  80d8fc:	05c00044 	movi	r23,1
  80d900:	e009883a 	mov	r4,fp
  80d904:	b80b883a 	mov	r5,r23
  80d908:	08101fc0 	call	8101fc <__i2b>
  80d90c:	d9000d17 	ldw	r4,52(sp)
  80d910:	102b883a 	mov	r21,r2
  80d914:	2000ce26 	beq	r4,zero,80dc50 <_dtoa_r+0xdbc>
  80d918:	200d883a 	mov	r6,r4
  80d91c:	100b883a 	mov	r5,r2
  80d920:	e009883a 	mov	r4,fp
  80d924:	08104300 	call	810430 <__pow5mult>
  80d928:	d9800317 	ldw	r6,12(sp)
  80d92c:	102b883a 	mov	r21,r2
  80d930:	b981810e 	bge	r23,r6,80df38 <_dtoa_r+0x10a4>
  80d934:	0027883a 	mov	r19,zero
  80d938:	a8800417 	ldw	r2,16(r21)
  80d93c:	05c00804 	movi	r23,32
  80d940:	10800104 	addi	r2,r2,4
  80d944:	1085883a 	add	r2,r2,r2
  80d948:	1085883a 	add	r2,r2,r2
  80d94c:	a885883a 	add	r2,r21,r2
  80d950:	11000017 	ldw	r4,0(r2)
  80d954:	08100e40 	call	8100e4 <__hi0bits>
  80d958:	b885c83a 	sub	r2,r23,r2
  80d95c:	1585883a 	add	r2,r2,r22
  80d960:	108007cc 	andi	r2,r2,31
  80d964:	1000b326 	beq	r2,zero,80dc34 <_dtoa_r+0xda0>
  80d968:	00c00804 	movi	r3,32
  80d96c:	1887c83a 	sub	r3,r3,r2
  80d970:	01000104 	movi	r4,4
  80d974:	20c2cd0e 	bge	r4,r3,80e4ac <_dtoa_r+0x1618>
  80d978:	00c00704 	movi	r3,28
  80d97c:	1885c83a 	sub	r2,r3,r2
  80d980:	d8c00817 	ldw	r3,32(sp)
  80d984:	a0a9883a 	add	r20,r20,r2
  80d988:	b0ad883a 	add	r22,r22,r2
  80d98c:	1887883a 	add	r3,r3,r2
  80d990:	d8c00815 	stw	r3,32(sp)
  80d994:	d9800817 	ldw	r6,32(sp)
  80d998:	0180040e 	bge	zero,r6,80d9ac <_dtoa_r+0xb18>
  80d99c:	800b883a 	mov	r5,r16
  80d9a0:	e009883a 	mov	r4,fp
  80d9a4:	08105700 	call	810570 <__lshift>
  80d9a8:	1021883a 	mov	r16,r2
  80d9ac:	0580050e 	bge	zero,r22,80d9c4 <_dtoa_r+0xb30>
  80d9b0:	a80b883a 	mov	r5,r21
  80d9b4:	b00d883a 	mov	r6,r22
  80d9b8:	e009883a 	mov	r4,fp
  80d9bc:	08105700 	call	810570 <__lshift>
  80d9c0:	102b883a 	mov	r21,r2
  80d9c4:	d9c00e17 	ldw	r7,56(sp)
  80d9c8:	3801211e 	bne	r7,zero,80de50 <_dtoa_r+0xfbc>
  80d9cc:	d9800617 	ldw	r6,24(sp)
  80d9d0:	0181380e 	bge	zero,r6,80deb4 <_dtoa_r+0x1020>
  80d9d4:	d8c00b17 	ldw	r3,44(sp)
  80d9d8:	1800ab1e 	bne	r3,zero,80dc88 <_dtoa_r+0xdf4>
  80d9dc:	dc800717 	ldw	r18,28(sp)
  80d9e0:	dcc00617 	ldw	r19,24(sp)
  80d9e4:	9029883a 	mov	r20,r18
  80d9e8:	00000206 	br	80d9f4 <_dtoa_r+0xb60>
  80d9ec:	080fec00 	call	80fec0 <__multadd>
  80d9f0:	1021883a 	mov	r16,r2
  80d9f4:	a80b883a 	mov	r5,r21
  80d9f8:	8009883a 	mov	r4,r16
  80d9fc:	080cc940 	call	80cc94 <quorem>
  80da00:	10800c04 	addi	r2,r2,48
  80da04:	90800005 	stb	r2,0(r18)
  80da08:	94800044 	addi	r18,r18,1
  80da0c:	9507c83a 	sub	r3,r18,r20
  80da10:	000f883a 	mov	r7,zero
  80da14:	01800284 	movi	r6,10
  80da18:	800b883a 	mov	r5,r16
  80da1c:	e009883a 	mov	r4,fp
  80da20:	1cfff216 	blt	r3,r19,80d9ec <__alt_data_end+0xff80d9ec>
  80da24:	1011883a 	mov	r8,r2
  80da28:	d8800617 	ldw	r2,24(sp)
  80da2c:	0082370e 	bge	zero,r2,80e30c <_dtoa_r+0x1478>
  80da30:	d9000717 	ldw	r4,28(sp)
  80da34:	0025883a 	mov	r18,zero
  80da38:	20af883a 	add	r23,r4,r2
  80da3c:	01800044 	movi	r6,1
  80da40:	800b883a 	mov	r5,r16
  80da44:	e009883a 	mov	r4,fp
  80da48:	da001715 	stw	r8,92(sp)
  80da4c:	08105700 	call	810570 <__lshift>
  80da50:	a80b883a 	mov	r5,r21
  80da54:	1009883a 	mov	r4,r2
  80da58:	d8800915 	stw	r2,36(sp)
  80da5c:	08106b80 	call	8106b8 <__mcmp>
  80da60:	da001717 	ldw	r8,92(sp)
  80da64:	0081800e 	bge	zero,r2,80e068 <_dtoa_r+0x11d4>
  80da68:	b93fffc3 	ldbu	r4,-1(r23)
  80da6c:	b8bfffc4 	addi	r2,r23,-1
  80da70:	1007883a 	mov	r3,r2
  80da74:	01800e44 	movi	r6,57
  80da78:	d9c00717 	ldw	r7,28(sp)
  80da7c:	00000506 	br	80da94 <_dtoa_r+0xc00>
  80da80:	18ffffc4 	addi	r3,r3,-1
  80da84:	11c12326 	beq	r2,r7,80df14 <_dtoa_r+0x1080>
  80da88:	19000003 	ldbu	r4,0(r3)
  80da8c:	102f883a 	mov	r23,r2
  80da90:	10bfffc4 	addi	r2,r2,-1
  80da94:	21403fcc 	andi	r5,r4,255
  80da98:	2940201c 	xori	r5,r5,128
  80da9c:	297fe004 	addi	r5,r5,-128
  80daa0:	29bff726 	beq	r5,r6,80da80 <__alt_data_end+0xff80da80>
  80daa4:	21000044 	addi	r4,r4,1
  80daa8:	11000005 	stb	r4,0(r2)
  80daac:	a80b883a 	mov	r5,r21
  80dab0:	e009883a 	mov	r4,fp
  80dab4:	080fe980 	call	80fe98 <_Bfree>
  80dab8:	883ea026 	beq	r17,zero,80d53c <__alt_data_end+0xff80d53c>
  80dabc:	90000426 	beq	r18,zero,80dad0 <_dtoa_r+0xc3c>
  80dac0:	94400326 	beq	r18,r17,80dad0 <_dtoa_r+0xc3c>
  80dac4:	900b883a 	mov	r5,r18
  80dac8:	e009883a 	mov	r4,fp
  80dacc:	080fe980 	call	80fe98 <_Bfree>
  80dad0:	880b883a 	mov	r5,r17
  80dad4:	e009883a 	mov	r4,fp
  80dad8:	080fe980 	call	80fe98 <_Bfree>
  80dadc:	003e9706 	br	80d53c <__alt_data_end+0xff80d53c>
  80dae0:	01800044 	movi	r6,1
  80dae4:	d9800e15 	stw	r6,56(sp)
  80dae8:	003d9606 	br	80d144 <__alt_data_end+0xff80d144>
  80daec:	d8800817 	ldw	r2,32(sp)
  80daf0:	d8c00517 	ldw	r3,20(sp)
  80daf4:	d8000d15 	stw	zero,52(sp)
  80daf8:	10c5c83a 	sub	r2,r2,r3
  80dafc:	00c9c83a 	sub	r4,zero,r3
  80db00:	d8800815 	stw	r2,32(sp)
  80db04:	d9000a15 	stw	r4,40(sp)
  80db08:	003d9706 	br	80d168 <__alt_data_end+0xff80d168>
  80db0c:	05adc83a 	sub	r22,zero,r22
  80db10:	dd800815 	stw	r22,32(sp)
  80db14:	002d883a 	mov	r22,zero
  80db18:	003d8e06 	br	80d154 <__alt_data_end+0xff80d154>
  80db1c:	d9000517 	ldw	r4,20(sp)
  80db20:	0816e4c0 	call	816e4c <__floatsidf>
  80db24:	100d883a 	mov	r6,r2
  80db28:	180f883a 	mov	r7,r3
  80db2c:	a009883a 	mov	r4,r20
  80db30:	880b883a 	mov	r5,r17
  80db34:	0815b600 	call	815b60 <__eqdf2>
  80db38:	103d7126 	beq	r2,zero,80d100 <__alt_data_end+0xff80d100>
  80db3c:	d9c00517 	ldw	r7,20(sp)
  80db40:	39ffffc4 	addi	r7,r7,-1
  80db44:	d9c00515 	stw	r7,20(sp)
  80db48:	003d6d06 	br	80d100 <__alt_data_end+0xff80d100>
  80db4c:	dd400a17 	ldw	r21,40(sp)
  80db50:	dd000817 	ldw	r20,32(sp)
  80db54:	0023883a 	mov	r17,zero
  80db58:	003f4806 	br	80d87c <__alt_data_end+0xff80d87c>
  80db5c:	10e3c83a 	sub	r17,r2,r3
  80db60:	9448983a 	sll	r4,r18,r17
  80db64:	003d3206 	br	80d030 <__alt_data_end+0xff80d030>
  80db68:	d8000e15 	stw	zero,56(sp)
  80db6c:	003d7506 	br	80d144 <__alt_data_end+0xff80d144>
  80db70:	b005883a 	mov	r2,r22
  80db74:	003f4506 	br	80d88c <__alt_data_end+0xff80d88c>
  80db78:	dc000915 	stw	r16,36(sp)
  80db7c:	d9800a17 	ldw	r6,40(sp)
  80db80:	d9400917 	ldw	r5,36(sp)
  80db84:	e009883a 	mov	r4,fp
  80db88:	08104300 	call	810430 <__pow5mult>
  80db8c:	1021883a 	mov	r16,r2
  80db90:	003f5a06 	br	80d8fc <__alt_data_end+0xff80d8fc>
  80db94:	01c00044 	movi	r7,1
  80db98:	d9c00b15 	stw	r7,44(sp)
  80db9c:	d8802217 	ldw	r2,136(sp)
  80dba0:	0081280e 	bge	zero,r2,80e044 <_dtoa_r+0x11b0>
  80dba4:	100d883a 	mov	r6,r2
  80dba8:	1021883a 	mov	r16,r2
  80dbac:	d8800c15 	stw	r2,48(sp)
  80dbb0:	d8800615 	stw	r2,24(sp)
  80dbb4:	003d8806 	br	80d1d8 <__alt_data_end+0xff80d1d8>
  80dbb8:	d8800617 	ldw	r2,24(sp)
  80dbbc:	00be9b16 	blt	zero,r2,80d62c <__alt_data_end+0xff80d62c>
  80dbc0:	10010f1e 	bne	r2,zero,80e000 <_dtoa_r+0x116c>
  80dbc4:	880b883a 	mov	r5,r17
  80dbc8:	000d883a 	mov	r6,zero
  80dbcc:	01d00534 	movhi	r7,16404
  80dbd0:	8009883a 	mov	r4,r16
  80dbd4:	0815db80 	call	815db8 <__muldf3>
  80dbd8:	900d883a 	mov	r6,r18
  80dbdc:	980f883a 	mov	r7,r19
  80dbe0:	1009883a 	mov	r4,r2
  80dbe4:	180b883a 	mov	r5,r3
  80dbe8:	0815be80 	call	815be8 <__gedf2>
  80dbec:	002b883a 	mov	r21,zero
  80dbf0:	0023883a 	mov	r17,zero
  80dbf4:	1000bf16 	blt	r2,zero,80def4 <_dtoa_r+0x1060>
  80dbf8:	d9802217 	ldw	r6,136(sp)
  80dbfc:	ddc00717 	ldw	r23,28(sp)
  80dc00:	018c303a 	nor	r6,zero,r6
  80dc04:	d9800515 	stw	r6,20(sp)
  80dc08:	a80b883a 	mov	r5,r21
  80dc0c:	e009883a 	mov	r4,fp
  80dc10:	080fe980 	call	80fe98 <_Bfree>
  80dc14:	883e4926 	beq	r17,zero,80d53c <__alt_data_end+0xff80d53c>
  80dc18:	003fad06 	br	80dad0 <__alt_data_end+0xff80dad0>
  80dc1c:	d9c01117 	ldw	r7,68(sp)
  80dc20:	3801bc26 	beq	r7,zero,80e314 <_dtoa_r+0x1480>
  80dc24:	10810cc4 	addi	r2,r2,1075
  80dc28:	dd400a17 	ldw	r21,40(sp)
  80dc2c:	dd000817 	ldw	r20,32(sp)
  80dc30:	003f0a06 	br	80d85c <__alt_data_end+0xff80d85c>
  80dc34:	00800704 	movi	r2,28
  80dc38:	d9000817 	ldw	r4,32(sp)
  80dc3c:	a0a9883a 	add	r20,r20,r2
  80dc40:	b0ad883a 	add	r22,r22,r2
  80dc44:	2089883a 	add	r4,r4,r2
  80dc48:	d9000815 	stw	r4,32(sp)
  80dc4c:	003f5106 	br	80d994 <__alt_data_end+0xff80d994>
  80dc50:	d8c00317 	ldw	r3,12(sp)
  80dc54:	b8c1fc0e 	bge	r23,r3,80e448 <_dtoa_r+0x15b4>
  80dc58:	0027883a 	mov	r19,zero
  80dc5c:	b805883a 	mov	r2,r23
  80dc60:	003f3e06 	br	80d95c <__alt_data_end+0xff80d95c>
  80dc64:	880b883a 	mov	r5,r17
  80dc68:	e009883a 	mov	r4,fp
  80dc6c:	000f883a 	mov	r7,zero
  80dc70:	01800284 	movi	r6,10
  80dc74:	080fec00 	call	80fec0 <__multadd>
  80dc78:	d9000c17 	ldw	r4,48(sp)
  80dc7c:	1023883a 	mov	r17,r2
  80dc80:	0102040e 	bge	zero,r4,80e494 <_dtoa_r+0x1600>
  80dc84:	d9000615 	stw	r4,24(sp)
  80dc88:	0500050e 	bge	zero,r20,80dca0 <_dtoa_r+0xe0c>
  80dc8c:	880b883a 	mov	r5,r17
  80dc90:	a00d883a 	mov	r6,r20
  80dc94:	e009883a 	mov	r4,fp
  80dc98:	08105700 	call	810570 <__lshift>
  80dc9c:	1023883a 	mov	r17,r2
  80dca0:	9801241e 	bne	r19,zero,80e134 <_dtoa_r+0x12a0>
  80dca4:	8829883a 	mov	r20,r17
  80dca8:	d9000617 	ldw	r4,24(sp)
  80dcac:	dcc00717 	ldw	r19,28(sp)
  80dcb0:	9480004c 	andi	r18,r18,1
  80dcb4:	20bfffc4 	addi	r2,r4,-1
  80dcb8:	9885883a 	add	r2,r19,r2
  80dcbc:	d8800415 	stw	r2,16(sp)
  80dcc0:	dc800615 	stw	r18,24(sp)
  80dcc4:	a80b883a 	mov	r5,r21
  80dcc8:	8009883a 	mov	r4,r16
  80dccc:	080cc940 	call	80cc94 <quorem>
  80dcd0:	880b883a 	mov	r5,r17
  80dcd4:	8009883a 	mov	r4,r16
  80dcd8:	102f883a 	mov	r23,r2
  80dcdc:	08106b80 	call	8106b8 <__mcmp>
  80dce0:	a80b883a 	mov	r5,r21
  80dce4:	a00d883a 	mov	r6,r20
  80dce8:	e009883a 	mov	r4,fp
  80dcec:	102d883a 	mov	r22,r2
  80dcf0:	08107180 	call	810718 <__mdiff>
  80dcf4:	1007883a 	mov	r3,r2
  80dcf8:	10800317 	ldw	r2,12(r2)
  80dcfc:	bc800c04 	addi	r18,r23,48
  80dd00:	180b883a 	mov	r5,r3
  80dd04:	10004e1e 	bne	r2,zero,80de40 <_dtoa_r+0xfac>
  80dd08:	8009883a 	mov	r4,r16
  80dd0c:	d8c01615 	stw	r3,88(sp)
  80dd10:	08106b80 	call	8106b8 <__mcmp>
  80dd14:	d8c01617 	ldw	r3,88(sp)
  80dd18:	e009883a 	mov	r4,fp
  80dd1c:	d8801615 	stw	r2,88(sp)
  80dd20:	180b883a 	mov	r5,r3
  80dd24:	080fe980 	call	80fe98 <_Bfree>
  80dd28:	d8801617 	ldw	r2,88(sp)
  80dd2c:	1000041e 	bne	r2,zero,80dd40 <_dtoa_r+0xeac>
  80dd30:	d9800317 	ldw	r6,12(sp)
  80dd34:	3000021e 	bne	r6,zero,80dd40 <_dtoa_r+0xeac>
  80dd38:	d8c00617 	ldw	r3,24(sp)
  80dd3c:	18003726 	beq	r3,zero,80de1c <_dtoa_r+0xf88>
  80dd40:	b0002016 	blt	r22,zero,80ddc4 <_dtoa_r+0xf30>
  80dd44:	b000041e 	bne	r22,zero,80dd58 <_dtoa_r+0xec4>
  80dd48:	d9000317 	ldw	r4,12(sp)
  80dd4c:	2000021e 	bne	r4,zero,80dd58 <_dtoa_r+0xec4>
  80dd50:	d8c00617 	ldw	r3,24(sp)
  80dd54:	18001b26 	beq	r3,zero,80ddc4 <_dtoa_r+0xf30>
  80dd58:	00810716 	blt	zero,r2,80e178 <_dtoa_r+0x12e4>
  80dd5c:	d8c00417 	ldw	r3,16(sp)
  80dd60:	9d800044 	addi	r22,r19,1
  80dd64:	9c800005 	stb	r18,0(r19)
  80dd68:	b02f883a 	mov	r23,r22
  80dd6c:	98c10626 	beq	r19,r3,80e188 <_dtoa_r+0x12f4>
  80dd70:	800b883a 	mov	r5,r16
  80dd74:	000f883a 	mov	r7,zero
  80dd78:	01800284 	movi	r6,10
  80dd7c:	e009883a 	mov	r4,fp
  80dd80:	080fec00 	call	80fec0 <__multadd>
  80dd84:	1021883a 	mov	r16,r2
  80dd88:	000f883a 	mov	r7,zero
  80dd8c:	01800284 	movi	r6,10
  80dd90:	880b883a 	mov	r5,r17
  80dd94:	e009883a 	mov	r4,fp
  80dd98:	8d002526 	beq	r17,r20,80de30 <_dtoa_r+0xf9c>
  80dd9c:	080fec00 	call	80fec0 <__multadd>
  80dda0:	a00b883a 	mov	r5,r20
  80dda4:	000f883a 	mov	r7,zero
  80dda8:	01800284 	movi	r6,10
  80ddac:	e009883a 	mov	r4,fp
  80ddb0:	1023883a 	mov	r17,r2
  80ddb4:	080fec00 	call	80fec0 <__multadd>
  80ddb8:	1029883a 	mov	r20,r2
  80ddbc:	b027883a 	mov	r19,r22
  80ddc0:	003fc006 	br	80dcc4 <__alt_data_end+0xff80dcc4>
  80ddc4:	9011883a 	mov	r8,r18
  80ddc8:	00800e0e 	bge	zero,r2,80de04 <_dtoa_r+0xf70>
  80ddcc:	800b883a 	mov	r5,r16
  80ddd0:	01800044 	movi	r6,1
  80ddd4:	e009883a 	mov	r4,fp
  80ddd8:	da001715 	stw	r8,92(sp)
  80dddc:	08105700 	call	810570 <__lshift>
  80dde0:	a80b883a 	mov	r5,r21
  80dde4:	1009883a 	mov	r4,r2
  80dde8:	1021883a 	mov	r16,r2
  80ddec:	08106b80 	call	8106b8 <__mcmp>
  80ddf0:	da001717 	ldw	r8,92(sp)
  80ddf4:	0081960e 	bge	zero,r2,80e450 <_dtoa_r+0x15bc>
  80ddf8:	00800e44 	movi	r2,57
  80ddfc:	40817026 	beq	r8,r2,80e3c0 <_dtoa_r+0x152c>
  80de00:	ba000c44 	addi	r8,r23,49
  80de04:	8825883a 	mov	r18,r17
  80de08:	9dc00044 	addi	r23,r19,1
  80de0c:	9a000005 	stb	r8,0(r19)
  80de10:	a023883a 	mov	r17,r20
  80de14:	dc000915 	stw	r16,36(sp)
  80de18:	003f2406 	br	80daac <__alt_data_end+0xff80daac>
  80de1c:	00800e44 	movi	r2,57
  80de20:	9011883a 	mov	r8,r18
  80de24:	90816626 	beq	r18,r2,80e3c0 <_dtoa_r+0x152c>
  80de28:	05bff516 	blt	zero,r22,80de00 <__alt_data_end+0xff80de00>
  80de2c:	003ff506 	br	80de04 <__alt_data_end+0xff80de04>
  80de30:	080fec00 	call	80fec0 <__multadd>
  80de34:	1023883a 	mov	r17,r2
  80de38:	1029883a 	mov	r20,r2
  80de3c:	003fdf06 	br	80ddbc <__alt_data_end+0xff80ddbc>
  80de40:	e009883a 	mov	r4,fp
  80de44:	080fe980 	call	80fe98 <_Bfree>
  80de48:	00800044 	movi	r2,1
  80de4c:	003fbc06 	br	80dd40 <__alt_data_end+0xff80dd40>
  80de50:	a80b883a 	mov	r5,r21
  80de54:	8009883a 	mov	r4,r16
  80de58:	08106b80 	call	8106b8 <__mcmp>
  80de5c:	103edb0e 	bge	r2,zero,80d9cc <__alt_data_end+0xff80d9cc>
  80de60:	800b883a 	mov	r5,r16
  80de64:	000f883a 	mov	r7,zero
  80de68:	01800284 	movi	r6,10
  80de6c:	e009883a 	mov	r4,fp
  80de70:	080fec00 	call	80fec0 <__multadd>
  80de74:	1021883a 	mov	r16,r2
  80de78:	d8800517 	ldw	r2,20(sp)
  80de7c:	d8c00b17 	ldw	r3,44(sp)
  80de80:	10bfffc4 	addi	r2,r2,-1
  80de84:	d8800515 	stw	r2,20(sp)
  80de88:	183f761e 	bne	r3,zero,80dc64 <__alt_data_end+0xff80dc64>
  80de8c:	d9000c17 	ldw	r4,48(sp)
  80de90:	0101730e 	bge	zero,r4,80e460 <_dtoa_r+0x15cc>
  80de94:	d9000615 	stw	r4,24(sp)
  80de98:	003ed006 	br	80d9dc <__alt_data_end+0xff80d9dc>
  80de9c:	00800084 	movi	r2,2
  80dea0:	3081861e 	bne	r6,r2,80e4bc <_dtoa_r+0x1628>
  80dea4:	d8000b15 	stw	zero,44(sp)
  80dea8:	003f3c06 	br	80db9c <__alt_data_end+0xff80db9c>
  80deac:	dc000917 	ldw	r16,36(sp)
  80deb0:	003e9206 	br	80d8fc <__alt_data_end+0xff80d8fc>
  80deb4:	d9c00317 	ldw	r7,12(sp)
  80deb8:	00800084 	movi	r2,2
  80debc:	11fec50e 	bge	r2,r7,80d9d4 <__alt_data_end+0xff80d9d4>
  80dec0:	d9000617 	ldw	r4,24(sp)
  80dec4:	20013c1e 	bne	r4,zero,80e3b8 <_dtoa_r+0x1524>
  80dec8:	a80b883a 	mov	r5,r21
  80decc:	000f883a 	mov	r7,zero
  80ded0:	01800144 	movi	r6,5
  80ded4:	e009883a 	mov	r4,fp
  80ded8:	080fec00 	call	80fec0 <__multadd>
  80dedc:	100b883a 	mov	r5,r2
  80dee0:	8009883a 	mov	r4,r16
  80dee4:	102b883a 	mov	r21,r2
  80dee8:	08106b80 	call	8106b8 <__mcmp>
  80deec:	dc000915 	stw	r16,36(sp)
  80def0:	00bf410e 	bge	zero,r2,80dbf8 <__alt_data_end+0xff80dbf8>
  80def4:	d9c00717 	ldw	r7,28(sp)
  80def8:	00800c44 	movi	r2,49
  80defc:	38800005 	stb	r2,0(r7)
  80df00:	d8800517 	ldw	r2,20(sp)
  80df04:	3dc00044 	addi	r23,r7,1
  80df08:	10800044 	addi	r2,r2,1
  80df0c:	d8800515 	stw	r2,20(sp)
  80df10:	003f3d06 	br	80dc08 <__alt_data_end+0xff80dc08>
  80df14:	d9800517 	ldw	r6,20(sp)
  80df18:	d9c00717 	ldw	r7,28(sp)
  80df1c:	00800c44 	movi	r2,49
  80df20:	31800044 	addi	r6,r6,1
  80df24:	d9800515 	stw	r6,20(sp)
  80df28:	38800005 	stb	r2,0(r7)
  80df2c:	003edf06 	br	80daac <__alt_data_end+0xff80daac>
  80df30:	d8000b15 	stw	zero,44(sp)
  80df34:	003c9f06 	br	80d1b4 <__alt_data_end+0xff80d1b4>
  80df38:	903e7e1e 	bne	r18,zero,80d934 <__alt_data_end+0xff80d934>
  80df3c:	00800434 	movhi	r2,16
  80df40:	10bfffc4 	addi	r2,r2,-1
  80df44:	9884703a 	and	r2,r19,r2
  80df48:	1000ea1e 	bne	r2,zero,80e2f4 <_dtoa_r+0x1460>
  80df4c:	9cdffc2c 	andhi	r19,r19,32752
  80df50:	9800e826 	beq	r19,zero,80e2f4 <_dtoa_r+0x1460>
  80df54:	d9c00817 	ldw	r7,32(sp)
  80df58:	b5800044 	addi	r22,r22,1
  80df5c:	04c00044 	movi	r19,1
  80df60:	39c00044 	addi	r7,r7,1
  80df64:	d9c00815 	stw	r7,32(sp)
  80df68:	d8800d17 	ldw	r2,52(sp)
  80df6c:	103e721e 	bne	r2,zero,80d938 <__alt_data_end+0xff80d938>
  80df70:	00800044 	movi	r2,1
  80df74:	003e7906 	br	80d95c <__alt_data_end+0xff80d95c>
  80df78:	8009883a 	mov	r4,r16
  80df7c:	0816e4c0 	call	816e4c <__floatsidf>
  80df80:	d9800f17 	ldw	r6,60(sp)
  80df84:	d9c01017 	ldw	r7,64(sp)
  80df88:	1009883a 	mov	r4,r2
  80df8c:	180b883a 	mov	r5,r3
  80df90:	0815db80 	call	815db8 <__muldf3>
  80df94:	000d883a 	mov	r6,zero
  80df98:	01d00734 	movhi	r7,16412
  80df9c:	1009883a 	mov	r4,r2
  80dfa0:	180b883a 	mov	r5,r3
  80dfa4:	08149cc0 	call	8149cc <__adddf3>
  80dfa8:	047f3034 	movhi	r17,64704
  80dfac:	1021883a 	mov	r16,r2
  80dfb0:	1c63883a 	add	r17,r3,r17
  80dfb4:	d9000f17 	ldw	r4,60(sp)
  80dfb8:	d9401017 	ldw	r5,64(sp)
  80dfbc:	000d883a 	mov	r6,zero
  80dfc0:	01d00534 	movhi	r7,16404
  80dfc4:	08164d00 	call	8164d0 <__subdf3>
  80dfc8:	800d883a 	mov	r6,r16
  80dfcc:	880f883a 	mov	r7,r17
  80dfd0:	1009883a 	mov	r4,r2
  80dfd4:	180b883a 	mov	r5,r3
  80dfd8:	102b883a 	mov	r21,r2
  80dfdc:	1829883a 	mov	r20,r3
  80dfe0:	0815be80 	call	815be8 <__gedf2>
  80dfe4:	00806c16 	blt	zero,r2,80e198 <_dtoa_r+0x1304>
  80dfe8:	89e0003c 	xorhi	r7,r17,32768
  80dfec:	800d883a 	mov	r6,r16
  80dff0:	a809883a 	mov	r4,r21
  80dff4:	a00b883a 	mov	r5,r20
  80dff8:	0815cc40 	call	815cc4 <__ledf2>
  80dffc:	103d7e0e 	bge	r2,zero,80d5f8 <__alt_data_end+0xff80d5f8>
  80e000:	002b883a 	mov	r21,zero
  80e004:	0023883a 	mov	r17,zero
  80e008:	003efb06 	br	80dbf8 <__alt_data_end+0xff80dbf8>
  80e00c:	d8800717 	ldw	r2,28(sp)
  80e010:	003bd006 	br	80cf54 <__alt_data_end+0xff80cf54>
  80e014:	d9000a17 	ldw	r4,40(sp)
  80e018:	d9800d17 	ldw	r6,52(sp)
  80e01c:	dd400a15 	stw	r21,40(sp)
  80e020:	a905c83a 	sub	r2,r21,r4
  80e024:	308d883a 	add	r6,r6,r2
  80e028:	d9800d15 	stw	r6,52(sp)
  80e02c:	002b883a 	mov	r21,zero
  80e030:	003e0606 	br	80d84c <__alt_data_end+0xff80d84c>
  80e034:	9023883a 	mov	r17,r18
  80e038:	9829883a 	mov	r20,r19
  80e03c:	04000084 	movi	r16,2
  80e040:	003c9206 	br	80d28c <__alt_data_end+0xff80d28c>
  80e044:	04000044 	movi	r16,1
  80e048:	dc000c15 	stw	r16,48(sp)
  80e04c:	dc000615 	stw	r16,24(sp)
  80e050:	dc002215 	stw	r16,136(sp)
  80e054:	e0001115 	stw	zero,68(fp)
  80e058:	000b883a 	mov	r5,zero
  80e05c:	003c6906 	br	80d204 <__alt_data_end+0xff80d204>
  80e060:	3021883a 	mov	r16,r6
  80e064:	003ffb06 	br	80e054 <__alt_data_end+0xff80e054>
  80e068:	1000021e 	bne	r2,zero,80e074 <_dtoa_r+0x11e0>
  80e06c:	4200004c 	andi	r8,r8,1
  80e070:	403e7d1e 	bne	r8,zero,80da68 <__alt_data_end+0xff80da68>
  80e074:	01000c04 	movi	r4,48
  80e078:	00000106 	br	80e080 <_dtoa_r+0x11ec>
  80e07c:	102f883a 	mov	r23,r2
  80e080:	b8bfffc4 	addi	r2,r23,-1
  80e084:	10c00007 	ldb	r3,0(r2)
  80e088:	193ffc26 	beq	r3,r4,80e07c <__alt_data_end+0xff80e07c>
  80e08c:	003e8706 	br	80daac <__alt_data_end+0xff80daac>
  80e090:	d8800517 	ldw	r2,20(sp)
  80e094:	00a3c83a 	sub	r17,zero,r2
  80e098:	8800a426 	beq	r17,zero,80e32c <_dtoa_r+0x1498>
  80e09c:	888003cc 	andi	r2,r17,15
  80e0a0:	100490fa 	slli	r2,r2,3
  80e0a4:	00c020b4 	movhi	r3,130
  80e0a8:	18ee9804 	addi	r3,r3,-17824
  80e0ac:	1885883a 	add	r2,r3,r2
  80e0b0:	11800017 	ldw	r6,0(r2)
  80e0b4:	11c00117 	ldw	r7,4(r2)
  80e0b8:	9009883a 	mov	r4,r18
  80e0bc:	980b883a 	mov	r5,r19
  80e0c0:	8823d13a 	srai	r17,r17,4
  80e0c4:	0815db80 	call	815db8 <__muldf3>
  80e0c8:	d8800f15 	stw	r2,60(sp)
  80e0cc:	d8c01015 	stw	r3,64(sp)
  80e0d0:	8800e826 	beq	r17,zero,80e474 <_dtoa_r+0x15e0>
  80e0d4:	050020b4 	movhi	r20,130
  80e0d8:	a52e8e04 	addi	r20,r20,-17864
  80e0dc:	04000084 	movi	r16,2
  80e0e0:	8980004c 	andi	r6,r17,1
  80e0e4:	1009883a 	mov	r4,r2
  80e0e8:	8823d07a 	srai	r17,r17,1
  80e0ec:	180b883a 	mov	r5,r3
  80e0f0:	30000426 	beq	r6,zero,80e104 <_dtoa_r+0x1270>
  80e0f4:	a1800017 	ldw	r6,0(r20)
  80e0f8:	a1c00117 	ldw	r7,4(r20)
  80e0fc:	84000044 	addi	r16,r16,1
  80e100:	0815db80 	call	815db8 <__muldf3>
  80e104:	a5000204 	addi	r20,r20,8
  80e108:	883ff51e 	bne	r17,zero,80e0e0 <__alt_data_end+0xff80e0e0>
  80e10c:	d8800f15 	stw	r2,60(sp)
  80e110:	d8c01015 	stw	r3,64(sp)
  80e114:	003c7606 	br	80d2f0 <__alt_data_end+0xff80d2f0>
  80e118:	00c00c04 	movi	r3,48
  80e11c:	10c00005 	stb	r3,0(r2)
  80e120:	d8c00517 	ldw	r3,20(sp)
  80e124:	bd3fffc3 	ldbu	r20,-1(r23)
  80e128:	18c00044 	addi	r3,r3,1
  80e12c:	d8c00515 	stw	r3,20(sp)
  80e130:	003db906 	br	80d818 <__alt_data_end+0xff80d818>
  80e134:	89400117 	ldw	r5,4(r17)
  80e138:	e009883a 	mov	r4,fp
  80e13c:	080fdf00 	call	80fdf0 <_Balloc>
  80e140:	89800417 	ldw	r6,16(r17)
  80e144:	89400304 	addi	r5,r17,12
  80e148:	11000304 	addi	r4,r2,12
  80e14c:	31800084 	addi	r6,r6,2
  80e150:	318d883a 	add	r6,r6,r6
  80e154:	318d883a 	add	r6,r6,r6
  80e158:	1027883a 	mov	r19,r2
  80e15c:	080fca80 	call	80fca8 <memcpy>
  80e160:	01800044 	movi	r6,1
  80e164:	980b883a 	mov	r5,r19
  80e168:	e009883a 	mov	r4,fp
  80e16c:	08105700 	call	810570 <__lshift>
  80e170:	1029883a 	mov	r20,r2
  80e174:	003ecc06 	br	80dca8 <__alt_data_end+0xff80dca8>
  80e178:	00800e44 	movi	r2,57
  80e17c:	90809026 	beq	r18,r2,80e3c0 <_dtoa_r+0x152c>
  80e180:	92000044 	addi	r8,r18,1
  80e184:	003f1f06 	br	80de04 <__alt_data_end+0xff80de04>
  80e188:	9011883a 	mov	r8,r18
  80e18c:	8825883a 	mov	r18,r17
  80e190:	a023883a 	mov	r17,r20
  80e194:	003e2906 	br	80da3c <__alt_data_end+0xff80da3c>
  80e198:	002b883a 	mov	r21,zero
  80e19c:	0023883a 	mov	r17,zero
  80e1a0:	003f5406 	br	80def4 <__alt_data_end+0xff80def4>
  80e1a4:	61bfffc4 	addi	r6,r12,-1
  80e1a8:	300490fa 	slli	r2,r6,3
  80e1ac:	00c020b4 	movhi	r3,130
  80e1b0:	18ee9804 	addi	r3,r3,-17824
  80e1b4:	1885883a 	add	r2,r3,r2
  80e1b8:	11000017 	ldw	r4,0(r2)
  80e1bc:	11400117 	ldw	r5,4(r2)
  80e1c0:	d8800717 	ldw	r2,28(sp)
  80e1c4:	880f883a 	mov	r7,r17
  80e1c8:	d9801215 	stw	r6,72(sp)
  80e1cc:	800d883a 	mov	r6,r16
  80e1d0:	db001615 	stw	r12,88(sp)
  80e1d4:	15c00044 	addi	r23,r2,1
  80e1d8:	0815db80 	call	815db8 <__muldf3>
  80e1dc:	d9401017 	ldw	r5,64(sp)
  80e1e0:	d9000f17 	ldw	r4,60(sp)
  80e1e4:	d8c01515 	stw	r3,84(sp)
  80e1e8:	d8801415 	stw	r2,80(sp)
  80e1ec:	0816dcc0 	call	816dcc <__fixdfsi>
  80e1f0:	1009883a 	mov	r4,r2
  80e1f4:	1021883a 	mov	r16,r2
  80e1f8:	0816e4c0 	call	816e4c <__floatsidf>
  80e1fc:	d9000f17 	ldw	r4,60(sp)
  80e200:	d9401017 	ldw	r5,64(sp)
  80e204:	100d883a 	mov	r6,r2
  80e208:	180f883a 	mov	r7,r3
  80e20c:	08164d00 	call	8164d0 <__subdf3>
  80e210:	1829883a 	mov	r20,r3
  80e214:	d8c00717 	ldw	r3,28(sp)
  80e218:	84000c04 	addi	r16,r16,48
  80e21c:	1023883a 	mov	r17,r2
  80e220:	1c000005 	stb	r16,0(r3)
  80e224:	db001617 	ldw	r12,88(sp)
  80e228:	00800044 	movi	r2,1
  80e22c:	60802226 	beq	r12,r2,80e2b8 <_dtoa_r+0x1424>
  80e230:	d9c00717 	ldw	r7,28(sp)
  80e234:	8805883a 	mov	r2,r17
  80e238:	b82b883a 	mov	r21,r23
  80e23c:	3b19883a 	add	r12,r7,r12
  80e240:	6023883a 	mov	r17,r12
  80e244:	a007883a 	mov	r3,r20
  80e248:	dc800f15 	stw	r18,60(sp)
  80e24c:	000d883a 	mov	r6,zero
  80e250:	01d00934 	movhi	r7,16420
  80e254:	1009883a 	mov	r4,r2
  80e258:	180b883a 	mov	r5,r3
  80e25c:	0815db80 	call	815db8 <__muldf3>
  80e260:	180b883a 	mov	r5,r3
  80e264:	1009883a 	mov	r4,r2
  80e268:	1829883a 	mov	r20,r3
  80e26c:	1025883a 	mov	r18,r2
  80e270:	0816dcc0 	call	816dcc <__fixdfsi>
  80e274:	1009883a 	mov	r4,r2
  80e278:	1021883a 	mov	r16,r2
  80e27c:	0816e4c0 	call	816e4c <__floatsidf>
  80e280:	100d883a 	mov	r6,r2
  80e284:	180f883a 	mov	r7,r3
  80e288:	9009883a 	mov	r4,r18
  80e28c:	a00b883a 	mov	r5,r20
  80e290:	84000c04 	addi	r16,r16,48
  80e294:	08164d00 	call	8164d0 <__subdf3>
  80e298:	ad400044 	addi	r21,r21,1
  80e29c:	ac3fffc5 	stb	r16,-1(r21)
  80e2a0:	ac7fea1e 	bne	r21,r17,80e24c <__alt_data_end+0xff80e24c>
  80e2a4:	1023883a 	mov	r17,r2
  80e2a8:	d8801217 	ldw	r2,72(sp)
  80e2ac:	dc800f17 	ldw	r18,60(sp)
  80e2b0:	1829883a 	mov	r20,r3
  80e2b4:	b8af883a 	add	r23,r23,r2
  80e2b8:	d9001417 	ldw	r4,80(sp)
  80e2bc:	d9401517 	ldw	r5,84(sp)
  80e2c0:	000d883a 	mov	r6,zero
  80e2c4:	01cff834 	movhi	r7,16352
  80e2c8:	08149cc0 	call	8149cc <__adddf3>
  80e2cc:	880d883a 	mov	r6,r17
  80e2d0:	a00f883a 	mov	r7,r20
  80e2d4:	1009883a 	mov	r4,r2
  80e2d8:	180b883a 	mov	r5,r3
  80e2dc:	0815cc40 	call	815cc4 <__ledf2>
  80e2e0:	10003e0e 	bge	r2,zero,80e3dc <_dtoa_r+0x1548>
  80e2e4:	d9001317 	ldw	r4,76(sp)
  80e2e8:	bd3fffc3 	ldbu	r20,-1(r23)
  80e2ec:	d9000515 	stw	r4,20(sp)
  80e2f0:	003d3b06 	br	80d7e0 <__alt_data_end+0xff80d7e0>
  80e2f4:	0027883a 	mov	r19,zero
  80e2f8:	003f1b06 	br	80df68 <__alt_data_end+0xff80df68>
  80e2fc:	d8800817 	ldw	r2,32(sp)
  80e300:	11e9c83a 	sub	r20,r2,r7
  80e304:	0005883a 	mov	r2,zero
  80e308:	003d5406 	br	80d85c <__alt_data_end+0xff80d85c>
  80e30c:	00800044 	movi	r2,1
  80e310:	003dc706 	br	80da30 <__alt_data_end+0xff80da30>
  80e314:	d8c00217 	ldw	r3,8(sp)
  80e318:	00800d84 	movi	r2,54
  80e31c:	dd400a17 	ldw	r21,40(sp)
  80e320:	10c5c83a 	sub	r2,r2,r3
  80e324:	dd000817 	ldw	r20,32(sp)
  80e328:	003d4c06 	br	80d85c <__alt_data_end+0xff80d85c>
  80e32c:	dc800f15 	stw	r18,60(sp)
  80e330:	dcc01015 	stw	r19,64(sp)
  80e334:	04000084 	movi	r16,2
  80e338:	003bed06 	br	80d2f0 <__alt_data_end+0xff80d2f0>
  80e33c:	d9000617 	ldw	r4,24(sp)
  80e340:	203f0d26 	beq	r4,zero,80df78 <__alt_data_end+0xff80df78>
  80e344:	d9800c17 	ldw	r6,48(sp)
  80e348:	01bcab0e 	bge	zero,r6,80d5f8 <__alt_data_end+0xff80d5f8>
  80e34c:	d9401017 	ldw	r5,64(sp)
  80e350:	d9000f17 	ldw	r4,60(sp)
  80e354:	000d883a 	mov	r6,zero
  80e358:	01d00934 	movhi	r7,16420
  80e35c:	0815db80 	call	815db8 <__muldf3>
  80e360:	81000044 	addi	r4,r16,1
  80e364:	d8800f15 	stw	r2,60(sp)
  80e368:	d8c01015 	stw	r3,64(sp)
  80e36c:	0816e4c0 	call	816e4c <__floatsidf>
  80e370:	d9800f17 	ldw	r6,60(sp)
  80e374:	d9c01017 	ldw	r7,64(sp)
  80e378:	1009883a 	mov	r4,r2
  80e37c:	180b883a 	mov	r5,r3
  80e380:	0815db80 	call	815db8 <__muldf3>
  80e384:	01d00734 	movhi	r7,16412
  80e388:	000d883a 	mov	r6,zero
  80e38c:	1009883a 	mov	r4,r2
  80e390:	180b883a 	mov	r5,r3
  80e394:	08149cc0 	call	8149cc <__adddf3>
  80e398:	d9c00517 	ldw	r7,20(sp)
  80e39c:	047f3034 	movhi	r17,64704
  80e3a0:	1021883a 	mov	r16,r2
  80e3a4:	39ffffc4 	addi	r7,r7,-1
  80e3a8:	d9c01315 	stw	r7,76(sp)
  80e3ac:	1c63883a 	add	r17,r3,r17
  80e3b0:	db000c17 	ldw	r12,48(sp)
  80e3b4:	003bea06 	br	80d360 <__alt_data_end+0xff80d360>
  80e3b8:	dc000915 	stw	r16,36(sp)
  80e3bc:	003e0e06 	br	80dbf8 <__alt_data_end+0xff80dbf8>
  80e3c0:	01000e44 	movi	r4,57
  80e3c4:	8825883a 	mov	r18,r17
  80e3c8:	9dc00044 	addi	r23,r19,1
  80e3cc:	99000005 	stb	r4,0(r19)
  80e3d0:	a023883a 	mov	r17,r20
  80e3d4:	dc000915 	stw	r16,36(sp)
  80e3d8:	003da406 	br	80da6c <__alt_data_end+0xff80da6c>
  80e3dc:	d9801417 	ldw	r6,80(sp)
  80e3e0:	d9c01517 	ldw	r7,84(sp)
  80e3e4:	0009883a 	mov	r4,zero
  80e3e8:	014ff834 	movhi	r5,16352
  80e3ec:	08164d00 	call	8164d0 <__subdf3>
  80e3f0:	880d883a 	mov	r6,r17
  80e3f4:	a00f883a 	mov	r7,r20
  80e3f8:	1009883a 	mov	r4,r2
  80e3fc:	180b883a 	mov	r5,r3
  80e400:	0815be80 	call	815be8 <__gedf2>
  80e404:	00bc7c0e 	bge	zero,r2,80d5f8 <__alt_data_end+0xff80d5f8>
  80e408:	01000c04 	movi	r4,48
  80e40c:	00000106 	br	80e414 <_dtoa_r+0x1580>
  80e410:	102f883a 	mov	r23,r2
  80e414:	b8bfffc4 	addi	r2,r23,-1
  80e418:	10c00007 	ldb	r3,0(r2)
  80e41c:	193ffc26 	beq	r3,r4,80e410 <__alt_data_end+0xff80e410>
  80e420:	d9801317 	ldw	r6,76(sp)
  80e424:	d9800515 	stw	r6,20(sp)
  80e428:	003c4406 	br	80d53c <__alt_data_end+0xff80d53c>
  80e42c:	d9801317 	ldw	r6,76(sp)
  80e430:	d9800515 	stw	r6,20(sp)
  80e434:	003cea06 	br	80d7e0 <__alt_data_end+0xff80d7e0>
  80e438:	dd800f17 	ldw	r22,60(sp)
  80e43c:	dcc01017 	ldw	r19,64(sp)
  80e440:	dc801217 	ldw	r18,72(sp)
  80e444:	003c6c06 	br	80d5f8 <__alt_data_end+0xff80d5f8>
  80e448:	903e031e 	bne	r18,zero,80dc58 <__alt_data_end+0xff80dc58>
  80e44c:	003ebb06 	br	80df3c <__alt_data_end+0xff80df3c>
  80e450:	103e6c1e 	bne	r2,zero,80de04 <__alt_data_end+0xff80de04>
  80e454:	4080004c 	andi	r2,r8,1
  80e458:	103e6a26 	beq	r2,zero,80de04 <__alt_data_end+0xff80de04>
  80e45c:	003e6606 	br	80ddf8 <__alt_data_end+0xff80ddf8>
  80e460:	d8c00317 	ldw	r3,12(sp)
  80e464:	00800084 	movi	r2,2
  80e468:	10c02916 	blt	r2,r3,80e510 <_dtoa_r+0x167c>
  80e46c:	d9000c17 	ldw	r4,48(sp)
  80e470:	003e8806 	br	80de94 <__alt_data_end+0xff80de94>
  80e474:	04000084 	movi	r16,2
  80e478:	003b9d06 	br	80d2f0 <__alt_data_end+0xff80d2f0>
  80e47c:	d9001317 	ldw	r4,76(sp)
  80e480:	d9000515 	stw	r4,20(sp)
  80e484:	003cd606 	br	80d7e0 <__alt_data_end+0xff80d7e0>
  80e488:	d8801317 	ldw	r2,76(sp)
  80e48c:	d8800515 	stw	r2,20(sp)
  80e490:	003c2a06 	br	80d53c <__alt_data_end+0xff80d53c>
  80e494:	d9800317 	ldw	r6,12(sp)
  80e498:	00800084 	movi	r2,2
  80e49c:	11801516 	blt	r2,r6,80e4f4 <_dtoa_r+0x1660>
  80e4a0:	d9c00c17 	ldw	r7,48(sp)
  80e4a4:	d9c00615 	stw	r7,24(sp)
  80e4a8:	003df706 	br	80dc88 <__alt_data_end+0xff80dc88>
  80e4ac:	193d3926 	beq	r3,r4,80d994 <__alt_data_end+0xff80d994>
  80e4b0:	00c00f04 	movi	r3,60
  80e4b4:	1885c83a 	sub	r2,r3,r2
  80e4b8:	003ddf06 	br	80dc38 <__alt_data_end+0xff80dc38>
  80e4bc:	e009883a 	mov	r4,fp
  80e4c0:	e0001115 	stw	zero,68(fp)
  80e4c4:	000b883a 	mov	r5,zero
  80e4c8:	080fdf00 	call	80fdf0 <_Balloc>
  80e4cc:	d8800715 	stw	r2,28(sp)
  80e4d0:	d8c00717 	ldw	r3,28(sp)
  80e4d4:	00bfffc4 	movi	r2,-1
  80e4d8:	01000044 	movi	r4,1
  80e4dc:	d8800c15 	stw	r2,48(sp)
  80e4e0:	e0c01015 	stw	r3,64(fp)
  80e4e4:	d9000b15 	stw	r4,44(sp)
  80e4e8:	d8800615 	stw	r2,24(sp)
  80e4ec:	d8002215 	stw	zero,136(sp)
  80e4f0:	003c4106 	br	80d5f8 <__alt_data_end+0xff80d5f8>
  80e4f4:	d8c00c17 	ldw	r3,48(sp)
  80e4f8:	d8c00615 	stw	r3,24(sp)
  80e4fc:	003e7006 	br	80dec0 <__alt_data_end+0xff80dec0>
  80e500:	04400044 	movi	r17,1
  80e504:	003b2006 	br	80d188 <__alt_data_end+0xff80d188>
  80e508:	000b883a 	mov	r5,zero
  80e50c:	003b3d06 	br	80d204 <__alt_data_end+0xff80d204>
  80e510:	d8800c17 	ldw	r2,48(sp)
  80e514:	d8800615 	stw	r2,24(sp)
  80e518:	003e6906 	br	80dec0 <__alt_data_end+0xff80dec0>

0080e51c <__sflush_r>:
  80e51c:	2880030b 	ldhu	r2,12(r5)
  80e520:	defffb04 	addi	sp,sp,-20
  80e524:	dcc00315 	stw	r19,12(sp)
  80e528:	dc400115 	stw	r17,4(sp)
  80e52c:	dfc00415 	stw	ra,16(sp)
  80e530:	dc800215 	stw	r18,8(sp)
  80e534:	dc000015 	stw	r16,0(sp)
  80e538:	10c0020c 	andi	r3,r2,8
  80e53c:	2823883a 	mov	r17,r5
  80e540:	2027883a 	mov	r19,r4
  80e544:	1800311e 	bne	r3,zero,80e60c <__sflush_r+0xf0>
  80e548:	28c00117 	ldw	r3,4(r5)
  80e54c:	10820014 	ori	r2,r2,2048
  80e550:	2880030d 	sth	r2,12(r5)
  80e554:	00c04b0e 	bge	zero,r3,80e684 <__sflush_r+0x168>
  80e558:	8a000a17 	ldw	r8,40(r17)
  80e55c:	40002326 	beq	r8,zero,80e5ec <__sflush_r+0xd0>
  80e560:	9c000017 	ldw	r16,0(r19)
  80e564:	10c4000c 	andi	r3,r2,4096
  80e568:	98000015 	stw	zero,0(r19)
  80e56c:	18004826 	beq	r3,zero,80e690 <__sflush_r+0x174>
  80e570:	89801417 	ldw	r6,80(r17)
  80e574:	10c0010c 	andi	r3,r2,4
  80e578:	18000626 	beq	r3,zero,80e594 <__sflush_r+0x78>
  80e57c:	88c00117 	ldw	r3,4(r17)
  80e580:	88800c17 	ldw	r2,48(r17)
  80e584:	30cdc83a 	sub	r6,r6,r3
  80e588:	10000226 	beq	r2,zero,80e594 <__sflush_r+0x78>
  80e58c:	88800f17 	ldw	r2,60(r17)
  80e590:	308dc83a 	sub	r6,r6,r2
  80e594:	89400717 	ldw	r5,28(r17)
  80e598:	000f883a 	mov	r7,zero
  80e59c:	9809883a 	mov	r4,r19
  80e5a0:	403ee83a 	callr	r8
  80e5a4:	00ffffc4 	movi	r3,-1
  80e5a8:	10c04426 	beq	r2,r3,80e6bc <__sflush_r+0x1a0>
  80e5ac:	88c0030b 	ldhu	r3,12(r17)
  80e5b0:	89000417 	ldw	r4,16(r17)
  80e5b4:	88000115 	stw	zero,4(r17)
  80e5b8:	197dffcc 	andi	r5,r3,63487
  80e5bc:	8940030d 	sth	r5,12(r17)
  80e5c0:	89000015 	stw	r4,0(r17)
  80e5c4:	18c4000c 	andi	r3,r3,4096
  80e5c8:	18002c1e 	bne	r3,zero,80e67c <__sflush_r+0x160>
  80e5cc:	89400c17 	ldw	r5,48(r17)
  80e5d0:	9c000015 	stw	r16,0(r19)
  80e5d4:	28000526 	beq	r5,zero,80e5ec <__sflush_r+0xd0>
  80e5d8:	88801004 	addi	r2,r17,64
  80e5dc:	28800226 	beq	r5,r2,80e5e8 <__sflush_r+0xcc>
  80e5e0:	9809883a 	mov	r4,r19
  80e5e4:	080ec880 	call	80ec88 <_free_r>
  80e5e8:	88000c15 	stw	zero,48(r17)
  80e5ec:	0005883a 	mov	r2,zero
  80e5f0:	dfc00417 	ldw	ra,16(sp)
  80e5f4:	dcc00317 	ldw	r19,12(sp)
  80e5f8:	dc800217 	ldw	r18,8(sp)
  80e5fc:	dc400117 	ldw	r17,4(sp)
  80e600:	dc000017 	ldw	r16,0(sp)
  80e604:	dec00504 	addi	sp,sp,20
  80e608:	f800283a 	ret
  80e60c:	2c800417 	ldw	r18,16(r5)
  80e610:	903ff626 	beq	r18,zero,80e5ec <__alt_data_end+0xff80e5ec>
  80e614:	2c000017 	ldw	r16,0(r5)
  80e618:	108000cc 	andi	r2,r2,3
  80e61c:	2c800015 	stw	r18,0(r5)
  80e620:	84a1c83a 	sub	r16,r16,r18
  80e624:	1000131e 	bne	r2,zero,80e674 <__sflush_r+0x158>
  80e628:	28800517 	ldw	r2,20(r5)
  80e62c:	88800215 	stw	r2,8(r17)
  80e630:	04000316 	blt	zero,r16,80e640 <__sflush_r+0x124>
  80e634:	003fed06 	br	80e5ec <__alt_data_end+0xff80e5ec>
  80e638:	90a5883a 	add	r18,r18,r2
  80e63c:	043feb0e 	bge	zero,r16,80e5ec <__alt_data_end+0xff80e5ec>
  80e640:	88800917 	ldw	r2,36(r17)
  80e644:	89400717 	ldw	r5,28(r17)
  80e648:	800f883a 	mov	r7,r16
  80e64c:	900d883a 	mov	r6,r18
  80e650:	9809883a 	mov	r4,r19
  80e654:	103ee83a 	callr	r2
  80e658:	80a1c83a 	sub	r16,r16,r2
  80e65c:	00bff616 	blt	zero,r2,80e638 <__alt_data_end+0xff80e638>
  80e660:	88c0030b 	ldhu	r3,12(r17)
  80e664:	00bfffc4 	movi	r2,-1
  80e668:	18c01014 	ori	r3,r3,64
  80e66c:	88c0030d 	sth	r3,12(r17)
  80e670:	003fdf06 	br	80e5f0 <__alt_data_end+0xff80e5f0>
  80e674:	0005883a 	mov	r2,zero
  80e678:	003fec06 	br	80e62c <__alt_data_end+0xff80e62c>
  80e67c:	88801415 	stw	r2,80(r17)
  80e680:	003fd206 	br	80e5cc <__alt_data_end+0xff80e5cc>
  80e684:	28c00f17 	ldw	r3,60(r5)
  80e688:	00ffb316 	blt	zero,r3,80e558 <__alt_data_end+0xff80e558>
  80e68c:	003fd706 	br	80e5ec <__alt_data_end+0xff80e5ec>
  80e690:	89400717 	ldw	r5,28(r17)
  80e694:	000d883a 	mov	r6,zero
  80e698:	01c00044 	movi	r7,1
  80e69c:	9809883a 	mov	r4,r19
  80e6a0:	403ee83a 	callr	r8
  80e6a4:	100d883a 	mov	r6,r2
  80e6a8:	00bfffc4 	movi	r2,-1
  80e6ac:	30801426 	beq	r6,r2,80e700 <__sflush_r+0x1e4>
  80e6b0:	8880030b 	ldhu	r2,12(r17)
  80e6b4:	8a000a17 	ldw	r8,40(r17)
  80e6b8:	003fae06 	br	80e574 <__alt_data_end+0xff80e574>
  80e6bc:	98c00017 	ldw	r3,0(r19)
  80e6c0:	183fba26 	beq	r3,zero,80e5ac <__alt_data_end+0xff80e5ac>
  80e6c4:	01000744 	movi	r4,29
  80e6c8:	19000626 	beq	r3,r4,80e6e4 <__sflush_r+0x1c8>
  80e6cc:	01000584 	movi	r4,22
  80e6d0:	19000426 	beq	r3,r4,80e6e4 <__sflush_r+0x1c8>
  80e6d4:	88c0030b 	ldhu	r3,12(r17)
  80e6d8:	18c01014 	ori	r3,r3,64
  80e6dc:	88c0030d 	sth	r3,12(r17)
  80e6e0:	003fc306 	br	80e5f0 <__alt_data_end+0xff80e5f0>
  80e6e4:	8880030b 	ldhu	r2,12(r17)
  80e6e8:	88c00417 	ldw	r3,16(r17)
  80e6ec:	88000115 	stw	zero,4(r17)
  80e6f0:	10bdffcc 	andi	r2,r2,63487
  80e6f4:	8880030d 	sth	r2,12(r17)
  80e6f8:	88c00015 	stw	r3,0(r17)
  80e6fc:	003fb306 	br	80e5cc <__alt_data_end+0xff80e5cc>
  80e700:	98800017 	ldw	r2,0(r19)
  80e704:	103fea26 	beq	r2,zero,80e6b0 <__alt_data_end+0xff80e6b0>
  80e708:	00c00744 	movi	r3,29
  80e70c:	10c00226 	beq	r2,r3,80e718 <__sflush_r+0x1fc>
  80e710:	00c00584 	movi	r3,22
  80e714:	10c0031e 	bne	r2,r3,80e724 <__sflush_r+0x208>
  80e718:	9c000015 	stw	r16,0(r19)
  80e71c:	0005883a 	mov	r2,zero
  80e720:	003fb306 	br	80e5f0 <__alt_data_end+0xff80e5f0>
  80e724:	88c0030b 	ldhu	r3,12(r17)
  80e728:	3005883a 	mov	r2,r6
  80e72c:	18c01014 	ori	r3,r3,64
  80e730:	88c0030d 	sth	r3,12(r17)
  80e734:	003fae06 	br	80e5f0 <__alt_data_end+0xff80e5f0>

0080e738 <_fflush_r>:
  80e738:	defffd04 	addi	sp,sp,-12
  80e73c:	dc000115 	stw	r16,4(sp)
  80e740:	dfc00215 	stw	ra,8(sp)
  80e744:	2021883a 	mov	r16,r4
  80e748:	20000226 	beq	r4,zero,80e754 <_fflush_r+0x1c>
  80e74c:	20800e17 	ldw	r2,56(r4)
  80e750:	10000c26 	beq	r2,zero,80e784 <_fflush_r+0x4c>
  80e754:	2880030f 	ldh	r2,12(r5)
  80e758:	1000051e 	bne	r2,zero,80e770 <_fflush_r+0x38>
  80e75c:	0005883a 	mov	r2,zero
  80e760:	dfc00217 	ldw	ra,8(sp)
  80e764:	dc000117 	ldw	r16,4(sp)
  80e768:	dec00304 	addi	sp,sp,12
  80e76c:	f800283a 	ret
  80e770:	8009883a 	mov	r4,r16
  80e774:	dfc00217 	ldw	ra,8(sp)
  80e778:	dc000117 	ldw	r16,4(sp)
  80e77c:	dec00304 	addi	sp,sp,12
  80e780:	080e51c1 	jmpi	80e51c <__sflush_r>
  80e784:	d9400015 	stw	r5,0(sp)
  80e788:	080eb140 	call	80eb14 <__sinit>
  80e78c:	d9400017 	ldw	r5,0(sp)
  80e790:	003ff006 	br	80e754 <__alt_data_end+0xff80e754>

0080e794 <fflush>:
  80e794:	20000526 	beq	r4,zero,80e7ac <fflush+0x18>
  80e798:	008020b4 	movhi	r2,130
  80e79c:	10b30204 	addi	r2,r2,-13304
  80e7a0:	200b883a 	mov	r5,r4
  80e7a4:	11000017 	ldw	r4,0(r2)
  80e7a8:	080e7381 	jmpi	80e738 <_fflush_r>
  80e7ac:	008020b4 	movhi	r2,130
  80e7b0:	10b30104 	addi	r2,r2,-13308
  80e7b4:	11000017 	ldw	r4,0(r2)
  80e7b8:	01402074 	movhi	r5,129
  80e7bc:	2979ce04 	addi	r5,r5,-6344
  80e7c0:	080f05c1 	jmpi	80f05c <_fwalk_reent>

0080e7c4 <__fp_unlock>:
  80e7c4:	0005883a 	mov	r2,zero
  80e7c8:	f800283a 	ret

0080e7cc <_cleanup_r>:
  80e7cc:	01402074 	movhi	r5,129
  80e7d0:	294b4f04 	addi	r5,r5,11580
  80e7d4:	080f05c1 	jmpi	80f05c <_fwalk_reent>

0080e7d8 <__sinit.part.1>:
  80e7d8:	defff704 	addi	sp,sp,-36
  80e7dc:	00c02074 	movhi	r3,129
  80e7e0:	dfc00815 	stw	ra,32(sp)
  80e7e4:	ddc00715 	stw	r23,28(sp)
  80e7e8:	dd800615 	stw	r22,24(sp)
  80e7ec:	dd400515 	stw	r21,20(sp)
  80e7f0:	dd000415 	stw	r20,16(sp)
  80e7f4:	dcc00315 	stw	r19,12(sp)
  80e7f8:	dc800215 	stw	r18,8(sp)
  80e7fc:	dc400115 	stw	r17,4(sp)
  80e800:	dc000015 	stw	r16,0(sp)
  80e804:	18f9f304 	addi	r3,r3,-6196
  80e808:	24000117 	ldw	r16,4(r4)
  80e80c:	20c00f15 	stw	r3,60(r4)
  80e810:	2080bb04 	addi	r2,r4,748
  80e814:	00c000c4 	movi	r3,3
  80e818:	20c0b915 	stw	r3,740(r4)
  80e81c:	2080ba15 	stw	r2,744(r4)
  80e820:	2000b815 	stw	zero,736(r4)
  80e824:	05c00204 	movi	r23,8
  80e828:	00800104 	movi	r2,4
  80e82c:	2025883a 	mov	r18,r4
  80e830:	b80d883a 	mov	r6,r23
  80e834:	81001704 	addi	r4,r16,92
  80e838:	000b883a 	mov	r5,zero
  80e83c:	80000015 	stw	zero,0(r16)
  80e840:	80000115 	stw	zero,4(r16)
  80e844:	80000215 	stw	zero,8(r16)
  80e848:	8080030d 	sth	r2,12(r16)
  80e84c:	80001915 	stw	zero,100(r16)
  80e850:	8000038d 	sth	zero,14(r16)
  80e854:	80000415 	stw	zero,16(r16)
  80e858:	80000515 	stw	zero,20(r16)
  80e85c:	80000615 	stw	zero,24(r16)
  80e860:	080a50c0 	call	80a50c <memset>
  80e864:	05802074 	movhi	r22,129
  80e868:	94400217 	ldw	r17,8(r18)
  80e86c:	05402074 	movhi	r21,129
  80e870:	05002074 	movhi	r20,129
  80e874:	04c02074 	movhi	r19,129
  80e878:	b5848304 	addi	r22,r22,4620
  80e87c:	ad449a04 	addi	r21,r21,4712
  80e880:	a504b904 	addi	r20,r20,4836
  80e884:	9cc4d004 	addi	r19,r19,4928
  80e888:	85800815 	stw	r22,32(r16)
  80e88c:	85400915 	stw	r21,36(r16)
  80e890:	85000a15 	stw	r20,40(r16)
  80e894:	84c00b15 	stw	r19,44(r16)
  80e898:	84000715 	stw	r16,28(r16)
  80e89c:	00800284 	movi	r2,10
  80e8a0:	8880030d 	sth	r2,12(r17)
  80e8a4:	00800044 	movi	r2,1
  80e8a8:	b80d883a 	mov	r6,r23
  80e8ac:	89001704 	addi	r4,r17,92
  80e8b0:	000b883a 	mov	r5,zero
  80e8b4:	88000015 	stw	zero,0(r17)
  80e8b8:	88000115 	stw	zero,4(r17)
  80e8bc:	88000215 	stw	zero,8(r17)
  80e8c0:	88001915 	stw	zero,100(r17)
  80e8c4:	8880038d 	sth	r2,14(r17)
  80e8c8:	88000415 	stw	zero,16(r17)
  80e8cc:	88000515 	stw	zero,20(r17)
  80e8d0:	88000615 	stw	zero,24(r17)
  80e8d4:	080a50c0 	call	80a50c <memset>
  80e8d8:	94000317 	ldw	r16,12(r18)
  80e8dc:	00800484 	movi	r2,18
  80e8e0:	8c400715 	stw	r17,28(r17)
  80e8e4:	8d800815 	stw	r22,32(r17)
  80e8e8:	8d400915 	stw	r21,36(r17)
  80e8ec:	8d000a15 	stw	r20,40(r17)
  80e8f0:	8cc00b15 	stw	r19,44(r17)
  80e8f4:	8080030d 	sth	r2,12(r16)
  80e8f8:	00800084 	movi	r2,2
  80e8fc:	80000015 	stw	zero,0(r16)
  80e900:	80000115 	stw	zero,4(r16)
  80e904:	80000215 	stw	zero,8(r16)
  80e908:	80001915 	stw	zero,100(r16)
  80e90c:	8080038d 	sth	r2,14(r16)
  80e910:	80000415 	stw	zero,16(r16)
  80e914:	80000515 	stw	zero,20(r16)
  80e918:	80000615 	stw	zero,24(r16)
  80e91c:	b80d883a 	mov	r6,r23
  80e920:	000b883a 	mov	r5,zero
  80e924:	81001704 	addi	r4,r16,92
  80e928:	080a50c0 	call	80a50c <memset>
  80e92c:	00800044 	movi	r2,1
  80e930:	84000715 	stw	r16,28(r16)
  80e934:	85800815 	stw	r22,32(r16)
  80e938:	85400915 	stw	r21,36(r16)
  80e93c:	85000a15 	stw	r20,40(r16)
  80e940:	84c00b15 	stw	r19,44(r16)
  80e944:	90800e15 	stw	r2,56(r18)
  80e948:	dfc00817 	ldw	ra,32(sp)
  80e94c:	ddc00717 	ldw	r23,28(sp)
  80e950:	dd800617 	ldw	r22,24(sp)
  80e954:	dd400517 	ldw	r21,20(sp)
  80e958:	dd000417 	ldw	r20,16(sp)
  80e95c:	dcc00317 	ldw	r19,12(sp)
  80e960:	dc800217 	ldw	r18,8(sp)
  80e964:	dc400117 	ldw	r17,4(sp)
  80e968:	dc000017 	ldw	r16,0(sp)
  80e96c:	dec00904 	addi	sp,sp,36
  80e970:	f800283a 	ret

0080e974 <__fp_lock>:
  80e974:	0005883a 	mov	r2,zero
  80e978:	f800283a 	ret

0080e97c <__sfmoreglue>:
  80e97c:	defffc04 	addi	sp,sp,-16
  80e980:	dc400115 	stw	r17,4(sp)
  80e984:	2c7fffc4 	addi	r17,r5,-1
  80e988:	8c401a24 	muli	r17,r17,104
  80e98c:	dc800215 	stw	r18,8(sp)
  80e990:	2825883a 	mov	r18,r5
  80e994:	89401d04 	addi	r5,r17,116
  80e998:	dc000015 	stw	r16,0(sp)
  80e99c:	dfc00315 	stw	ra,12(sp)
  80e9a0:	080f3b80 	call	80f3b8 <_malloc_r>
  80e9a4:	1021883a 	mov	r16,r2
  80e9a8:	10000726 	beq	r2,zero,80e9c8 <__sfmoreglue+0x4c>
  80e9ac:	11000304 	addi	r4,r2,12
  80e9b0:	10000015 	stw	zero,0(r2)
  80e9b4:	14800115 	stw	r18,4(r2)
  80e9b8:	11000215 	stw	r4,8(r2)
  80e9bc:	89801a04 	addi	r6,r17,104
  80e9c0:	000b883a 	mov	r5,zero
  80e9c4:	080a50c0 	call	80a50c <memset>
  80e9c8:	8005883a 	mov	r2,r16
  80e9cc:	dfc00317 	ldw	ra,12(sp)
  80e9d0:	dc800217 	ldw	r18,8(sp)
  80e9d4:	dc400117 	ldw	r17,4(sp)
  80e9d8:	dc000017 	ldw	r16,0(sp)
  80e9dc:	dec00404 	addi	sp,sp,16
  80e9e0:	f800283a 	ret

0080e9e4 <__sfp>:
  80e9e4:	defffb04 	addi	sp,sp,-20
  80e9e8:	dc000015 	stw	r16,0(sp)
  80e9ec:	040020b4 	movhi	r16,130
  80e9f0:	84330104 	addi	r16,r16,-13308
  80e9f4:	dcc00315 	stw	r19,12(sp)
  80e9f8:	2027883a 	mov	r19,r4
  80e9fc:	81000017 	ldw	r4,0(r16)
  80ea00:	dfc00415 	stw	ra,16(sp)
  80ea04:	dc800215 	stw	r18,8(sp)
  80ea08:	20800e17 	ldw	r2,56(r4)
  80ea0c:	dc400115 	stw	r17,4(sp)
  80ea10:	1000021e 	bne	r2,zero,80ea1c <__sfp+0x38>
  80ea14:	080e7d80 	call	80e7d8 <__sinit.part.1>
  80ea18:	81000017 	ldw	r4,0(r16)
  80ea1c:	2480b804 	addi	r18,r4,736
  80ea20:	047fffc4 	movi	r17,-1
  80ea24:	91000117 	ldw	r4,4(r18)
  80ea28:	94000217 	ldw	r16,8(r18)
  80ea2c:	213fffc4 	addi	r4,r4,-1
  80ea30:	20000a16 	blt	r4,zero,80ea5c <__sfp+0x78>
  80ea34:	8080030f 	ldh	r2,12(r16)
  80ea38:	10000c26 	beq	r2,zero,80ea6c <__sfp+0x88>
  80ea3c:	80c01d04 	addi	r3,r16,116
  80ea40:	00000206 	br	80ea4c <__sfp+0x68>
  80ea44:	18bfe60f 	ldh	r2,-104(r3)
  80ea48:	10000826 	beq	r2,zero,80ea6c <__sfp+0x88>
  80ea4c:	213fffc4 	addi	r4,r4,-1
  80ea50:	1c3ffd04 	addi	r16,r3,-12
  80ea54:	18c01a04 	addi	r3,r3,104
  80ea58:	247ffa1e 	bne	r4,r17,80ea44 <__alt_data_end+0xff80ea44>
  80ea5c:	90800017 	ldw	r2,0(r18)
  80ea60:	10001d26 	beq	r2,zero,80ead8 <__sfp+0xf4>
  80ea64:	1025883a 	mov	r18,r2
  80ea68:	003fee06 	br	80ea24 <__alt_data_end+0xff80ea24>
  80ea6c:	00bfffc4 	movi	r2,-1
  80ea70:	8080038d 	sth	r2,14(r16)
  80ea74:	00800044 	movi	r2,1
  80ea78:	8080030d 	sth	r2,12(r16)
  80ea7c:	80001915 	stw	zero,100(r16)
  80ea80:	80000015 	stw	zero,0(r16)
  80ea84:	80000215 	stw	zero,8(r16)
  80ea88:	80000115 	stw	zero,4(r16)
  80ea8c:	80000415 	stw	zero,16(r16)
  80ea90:	80000515 	stw	zero,20(r16)
  80ea94:	80000615 	stw	zero,24(r16)
  80ea98:	01800204 	movi	r6,8
  80ea9c:	000b883a 	mov	r5,zero
  80eaa0:	81001704 	addi	r4,r16,92
  80eaa4:	080a50c0 	call	80a50c <memset>
  80eaa8:	8005883a 	mov	r2,r16
  80eaac:	80000c15 	stw	zero,48(r16)
  80eab0:	80000d15 	stw	zero,52(r16)
  80eab4:	80001115 	stw	zero,68(r16)
  80eab8:	80001215 	stw	zero,72(r16)
  80eabc:	dfc00417 	ldw	ra,16(sp)
  80eac0:	dcc00317 	ldw	r19,12(sp)
  80eac4:	dc800217 	ldw	r18,8(sp)
  80eac8:	dc400117 	ldw	r17,4(sp)
  80eacc:	dc000017 	ldw	r16,0(sp)
  80ead0:	dec00504 	addi	sp,sp,20
  80ead4:	f800283a 	ret
  80ead8:	01400104 	movi	r5,4
  80eadc:	9809883a 	mov	r4,r19
  80eae0:	080e97c0 	call	80e97c <__sfmoreglue>
  80eae4:	90800015 	stw	r2,0(r18)
  80eae8:	103fde1e 	bne	r2,zero,80ea64 <__alt_data_end+0xff80ea64>
  80eaec:	00800304 	movi	r2,12
  80eaf0:	98800015 	stw	r2,0(r19)
  80eaf4:	0005883a 	mov	r2,zero
  80eaf8:	003ff006 	br	80eabc <__alt_data_end+0xff80eabc>

0080eafc <_cleanup>:
  80eafc:	008020b4 	movhi	r2,130
  80eb00:	10b30104 	addi	r2,r2,-13308
  80eb04:	11000017 	ldw	r4,0(r2)
  80eb08:	01402074 	movhi	r5,129
  80eb0c:	294b4f04 	addi	r5,r5,11580
  80eb10:	080f05c1 	jmpi	80f05c <_fwalk_reent>

0080eb14 <__sinit>:
  80eb14:	20800e17 	ldw	r2,56(r4)
  80eb18:	10000126 	beq	r2,zero,80eb20 <__sinit+0xc>
  80eb1c:	f800283a 	ret
  80eb20:	080e7d81 	jmpi	80e7d8 <__sinit.part.1>

0080eb24 <__sfp_lock_acquire>:
  80eb24:	f800283a 	ret

0080eb28 <__sfp_lock_release>:
  80eb28:	f800283a 	ret

0080eb2c <__sinit_lock_acquire>:
  80eb2c:	f800283a 	ret

0080eb30 <__sinit_lock_release>:
  80eb30:	f800283a 	ret

0080eb34 <__fp_lock_all>:
  80eb34:	008020b4 	movhi	r2,130
  80eb38:	10b30204 	addi	r2,r2,-13304
  80eb3c:	11000017 	ldw	r4,0(r2)
  80eb40:	01402074 	movhi	r5,129
  80eb44:	297a5d04 	addi	r5,r5,-5772
  80eb48:	080ef981 	jmpi	80ef98 <_fwalk>

0080eb4c <__fp_unlock_all>:
  80eb4c:	008020b4 	movhi	r2,130
  80eb50:	10b30204 	addi	r2,r2,-13304
  80eb54:	11000017 	ldw	r4,0(r2)
  80eb58:	01402074 	movhi	r5,129
  80eb5c:	2979f104 	addi	r5,r5,-6204
  80eb60:	080ef981 	jmpi	80ef98 <_fwalk>

0080eb64 <_malloc_trim_r>:
  80eb64:	defffb04 	addi	sp,sp,-20
  80eb68:	dcc00315 	stw	r19,12(sp)
  80eb6c:	04c020b4 	movhi	r19,130
  80eb70:	dc800215 	stw	r18,8(sp)
  80eb74:	dc400115 	stw	r17,4(sp)
  80eb78:	dc000015 	stw	r16,0(sp)
  80eb7c:	dfc00415 	stw	ra,16(sp)
  80eb80:	2821883a 	mov	r16,r5
  80eb84:	9cf0f704 	addi	r19,r19,-15396
  80eb88:	2025883a 	mov	r18,r4
  80eb8c:	08176dc0 	call	8176dc <__malloc_lock>
  80eb90:	98800217 	ldw	r2,8(r19)
  80eb94:	14400117 	ldw	r17,4(r2)
  80eb98:	00bfff04 	movi	r2,-4
  80eb9c:	88a2703a 	and	r17,r17,r2
  80eba0:	8c21c83a 	sub	r16,r17,r16
  80eba4:	8403fbc4 	addi	r16,r16,4079
  80eba8:	8020d33a 	srli	r16,r16,12
  80ebac:	0083ffc4 	movi	r2,4095
  80ebb0:	843fffc4 	addi	r16,r16,-1
  80ebb4:	8020933a 	slli	r16,r16,12
  80ebb8:	1400060e 	bge	r2,r16,80ebd4 <_malloc_trim_r+0x70>
  80ebbc:	000b883a 	mov	r5,zero
  80ebc0:	9009883a 	mov	r4,r18
  80ebc4:	08111b80 	call	8111b8 <_sbrk_r>
  80ebc8:	98c00217 	ldw	r3,8(r19)
  80ebcc:	1c47883a 	add	r3,r3,r17
  80ebd0:	10c00a26 	beq	r2,r3,80ebfc <_malloc_trim_r+0x98>
  80ebd4:	9009883a 	mov	r4,r18
  80ebd8:	08177000 	call	817700 <__malloc_unlock>
  80ebdc:	0005883a 	mov	r2,zero
  80ebe0:	dfc00417 	ldw	ra,16(sp)
  80ebe4:	dcc00317 	ldw	r19,12(sp)
  80ebe8:	dc800217 	ldw	r18,8(sp)
  80ebec:	dc400117 	ldw	r17,4(sp)
  80ebf0:	dc000017 	ldw	r16,0(sp)
  80ebf4:	dec00504 	addi	sp,sp,20
  80ebf8:	f800283a 	ret
  80ebfc:	040bc83a 	sub	r5,zero,r16
  80ec00:	9009883a 	mov	r4,r18
  80ec04:	08111b80 	call	8111b8 <_sbrk_r>
  80ec08:	00ffffc4 	movi	r3,-1
  80ec0c:	10c00d26 	beq	r2,r3,80ec44 <_malloc_trim_r+0xe0>
  80ec10:	00c020b4 	movhi	r3,130
  80ec14:	18f67404 	addi	r3,r3,-9776
  80ec18:	18800017 	ldw	r2,0(r3)
  80ec1c:	99000217 	ldw	r4,8(r19)
  80ec20:	8c23c83a 	sub	r17,r17,r16
  80ec24:	8c400054 	ori	r17,r17,1
  80ec28:	1421c83a 	sub	r16,r2,r16
  80ec2c:	24400115 	stw	r17,4(r4)
  80ec30:	9009883a 	mov	r4,r18
  80ec34:	1c000015 	stw	r16,0(r3)
  80ec38:	08177000 	call	817700 <__malloc_unlock>
  80ec3c:	00800044 	movi	r2,1
  80ec40:	003fe706 	br	80ebe0 <__alt_data_end+0xff80ebe0>
  80ec44:	000b883a 	mov	r5,zero
  80ec48:	9009883a 	mov	r4,r18
  80ec4c:	08111b80 	call	8111b8 <_sbrk_r>
  80ec50:	99000217 	ldw	r4,8(r19)
  80ec54:	014003c4 	movi	r5,15
  80ec58:	1107c83a 	sub	r3,r2,r4
  80ec5c:	28ffdd0e 	bge	r5,r3,80ebd4 <__alt_data_end+0xff80ebd4>
  80ec60:	014020b4 	movhi	r5,130
  80ec64:	29730404 	addi	r5,r5,-13296
  80ec68:	29400017 	ldw	r5,0(r5)
  80ec6c:	18c00054 	ori	r3,r3,1
  80ec70:	20c00115 	stw	r3,4(r4)
  80ec74:	00c020b4 	movhi	r3,130
  80ec78:	1145c83a 	sub	r2,r2,r5
  80ec7c:	18f67404 	addi	r3,r3,-9776
  80ec80:	18800015 	stw	r2,0(r3)
  80ec84:	003fd306 	br	80ebd4 <__alt_data_end+0xff80ebd4>

0080ec88 <_free_r>:
  80ec88:	28004126 	beq	r5,zero,80ed90 <_free_r+0x108>
  80ec8c:	defffd04 	addi	sp,sp,-12
  80ec90:	dc400115 	stw	r17,4(sp)
  80ec94:	dc000015 	stw	r16,0(sp)
  80ec98:	2023883a 	mov	r17,r4
  80ec9c:	2821883a 	mov	r16,r5
  80eca0:	dfc00215 	stw	ra,8(sp)
  80eca4:	08176dc0 	call	8176dc <__malloc_lock>
  80eca8:	81ffff17 	ldw	r7,-4(r16)
  80ecac:	00bfff84 	movi	r2,-2
  80ecb0:	010020b4 	movhi	r4,130
  80ecb4:	81bffe04 	addi	r6,r16,-8
  80ecb8:	3884703a 	and	r2,r7,r2
  80ecbc:	2130f704 	addi	r4,r4,-15396
  80ecc0:	308b883a 	add	r5,r6,r2
  80ecc4:	2a400117 	ldw	r9,4(r5)
  80ecc8:	22000217 	ldw	r8,8(r4)
  80eccc:	00ffff04 	movi	r3,-4
  80ecd0:	48c6703a 	and	r3,r9,r3
  80ecd4:	2a005726 	beq	r5,r8,80ee34 <_free_r+0x1ac>
  80ecd8:	28c00115 	stw	r3,4(r5)
  80ecdc:	39c0004c 	andi	r7,r7,1
  80ece0:	3800091e 	bne	r7,zero,80ed08 <_free_r+0x80>
  80ece4:	823ffe17 	ldw	r8,-8(r16)
  80ece8:	22400204 	addi	r9,r4,8
  80ecec:	320dc83a 	sub	r6,r6,r8
  80ecf0:	31c00217 	ldw	r7,8(r6)
  80ecf4:	1205883a 	add	r2,r2,r8
  80ecf8:	3a406526 	beq	r7,r9,80ee90 <_free_r+0x208>
  80ecfc:	32000317 	ldw	r8,12(r6)
  80ed00:	3a000315 	stw	r8,12(r7)
  80ed04:	41c00215 	stw	r7,8(r8)
  80ed08:	28cf883a 	add	r7,r5,r3
  80ed0c:	39c00117 	ldw	r7,4(r7)
  80ed10:	39c0004c 	andi	r7,r7,1
  80ed14:	38003a26 	beq	r7,zero,80ee00 <_free_r+0x178>
  80ed18:	10c00054 	ori	r3,r2,1
  80ed1c:	30c00115 	stw	r3,4(r6)
  80ed20:	3087883a 	add	r3,r6,r2
  80ed24:	18800015 	stw	r2,0(r3)
  80ed28:	00c07fc4 	movi	r3,511
  80ed2c:	18801936 	bltu	r3,r2,80ed94 <_free_r+0x10c>
  80ed30:	1004d0fa 	srli	r2,r2,3
  80ed34:	01c00044 	movi	r7,1
  80ed38:	21400117 	ldw	r5,4(r4)
  80ed3c:	10c00044 	addi	r3,r2,1
  80ed40:	18c7883a 	add	r3,r3,r3
  80ed44:	1005d0ba 	srai	r2,r2,2
  80ed48:	18c7883a 	add	r3,r3,r3
  80ed4c:	18c7883a 	add	r3,r3,r3
  80ed50:	1907883a 	add	r3,r3,r4
  80ed54:	3884983a 	sll	r2,r7,r2
  80ed58:	19c00017 	ldw	r7,0(r3)
  80ed5c:	1a3ffe04 	addi	r8,r3,-8
  80ed60:	1144b03a 	or	r2,r2,r5
  80ed64:	32000315 	stw	r8,12(r6)
  80ed68:	31c00215 	stw	r7,8(r6)
  80ed6c:	20800115 	stw	r2,4(r4)
  80ed70:	19800015 	stw	r6,0(r3)
  80ed74:	39800315 	stw	r6,12(r7)
  80ed78:	8809883a 	mov	r4,r17
  80ed7c:	dfc00217 	ldw	ra,8(sp)
  80ed80:	dc400117 	ldw	r17,4(sp)
  80ed84:	dc000017 	ldw	r16,0(sp)
  80ed88:	dec00304 	addi	sp,sp,12
  80ed8c:	08177001 	jmpi	817700 <__malloc_unlock>
  80ed90:	f800283a 	ret
  80ed94:	100ad27a 	srli	r5,r2,9
  80ed98:	00c00104 	movi	r3,4
  80ed9c:	19404a36 	bltu	r3,r5,80eec8 <_free_r+0x240>
  80eda0:	100ad1ba 	srli	r5,r2,6
  80eda4:	28c00e44 	addi	r3,r5,57
  80eda8:	18c7883a 	add	r3,r3,r3
  80edac:	29400e04 	addi	r5,r5,56
  80edb0:	18c7883a 	add	r3,r3,r3
  80edb4:	18c7883a 	add	r3,r3,r3
  80edb8:	1909883a 	add	r4,r3,r4
  80edbc:	20c00017 	ldw	r3,0(r4)
  80edc0:	01c020b4 	movhi	r7,130
  80edc4:	213ffe04 	addi	r4,r4,-8
  80edc8:	39f0f704 	addi	r7,r7,-15396
  80edcc:	20c04426 	beq	r4,r3,80eee0 <_free_r+0x258>
  80edd0:	01ffff04 	movi	r7,-4
  80edd4:	19400117 	ldw	r5,4(r3)
  80edd8:	29ca703a 	and	r5,r5,r7
  80eddc:	1140022e 	bgeu	r2,r5,80ede8 <_free_r+0x160>
  80ede0:	18c00217 	ldw	r3,8(r3)
  80ede4:	20fffb1e 	bne	r4,r3,80edd4 <__alt_data_end+0xff80edd4>
  80ede8:	19000317 	ldw	r4,12(r3)
  80edec:	31000315 	stw	r4,12(r6)
  80edf0:	30c00215 	stw	r3,8(r6)
  80edf4:	21800215 	stw	r6,8(r4)
  80edf8:	19800315 	stw	r6,12(r3)
  80edfc:	003fde06 	br	80ed78 <__alt_data_end+0xff80ed78>
  80ee00:	29c00217 	ldw	r7,8(r5)
  80ee04:	10c5883a 	add	r2,r2,r3
  80ee08:	00c020b4 	movhi	r3,130
  80ee0c:	18f0f904 	addi	r3,r3,-15388
  80ee10:	38c03b26 	beq	r7,r3,80ef00 <_free_r+0x278>
  80ee14:	2a000317 	ldw	r8,12(r5)
  80ee18:	11400054 	ori	r5,r2,1
  80ee1c:	3087883a 	add	r3,r6,r2
  80ee20:	3a000315 	stw	r8,12(r7)
  80ee24:	41c00215 	stw	r7,8(r8)
  80ee28:	31400115 	stw	r5,4(r6)
  80ee2c:	18800015 	stw	r2,0(r3)
  80ee30:	003fbd06 	br	80ed28 <__alt_data_end+0xff80ed28>
  80ee34:	39c0004c 	andi	r7,r7,1
  80ee38:	10c5883a 	add	r2,r2,r3
  80ee3c:	3800071e 	bne	r7,zero,80ee5c <_free_r+0x1d4>
  80ee40:	81fffe17 	ldw	r7,-8(r16)
  80ee44:	31cdc83a 	sub	r6,r6,r7
  80ee48:	30c00317 	ldw	r3,12(r6)
  80ee4c:	31400217 	ldw	r5,8(r6)
  80ee50:	11c5883a 	add	r2,r2,r7
  80ee54:	28c00315 	stw	r3,12(r5)
  80ee58:	19400215 	stw	r5,8(r3)
  80ee5c:	10c00054 	ori	r3,r2,1
  80ee60:	30c00115 	stw	r3,4(r6)
  80ee64:	00c020b4 	movhi	r3,130
  80ee68:	18f30504 	addi	r3,r3,-13292
  80ee6c:	18c00017 	ldw	r3,0(r3)
  80ee70:	21800215 	stw	r6,8(r4)
  80ee74:	10ffc036 	bltu	r2,r3,80ed78 <__alt_data_end+0xff80ed78>
  80ee78:	008020b4 	movhi	r2,130
  80ee7c:	10b66504 	addi	r2,r2,-9836
  80ee80:	11400017 	ldw	r5,0(r2)
  80ee84:	8809883a 	mov	r4,r17
  80ee88:	080eb640 	call	80eb64 <_malloc_trim_r>
  80ee8c:	003fba06 	br	80ed78 <__alt_data_end+0xff80ed78>
  80ee90:	28c9883a 	add	r4,r5,r3
  80ee94:	21000117 	ldw	r4,4(r4)
  80ee98:	2100004c 	andi	r4,r4,1
  80ee9c:	2000391e 	bne	r4,zero,80ef84 <_free_r+0x2fc>
  80eea0:	29c00217 	ldw	r7,8(r5)
  80eea4:	29000317 	ldw	r4,12(r5)
  80eea8:	1885883a 	add	r2,r3,r2
  80eeac:	10c00054 	ori	r3,r2,1
  80eeb0:	39000315 	stw	r4,12(r7)
  80eeb4:	21c00215 	stw	r7,8(r4)
  80eeb8:	30c00115 	stw	r3,4(r6)
  80eebc:	308d883a 	add	r6,r6,r2
  80eec0:	30800015 	stw	r2,0(r6)
  80eec4:	003fac06 	br	80ed78 <__alt_data_end+0xff80ed78>
  80eec8:	00c00504 	movi	r3,20
  80eecc:	19401536 	bltu	r3,r5,80ef24 <_free_r+0x29c>
  80eed0:	28c01704 	addi	r3,r5,92
  80eed4:	18c7883a 	add	r3,r3,r3
  80eed8:	294016c4 	addi	r5,r5,91
  80eedc:	003fb406 	br	80edb0 <__alt_data_end+0xff80edb0>
  80eee0:	280bd0ba 	srai	r5,r5,2
  80eee4:	00c00044 	movi	r3,1
  80eee8:	38800117 	ldw	r2,4(r7)
  80eeec:	194a983a 	sll	r5,r3,r5
  80eef0:	2007883a 	mov	r3,r4
  80eef4:	2884b03a 	or	r2,r5,r2
  80eef8:	38800115 	stw	r2,4(r7)
  80eefc:	003fbb06 	br	80edec <__alt_data_end+0xff80edec>
  80ef00:	21800515 	stw	r6,20(r4)
  80ef04:	21800415 	stw	r6,16(r4)
  80ef08:	10c00054 	ori	r3,r2,1
  80ef0c:	31c00315 	stw	r7,12(r6)
  80ef10:	31c00215 	stw	r7,8(r6)
  80ef14:	30c00115 	stw	r3,4(r6)
  80ef18:	308d883a 	add	r6,r6,r2
  80ef1c:	30800015 	stw	r2,0(r6)
  80ef20:	003f9506 	br	80ed78 <__alt_data_end+0xff80ed78>
  80ef24:	00c01504 	movi	r3,84
  80ef28:	19400536 	bltu	r3,r5,80ef40 <_free_r+0x2b8>
  80ef2c:	100ad33a 	srli	r5,r2,12
  80ef30:	28c01bc4 	addi	r3,r5,111
  80ef34:	18c7883a 	add	r3,r3,r3
  80ef38:	29401b84 	addi	r5,r5,110
  80ef3c:	003f9c06 	br	80edb0 <__alt_data_end+0xff80edb0>
  80ef40:	00c05504 	movi	r3,340
  80ef44:	19400536 	bltu	r3,r5,80ef5c <_free_r+0x2d4>
  80ef48:	100ad3fa 	srli	r5,r2,15
  80ef4c:	28c01e04 	addi	r3,r5,120
  80ef50:	18c7883a 	add	r3,r3,r3
  80ef54:	29401dc4 	addi	r5,r5,119
  80ef58:	003f9506 	br	80edb0 <__alt_data_end+0xff80edb0>
  80ef5c:	00c15504 	movi	r3,1364
  80ef60:	19400536 	bltu	r3,r5,80ef78 <_free_r+0x2f0>
  80ef64:	100ad4ba 	srli	r5,r2,18
  80ef68:	28c01f44 	addi	r3,r5,125
  80ef6c:	18c7883a 	add	r3,r3,r3
  80ef70:	29401f04 	addi	r5,r5,124
  80ef74:	003f8e06 	br	80edb0 <__alt_data_end+0xff80edb0>
  80ef78:	00c03f84 	movi	r3,254
  80ef7c:	01401f84 	movi	r5,126
  80ef80:	003f8b06 	br	80edb0 <__alt_data_end+0xff80edb0>
  80ef84:	10c00054 	ori	r3,r2,1
  80ef88:	30c00115 	stw	r3,4(r6)
  80ef8c:	308d883a 	add	r6,r6,r2
  80ef90:	30800015 	stw	r2,0(r6)
  80ef94:	003f7806 	br	80ed78 <__alt_data_end+0xff80ed78>

0080ef98 <_fwalk>:
  80ef98:	defff704 	addi	sp,sp,-36
  80ef9c:	dd000415 	stw	r20,16(sp)
  80efa0:	dfc00815 	stw	ra,32(sp)
  80efa4:	ddc00715 	stw	r23,28(sp)
  80efa8:	dd800615 	stw	r22,24(sp)
  80efac:	dd400515 	stw	r21,20(sp)
  80efb0:	dcc00315 	stw	r19,12(sp)
  80efb4:	dc800215 	stw	r18,8(sp)
  80efb8:	dc400115 	stw	r17,4(sp)
  80efbc:	dc000015 	stw	r16,0(sp)
  80efc0:	2500b804 	addi	r20,r4,736
  80efc4:	a0002326 	beq	r20,zero,80f054 <_fwalk+0xbc>
  80efc8:	282b883a 	mov	r21,r5
  80efcc:	002f883a 	mov	r23,zero
  80efd0:	05800044 	movi	r22,1
  80efd4:	04ffffc4 	movi	r19,-1
  80efd8:	a4400117 	ldw	r17,4(r20)
  80efdc:	a4800217 	ldw	r18,8(r20)
  80efe0:	8c7fffc4 	addi	r17,r17,-1
  80efe4:	88000d16 	blt	r17,zero,80f01c <_fwalk+0x84>
  80efe8:	94000304 	addi	r16,r18,12
  80efec:	94800384 	addi	r18,r18,14
  80eff0:	8080000b 	ldhu	r2,0(r16)
  80eff4:	8c7fffc4 	addi	r17,r17,-1
  80eff8:	813ffd04 	addi	r4,r16,-12
  80effc:	b080042e 	bgeu	r22,r2,80f010 <_fwalk+0x78>
  80f000:	9080000f 	ldh	r2,0(r18)
  80f004:	14c00226 	beq	r2,r19,80f010 <_fwalk+0x78>
  80f008:	a83ee83a 	callr	r21
  80f00c:	b8aeb03a 	or	r23,r23,r2
  80f010:	84001a04 	addi	r16,r16,104
  80f014:	94801a04 	addi	r18,r18,104
  80f018:	8cfff51e 	bne	r17,r19,80eff0 <__alt_data_end+0xff80eff0>
  80f01c:	a5000017 	ldw	r20,0(r20)
  80f020:	a03fed1e 	bne	r20,zero,80efd8 <__alt_data_end+0xff80efd8>
  80f024:	b805883a 	mov	r2,r23
  80f028:	dfc00817 	ldw	ra,32(sp)
  80f02c:	ddc00717 	ldw	r23,28(sp)
  80f030:	dd800617 	ldw	r22,24(sp)
  80f034:	dd400517 	ldw	r21,20(sp)
  80f038:	dd000417 	ldw	r20,16(sp)
  80f03c:	dcc00317 	ldw	r19,12(sp)
  80f040:	dc800217 	ldw	r18,8(sp)
  80f044:	dc400117 	ldw	r17,4(sp)
  80f048:	dc000017 	ldw	r16,0(sp)
  80f04c:	dec00904 	addi	sp,sp,36
  80f050:	f800283a 	ret
  80f054:	002f883a 	mov	r23,zero
  80f058:	003ff206 	br	80f024 <__alt_data_end+0xff80f024>

0080f05c <_fwalk_reent>:
  80f05c:	defff704 	addi	sp,sp,-36
  80f060:	dd000415 	stw	r20,16(sp)
  80f064:	dfc00815 	stw	ra,32(sp)
  80f068:	ddc00715 	stw	r23,28(sp)
  80f06c:	dd800615 	stw	r22,24(sp)
  80f070:	dd400515 	stw	r21,20(sp)
  80f074:	dcc00315 	stw	r19,12(sp)
  80f078:	dc800215 	stw	r18,8(sp)
  80f07c:	dc400115 	stw	r17,4(sp)
  80f080:	dc000015 	stw	r16,0(sp)
  80f084:	2500b804 	addi	r20,r4,736
  80f088:	a0002326 	beq	r20,zero,80f118 <_fwalk_reent+0xbc>
  80f08c:	282b883a 	mov	r21,r5
  80f090:	2027883a 	mov	r19,r4
  80f094:	002f883a 	mov	r23,zero
  80f098:	05800044 	movi	r22,1
  80f09c:	04bfffc4 	movi	r18,-1
  80f0a0:	a4400117 	ldw	r17,4(r20)
  80f0a4:	a4000217 	ldw	r16,8(r20)
  80f0a8:	8c7fffc4 	addi	r17,r17,-1
  80f0ac:	88000c16 	blt	r17,zero,80f0e0 <_fwalk_reent+0x84>
  80f0b0:	84000304 	addi	r16,r16,12
  80f0b4:	8080000b 	ldhu	r2,0(r16)
  80f0b8:	8c7fffc4 	addi	r17,r17,-1
  80f0bc:	817ffd04 	addi	r5,r16,-12
  80f0c0:	b080052e 	bgeu	r22,r2,80f0d8 <_fwalk_reent+0x7c>
  80f0c4:	8080008f 	ldh	r2,2(r16)
  80f0c8:	9809883a 	mov	r4,r19
  80f0cc:	14800226 	beq	r2,r18,80f0d8 <_fwalk_reent+0x7c>
  80f0d0:	a83ee83a 	callr	r21
  80f0d4:	b8aeb03a 	or	r23,r23,r2
  80f0d8:	84001a04 	addi	r16,r16,104
  80f0dc:	8cbff51e 	bne	r17,r18,80f0b4 <__alt_data_end+0xff80f0b4>
  80f0e0:	a5000017 	ldw	r20,0(r20)
  80f0e4:	a03fee1e 	bne	r20,zero,80f0a0 <__alt_data_end+0xff80f0a0>
  80f0e8:	b805883a 	mov	r2,r23
  80f0ec:	dfc00817 	ldw	ra,32(sp)
  80f0f0:	ddc00717 	ldw	r23,28(sp)
  80f0f4:	dd800617 	ldw	r22,24(sp)
  80f0f8:	dd400517 	ldw	r21,20(sp)
  80f0fc:	dd000417 	ldw	r20,16(sp)
  80f100:	dcc00317 	ldw	r19,12(sp)
  80f104:	dc800217 	ldw	r18,8(sp)
  80f108:	dc400117 	ldw	r17,4(sp)
  80f10c:	dc000017 	ldw	r16,0(sp)
  80f110:	dec00904 	addi	sp,sp,36
  80f114:	f800283a 	ret
  80f118:	002f883a 	mov	r23,zero
  80f11c:	003ff206 	br	80f0e8 <__alt_data_end+0xff80f0e8>

0080f120 <_setlocale_r>:
  80f120:	30001b26 	beq	r6,zero,80f190 <_setlocale_r+0x70>
  80f124:	014020b4 	movhi	r5,130
  80f128:	defffe04 	addi	sp,sp,-8
  80f12c:	296e7e04 	addi	r5,r5,-17928
  80f130:	3009883a 	mov	r4,r6
  80f134:	dc000015 	stw	r16,0(sp)
  80f138:	dfc00115 	stw	ra,4(sp)
  80f13c:	3021883a 	mov	r16,r6
  80f140:	08113480 	call	811348 <strcmp>
  80f144:	1000061e 	bne	r2,zero,80f160 <_setlocale_r+0x40>
  80f148:	008020b4 	movhi	r2,130
  80f14c:	10ae6004 	addi	r2,r2,-18048
  80f150:	dfc00117 	ldw	ra,4(sp)
  80f154:	dc000017 	ldw	r16,0(sp)
  80f158:	dec00204 	addi	sp,sp,8
  80f15c:	f800283a 	ret
  80f160:	014020b4 	movhi	r5,130
  80f164:	296e6004 	addi	r5,r5,-18048
  80f168:	8009883a 	mov	r4,r16
  80f16c:	08113480 	call	811348 <strcmp>
  80f170:	103ff526 	beq	r2,zero,80f148 <__alt_data_end+0xff80f148>
  80f174:	014020b4 	movhi	r5,130
  80f178:	296e6904 	addi	r5,r5,-18012
  80f17c:	8009883a 	mov	r4,r16
  80f180:	08113480 	call	811348 <strcmp>
  80f184:	103ff026 	beq	r2,zero,80f148 <__alt_data_end+0xff80f148>
  80f188:	0005883a 	mov	r2,zero
  80f18c:	003ff006 	br	80f150 <__alt_data_end+0xff80f150>
  80f190:	008020b4 	movhi	r2,130
  80f194:	10ae6004 	addi	r2,r2,-18048
  80f198:	f800283a 	ret

0080f19c <__locale_charset>:
  80f19c:	008020b4 	movhi	r2,130
  80f1a0:	10b0e104 	addi	r2,r2,-15484
  80f1a4:	f800283a 	ret

0080f1a8 <__locale_mb_cur_max>:
  80f1a8:	008020b4 	movhi	r2,130
  80f1ac:	10b30304 	addi	r2,r2,-13300
  80f1b0:	10800017 	ldw	r2,0(r2)
  80f1b4:	f800283a 	ret

0080f1b8 <__locale_msgcharset>:
  80f1b8:	008020b4 	movhi	r2,130
  80f1bc:	10b0d904 	addi	r2,r2,-15516
  80f1c0:	f800283a 	ret

0080f1c4 <__locale_cjk_lang>:
  80f1c4:	0005883a 	mov	r2,zero
  80f1c8:	f800283a 	ret

0080f1cc <_localeconv_r>:
  80f1cc:	008020b4 	movhi	r2,130
  80f1d0:	10b0e904 	addi	r2,r2,-15452
  80f1d4:	f800283a 	ret

0080f1d8 <setlocale>:
  80f1d8:	008020b4 	movhi	r2,130
  80f1dc:	10b30204 	addi	r2,r2,-13304
  80f1e0:	280d883a 	mov	r6,r5
  80f1e4:	200b883a 	mov	r5,r4
  80f1e8:	11000017 	ldw	r4,0(r2)
  80f1ec:	080f1201 	jmpi	80f120 <_setlocale_r>

0080f1f0 <localeconv>:
  80f1f0:	008020b4 	movhi	r2,130
  80f1f4:	10b0e904 	addi	r2,r2,-15452
  80f1f8:	f800283a 	ret

0080f1fc <__smakebuf_r>:
  80f1fc:	2880030b 	ldhu	r2,12(r5)
  80f200:	10c0008c 	andi	r3,r2,2
  80f204:	1800411e 	bne	r3,zero,80f30c <__smakebuf_r+0x110>
  80f208:	deffec04 	addi	sp,sp,-80
  80f20c:	dc000f15 	stw	r16,60(sp)
  80f210:	2821883a 	mov	r16,r5
  80f214:	2940038f 	ldh	r5,14(r5)
  80f218:	dc401015 	stw	r17,64(sp)
  80f21c:	dfc01315 	stw	ra,76(sp)
  80f220:	dcc01215 	stw	r19,72(sp)
  80f224:	dc801115 	stw	r18,68(sp)
  80f228:	2023883a 	mov	r17,r4
  80f22c:	28001c16 	blt	r5,zero,80f2a0 <__smakebuf_r+0xa4>
  80f230:	d80d883a 	mov	r6,sp
  80f234:	08130480 	call	813048 <_fstat_r>
  80f238:	10001816 	blt	r2,zero,80f29c <__smakebuf_r+0xa0>
  80f23c:	d8800117 	ldw	r2,4(sp)
  80f240:	00e00014 	movui	r3,32768
  80f244:	10bc000c 	andi	r2,r2,61440
  80f248:	14c80020 	cmpeqi	r19,r2,8192
  80f24c:	10c03726 	beq	r2,r3,80f32c <__smakebuf_r+0x130>
  80f250:	80c0030b 	ldhu	r3,12(r16)
  80f254:	18c20014 	ori	r3,r3,2048
  80f258:	80c0030d 	sth	r3,12(r16)
  80f25c:	00c80004 	movi	r3,8192
  80f260:	10c0521e 	bne	r2,r3,80f3ac <__smakebuf_r+0x1b0>
  80f264:	8140038f 	ldh	r5,14(r16)
  80f268:	8809883a 	mov	r4,r17
  80f26c:	08135600 	call	813560 <_isatty_r>
  80f270:	10004c26 	beq	r2,zero,80f3a4 <__smakebuf_r+0x1a8>
  80f274:	8080030b 	ldhu	r2,12(r16)
  80f278:	80c010c4 	addi	r3,r16,67
  80f27c:	80c00015 	stw	r3,0(r16)
  80f280:	10800054 	ori	r2,r2,1
  80f284:	8080030d 	sth	r2,12(r16)
  80f288:	00800044 	movi	r2,1
  80f28c:	80c00415 	stw	r3,16(r16)
  80f290:	80800515 	stw	r2,20(r16)
  80f294:	04810004 	movi	r18,1024
  80f298:	00000706 	br	80f2b8 <__smakebuf_r+0xbc>
  80f29c:	8080030b 	ldhu	r2,12(r16)
  80f2a0:	10c0200c 	andi	r3,r2,128
  80f2a4:	18001f1e 	bne	r3,zero,80f324 <__smakebuf_r+0x128>
  80f2a8:	04810004 	movi	r18,1024
  80f2ac:	10820014 	ori	r2,r2,2048
  80f2b0:	8080030d 	sth	r2,12(r16)
  80f2b4:	0027883a 	mov	r19,zero
  80f2b8:	900b883a 	mov	r5,r18
  80f2bc:	8809883a 	mov	r4,r17
  80f2c0:	080f3b80 	call	80f3b8 <_malloc_r>
  80f2c4:	10002c26 	beq	r2,zero,80f378 <__smakebuf_r+0x17c>
  80f2c8:	80c0030b 	ldhu	r3,12(r16)
  80f2cc:	01002074 	movhi	r4,129
  80f2d0:	2139f304 	addi	r4,r4,-6196
  80f2d4:	89000f15 	stw	r4,60(r17)
  80f2d8:	18c02014 	ori	r3,r3,128
  80f2dc:	80c0030d 	sth	r3,12(r16)
  80f2e0:	80800015 	stw	r2,0(r16)
  80f2e4:	80800415 	stw	r2,16(r16)
  80f2e8:	84800515 	stw	r18,20(r16)
  80f2ec:	98001a1e 	bne	r19,zero,80f358 <__smakebuf_r+0x15c>
  80f2f0:	dfc01317 	ldw	ra,76(sp)
  80f2f4:	dcc01217 	ldw	r19,72(sp)
  80f2f8:	dc801117 	ldw	r18,68(sp)
  80f2fc:	dc401017 	ldw	r17,64(sp)
  80f300:	dc000f17 	ldw	r16,60(sp)
  80f304:	dec01404 	addi	sp,sp,80
  80f308:	f800283a 	ret
  80f30c:	288010c4 	addi	r2,r5,67
  80f310:	28800015 	stw	r2,0(r5)
  80f314:	28800415 	stw	r2,16(r5)
  80f318:	00800044 	movi	r2,1
  80f31c:	28800515 	stw	r2,20(r5)
  80f320:	f800283a 	ret
  80f324:	04801004 	movi	r18,64
  80f328:	003fe006 	br	80f2ac <__alt_data_end+0xff80f2ac>
  80f32c:	81000a17 	ldw	r4,40(r16)
  80f330:	00c02074 	movhi	r3,129
  80f334:	18c4b904 	addi	r3,r3,4836
  80f338:	20ffc51e 	bne	r4,r3,80f250 <__alt_data_end+0xff80f250>
  80f33c:	8080030b 	ldhu	r2,12(r16)
  80f340:	04810004 	movi	r18,1024
  80f344:	84801315 	stw	r18,76(r16)
  80f348:	1484b03a 	or	r2,r2,r18
  80f34c:	8080030d 	sth	r2,12(r16)
  80f350:	0027883a 	mov	r19,zero
  80f354:	003fd806 	br	80f2b8 <__alt_data_end+0xff80f2b8>
  80f358:	8140038f 	ldh	r5,14(r16)
  80f35c:	8809883a 	mov	r4,r17
  80f360:	08135600 	call	813560 <_isatty_r>
  80f364:	103fe226 	beq	r2,zero,80f2f0 <__alt_data_end+0xff80f2f0>
  80f368:	8080030b 	ldhu	r2,12(r16)
  80f36c:	10800054 	ori	r2,r2,1
  80f370:	8080030d 	sth	r2,12(r16)
  80f374:	003fde06 	br	80f2f0 <__alt_data_end+0xff80f2f0>
  80f378:	8080030b 	ldhu	r2,12(r16)
  80f37c:	10c0800c 	andi	r3,r2,512
  80f380:	183fdb1e 	bne	r3,zero,80f2f0 <__alt_data_end+0xff80f2f0>
  80f384:	10800094 	ori	r2,r2,2
  80f388:	80c010c4 	addi	r3,r16,67
  80f38c:	8080030d 	sth	r2,12(r16)
  80f390:	00800044 	movi	r2,1
  80f394:	80c00015 	stw	r3,0(r16)
  80f398:	80c00415 	stw	r3,16(r16)
  80f39c:	80800515 	stw	r2,20(r16)
  80f3a0:	003fd306 	br	80f2f0 <__alt_data_end+0xff80f2f0>
  80f3a4:	04810004 	movi	r18,1024
  80f3a8:	003fc306 	br	80f2b8 <__alt_data_end+0xff80f2b8>
  80f3ac:	0027883a 	mov	r19,zero
  80f3b0:	04810004 	movi	r18,1024
  80f3b4:	003fc006 	br	80f2b8 <__alt_data_end+0xff80f2b8>

0080f3b8 <_malloc_r>:
  80f3b8:	defff504 	addi	sp,sp,-44
  80f3bc:	dc800315 	stw	r18,12(sp)
  80f3c0:	dfc00a15 	stw	ra,40(sp)
  80f3c4:	df000915 	stw	fp,36(sp)
  80f3c8:	ddc00815 	stw	r23,32(sp)
  80f3cc:	dd800715 	stw	r22,28(sp)
  80f3d0:	dd400615 	stw	r21,24(sp)
  80f3d4:	dd000515 	stw	r20,20(sp)
  80f3d8:	dcc00415 	stw	r19,16(sp)
  80f3dc:	dc400215 	stw	r17,8(sp)
  80f3e0:	dc000115 	stw	r16,4(sp)
  80f3e4:	288002c4 	addi	r2,r5,11
  80f3e8:	00c00584 	movi	r3,22
  80f3ec:	2025883a 	mov	r18,r4
  80f3f0:	18807f2e 	bgeu	r3,r2,80f5f0 <_malloc_r+0x238>
  80f3f4:	047ffe04 	movi	r17,-8
  80f3f8:	1462703a 	and	r17,r2,r17
  80f3fc:	8800a316 	blt	r17,zero,80f68c <_malloc_r+0x2d4>
  80f400:	8940a236 	bltu	r17,r5,80f68c <_malloc_r+0x2d4>
  80f404:	08176dc0 	call	8176dc <__malloc_lock>
  80f408:	00807dc4 	movi	r2,503
  80f40c:	1441e92e 	bgeu	r2,r17,80fbb4 <_malloc_r+0x7fc>
  80f410:	8804d27a 	srli	r2,r17,9
  80f414:	1000a126 	beq	r2,zero,80f69c <_malloc_r+0x2e4>
  80f418:	00c00104 	movi	r3,4
  80f41c:	18811e36 	bltu	r3,r2,80f898 <_malloc_r+0x4e0>
  80f420:	8804d1ba 	srli	r2,r17,6
  80f424:	12000e44 	addi	r8,r2,57
  80f428:	11c00e04 	addi	r7,r2,56
  80f42c:	4209883a 	add	r4,r8,r8
  80f430:	04c020b4 	movhi	r19,130
  80f434:	2109883a 	add	r4,r4,r4
  80f438:	9cf0f704 	addi	r19,r19,-15396
  80f43c:	2109883a 	add	r4,r4,r4
  80f440:	9909883a 	add	r4,r19,r4
  80f444:	24000117 	ldw	r16,4(r4)
  80f448:	213ffe04 	addi	r4,r4,-8
  80f44c:	24009726 	beq	r4,r16,80f6ac <_malloc_r+0x2f4>
  80f450:	80800117 	ldw	r2,4(r16)
  80f454:	01bfff04 	movi	r6,-4
  80f458:	014003c4 	movi	r5,15
  80f45c:	1184703a 	and	r2,r2,r6
  80f460:	1447c83a 	sub	r3,r2,r17
  80f464:	28c00716 	blt	r5,r3,80f484 <_malloc_r+0xcc>
  80f468:	1800920e 	bge	r3,zero,80f6b4 <_malloc_r+0x2fc>
  80f46c:	84000317 	ldw	r16,12(r16)
  80f470:	24008e26 	beq	r4,r16,80f6ac <_malloc_r+0x2f4>
  80f474:	80800117 	ldw	r2,4(r16)
  80f478:	1184703a 	and	r2,r2,r6
  80f47c:	1447c83a 	sub	r3,r2,r17
  80f480:	28fff90e 	bge	r5,r3,80f468 <__alt_data_end+0xff80f468>
  80f484:	3809883a 	mov	r4,r7
  80f488:	018020b4 	movhi	r6,130
  80f48c:	9c000417 	ldw	r16,16(r19)
  80f490:	31b0f704 	addi	r6,r6,-15396
  80f494:	32000204 	addi	r8,r6,8
  80f498:	82013426 	beq	r16,r8,80f96c <_malloc_r+0x5b4>
  80f49c:	80c00117 	ldw	r3,4(r16)
  80f4a0:	00bfff04 	movi	r2,-4
  80f4a4:	188e703a 	and	r7,r3,r2
  80f4a8:	3c45c83a 	sub	r2,r7,r17
  80f4ac:	00c003c4 	movi	r3,15
  80f4b0:	18811f16 	blt	r3,r2,80f930 <_malloc_r+0x578>
  80f4b4:	32000515 	stw	r8,20(r6)
  80f4b8:	32000415 	stw	r8,16(r6)
  80f4bc:	10007f0e 	bge	r2,zero,80f6bc <_malloc_r+0x304>
  80f4c0:	00807fc4 	movi	r2,511
  80f4c4:	11c0fd36 	bltu	r2,r7,80f8bc <_malloc_r+0x504>
  80f4c8:	3806d0fa 	srli	r3,r7,3
  80f4cc:	01c00044 	movi	r7,1
  80f4d0:	30800117 	ldw	r2,4(r6)
  80f4d4:	19400044 	addi	r5,r3,1
  80f4d8:	294b883a 	add	r5,r5,r5
  80f4dc:	1807d0ba 	srai	r3,r3,2
  80f4e0:	294b883a 	add	r5,r5,r5
  80f4e4:	294b883a 	add	r5,r5,r5
  80f4e8:	298b883a 	add	r5,r5,r6
  80f4ec:	38c6983a 	sll	r3,r7,r3
  80f4f0:	29c00017 	ldw	r7,0(r5)
  80f4f4:	2a7ffe04 	addi	r9,r5,-8
  80f4f8:	1886b03a 	or	r3,r3,r2
  80f4fc:	82400315 	stw	r9,12(r16)
  80f500:	81c00215 	stw	r7,8(r16)
  80f504:	30c00115 	stw	r3,4(r6)
  80f508:	2c000015 	stw	r16,0(r5)
  80f50c:	3c000315 	stw	r16,12(r7)
  80f510:	2005d0ba 	srai	r2,r4,2
  80f514:	01400044 	movi	r5,1
  80f518:	288a983a 	sll	r5,r5,r2
  80f51c:	19406f36 	bltu	r3,r5,80f6dc <_malloc_r+0x324>
  80f520:	28c4703a 	and	r2,r5,r3
  80f524:	10000a1e 	bne	r2,zero,80f550 <_malloc_r+0x198>
  80f528:	00bfff04 	movi	r2,-4
  80f52c:	294b883a 	add	r5,r5,r5
  80f530:	2088703a 	and	r4,r4,r2
  80f534:	28c4703a 	and	r2,r5,r3
  80f538:	21000104 	addi	r4,r4,4
  80f53c:	1000041e 	bne	r2,zero,80f550 <_malloc_r+0x198>
  80f540:	294b883a 	add	r5,r5,r5
  80f544:	28c4703a 	and	r2,r5,r3
  80f548:	21000104 	addi	r4,r4,4
  80f54c:	103ffc26 	beq	r2,zero,80f540 <__alt_data_end+0xff80f540>
  80f550:	02bfff04 	movi	r10,-4
  80f554:	024003c4 	movi	r9,15
  80f558:	21800044 	addi	r6,r4,1
  80f55c:	318d883a 	add	r6,r6,r6
  80f560:	318d883a 	add	r6,r6,r6
  80f564:	318d883a 	add	r6,r6,r6
  80f568:	998d883a 	add	r6,r19,r6
  80f56c:	333ffe04 	addi	r12,r6,-8
  80f570:	2017883a 	mov	r11,r4
  80f574:	31800104 	addi	r6,r6,4
  80f578:	34000017 	ldw	r16,0(r6)
  80f57c:	31fffd04 	addi	r7,r6,-12
  80f580:	81c0041e 	bne	r16,r7,80f594 <_malloc_r+0x1dc>
  80f584:	0000fb06 	br	80f974 <_malloc_r+0x5bc>
  80f588:	1801030e 	bge	r3,zero,80f998 <_malloc_r+0x5e0>
  80f58c:	84000317 	ldw	r16,12(r16)
  80f590:	81c0f826 	beq	r16,r7,80f974 <_malloc_r+0x5bc>
  80f594:	80800117 	ldw	r2,4(r16)
  80f598:	1284703a 	and	r2,r2,r10
  80f59c:	1447c83a 	sub	r3,r2,r17
  80f5a0:	48fff90e 	bge	r9,r3,80f588 <__alt_data_end+0xff80f588>
  80f5a4:	80800317 	ldw	r2,12(r16)
  80f5a8:	81000217 	ldw	r4,8(r16)
  80f5ac:	89400054 	ori	r5,r17,1
  80f5b0:	81400115 	stw	r5,4(r16)
  80f5b4:	20800315 	stw	r2,12(r4)
  80f5b8:	11000215 	stw	r4,8(r2)
  80f5bc:	8463883a 	add	r17,r16,r17
  80f5c0:	9c400515 	stw	r17,20(r19)
  80f5c4:	9c400415 	stw	r17,16(r19)
  80f5c8:	18800054 	ori	r2,r3,1
  80f5cc:	88800115 	stw	r2,4(r17)
  80f5d0:	8a000315 	stw	r8,12(r17)
  80f5d4:	8a000215 	stw	r8,8(r17)
  80f5d8:	88e3883a 	add	r17,r17,r3
  80f5dc:	88c00015 	stw	r3,0(r17)
  80f5e0:	9009883a 	mov	r4,r18
  80f5e4:	08177000 	call	817700 <__malloc_unlock>
  80f5e8:	80800204 	addi	r2,r16,8
  80f5ec:	00001b06 	br	80f65c <_malloc_r+0x2a4>
  80f5f0:	04400404 	movi	r17,16
  80f5f4:	89402536 	bltu	r17,r5,80f68c <_malloc_r+0x2d4>
  80f5f8:	08176dc0 	call	8176dc <__malloc_lock>
  80f5fc:	00800184 	movi	r2,6
  80f600:	01000084 	movi	r4,2
  80f604:	04c020b4 	movhi	r19,130
  80f608:	1085883a 	add	r2,r2,r2
  80f60c:	9cf0f704 	addi	r19,r19,-15396
  80f610:	1085883a 	add	r2,r2,r2
  80f614:	9885883a 	add	r2,r19,r2
  80f618:	14000117 	ldw	r16,4(r2)
  80f61c:	10fffe04 	addi	r3,r2,-8
  80f620:	80c0d926 	beq	r16,r3,80f988 <_malloc_r+0x5d0>
  80f624:	80c00117 	ldw	r3,4(r16)
  80f628:	81000317 	ldw	r4,12(r16)
  80f62c:	00bfff04 	movi	r2,-4
  80f630:	1884703a 	and	r2,r3,r2
  80f634:	81400217 	ldw	r5,8(r16)
  80f638:	8085883a 	add	r2,r16,r2
  80f63c:	10c00117 	ldw	r3,4(r2)
  80f640:	29000315 	stw	r4,12(r5)
  80f644:	21400215 	stw	r5,8(r4)
  80f648:	18c00054 	ori	r3,r3,1
  80f64c:	10c00115 	stw	r3,4(r2)
  80f650:	9009883a 	mov	r4,r18
  80f654:	08177000 	call	817700 <__malloc_unlock>
  80f658:	80800204 	addi	r2,r16,8
  80f65c:	dfc00a17 	ldw	ra,40(sp)
  80f660:	df000917 	ldw	fp,36(sp)
  80f664:	ddc00817 	ldw	r23,32(sp)
  80f668:	dd800717 	ldw	r22,28(sp)
  80f66c:	dd400617 	ldw	r21,24(sp)
  80f670:	dd000517 	ldw	r20,20(sp)
  80f674:	dcc00417 	ldw	r19,16(sp)
  80f678:	dc800317 	ldw	r18,12(sp)
  80f67c:	dc400217 	ldw	r17,8(sp)
  80f680:	dc000117 	ldw	r16,4(sp)
  80f684:	dec00b04 	addi	sp,sp,44
  80f688:	f800283a 	ret
  80f68c:	00800304 	movi	r2,12
  80f690:	90800015 	stw	r2,0(r18)
  80f694:	0005883a 	mov	r2,zero
  80f698:	003ff006 	br	80f65c <__alt_data_end+0xff80f65c>
  80f69c:	01002004 	movi	r4,128
  80f6a0:	02001004 	movi	r8,64
  80f6a4:	01c00fc4 	movi	r7,63
  80f6a8:	003f6106 	br	80f430 <__alt_data_end+0xff80f430>
  80f6ac:	4009883a 	mov	r4,r8
  80f6b0:	003f7506 	br	80f488 <__alt_data_end+0xff80f488>
  80f6b4:	81000317 	ldw	r4,12(r16)
  80f6b8:	003fde06 	br	80f634 <__alt_data_end+0xff80f634>
  80f6bc:	81c5883a 	add	r2,r16,r7
  80f6c0:	11400117 	ldw	r5,4(r2)
  80f6c4:	9009883a 	mov	r4,r18
  80f6c8:	29400054 	ori	r5,r5,1
  80f6cc:	11400115 	stw	r5,4(r2)
  80f6d0:	08177000 	call	817700 <__malloc_unlock>
  80f6d4:	80800204 	addi	r2,r16,8
  80f6d8:	003fe006 	br	80f65c <__alt_data_end+0xff80f65c>
  80f6dc:	9c000217 	ldw	r16,8(r19)
  80f6e0:	00bfff04 	movi	r2,-4
  80f6e4:	85800117 	ldw	r22,4(r16)
  80f6e8:	b0ac703a 	and	r22,r22,r2
  80f6ec:	b4400336 	bltu	r22,r17,80f6fc <_malloc_r+0x344>
  80f6f0:	b445c83a 	sub	r2,r22,r17
  80f6f4:	00c003c4 	movi	r3,15
  80f6f8:	18805d16 	blt	r3,r2,80f870 <_malloc_r+0x4b8>
  80f6fc:	05c020b4 	movhi	r23,130
  80f700:	008020b4 	movhi	r2,130
  80f704:	10b66504 	addi	r2,r2,-9836
  80f708:	bdf30404 	addi	r23,r23,-13296
  80f70c:	15400017 	ldw	r21,0(r2)
  80f710:	b8c00017 	ldw	r3,0(r23)
  80f714:	00bfffc4 	movi	r2,-1
  80f718:	858d883a 	add	r6,r16,r22
  80f71c:	8d6b883a 	add	r21,r17,r21
  80f720:	1880ea26 	beq	r3,r2,80facc <_malloc_r+0x714>
  80f724:	ad4403c4 	addi	r21,r21,4111
  80f728:	00bc0004 	movi	r2,-4096
  80f72c:	a8aa703a 	and	r21,r21,r2
  80f730:	a80b883a 	mov	r5,r21
  80f734:	9009883a 	mov	r4,r18
  80f738:	d9800015 	stw	r6,0(sp)
  80f73c:	08111b80 	call	8111b8 <_sbrk_r>
  80f740:	1029883a 	mov	r20,r2
  80f744:	00bfffc4 	movi	r2,-1
  80f748:	d9800017 	ldw	r6,0(sp)
  80f74c:	a080e826 	beq	r20,r2,80faf0 <_malloc_r+0x738>
  80f750:	a180a636 	bltu	r20,r6,80f9ec <_malloc_r+0x634>
  80f754:	070020b4 	movhi	fp,130
  80f758:	e7367404 	addi	fp,fp,-9776
  80f75c:	e0800017 	ldw	r2,0(fp)
  80f760:	a887883a 	add	r3,r21,r2
  80f764:	e0c00015 	stw	r3,0(fp)
  80f768:	3500e626 	beq	r6,r20,80fb04 <_malloc_r+0x74c>
  80f76c:	b9000017 	ldw	r4,0(r23)
  80f770:	00bfffc4 	movi	r2,-1
  80f774:	2080ee26 	beq	r4,r2,80fb30 <_malloc_r+0x778>
  80f778:	a185c83a 	sub	r2,r20,r6
  80f77c:	10c5883a 	add	r2,r2,r3
  80f780:	e0800015 	stw	r2,0(fp)
  80f784:	a0c001cc 	andi	r3,r20,7
  80f788:	1800bc26 	beq	r3,zero,80fa7c <_malloc_r+0x6c4>
  80f78c:	a0e9c83a 	sub	r20,r20,r3
  80f790:	00840204 	movi	r2,4104
  80f794:	a5000204 	addi	r20,r20,8
  80f798:	10c7c83a 	sub	r3,r2,r3
  80f79c:	a545883a 	add	r2,r20,r21
  80f7a0:	1083ffcc 	andi	r2,r2,4095
  80f7a4:	18abc83a 	sub	r21,r3,r2
  80f7a8:	a80b883a 	mov	r5,r21
  80f7ac:	9009883a 	mov	r4,r18
  80f7b0:	08111b80 	call	8111b8 <_sbrk_r>
  80f7b4:	00ffffc4 	movi	r3,-1
  80f7b8:	10c0e126 	beq	r2,r3,80fb40 <_malloc_r+0x788>
  80f7bc:	1505c83a 	sub	r2,r2,r20
  80f7c0:	1545883a 	add	r2,r2,r21
  80f7c4:	10800054 	ori	r2,r2,1
  80f7c8:	e0c00017 	ldw	r3,0(fp)
  80f7cc:	9d000215 	stw	r20,8(r19)
  80f7d0:	a0800115 	stw	r2,4(r20)
  80f7d4:	a8c7883a 	add	r3,r21,r3
  80f7d8:	e0c00015 	stw	r3,0(fp)
  80f7dc:	84c00e26 	beq	r16,r19,80f818 <_malloc_r+0x460>
  80f7e0:	018003c4 	movi	r6,15
  80f7e4:	3580a72e 	bgeu	r6,r22,80fa84 <_malloc_r+0x6cc>
  80f7e8:	81400117 	ldw	r5,4(r16)
  80f7ec:	013ffe04 	movi	r4,-8
  80f7f0:	b0bffd04 	addi	r2,r22,-12
  80f7f4:	1104703a 	and	r2,r2,r4
  80f7f8:	2900004c 	andi	r4,r5,1
  80f7fc:	2088b03a 	or	r4,r4,r2
  80f800:	81000115 	stw	r4,4(r16)
  80f804:	01400144 	movi	r5,5
  80f808:	8089883a 	add	r4,r16,r2
  80f80c:	21400115 	stw	r5,4(r4)
  80f810:	21400215 	stw	r5,8(r4)
  80f814:	3080cd36 	bltu	r6,r2,80fb4c <_malloc_r+0x794>
  80f818:	008020b4 	movhi	r2,130
  80f81c:	10b66404 	addi	r2,r2,-9840
  80f820:	11000017 	ldw	r4,0(r2)
  80f824:	20c0012e 	bgeu	r4,r3,80f82c <_malloc_r+0x474>
  80f828:	10c00015 	stw	r3,0(r2)
  80f82c:	008020b4 	movhi	r2,130
  80f830:	10b66304 	addi	r2,r2,-9844
  80f834:	11000017 	ldw	r4,0(r2)
  80f838:	9c000217 	ldw	r16,8(r19)
  80f83c:	20c0012e 	bgeu	r4,r3,80f844 <_malloc_r+0x48c>
  80f840:	10c00015 	stw	r3,0(r2)
  80f844:	80c00117 	ldw	r3,4(r16)
  80f848:	00bfff04 	movi	r2,-4
  80f84c:	1886703a 	and	r3,r3,r2
  80f850:	1c45c83a 	sub	r2,r3,r17
  80f854:	1c400236 	bltu	r3,r17,80f860 <_malloc_r+0x4a8>
  80f858:	00c003c4 	movi	r3,15
  80f85c:	18800416 	blt	r3,r2,80f870 <_malloc_r+0x4b8>
  80f860:	9009883a 	mov	r4,r18
  80f864:	08177000 	call	817700 <__malloc_unlock>
  80f868:	0005883a 	mov	r2,zero
  80f86c:	003f7b06 	br	80f65c <__alt_data_end+0xff80f65c>
  80f870:	88c00054 	ori	r3,r17,1
  80f874:	80c00115 	stw	r3,4(r16)
  80f878:	8463883a 	add	r17,r16,r17
  80f87c:	10800054 	ori	r2,r2,1
  80f880:	9c400215 	stw	r17,8(r19)
  80f884:	88800115 	stw	r2,4(r17)
  80f888:	9009883a 	mov	r4,r18
  80f88c:	08177000 	call	817700 <__malloc_unlock>
  80f890:	80800204 	addi	r2,r16,8
  80f894:	003f7106 	br	80f65c <__alt_data_end+0xff80f65c>
  80f898:	00c00504 	movi	r3,20
  80f89c:	18804a2e 	bgeu	r3,r2,80f9c8 <_malloc_r+0x610>
  80f8a0:	00c01504 	movi	r3,84
  80f8a4:	18806e36 	bltu	r3,r2,80fa60 <_malloc_r+0x6a8>
  80f8a8:	8804d33a 	srli	r2,r17,12
  80f8ac:	12001bc4 	addi	r8,r2,111
  80f8b0:	11c01b84 	addi	r7,r2,110
  80f8b4:	4209883a 	add	r4,r8,r8
  80f8b8:	003edd06 	br	80f430 <__alt_data_end+0xff80f430>
  80f8bc:	3804d27a 	srli	r2,r7,9
  80f8c0:	00c00104 	movi	r3,4
  80f8c4:	1880442e 	bgeu	r3,r2,80f9d8 <_malloc_r+0x620>
  80f8c8:	00c00504 	movi	r3,20
  80f8cc:	18808136 	bltu	r3,r2,80fad4 <_malloc_r+0x71c>
  80f8d0:	11401704 	addi	r5,r2,92
  80f8d4:	10c016c4 	addi	r3,r2,91
  80f8d8:	294b883a 	add	r5,r5,r5
  80f8dc:	294b883a 	add	r5,r5,r5
  80f8e0:	294b883a 	add	r5,r5,r5
  80f8e4:	994b883a 	add	r5,r19,r5
  80f8e8:	28800017 	ldw	r2,0(r5)
  80f8ec:	018020b4 	movhi	r6,130
  80f8f0:	297ffe04 	addi	r5,r5,-8
  80f8f4:	31b0f704 	addi	r6,r6,-15396
  80f8f8:	28806526 	beq	r5,r2,80fa90 <_malloc_r+0x6d8>
  80f8fc:	01bfff04 	movi	r6,-4
  80f900:	10c00117 	ldw	r3,4(r2)
  80f904:	1986703a 	and	r3,r3,r6
  80f908:	38c0022e 	bgeu	r7,r3,80f914 <_malloc_r+0x55c>
  80f90c:	10800217 	ldw	r2,8(r2)
  80f910:	28bffb1e 	bne	r5,r2,80f900 <__alt_data_end+0xff80f900>
  80f914:	11400317 	ldw	r5,12(r2)
  80f918:	98c00117 	ldw	r3,4(r19)
  80f91c:	81400315 	stw	r5,12(r16)
  80f920:	80800215 	stw	r2,8(r16)
  80f924:	2c000215 	stw	r16,8(r5)
  80f928:	14000315 	stw	r16,12(r2)
  80f92c:	003ef806 	br	80f510 <__alt_data_end+0xff80f510>
  80f930:	88c00054 	ori	r3,r17,1
  80f934:	80c00115 	stw	r3,4(r16)
  80f938:	8463883a 	add	r17,r16,r17
  80f93c:	34400515 	stw	r17,20(r6)
  80f940:	34400415 	stw	r17,16(r6)
  80f944:	10c00054 	ori	r3,r2,1
  80f948:	8a000315 	stw	r8,12(r17)
  80f94c:	8a000215 	stw	r8,8(r17)
  80f950:	88c00115 	stw	r3,4(r17)
  80f954:	88a3883a 	add	r17,r17,r2
  80f958:	88800015 	stw	r2,0(r17)
  80f95c:	9009883a 	mov	r4,r18
  80f960:	08177000 	call	817700 <__malloc_unlock>
  80f964:	80800204 	addi	r2,r16,8
  80f968:	003f3c06 	br	80f65c <__alt_data_end+0xff80f65c>
  80f96c:	30c00117 	ldw	r3,4(r6)
  80f970:	003ee706 	br	80f510 <__alt_data_end+0xff80f510>
  80f974:	5ac00044 	addi	r11,r11,1
  80f978:	588000cc 	andi	r2,r11,3
  80f97c:	31800204 	addi	r6,r6,8
  80f980:	103efd1e 	bne	r2,zero,80f578 <__alt_data_end+0xff80f578>
  80f984:	00002406 	br	80fa18 <_malloc_r+0x660>
  80f988:	14000317 	ldw	r16,12(r2)
  80f98c:	143f251e 	bne	r2,r16,80f624 <__alt_data_end+0xff80f624>
  80f990:	21000084 	addi	r4,r4,2
  80f994:	003ebc06 	br	80f488 <__alt_data_end+0xff80f488>
  80f998:	8085883a 	add	r2,r16,r2
  80f99c:	10c00117 	ldw	r3,4(r2)
  80f9a0:	81000317 	ldw	r4,12(r16)
  80f9a4:	81400217 	ldw	r5,8(r16)
  80f9a8:	18c00054 	ori	r3,r3,1
  80f9ac:	10c00115 	stw	r3,4(r2)
  80f9b0:	29000315 	stw	r4,12(r5)
  80f9b4:	21400215 	stw	r5,8(r4)
  80f9b8:	9009883a 	mov	r4,r18
  80f9bc:	08177000 	call	817700 <__malloc_unlock>
  80f9c0:	80800204 	addi	r2,r16,8
  80f9c4:	003f2506 	br	80f65c <__alt_data_end+0xff80f65c>
  80f9c8:	12001704 	addi	r8,r2,92
  80f9cc:	11c016c4 	addi	r7,r2,91
  80f9d0:	4209883a 	add	r4,r8,r8
  80f9d4:	003e9606 	br	80f430 <__alt_data_end+0xff80f430>
  80f9d8:	3804d1ba 	srli	r2,r7,6
  80f9dc:	11400e44 	addi	r5,r2,57
  80f9e0:	10c00e04 	addi	r3,r2,56
  80f9e4:	294b883a 	add	r5,r5,r5
  80f9e8:	003fbc06 	br	80f8dc <__alt_data_end+0xff80f8dc>
  80f9ec:	84ff5926 	beq	r16,r19,80f754 <__alt_data_end+0xff80f754>
  80f9f0:	008020b4 	movhi	r2,130
  80f9f4:	10b0f704 	addi	r2,r2,-15396
  80f9f8:	14000217 	ldw	r16,8(r2)
  80f9fc:	00bfff04 	movi	r2,-4
  80fa00:	80c00117 	ldw	r3,4(r16)
  80fa04:	1886703a 	and	r3,r3,r2
  80fa08:	003f9106 	br	80f850 <__alt_data_end+0xff80f850>
  80fa0c:	60800217 	ldw	r2,8(r12)
  80fa10:	213fffc4 	addi	r4,r4,-1
  80fa14:	1300651e 	bne	r2,r12,80fbac <_malloc_r+0x7f4>
  80fa18:	208000cc 	andi	r2,r4,3
  80fa1c:	633ffe04 	addi	r12,r12,-8
  80fa20:	103ffa1e 	bne	r2,zero,80fa0c <__alt_data_end+0xff80fa0c>
  80fa24:	98800117 	ldw	r2,4(r19)
  80fa28:	0146303a 	nor	r3,zero,r5
  80fa2c:	1884703a 	and	r2,r3,r2
  80fa30:	98800115 	stw	r2,4(r19)
  80fa34:	294b883a 	add	r5,r5,r5
  80fa38:	117f2836 	bltu	r2,r5,80f6dc <__alt_data_end+0xff80f6dc>
  80fa3c:	283f2726 	beq	r5,zero,80f6dc <__alt_data_end+0xff80f6dc>
  80fa40:	2886703a 	and	r3,r5,r2
  80fa44:	5809883a 	mov	r4,r11
  80fa48:	183ec31e 	bne	r3,zero,80f558 <__alt_data_end+0xff80f558>
  80fa4c:	294b883a 	add	r5,r5,r5
  80fa50:	2886703a 	and	r3,r5,r2
  80fa54:	21000104 	addi	r4,r4,4
  80fa58:	183ffc26 	beq	r3,zero,80fa4c <__alt_data_end+0xff80fa4c>
  80fa5c:	003ebe06 	br	80f558 <__alt_data_end+0xff80f558>
  80fa60:	00c05504 	movi	r3,340
  80fa64:	18801236 	bltu	r3,r2,80fab0 <_malloc_r+0x6f8>
  80fa68:	8804d3fa 	srli	r2,r17,15
  80fa6c:	12001e04 	addi	r8,r2,120
  80fa70:	11c01dc4 	addi	r7,r2,119
  80fa74:	4209883a 	add	r4,r8,r8
  80fa78:	003e6d06 	br	80f430 <__alt_data_end+0xff80f430>
  80fa7c:	00c40004 	movi	r3,4096
  80fa80:	003f4606 	br	80f79c <__alt_data_end+0xff80f79c>
  80fa84:	00800044 	movi	r2,1
  80fa88:	a0800115 	stw	r2,4(r20)
  80fa8c:	003f7406 	br	80f860 <__alt_data_end+0xff80f860>
  80fa90:	1805d0ba 	srai	r2,r3,2
  80fa94:	01c00044 	movi	r7,1
  80fa98:	30c00117 	ldw	r3,4(r6)
  80fa9c:	388e983a 	sll	r7,r7,r2
  80faa0:	2805883a 	mov	r2,r5
  80faa4:	38c6b03a 	or	r3,r7,r3
  80faa8:	30c00115 	stw	r3,4(r6)
  80faac:	003f9b06 	br	80f91c <__alt_data_end+0xff80f91c>
  80fab0:	00c15504 	movi	r3,1364
  80fab4:	18801a36 	bltu	r3,r2,80fb20 <_malloc_r+0x768>
  80fab8:	8804d4ba 	srli	r2,r17,18
  80fabc:	12001f44 	addi	r8,r2,125
  80fac0:	11c01f04 	addi	r7,r2,124
  80fac4:	4209883a 	add	r4,r8,r8
  80fac8:	003e5906 	br	80f430 <__alt_data_end+0xff80f430>
  80facc:	ad400404 	addi	r21,r21,16
  80fad0:	003f1706 	br	80f730 <__alt_data_end+0xff80f730>
  80fad4:	00c01504 	movi	r3,84
  80fad8:	18802336 	bltu	r3,r2,80fb68 <_malloc_r+0x7b0>
  80fadc:	3804d33a 	srli	r2,r7,12
  80fae0:	11401bc4 	addi	r5,r2,111
  80fae4:	10c01b84 	addi	r3,r2,110
  80fae8:	294b883a 	add	r5,r5,r5
  80faec:	003f7b06 	br	80f8dc <__alt_data_end+0xff80f8dc>
  80faf0:	9c000217 	ldw	r16,8(r19)
  80faf4:	00bfff04 	movi	r2,-4
  80faf8:	80c00117 	ldw	r3,4(r16)
  80fafc:	1886703a 	and	r3,r3,r2
  80fb00:	003f5306 	br	80f850 <__alt_data_end+0xff80f850>
  80fb04:	3083ffcc 	andi	r2,r6,4095
  80fb08:	103f181e 	bne	r2,zero,80f76c <__alt_data_end+0xff80f76c>
  80fb0c:	99000217 	ldw	r4,8(r19)
  80fb10:	b545883a 	add	r2,r22,r21
  80fb14:	10800054 	ori	r2,r2,1
  80fb18:	20800115 	stw	r2,4(r4)
  80fb1c:	003f3e06 	br	80f818 <__alt_data_end+0xff80f818>
  80fb20:	01003f84 	movi	r4,254
  80fb24:	02001fc4 	movi	r8,127
  80fb28:	01c01f84 	movi	r7,126
  80fb2c:	003e4006 	br	80f430 <__alt_data_end+0xff80f430>
  80fb30:	008020b4 	movhi	r2,130
  80fb34:	10b30404 	addi	r2,r2,-13296
  80fb38:	15000015 	stw	r20,0(r2)
  80fb3c:	003f1106 	br	80f784 <__alt_data_end+0xff80f784>
  80fb40:	00800044 	movi	r2,1
  80fb44:	002b883a 	mov	r21,zero
  80fb48:	003f1f06 	br	80f7c8 <__alt_data_end+0xff80f7c8>
  80fb4c:	81400204 	addi	r5,r16,8
  80fb50:	9009883a 	mov	r4,r18
  80fb54:	080ec880 	call	80ec88 <_free_r>
  80fb58:	008020b4 	movhi	r2,130
  80fb5c:	10b67404 	addi	r2,r2,-9776
  80fb60:	10c00017 	ldw	r3,0(r2)
  80fb64:	003f2c06 	br	80f818 <__alt_data_end+0xff80f818>
  80fb68:	00c05504 	movi	r3,340
  80fb6c:	18800536 	bltu	r3,r2,80fb84 <_malloc_r+0x7cc>
  80fb70:	3804d3fa 	srli	r2,r7,15
  80fb74:	11401e04 	addi	r5,r2,120
  80fb78:	10c01dc4 	addi	r3,r2,119
  80fb7c:	294b883a 	add	r5,r5,r5
  80fb80:	003f5606 	br	80f8dc <__alt_data_end+0xff80f8dc>
  80fb84:	00c15504 	movi	r3,1364
  80fb88:	18800536 	bltu	r3,r2,80fba0 <_malloc_r+0x7e8>
  80fb8c:	3804d4ba 	srli	r2,r7,18
  80fb90:	11401f44 	addi	r5,r2,125
  80fb94:	10c01f04 	addi	r3,r2,124
  80fb98:	294b883a 	add	r5,r5,r5
  80fb9c:	003f4f06 	br	80f8dc <__alt_data_end+0xff80f8dc>
  80fba0:	01403f84 	movi	r5,254
  80fba4:	00c01f84 	movi	r3,126
  80fba8:	003f4c06 	br	80f8dc <__alt_data_end+0xff80f8dc>
  80fbac:	98800117 	ldw	r2,4(r19)
  80fbb0:	003fa006 	br	80fa34 <__alt_data_end+0xff80fa34>
  80fbb4:	8808d0fa 	srli	r4,r17,3
  80fbb8:	20800044 	addi	r2,r4,1
  80fbbc:	1085883a 	add	r2,r2,r2
  80fbc0:	003e9006 	br	80f604 <__alt_data_end+0xff80f604>

0080fbc4 <memchr>:
  80fbc4:	208000cc 	andi	r2,r4,3
  80fbc8:	280f883a 	mov	r7,r5
  80fbcc:	10003426 	beq	r2,zero,80fca0 <memchr+0xdc>
  80fbd0:	30bfffc4 	addi	r2,r6,-1
  80fbd4:	30001a26 	beq	r6,zero,80fc40 <memchr+0x7c>
  80fbd8:	20c00003 	ldbu	r3,0(r4)
  80fbdc:	29803fcc 	andi	r6,r5,255
  80fbe0:	30c0051e 	bne	r6,r3,80fbf8 <memchr+0x34>
  80fbe4:	00001806 	br	80fc48 <memchr+0x84>
  80fbe8:	10001526 	beq	r2,zero,80fc40 <memchr+0x7c>
  80fbec:	20c00003 	ldbu	r3,0(r4)
  80fbf0:	10bfffc4 	addi	r2,r2,-1
  80fbf4:	30c01426 	beq	r6,r3,80fc48 <memchr+0x84>
  80fbf8:	21000044 	addi	r4,r4,1
  80fbfc:	20c000cc 	andi	r3,r4,3
  80fc00:	183ff91e 	bne	r3,zero,80fbe8 <__alt_data_end+0xff80fbe8>
  80fc04:	020000c4 	movi	r8,3
  80fc08:	40801136 	bltu	r8,r2,80fc50 <memchr+0x8c>
  80fc0c:	10000c26 	beq	r2,zero,80fc40 <memchr+0x7c>
  80fc10:	20c00003 	ldbu	r3,0(r4)
  80fc14:	29403fcc 	andi	r5,r5,255
  80fc18:	28c00b26 	beq	r5,r3,80fc48 <memchr+0x84>
  80fc1c:	20c00044 	addi	r3,r4,1
  80fc20:	39803fcc 	andi	r6,r7,255
  80fc24:	2089883a 	add	r4,r4,r2
  80fc28:	00000306 	br	80fc38 <memchr+0x74>
  80fc2c:	18c00044 	addi	r3,r3,1
  80fc30:	197fffc3 	ldbu	r5,-1(r3)
  80fc34:	31400526 	beq	r6,r5,80fc4c <memchr+0x88>
  80fc38:	1805883a 	mov	r2,r3
  80fc3c:	20fffb1e 	bne	r4,r3,80fc2c <__alt_data_end+0xff80fc2c>
  80fc40:	0005883a 	mov	r2,zero
  80fc44:	f800283a 	ret
  80fc48:	2005883a 	mov	r2,r4
  80fc4c:	f800283a 	ret
  80fc50:	28c03fcc 	andi	r3,r5,255
  80fc54:	1812923a 	slli	r9,r3,8
  80fc58:	02ffbff4 	movhi	r11,65279
  80fc5c:	02a02074 	movhi	r10,32897
  80fc60:	48d2b03a 	or	r9,r9,r3
  80fc64:	4806943a 	slli	r3,r9,16
  80fc68:	5affbfc4 	addi	r11,r11,-257
  80fc6c:	52a02004 	addi	r10,r10,-32640
  80fc70:	48d2b03a 	or	r9,r9,r3
  80fc74:	20c00017 	ldw	r3,0(r4)
  80fc78:	48c6f03a 	xor	r3,r9,r3
  80fc7c:	1acd883a 	add	r6,r3,r11
  80fc80:	00c6303a 	nor	r3,zero,r3
  80fc84:	30c6703a 	and	r3,r6,r3
  80fc88:	1a86703a 	and	r3,r3,r10
  80fc8c:	183fe01e 	bne	r3,zero,80fc10 <__alt_data_end+0xff80fc10>
  80fc90:	10bfff04 	addi	r2,r2,-4
  80fc94:	21000104 	addi	r4,r4,4
  80fc98:	40bff636 	bltu	r8,r2,80fc74 <__alt_data_end+0xff80fc74>
  80fc9c:	003fdb06 	br	80fc0c <__alt_data_end+0xff80fc0c>
  80fca0:	3005883a 	mov	r2,r6
  80fca4:	003fd706 	br	80fc04 <__alt_data_end+0xff80fc04>

0080fca8 <memcpy>:
  80fca8:	defffd04 	addi	sp,sp,-12
  80fcac:	dfc00215 	stw	ra,8(sp)
  80fcb0:	dc400115 	stw	r17,4(sp)
  80fcb4:	dc000015 	stw	r16,0(sp)
  80fcb8:	00c003c4 	movi	r3,15
  80fcbc:	2005883a 	mov	r2,r4
  80fcc0:	1980452e 	bgeu	r3,r6,80fdd8 <memcpy+0x130>
  80fcc4:	2906b03a 	or	r3,r5,r4
  80fcc8:	18c000cc 	andi	r3,r3,3
  80fccc:	1800441e 	bne	r3,zero,80fde0 <memcpy+0x138>
  80fcd0:	347ffc04 	addi	r17,r6,-16
  80fcd4:	8822d13a 	srli	r17,r17,4
  80fcd8:	28c00104 	addi	r3,r5,4
  80fcdc:	23400104 	addi	r13,r4,4
  80fce0:	8820913a 	slli	r16,r17,4
  80fce4:	2b000204 	addi	r12,r5,8
  80fce8:	22c00204 	addi	r11,r4,8
  80fcec:	84000504 	addi	r16,r16,20
  80fcf0:	2a800304 	addi	r10,r5,12
  80fcf4:	22400304 	addi	r9,r4,12
  80fcf8:	2c21883a 	add	r16,r5,r16
  80fcfc:	2811883a 	mov	r8,r5
  80fd00:	200f883a 	mov	r7,r4
  80fd04:	41000017 	ldw	r4,0(r8)
  80fd08:	1fc00017 	ldw	ra,0(r3)
  80fd0c:	63c00017 	ldw	r15,0(r12)
  80fd10:	39000015 	stw	r4,0(r7)
  80fd14:	53800017 	ldw	r14,0(r10)
  80fd18:	6fc00015 	stw	ra,0(r13)
  80fd1c:	5bc00015 	stw	r15,0(r11)
  80fd20:	4b800015 	stw	r14,0(r9)
  80fd24:	18c00404 	addi	r3,r3,16
  80fd28:	39c00404 	addi	r7,r7,16
  80fd2c:	42000404 	addi	r8,r8,16
  80fd30:	6b400404 	addi	r13,r13,16
  80fd34:	63000404 	addi	r12,r12,16
  80fd38:	5ac00404 	addi	r11,r11,16
  80fd3c:	52800404 	addi	r10,r10,16
  80fd40:	4a400404 	addi	r9,r9,16
  80fd44:	1c3fef1e 	bne	r3,r16,80fd04 <__alt_data_end+0xff80fd04>
  80fd48:	89c00044 	addi	r7,r17,1
  80fd4c:	380e913a 	slli	r7,r7,4
  80fd50:	310003cc 	andi	r4,r6,15
  80fd54:	02c000c4 	movi	r11,3
  80fd58:	11c7883a 	add	r3,r2,r7
  80fd5c:	29cb883a 	add	r5,r5,r7
  80fd60:	5900212e 	bgeu	r11,r4,80fde8 <memcpy+0x140>
  80fd64:	1813883a 	mov	r9,r3
  80fd68:	2811883a 	mov	r8,r5
  80fd6c:	200f883a 	mov	r7,r4
  80fd70:	42800017 	ldw	r10,0(r8)
  80fd74:	4a400104 	addi	r9,r9,4
  80fd78:	39ffff04 	addi	r7,r7,-4
  80fd7c:	4abfff15 	stw	r10,-4(r9)
  80fd80:	42000104 	addi	r8,r8,4
  80fd84:	59fffa36 	bltu	r11,r7,80fd70 <__alt_data_end+0xff80fd70>
  80fd88:	213fff04 	addi	r4,r4,-4
  80fd8c:	2008d0ba 	srli	r4,r4,2
  80fd90:	318000cc 	andi	r6,r6,3
  80fd94:	21000044 	addi	r4,r4,1
  80fd98:	2109883a 	add	r4,r4,r4
  80fd9c:	2109883a 	add	r4,r4,r4
  80fda0:	1907883a 	add	r3,r3,r4
  80fda4:	290b883a 	add	r5,r5,r4
  80fda8:	30000626 	beq	r6,zero,80fdc4 <memcpy+0x11c>
  80fdac:	198d883a 	add	r6,r3,r6
  80fdb0:	29c00003 	ldbu	r7,0(r5)
  80fdb4:	18c00044 	addi	r3,r3,1
  80fdb8:	29400044 	addi	r5,r5,1
  80fdbc:	19ffffc5 	stb	r7,-1(r3)
  80fdc0:	19bffb1e 	bne	r3,r6,80fdb0 <__alt_data_end+0xff80fdb0>
  80fdc4:	dfc00217 	ldw	ra,8(sp)
  80fdc8:	dc400117 	ldw	r17,4(sp)
  80fdcc:	dc000017 	ldw	r16,0(sp)
  80fdd0:	dec00304 	addi	sp,sp,12
  80fdd4:	f800283a 	ret
  80fdd8:	2007883a 	mov	r3,r4
  80fddc:	003ff206 	br	80fda8 <__alt_data_end+0xff80fda8>
  80fde0:	2007883a 	mov	r3,r4
  80fde4:	003ff106 	br	80fdac <__alt_data_end+0xff80fdac>
  80fde8:	200d883a 	mov	r6,r4
  80fdec:	003fee06 	br	80fda8 <__alt_data_end+0xff80fda8>

0080fdf0 <_Balloc>:
  80fdf0:	20801317 	ldw	r2,76(r4)
  80fdf4:	defffc04 	addi	sp,sp,-16
  80fdf8:	dc400115 	stw	r17,4(sp)
  80fdfc:	dc000015 	stw	r16,0(sp)
  80fe00:	dfc00315 	stw	ra,12(sp)
  80fe04:	dc800215 	stw	r18,8(sp)
  80fe08:	2023883a 	mov	r17,r4
  80fe0c:	2821883a 	mov	r16,r5
  80fe10:	10000f26 	beq	r2,zero,80fe50 <_Balloc+0x60>
  80fe14:	8407883a 	add	r3,r16,r16
  80fe18:	18c7883a 	add	r3,r3,r3
  80fe1c:	10c7883a 	add	r3,r2,r3
  80fe20:	18800017 	ldw	r2,0(r3)
  80fe24:	10001126 	beq	r2,zero,80fe6c <_Balloc+0x7c>
  80fe28:	11000017 	ldw	r4,0(r2)
  80fe2c:	19000015 	stw	r4,0(r3)
  80fe30:	10000415 	stw	zero,16(r2)
  80fe34:	10000315 	stw	zero,12(r2)
  80fe38:	dfc00317 	ldw	ra,12(sp)
  80fe3c:	dc800217 	ldw	r18,8(sp)
  80fe40:	dc400117 	ldw	r17,4(sp)
  80fe44:	dc000017 	ldw	r16,0(sp)
  80fe48:	dec00404 	addi	sp,sp,16
  80fe4c:	f800283a 	ret
  80fe50:	01800844 	movi	r6,33
  80fe54:	01400104 	movi	r5,4
  80fe58:	0812c780 	call	812c78 <_calloc_r>
  80fe5c:	88801315 	stw	r2,76(r17)
  80fe60:	103fec1e 	bne	r2,zero,80fe14 <__alt_data_end+0xff80fe14>
  80fe64:	0005883a 	mov	r2,zero
  80fe68:	003ff306 	br	80fe38 <__alt_data_end+0xff80fe38>
  80fe6c:	01400044 	movi	r5,1
  80fe70:	2c24983a 	sll	r18,r5,r16
  80fe74:	8809883a 	mov	r4,r17
  80fe78:	91800144 	addi	r6,r18,5
  80fe7c:	318d883a 	add	r6,r6,r6
  80fe80:	318d883a 	add	r6,r6,r6
  80fe84:	0812c780 	call	812c78 <_calloc_r>
  80fe88:	103ff626 	beq	r2,zero,80fe64 <__alt_data_end+0xff80fe64>
  80fe8c:	14000115 	stw	r16,4(r2)
  80fe90:	14800215 	stw	r18,8(r2)
  80fe94:	003fe606 	br	80fe30 <__alt_data_end+0xff80fe30>

0080fe98 <_Bfree>:
  80fe98:	28000826 	beq	r5,zero,80febc <_Bfree+0x24>
  80fe9c:	28c00117 	ldw	r3,4(r5)
  80fea0:	20801317 	ldw	r2,76(r4)
  80fea4:	18c7883a 	add	r3,r3,r3
  80fea8:	18c7883a 	add	r3,r3,r3
  80feac:	10c5883a 	add	r2,r2,r3
  80feb0:	10c00017 	ldw	r3,0(r2)
  80feb4:	28c00015 	stw	r3,0(r5)
  80feb8:	11400015 	stw	r5,0(r2)
  80febc:	f800283a 	ret

0080fec0 <__multadd>:
  80fec0:	defffa04 	addi	sp,sp,-24
  80fec4:	dc800315 	stw	r18,12(sp)
  80fec8:	dc400215 	stw	r17,8(sp)
  80fecc:	dc000115 	stw	r16,4(sp)
  80fed0:	2823883a 	mov	r17,r5
  80fed4:	2c000417 	ldw	r16,16(r5)
  80fed8:	dfc00515 	stw	ra,20(sp)
  80fedc:	dcc00415 	stw	r19,16(sp)
  80fee0:	2025883a 	mov	r18,r4
  80fee4:	29400504 	addi	r5,r5,20
  80fee8:	0011883a 	mov	r8,zero
  80feec:	28c00017 	ldw	r3,0(r5)
  80fef0:	29400104 	addi	r5,r5,4
  80fef4:	42000044 	addi	r8,r8,1
  80fef8:	18bfffcc 	andi	r2,r3,65535
  80fefc:	1185383a 	mul	r2,r2,r6
  80ff00:	1806d43a 	srli	r3,r3,16
  80ff04:	11cf883a 	add	r7,r2,r7
  80ff08:	3808d43a 	srli	r4,r7,16
  80ff0c:	1987383a 	mul	r3,r3,r6
  80ff10:	38bfffcc 	andi	r2,r7,65535
  80ff14:	1907883a 	add	r3,r3,r4
  80ff18:	1808943a 	slli	r4,r3,16
  80ff1c:	180ed43a 	srli	r7,r3,16
  80ff20:	2085883a 	add	r2,r4,r2
  80ff24:	28bfff15 	stw	r2,-4(r5)
  80ff28:	443ff016 	blt	r8,r16,80feec <__alt_data_end+0xff80feec>
  80ff2c:	38000926 	beq	r7,zero,80ff54 <__multadd+0x94>
  80ff30:	88800217 	ldw	r2,8(r17)
  80ff34:	80800f0e 	bge	r16,r2,80ff74 <__multadd+0xb4>
  80ff38:	80800144 	addi	r2,r16,5
  80ff3c:	1085883a 	add	r2,r2,r2
  80ff40:	1085883a 	add	r2,r2,r2
  80ff44:	8885883a 	add	r2,r17,r2
  80ff48:	11c00015 	stw	r7,0(r2)
  80ff4c:	84000044 	addi	r16,r16,1
  80ff50:	8c000415 	stw	r16,16(r17)
  80ff54:	8805883a 	mov	r2,r17
  80ff58:	dfc00517 	ldw	ra,20(sp)
  80ff5c:	dcc00417 	ldw	r19,16(sp)
  80ff60:	dc800317 	ldw	r18,12(sp)
  80ff64:	dc400217 	ldw	r17,8(sp)
  80ff68:	dc000117 	ldw	r16,4(sp)
  80ff6c:	dec00604 	addi	sp,sp,24
  80ff70:	f800283a 	ret
  80ff74:	89400117 	ldw	r5,4(r17)
  80ff78:	9009883a 	mov	r4,r18
  80ff7c:	d9c00015 	stw	r7,0(sp)
  80ff80:	29400044 	addi	r5,r5,1
  80ff84:	080fdf00 	call	80fdf0 <_Balloc>
  80ff88:	89800417 	ldw	r6,16(r17)
  80ff8c:	89400304 	addi	r5,r17,12
  80ff90:	11000304 	addi	r4,r2,12
  80ff94:	31800084 	addi	r6,r6,2
  80ff98:	318d883a 	add	r6,r6,r6
  80ff9c:	318d883a 	add	r6,r6,r6
  80ffa0:	1027883a 	mov	r19,r2
  80ffa4:	080fca80 	call	80fca8 <memcpy>
  80ffa8:	d9c00017 	ldw	r7,0(sp)
  80ffac:	88000a26 	beq	r17,zero,80ffd8 <__multadd+0x118>
  80ffb0:	88c00117 	ldw	r3,4(r17)
  80ffb4:	90801317 	ldw	r2,76(r18)
  80ffb8:	18c7883a 	add	r3,r3,r3
  80ffbc:	18c7883a 	add	r3,r3,r3
  80ffc0:	10c5883a 	add	r2,r2,r3
  80ffc4:	10c00017 	ldw	r3,0(r2)
  80ffc8:	88c00015 	stw	r3,0(r17)
  80ffcc:	14400015 	stw	r17,0(r2)
  80ffd0:	9823883a 	mov	r17,r19
  80ffd4:	003fd806 	br	80ff38 <__alt_data_end+0xff80ff38>
  80ffd8:	9823883a 	mov	r17,r19
  80ffdc:	003fd606 	br	80ff38 <__alt_data_end+0xff80ff38>

0080ffe0 <__s2b>:
  80ffe0:	defff904 	addi	sp,sp,-28
  80ffe4:	dc400115 	stw	r17,4(sp)
  80ffe8:	dc000015 	stw	r16,0(sp)
  80ffec:	2023883a 	mov	r17,r4
  80fff0:	2821883a 	mov	r16,r5
  80fff4:	39000204 	addi	r4,r7,8
  80fff8:	01400244 	movi	r5,9
  80fffc:	dcc00315 	stw	r19,12(sp)
  810000:	dc800215 	stw	r18,8(sp)
  810004:	dfc00615 	stw	ra,24(sp)
  810008:	dd400515 	stw	r21,20(sp)
  81000c:	dd000415 	stw	r20,16(sp)
  810010:	3825883a 	mov	r18,r7
  810014:	3027883a 	mov	r19,r6
  810018:	080a2600 	call	80a260 <__divsi3>
  81001c:	00c00044 	movi	r3,1
  810020:	000b883a 	mov	r5,zero
  810024:	1880030e 	bge	r3,r2,810034 <__s2b+0x54>
  810028:	18c7883a 	add	r3,r3,r3
  81002c:	29400044 	addi	r5,r5,1
  810030:	18bffd16 	blt	r3,r2,810028 <__alt_data_end+0xff810028>
  810034:	8809883a 	mov	r4,r17
  810038:	080fdf00 	call	80fdf0 <_Balloc>
  81003c:	d8c00717 	ldw	r3,28(sp)
  810040:	10c00515 	stw	r3,20(r2)
  810044:	00c00044 	movi	r3,1
  810048:	10c00415 	stw	r3,16(r2)
  81004c:	00c00244 	movi	r3,9
  810050:	1cc0210e 	bge	r3,r19,8100d8 <__s2b+0xf8>
  810054:	80eb883a 	add	r21,r16,r3
  810058:	a829883a 	mov	r20,r21
  81005c:	84e1883a 	add	r16,r16,r19
  810060:	a1c00007 	ldb	r7,0(r20)
  810064:	01800284 	movi	r6,10
  810068:	a5000044 	addi	r20,r20,1
  81006c:	100b883a 	mov	r5,r2
  810070:	39fff404 	addi	r7,r7,-48
  810074:	8809883a 	mov	r4,r17
  810078:	080fec00 	call	80fec0 <__multadd>
  81007c:	a43ff81e 	bne	r20,r16,810060 <__alt_data_end+0xff810060>
  810080:	ace1883a 	add	r16,r21,r19
  810084:	843ffe04 	addi	r16,r16,-8
  810088:	9c800a0e 	bge	r19,r18,8100b4 <__s2b+0xd4>
  81008c:	94e5c83a 	sub	r18,r18,r19
  810090:	84a5883a 	add	r18,r16,r18
  810094:	81c00007 	ldb	r7,0(r16)
  810098:	01800284 	movi	r6,10
  81009c:	84000044 	addi	r16,r16,1
  8100a0:	100b883a 	mov	r5,r2
  8100a4:	39fff404 	addi	r7,r7,-48
  8100a8:	8809883a 	mov	r4,r17
  8100ac:	080fec00 	call	80fec0 <__multadd>
  8100b0:	84bff81e 	bne	r16,r18,810094 <__alt_data_end+0xff810094>
  8100b4:	dfc00617 	ldw	ra,24(sp)
  8100b8:	dd400517 	ldw	r21,20(sp)
  8100bc:	dd000417 	ldw	r20,16(sp)
  8100c0:	dcc00317 	ldw	r19,12(sp)
  8100c4:	dc800217 	ldw	r18,8(sp)
  8100c8:	dc400117 	ldw	r17,4(sp)
  8100cc:	dc000017 	ldw	r16,0(sp)
  8100d0:	dec00704 	addi	sp,sp,28
  8100d4:	f800283a 	ret
  8100d8:	84000284 	addi	r16,r16,10
  8100dc:	1827883a 	mov	r19,r3
  8100e0:	003fe906 	br	810088 <__alt_data_end+0xff810088>

008100e4 <__hi0bits>:
  8100e4:	20bfffec 	andhi	r2,r4,65535
  8100e8:	1000141e 	bne	r2,zero,81013c <__hi0bits+0x58>
  8100ec:	2008943a 	slli	r4,r4,16
  8100f0:	00800404 	movi	r2,16
  8100f4:	20ffc02c 	andhi	r3,r4,65280
  8100f8:	1800021e 	bne	r3,zero,810104 <__hi0bits+0x20>
  8100fc:	2008923a 	slli	r4,r4,8
  810100:	10800204 	addi	r2,r2,8
  810104:	20fc002c 	andhi	r3,r4,61440
  810108:	1800021e 	bne	r3,zero,810114 <__hi0bits+0x30>
  81010c:	2008913a 	slli	r4,r4,4
  810110:	10800104 	addi	r2,r2,4
  810114:	20f0002c 	andhi	r3,r4,49152
  810118:	1800031e 	bne	r3,zero,810128 <__hi0bits+0x44>
  81011c:	2109883a 	add	r4,r4,r4
  810120:	10800084 	addi	r2,r2,2
  810124:	2109883a 	add	r4,r4,r4
  810128:	20000316 	blt	r4,zero,810138 <__hi0bits+0x54>
  81012c:	2110002c 	andhi	r4,r4,16384
  810130:	2000041e 	bne	r4,zero,810144 <__hi0bits+0x60>
  810134:	00800804 	movi	r2,32
  810138:	f800283a 	ret
  81013c:	0005883a 	mov	r2,zero
  810140:	003fec06 	br	8100f4 <__alt_data_end+0xff8100f4>
  810144:	10800044 	addi	r2,r2,1
  810148:	f800283a 	ret

0081014c <__lo0bits>:
  81014c:	20c00017 	ldw	r3,0(r4)
  810150:	188001cc 	andi	r2,r3,7
  810154:	10000826 	beq	r2,zero,810178 <__lo0bits+0x2c>
  810158:	1880004c 	andi	r2,r3,1
  81015c:	1000211e 	bne	r2,zero,8101e4 <__lo0bits+0x98>
  810160:	1880008c 	andi	r2,r3,2
  810164:	1000211e 	bne	r2,zero,8101ec <__lo0bits+0xa0>
  810168:	1806d0ba 	srli	r3,r3,2
  81016c:	00800084 	movi	r2,2
  810170:	20c00015 	stw	r3,0(r4)
  810174:	f800283a 	ret
  810178:	18bfffcc 	andi	r2,r3,65535
  81017c:	10001326 	beq	r2,zero,8101cc <__lo0bits+0x80>
  810180:	0005883a 	mov	r2,zero
  810184:	19403fcc 	andi	r5,r3,255
  810188:	2800021e 	bne	r5,zero,810194 <__lo0bits+0x48>
  81018c:	1806d23a 	srli	r3,r3,8
  810190:	10800204 	addi	r2,r2,8
  810194:	194003cc 	andi	r5,r3,15
  810198:	2800021e 	bne	r5,zero,8101a4 <__lo0bits+0x58>
  81019c:	1806d13a 	srli	r3,r3,4
  8101a0:	10800104 	addi	r2,r2,4
  8101a4:	194000cc 	andi	r5,r3,3
  8101a8:	2800021e 	bne	r5,zero,8101b4 <__lo0bits+0x68>
  8101ac:	1806d0ba 	srli	r3,r3,2
  8101b0:	10800084 	addi	r2,r2,2
  8101b4:	1940004c 	andi	r5,r3,1
  8101b8:	2800081e 	bne	r5,zero,8101dc <__lo0bits+0x90>
  8101bc:	1806d07a 	srli	r3,r3,1
  8101c0:	1800051e 	bne	r3,zero,8101d8 <__lo0bits+0x8c>
  8101c4:	00800804 	movi	r2,32
  8101c8:	f800283a 	ret
  8101cc:	1806d43a 	srli	r3,r3,16
  8101d0:	00800404 	movi	r2,16
  8101d4:	003feb06 	br	810184 <__alt_data_end+0xff810184>
  8101d8:	10800044 	addi	r2,r2,1
  8101dc:	20c00015 	stw	r3,0(r4)
  8101e0:	f800283a 	ret
  8101e4:	0005883a 	mov	r2,zero
  8101e8:	f800283a 	ret
  8101ec:	1806d07a 	srli	r3,r3,1
  8101f0:	00800044 	movi	r2,1
  8101f4:	20c00015 	stw	r3,0(r4)
  8101f8:	f800283a 	ret

008101fc <__i2b>:
  8101fc:	defffd04 	addi	sp,sp,-12
  810200:	dc000015 	stw	r16,0(sp)
  810204:	04000044 	movi	r16,1
  810208:	dc400115 	stw	r17,4(sp)
  81020c:	2823883a 	mov	r17,r5
  810210:	800b883a 	mov	r5,r16
  810214:	dfc00215 	stw	ra,8(sp)
  810218:	080fdf00 	call	80fdf0 <_Balloc>
  81021c:	14400515 	stw	r17,20(r2)
  810220:	14000415 	stw	r16,16(r2)
  810224:	dfc00217 	ldw	ra,8(sp)
  810228:	dc400117 	ldw	r17,4(sp)
  81022c:	dc000017 	ldw	r16,0(sp)
  810230:	dec00304 	addi	sp,sp,12
  810234:	f800283a 	ret

00810238 <__multiply>:
  810238:	defffa04 	addi	sp,sp,-24
  81023c:	dcc00315 	stw	r19,12(sp)
  810240:	dc800215 	stw	r18,8(sp)
  810244:	34c00417 	ldw	r19,16(r6)
  810248:	2c800417 	ldw	r18,16(r5)
  81024c:	dd000415 	stw	r20,16(sp)
  810250:	dc400115 	stw	r17,4(sp)
  810254:	dfc00515 	stw	ra,20(sp)
  810258:	dc000015 	stw	r16,0(sp)
  81025c:	2829883a 	mov	r20,r5
  810260:	3023883a 	mov	r17,r6
  810264:	94c0050e 	bge	r18,r19,81027c <__multiply+0x44>
  810268:	9007883a 	mov	r3,r18
  81026c:	3029883a 	mov	r20,r6
  810270:	9825883a 	mov	r18,r19
  810274:	2823883a 	mov	r17,r5
  810278:	1827883a 	mov	r19,r3
  81027c:	a0800217 	ldw	r2,8(r20)
  810280:	94e1883a 	add	r16,r18,r19
  810284:	a1400117 	ldw	r5,4(r20)
  810288:	1400010e 	bge	r2,r16,810290 <__multiply+0x58>
  81028c:	29400044 	addi	r5,r5,1
  810290:	080fdf00 	call	80fdf0 <_Balloc>
  810294:	8415883a 	add	r10,r16,r16
  810298:	12c00504 	addi	r11,r2,20
  81029c:	5295883a 	add	r10,r10,r10
  8102a0:	5a95883a 	add	r10,r11,r10
  8102a4:	5807883a 	mov	r3,r11
  8102a8:	5a80032e 	bgeu	r11,r10,8102b8 <__multiply+0x80>
  8102ac:	18000015 	stw	zero,0(r3)
  8102b0:	18c00104 	addi	r3,r3,4
  8102b4:	1abffd36 	bltu	r3,r10,8102ac <__alt_data_end+0xff8102ac>
  8102b8:	9ce7883a 	add	r19,r19,r19
  8102bc:	94a5883a 	add	r18,r18,r18
  8102c0:	89800504 	addi	r6,r17,20
  8102c4:	9ce7883a 	add	r19,r19,r19
  8102c8:	a3400504 	addi	r13,r20,20
  8102cc:	94a5883a 	add	r18,r18,r18
  8102d0:	34d9883a 	add	r12,r6,r19
  8102d4:	6c93883a 	add	r9,r13,r18
  8102d8:	3300422e 	bgeu	r6,r12,8103e4 <__multiply+0x1ac>
  8102dc:	37c00017 	ldw	ra,0(r6)
  8102e0:	fbffffcc 	andi	r15,ra,65535
  8102e4:	78001b26 	beq	r15,zero,810354 <__multiply+0x11c>
  8102e8:	5811883a 	mov	r8,r11
  8102ec:	681d883a 	mov	r14,r13
  8102f0:	000f883a 	mov	r7,zero
  8102f4:	71000017 	ldw	r4,0(r14)
  8102f8:	40c00017 	ldw	r3,0(r8)
  8102fc:	73800104 	addi	r14,r14,4
  810300:	217fffcc 	andi	r5,r4,65535
  810304:	2bcb383a 	mul	r5,r5,r15
  810308:	2008d43a 	srli	r4,r4,16
  81030c:	1c7fffcc 	andi	r17,r3,65535
  810310:	2c4b883a 	add	r5,r5,r17
  810314:	29cb883a 	add	r5,r5,r7
  810318:	23c9383a 	mul	r4,r4,r15
  81031c:	1806d43a 	srli	r3,r3,16
  810320:	280ed43a 	srli	r7,r5,16
  810324:	297fffcc 	andi	r5,r5,65535
  810328:	20c7883a 	add	r3,r4,r3
  81032c:	19c7883a 	add	r3,r3,r7
  810330:	1808943a 	slli	r4,r3,16
  810334:	4023883a 	mov	r17,r8
  810338:	180ed43a 	srli	r7,r3,16
  81033c:	214ab03a 	or	r5,r4,r5
  810340:	41400015 	stw	r5,0(r8)
  810344:	42000104 	addi	r8,r8,4
  810348:	727fea36 	bltu	r14,r9,8102f4 <__alt_data_end+0xff8102f4>
  81034c:	89c00115 	stw	r7,4(r17)
  810350:	37c00017 	ldw	ra,0(r6)
  810354:	f83ed43a 	srli	ra,ra,16
  810358:	f8001f26 	beq	ra,zero,8103d8 <__multiply+0x1a0>
  81035c:	58c00017 	ldw	r3,0(r11)
  810360:	681d883a 	mov	r14,r13
  810364:	581f883a 	mov	r15,r11
  810368:	1811883a 	mov	r8,r3
  81036c:	5825883a 	mov	r18,r11
  810370:	000f883a 	mov	r7,zero
  810374:	00000106 	br	81037c <__multiply+0x144>
  810378:	8825883a 	mov	r18,r17
  81037c:	7140000b 	ldhu	r5,0(r14)
  810380:	4010d43a 	srli	r8,r8,16
  810384:	193fffcc 	andi	r4,r3,65535
  810388:	2fcb383a 	mul	r5,r5,ra
  81038c:	7bc00104 	addi	r15,r15,4
  810390:	73800104 	addi	r14,r14,4
  810394:	2a0b883a 	add	r5,r5,r8
  810398:	29cb883a 	add	r5,r5,r7
  81039c:	2806943a 	slli	r3,r5,16
  8103a0:	94400104 	addi	r17,r18,4
  8103a4:	280ad43a 	srli	r5,r5,16
  8103a8:	1908b03a 	or	r4,r3,r4
  8103ac:	793fff15 	stw	r4,-4(r15)
  8103b0:	70ffff17 	ldw	r3,-4(r14)
  8103b4:	8a000017 	ldw	r8,0(r17)
  8103b8:	1806d43a 	srli	r3,r3,16
  8103bc:	413fffcc 	andi	r4,r8,65535
  8103c0:	1fc7383a 	mul	r3,r3,ra
  8103c4:	1907883a 	add	r3,r3,r4
  8103c8:	1947883a 	add	r3,r3,r5
  8103cc:	180ed43a 	srli	r7,r3,16
  8103d0:	727fe936 	bltu	r14,r9,810378 <__alt_data_end+0xff810378>
  8103d4:	90c00115 	stw	r3,4(r18)
  8103d8:	31800104 	addi	r6,r6,4
  8103dc:	5ac00104 	addi	r11,r11,4
  8103e0:	333fbe36 	bltu	r6,r12,8102dc <__alt_data_end+0xff8102dc>
  8103e4:	0400090e 	bge	zero,r16,81040c <__multiply+0x1d4>
  8103e8:	50ffff17 	ldw	r3,-4(r10)
  8103ec:	52bfff04 	addi	r10,r10,-4
  8103f0:	18000326 	beq	r3,zero,810400 <__multiply+0x1c8>
  8103f4:	00000506 	br	81040c <__multiply+0x1d4>
  8103f8:	50c00017 	ldw	r3,0(r10)
  8103fc:	1800031e 	bne	r3,zero,81040c <__multiply+0x1d4>
  810400:	843fffc4 	addi	r16,r16,-1
  810404:	52bfff04 	addi	r10,r10,-4
  810408:	803ffb1e 	bne	r16,zero,8103f8 <__alt_data_end+0xff8103f8>
  81040c:	14000415 	stw	r16,16(r2)
  810410:	dfc00517 	ldw	ra,20(sp)
  810414:	dd000417 	ldw	r20,16(sp)
  810418:	dcc00317 	ldw	r19,12(sp)
  81041c:	dc800217 	ldw	r18,8(sp)
  810420:	dc400117 	ldw	r17,4(sp)
  810424:	dc000017 	ldw	r16,0(sp)
  810428:	dec00604 	addi	sp,sp,24
  81042c:	f800283a 	ret

00810430 <__pow5mult>:
  810430:	defffa04 	addi	sp,sp,-24
  810434:	dcc00315 	stw	r19,12(sp)
  810438:	dc000015 	stw	r16,0(sp)
  81043c:	dfc00515 	stw	ra,20(sp)
  810440:	dd000415 	stw	r20,16(sp)
  810444:	dc800215 	stw	r18,8(sp)
  810448:	dc400115 	stw	r17,4(sp)
  81044c:	308000cc 	andi	r2,r6,3
  810450:	3021883a 	mov	r16,r6
  810454:	2027883a 	mov	r19,r4
  810458:	10002f1e 	bne	r2,zero,810518 <__pow5mult+0xe8>
  81045c:	2825883a 	mov	r18,r5
  810460:	8021d0ba 	srai	r16,r16,2
  810464:	80001a26 	beq	r16,zero,8104d0 <__pow5mult+0xa0>
  810468:	9c401217 	ldw	r17,72(r19)
  81046c:	8800061e 	bne	r17,zero,810488 <__pow5mult+0x58>
  810470:	00003406 	br	810544 <__pow5mult+0x114>
  810474:	8021d07a 	srai	r16,r16,1
  810478:	80001526 	beq	r16,zero,8104d0 <__pow5mult+0xa0>
  81047c:	88800017 	ldw	r2,0(r17)
  810480:	10001c26 	beq	r2,zero,8104f4 <__pow5mult+0xc4>
  810484:	1023883a 	mov	r17,r2
  810488:	8080004c 	andi	r2,r16,1
  81048c:	103ff926 	beq	r2,zero,810474 <__alt_data_end+0xff810474>
  810490:	880d883a 	mov	r6,r17
  810494:	900b883a 	mov	r5,r18
  810498:	9809883a 	mov	r4,r19
  81049c:	08102380 	call	810238 <__multiply>
  8104a0:	90001b26 	beq	r18,zero,810510 <__pow5mult+0xe0>
  8104a4:	91000117 	ldw	r4,4(r18)
  8104a8:	98c01317 	ldw	r3,76(r19)
  8104ac:	8021d07a 	srai	r16,r16,1
  8104b0:	2109883a 	add	r4,r4,r4
  8104b4:	2109883a 	add	r4,r4,r4
  8104b8:	1907883a 	add	r3,r3,r4
  8104bc:	19000017 	ldw	r4,0(r3)
  8104c0:	91000015 	stw	r4,0(r18)
  8104c4:	1c800015 	stw	r18,0(r3)
  8104c8:	1025883a 	mov	r18,r2
  8104cc:	803feb1e 	bne	r16,zero,81047c <__alt_data_end+0xff81047c>
  8104d0:	9005883a 	mov	r2,r18
  8104d4:	dfc00517 	ldw	ra,20(sp)
  8104d8:	dd000417 	ldw	r20,16(sp)
  8104dc:	dcc00317 	ldw	r19,12(sp)
  8104e0:	dc800217 	ldw	r18,8(sp)
  8104e4:	dc400117 	ldw	r17,4(sp)
  8104e8:	dc000017 	ldw	r16,0(sp)
  8104ec:	dec00604 	addi	sp,sp,24
  8104f0:	f800283a 	ret
  8104f4:	880d883a 	mov	r6,r17
  8104f8:	880b883a 	mov	r5,r17
  8104fc:	9809883a 	mov	r4,r19
  810500:	08102380 	call	810238 <__multiply>
  810504:	88800015 	stw	r2,0(r17)
  810508:	10000015 	stw	zero,0(r2)
  81050c:	003fdd06 	br	810484 <__alt_data_end+0xff810484>
  810510:	1025883a 	mov	r18,r2
  810514:	003fd706 	br	810474 <__alt_data_end+0xff810474>
  810518:	10bfffc4 	addi	r2,r2,-1
  81051c:	1085883a 	add	r2,r2,r2
  810520:	00c020b4 	movhi	r3,130
  810524:	18ee8104 	addi	r3,r3,-17916
  810528:	1085883a 	add	r2,r2,r2
  81052c:	1885883a 	add	r2,r3,r2
  810530:	11800017 	ldw	r6,0(r2)
  810534:	000f883a 	mov	r7,zero
  810538:	080fec00 	call	80fec0 <__multadd>
  81053c:	1025883a 	mov	r18,r2
  810540:	003fc706 	br	810460 <__alt_data_end+0xff810460>
  810544:	05000044 	movi	r20,1
  810548:	a00b883a 	mov	r5,r20
  81054c:	9809883a 	mov	r4,r19
  810550:	080fdf00 	call	80fdf0 <_Balloc>
  810554:	1023883a 	mov	r17,r2
  810558:	00809c44 	movi	r2,625
  81055c:	88800515 	stw	r2,20(r17)
  810560:	8d000415 	stw	r20,16(r17)
  810564:	9c401215 	stw	r17,72(r19)
  810568:	88000015 	stw	zero,0(r17)
  81056c:	003fc606 	br	810488 <__alt_data_end+0xff810488>

00810570 <__lshift>:
  810570:	defff904 	addi	sp,sp,-28
  810574:	dd400515 	stw	r21,20(sp)
  810578:	dcc00315 	stw	r19,12(sp)
  81057c:	302bd17a 	srai	r21,r6,5
  810580:	2cc00417 	ldw	r19,16(r5)
  810584:	28800217 	ldw	r2,8(r5)
  810588:	dd000415 	stw	r20,16(sp)
  81058c:	ace7883a 	add	r19,r21,r19
  810590:	dc800215 	stw	r18,8(sp)
  810594:	dc400115 	stw	r17,4(sp)
  810598:	dc000015 	stw	r16,0(sp)
  81059c:	dfc00615 	stw	ra,24(sp)
  8105a0:	9c000044 	addi	r16,r19,1
  8105a4:	2823883a 	mov	r17,r5
  8105a8:	3029883a 	mov	r20,r6
  8105ac:	2025883a 	mov	r18,r4
  8105b0:	29400117 	ldw	r5,4(r5)
  8105b4:	1400030e 	bge	r2,r16,8105c4 <__lshift+0x54>
  8105b8:	1085883a 	add	r2,r2,r2
  8105bc:	29400044 	addi	r5,r5,1
  8105c0:	143ffd16 	blt	r2,r16,8105b8 <__alt_data_end+0xff8105b8>
  8105c4:	9009883a 	mov	r4,r18
  8105c8:	080fdf00 	call	80fdf0 <_Balloc>
  8105cc:	10c00504 	addi	r3,r2,20
  8105d0:	0540070e 	bge	zero,r21,8105f0 <__lshift+0x80>
  8105d4:	ad6b883a 	add	r21,r21,r21
  8105d8:	ad6b883a 	add	r21,r21,r21
  8105dc:	1809883a 	mov	r4,r3
  8105e0:	1d47883a 	add	r3,r3,r21
  8105e4:	20000015 	stw	zero,0(r4)
  8105e8:	21000104 	addi	r4,r4,4
  8105ec:	193ffd1e 	bne	r3,r4,8105e4 <__alt_data_end+0xff8105e4>
  8105f0:	8a000417 	ldw	r8,16(r17)
  8105f4:	89000504 	addi	r4,r17,20
  8105f8:	a18007cc 	andi	r6,r20,31
  8105fc:	4211883a 	add	r8,r8,r8
  810600:	4211883a 	add	r8,r8,r8
  810604:	2211883a 	add	r8,r4,r8
  810608:	30002326 	beq	r6,zero,810698 <__lshift+0x128>
  81060c:	02400804 	movi	r9,32
  810610:	4993c83a 	sub	r9,r9,r6
  810614:	000b883a 	mov	r5,zero
  810618:	21c00017 	ldw	r7,0(r4)
  81061c:	1815883a 	mov	r10,r3
  810620:	18c00104 	addi	r3,r3,4
  810624:	398e983a 	sll	r7,r7,r6
  810628:	21000104 	addi	r4,r4,4
  81062c:	394ab03a 	or	r5,r7,r5
  810630:	197fff15 	stw	r5,-4(r3)
  810634:	217fff17 	ldw	r5,-4(r4)
  810638:	2a4ad83a 	srl	r5,r5,r9
  81063c:	223ff636 	bltu	r4,r8,810618 <__alt_data_end+0xff810618>
  810640:	51400115 	stw	r5,4(r10)
  810644:	28001a1e 	bne	r5,zero,8106b0 <__lshift+0x140>
  810648:	843fffc4 	addi	r16,r16,-1
  81064c:	14000415 	stw	r16,16(r2)
  810650:	88000826 	beq	r17,zero,810674 <__lshift+0x104>
  810654:	89000117 	ldw	r4,4(r17)
  810658:	90c01317 	ldw	r3,76(r18)
  81065c:	2109883a 	add	r4,r4,r4
  810660:	2109883a 	add	r4,r4,r4
  810664:	1907883a 	add	r3,r3,r4
  810668:	19000017 	ldw	r4,0(r3)
  81066c:	89000015 	stw	r4,0(r17)
  810670:	1c400015 	stw	r17,0(r3)
  810674:	dfc00617 	ldw	ra,24(sp)
  810678:	dd400517 	ldw	r21,20(sp)
  81067c:	dd000417 	ldw	r20,16(sp)
  810680:	dcc00317 	ldw	r19,12(sp)
  810684:	dc800217 	ldw	r18,8(sp)
  810688:	dc400117 	ldw	r17,4(sp)
  81068c:	dc000017 	ldw	r16,0(sp)
  810690:	dec00704 	addi	sp,sp,28
  810694:	f800283a 	ret
  810698:	21400017 	ldw	r5,0(r4)
  81069c:	18c00104 	addi	r3,r3,4
  8106a0:	21000104 	addi	r4,r4,4
  8106a4:	197fff15 	stw	r5,-4(r3)
  8106a8:	223ffb36 	bltu	r4,r8,810698 <__alt_data_end+0xff810698>
  8106ac:	003fe606 	br	810648 <__alt_data_end+0xff810648>
  8106b0:	9c000084 	addi	r16,r19,2
  8106b4:	003fe406 	br	810648 <__alt_data_end+0xff810648>

008106b8 <__mcmp>:
  8106b8:	20800417 	ldw	r2,16(r4)
  8106bc:	28c00417 	ldw	r3,16(r5)
  8106c0:	10c5c83a 	sub	r2,r2,r3
  8106c4:	1000111e 	bne	r2,zero,81070c <__mcmp+0x54>
  8106c8:	18c7883a 	add	r3,r3,r3
  8106cc:	18c7883a 	add	r3,r3,r3
  8106d0:	21000504 	addi	r4,r4,20
  8106d4:	29400504 	addi	r5,r5,20
  8106d8:	20c5883a 	add	r2,r4,r3
  8106dc:	28cb883a 	add	r5,r5,r3
  8106e0:	00000106 	br	8106e8 <__mcmp+0x30>
  8106e4:	20800a2e 	bgeu	r4,r2,810710 <__mcmp+0x58>
  8106e8:	10bfff04 	addi	r2,r2,-4
  8106ec:	297fff04 	addi	r5,r5,-4
  8106f0:	11800017 	ldw	r6,0(r2)
  8106f4:	28c00017 	ldw	r3,0(r5)
  8106f8:	30fffa26 	beq	r6,r3,8106e4 <__alt_data_end+0xff8106e4>
  8106fc:	30c00236 	bltu	r6,r3,810708 <__mcmp+0x50>
  810700:	00800044 	movi	r2,1
  810704:	f800283a 	ret
  810708:	00bfffc4 	movi	r2,-1
  81070c:	f800283a 	ret
  810710:	0005883a 	mov	r2,zero
  810714:	f800283a 	ret

00810718 <__mdiff>:
  810718:	28c00417 	ldw	r3,16(r5)
  81071c:	30800417 	ldw	r2,16(r6)
  810720:	defffa04 	addi	sp,sp,-24
  810724:	dcc00315 	stw	r19,12(sp)
  810728:	dc800215 	stw	r18,8(sp)
  81072c:	dfc00515 	stw	ra,20(sp)
  810730:	dd000415 	stw	r20,16(sp)
  810734:	dc400115 	stw	r17,4(sp)
  810738:	dc000015 	stw	r16,0(sp)
  81073c:	1887c83a 	sub	r3,r3,r2
  810740:	2825883a 	mov	r18,r5
  810744:	3027883a 	mov	r19,r6
  810748:	1800141e 	bne	r3,zero,81079c <__mdiff+0x84>
  81074c:	1085883a 	add	r2,r2,r2
  810750:	1085883a 	add	r2,r2,r2
  810754:	2a000504 	addi	r8,r5,20
  810758:	34000504 	addi	r16,r6,20
  81075c:	4087883a 	add	r3,r8,r2
  810760:	8085883a 	add	r2,r16,r2
  810764:	00000106 	br	81076c <__mdiff+0x54>
  810768:	40c0592e 	bgeu	r8,r3,8108d0 <__mdiff+0x1b8>
  81076c:	18ffff04 	addi	r3,r3,-4
  810770:	10bfff04 	addi	r2,r2,-4
  810774:	19c00017 	ldw	r7,0(r3)
  810778:	11400017 	ldw	r5,0(r2)
  81077c:	397ffa26 	beq	r7,r5,810768 <__alt_data_end+0xff810768>
  810780:	3940592e 	bgeu	r7,r5,8108e8 <__mdiff+0x1d0>
  810784:	9005883a 	mov	r2,r18
  810788:	4023883a 	mov	r17,r8
  81078c:	9825883a 	mov	r18,r19
  810790:	05000044 	movi	r20,1
  810794:	1027883a 	mov	r19,r2
  810798:	00000406 	br	8107ac <__mdiff+0x94>
  81079c:	18005616 	blt	r3,zero,8108f8 <__mdiff+0x1e0>
  8107a0:	34400504 	addi	r17,r6,20
  8107a4:	2c000504 	addi	r16,r5,20
  8107a8:	0029883a 	mov	r20,zero
  8107ac:	91400117 	ldw	r5,4(r18)
  8107b0:	080fdf00 	call	80fdf0 <_Balloc>
  8107b4:	92400417 	ldw	r9,16(r18)
  8107b8:	9b000417 	ldw	r12,16(r19)
  8107bc:	12c00504 	addi	r11,r2,20
  8107c0:	4a51883a 	add	r8,r9,r9
  8107c4:	6319883a 	add	r12,r12,r12
  8107c8:	4211883a 	add	r8,r8,r8
  8107cc:	6319883a 	add	r12,r12,r12
  8107d0:	15000315 	stw	r20,12(r2)
  8107d4:	8211883a 	add	r8,r16,r8
  8107d8:	8b19883a 	add	r12,r17,r12
  8107dc:	0007883a 	mov	r3,zero
  8107e0:	81400017 	ldw	r5,0(r16)
  8107e4:	89c00017 	ldw	r7,0(r17)
  8107e8:	59800104 	addi	r6,r11,4
  8107ec:	293fffcc 	andi	r4,r5,65535
  8107f0:	20c7883a 	add	r3,r4,r3
  8107f4:	393fffcc 	andi	r4,r7,65535
  8107f8:	1909c83a 	sub	r4,r3,r4
  8107fc:	280ad43a 	srli	r5,r5,16
  810800:	380ed43a 	srli	r7,r7,16
  810804:	2007d43a 	srai	r3,r4,16
  810808:	213fffcc 	andi	r4,r4,65535
  81080c:	29cbc83a 	sub	r5,r5,r7
  810810:	28c7883a 	add	r3,r5,r3
  810814:	180a943a 	slli	r5,r3,16
  810818:	8c400104 	addi	r17,r17,4
  81081c:	84000104 	addi	r16,r16,4
  810820:	2908b03a 	or	r4,r5,r4
  810824:	59000015 	stw	r4,0(r11)
  810828:	1807d43a 	srai	r3,r3,16
  81082c:	3015883a 	mov	r10,r6
  810830:	3017883a 	mov	r11,r6
  810834:	8b3fea36 	bltu	r17,r12,8107e0 <__alt_data_end+0xff8107e0>
  810838:	8200162e 	bgeu	r16,r8,810894 <__mdiff+0x17c>
  81083c:	8017883a 	mov	r11,r16
  810840:	59400017 	ldw	r5,0(r11)
  810844:	31800104 	addi	r6,r6,4
  810848:	5ac00104 	addi	r11,r11,4
  81084c:	293fffcc 	andi	r4,r5,65535
  810850:	20c7883a 	add	r3,r4,r3
  810854:	280ed43a 	srli	r7,r5,16
  810858:	180bd43a 	srai	r5,r3,16
  81085c:	193fffcc 	andi	r4,r3,65535
  810860:	3947883a 	add	r3,r7,r5
  810864:	180a943a 	slli	r5,r3,16
  810868:	1807d43a 	srai	r3,r3,16
  81086c:	2908b03a 	or	r4,r5,r4
  810870:	313fff15 	stw	r4,-4(r6)
  810874:	5a3ff236 	bltu	r11,r8,810840 <__alt_data_end+0xff810840>
  810878:	0406303a 	nor	r3,zero,r16
  81087c:	1a07883a 	add	r3,r3,r8
  810880:	1806d0ba 	srli	r3,r3,2
  810884:	18c00044 	addi	r3,r3,1
  810888:	18c7883a 	add	r3,r3,r3
  81088c:	18c7883a 	add	r3,r3,r3
  810890:	50d5883a 	add	r10,r10,r3
  810894:	50ffff04 	addi	r3,r10,-4
  810898:	2000041e 	bne	r4,zero,8108ac <__mdiff+0x194>
  81089c:	18ffff04 	addi	r3,r3,-4
  8108a0:	19000017 	ldw	r4,0(r3)
  8108a4:	4a7fffc4 	addi	r9,r9,-1
  8108a8:	203ffc26 	beq	r4,zero,81089c <__alt_data_end+0xff81089c>
  8108ac:	12400415 	stw	r9,16(r2)
  8108b0:	dfc00517 	ldw	ra,20(sp)
  8108b4:	dd000417 	ldw	r20,16(sp)
  8108b8:	dcc00317 	ldw	r19,12(sp)
  8108bc:	dc800217 	ldw	r18,8(sp)
  8108c0:	dc400117 	ldw	r17,4(sp)
  8108c4:	dc000017 	ldw	r16,0(sp)
  8108c8:	dec00604 	addi	sp,sp,24
  8108cc:	f800283a 	ret
  8108d0:	000b883a 	mov	r5,zero
  8108d4:	080fdf00 	call	80fdf0 <_Balloc>
  8108d8:	00c00044 	movi	r3,1
  8108dc:	10c00415 	stw	r3,16(r2)
  8108e0:	10000515 	stw	zero,20(r2)
  8108e4:	003ff206 	br	8108b0 <__alt_data_end+0xff8108b0>
  8108e8:	8023883a 	mov	r17,r16
  8108ec:	0029883a 	mov	r20,zero
  8108f0:	4021883a 	mov	r16,r8
  8108f4:	003fad06 	br	8107ac <__alt_data_end+0xff8107ac>
  8108f8:	9005883a 	mov	r2,r18
  8108fc:	94400504 	addi	r17,r18,20
  810900:	9c000504 	addi	r16,r19,20
  810904:	9825883a 	mov	r18,r19
  810908:	05000044 	movi	r20,1
  81090c:	1027883a 	mov	r19,r2
  810910:	003fa606 	br	8107ac <__alt_data_end+0xff8107ac>

00810914 <__ulp>:
  810914:	295ffc2c 	andhi	r5,r5,32752
  810918:	00bf3034 	movhi	r2,64704
  81091c:	2887883a 	add	r3,r5,r2
  810920:	00c0020e 	bge	zero,r3,81092c <__ulp+0x18>
  810924:	0005883a 	mov	r2,zero
  810928:	f800283a 	ret
  81092c:	00c7c83a 	sub	r3,zero,r3
  810930:	1807d53a 	srai	r3,r3,20
  810934:	008004c4 	movi	r2,19
  810938:	10c00b0e 	bge	r2,r3,810968 <__ulp+0x54>
  81093c:	18bffb04 	addi	r2,r3,-20
  810940:	01000784 	movi	r4,30
  810944:	0007883a 	mov	r3,zero
  810948:	20800516 	blt	r4,r2,810960 <__ulp+0x4c>
  81094c:	010007c4 	movi	r4,31
  810950:	2089c83a 	sub	r4,r4,r2
  810954:	00800044 	movi	r2,1
  810958:	1104983a 	sll	r2,r2,r4
  81095c:	f800283a 	ret
  810960:	00800044 	movi	r2,1
  810964:	f800283a 	ret
  810968:	01400234 	movhi	r5,8
  81096c:	28c7d83a 	sra	r3,r5,r3
  810970:	0005883a 	mov	r2,zero
  810974:	f800283a 	ret

00810978 <__b2d>:
  810978:	defffa04 	addi	sp,sp,-24
  81097c:	dc000015 	stw	r16,0(sp)
  810980:	24000417 	ldw	r16,16(r4)
  810984:	dc400115 	stw	r17,4(sp)
  810988:	24400504 	addi	r17,r4,20
  81098c:	8421883a 	add	r16,r16,r16
  810990:	8421883a 	add	r16,r16,r16
  810994:	8c21883a 	add	r16,r17,r16
  810998:	dc800215 	stw	r18,8(sp)
  81099c:	84bfff17 	ldw	r18,-4(r16)
  8109a0:	dd000415 	stw	r20,16(sp)
  8109a4:	dcc00315 	stw	r19,12(sp)
  8109a8:	9009883a 	mov	r4,r18
  8109ac:	2829883a 	mov	r20,r5
  8109b0:	dfc00515 	stw	ra,20(sp)
  8109b4:	08100e40 	call	8100e4 <__hi0bits>
  8109b8:	00c00804 	movi	r3,32
  8109bc:	1889c83a 	sub	r4,r3,r2
  8109c0:	a1000015 	stw	r4,0(r20)
  8109c4:	01000284 	movi	r4,10
  8109c8:	84ffff04 	addi	r19,r16,-4
  8109cc:	20801216 	blt	r4,r2,810a18 <__b2d+0xa0>
  8109d0:	018002c4 	movi	r6,11
  8109d4:	308dc83a 	sub	r6,r6,r2
  8109d8:	9186d83a 	srl	r3,r18,r6
  8109dc:	18cffc34 	orhi	r3,r3,16368
  8109e0:	8cc0212e 	bgeu	r17,r19,810a68 <__b2d+0xf0>
  8109e4:	813ffe17 	ldw	r4,-8(r16)
  8109e8:	218cd83a 	srl	r6,r4,r6
  8109ec:	10800544 	addi	r2,r2,21
  8109f0:	9084983a 	sll	r2,r18,r2
  8109f4:	1184b03a 	or	r2,r2,r6
  8109f8:	dfc00517 	ldw	ra,20(sp)
  8109fc:	dd000417 	ldw	r20,16(sp)
  810a00:	dcc00317 	ldw	r19,12(sp)
  810a04:	dc800217 	ldw	r18,8(sp)
  810a08:	dc400117 	ldw	r17,4(sp)
  810a0c:	dc000017 	ldw	r16,0(sp)
  810a10:	dec00604 	addi	sp,sp,24
  810a14:	f800283a 	ret
  810a18:	8cc00f2e 	bgeu	r17,r19,810a58 <__b2d+0xe0>
  810a1c:	117ffd44 	addi	r5,r2,-11
  810a20:	80bffe17 	ldw	r2,-8(r16)
  810a24:	28000e26 	beq	r5,zero,810a60 <__b2d+0xe8>
  810a28:	1949c83a 	sub	r4,r3,r5
  810a2c:	9164983a 	sll	r18,r18,r5
  810a30:	1106d83a 	srl	r3,r2,r4
  810a34:	81bffe04 	addi	r6,r16,-8
  810a38:	948ffc34 	orhi	r18,r18,16368
  810a3c:	90c6b03a 	or	r3,r18,r3
  810a40:	89800e2e 	bgeu	r17,r6,810a7c <__b2d+0x104>
  810a44:	81bffd17 	ldw	r6,-12(r16)
  810a48:	1144983a 	sll	r2,r2,r5
  810a4c:	310ad83a 	srl	r5,r6,r4
  810a50:	2884b03a 	or	r2,r5,r2
  810a54:	003fe806 	br	8109f8 <__alt_data_end+0xff8109f8>
  810a58:	10bffd44 	addi	r2,r2,-11
  810a5c:	1000041e 	bne	r2,zero,810a70 <__b2d+0xf8>
  810a60:	90cffc34 	orhi	r3,r18,16368
  810a64:	003fe406 	br	8109f8 <__alt_data_end+0xff8109f8>
  810a68:	000d883a 	mov	r6,zero
  810a6c:	003fdf06 	br	8109ec <__alt_data_end+0xff8109ec>
  810a70:	90a4983a 	sll	r18,r18,r2
  810a74:	0005883a 	mov	r2,zero
  810a78:	003ff906 	br	810a60 <__alt_data_end+0xff810a60>
  810a7c:	1144983a 	sll	r2,r2,r5
  810a80:	003fdd06 	br	8109f8 <__alt_data_end+0xff8109f8>

00810a84 <__d2b>:
  810a84:	defff804 	addi	sp,sp,-32
  810a88:	dc000215 	stw	r16,8(sp)
  810a8c:	3021883a 	mov	r16,r6
  810a90:	dc400315 	stw	r17,12(sp)
  810a94:	8022907a 	slli	r17,r16,1
  810a98:	dd000615 	stw	r20,24(sp)
  810a9c:	2829883a 	mov	r20,r5
  810aa0:	01400044 	movi	r5,1
  810aa4:	dcc00515 	stw	r19,20(sp)
  810aa8:	dc800415 	stw	r18,16(sp)
  810aac:	dfc00715 	stw	ra,28(sp)
  810ab0:	3825883a 	mov	r18,r7
  810ab4:	8822d57a 	srli	r17,r17,21
  810ab8:	080fdf00 	call	80fdf0 <_Balloc>
  810abc:	1027883a 	mov	r19,r2
  810ac0:	00800434 	movhi	r2,16
  810ac4:	10bfffc4 	addi	r2,r2,-1
  810ac8:	808c703a 	and	r6,r16,r2
  810acc:	88000126 	beq	r17,zero,810ad4 <__d2b+0x50>
  810ad0:	31800434 	orhi	r6,r6,16
  810ad4:	d9800015 	stw	r6,0(sp)
  810ad8:	a0002426 	beq	r20,zero,810b6c <__d2b+0xe8>
  810adc:	d9000104 	addi	r4,sp,4
  810ae0:	dd000115 	stw	r20,4(sp)
  810ae4:	081014c0 	call	81014c <__lo0bits>
  810ae8:	d8c00017 	ldw	r3,0(sp)
  810aec:	10002f1e 	bne	r2,zero,810bac <__d2b+0x128>
  810af0:	d9000117 	ldw	r4,4(sp)
  810af4:	99000515 	stw	r4,20(r19)
  810af8:	1821003a 	cmpeq	r16,r3,zero
  810afc:	01000084 	movi	r4,2
  810b00:	2421c83a 	sub	r16,r4,r16
  810b04:	98c00615 	stw	r3,24(r19)
  810b08:	9c000415 	stw	r16,16(r19)
  810b0c:	88001f1e 	bne	r17,zero,810b8c <__d2b+0x108>
  810b10:	10bef384 	addi	r2,r2,-1074
  810b14:	90800015 	stw	r2,0(r18)
  810b18:	00900034 	movhi	r2,16384
  810b1c:	10bfffc4 	addi	r2,r2,-1
  810b20:	8085883a 	add	r2,r16,r2
  810b24:	1085883a 	add	r2,r2,r2
  810b28:	1085883a 	add	r2,r2,r2
  810b2c:	9885883a 	add	r2,r19,r2
  810b30:	11000517 	ldw	r4,20(r2)
  810b34:	8020917a 	slli	r16,r16,5
  810b38:	08100e40 	call	8100e4 <__hi0bits>
  810b3c:	d8c00817 	ldw	r3,32(sp)
  810b40:	8085c83a 	sub	r2,r16,r2
  810b44:	18800015 	stw	r2,0(r3)
  810b48:	9805883a 	mov	r2,r19
  810b4c:	dfc00717 	ldw	ra,28(sp)
  810b50:	dd000617 	ldw	r20,24(sp)
  810b54:	dcc00517 	ldw	r19,20(sp)
  810b58:	dc800417 	ldw	r18,16(sp)
  810b5c:	dc400317 	ldw	r17,12(sp)
  810b60:	dc000217 	ldw	r16,8(sp)
  810b64:	dec00804 	addi	sp,sp,32
  810b68:	f800283a 	ret
  810b6c:	d809883a 	mov	r4,sp
  810b70:	081014c0 	call	81014c <__lo0bits>
  810b74:	d8c00017 	ldw	r3,0(sp)
  810b78:	04000044 	movi	r16,1
  810b7c:	9c000415 	stw	r16,16(r19)
  810b80:	98c00515 	stw	r3,20(r19)
  810b84:	10800804 	addi	r2,r2,32
  810b88:	883fe126 	beq	r17,zero,810b10 <__alt_data_end+0xff810b10>
  810b8c:	00c00d44 	movi	r3,53
  810b90:	8c7ef344 	addi	r17,r17,-1075
  810b94:	88a3883a 	add	r17,r17,r2
  810b98:	1885c83a 	sub	r2,r3,r2
  810b9c:	d8c00817 	ldw	r3,32(sp)
  810ba0:	94400015 	stw	r17,0(r18)
  810ba4:	18800015 	stw	r2,0(r3)
  810ba8:	003fe706 	br	810b48 <__alt_data_end+0xff810b48>
  810bac:	01000804 	movi	r4,32
  810bb0:	2089c83a 	sub	r4,r4,r2
  810bb4:	1908983a 	sll	r4,r3,r4
  810bb8:	d9400117 	ldw	r5,4(sp)
  810bbc:	1886d83a 	srl	r3,r3,r2
  810bc0:	2148b03a 	or	r4,r4,r5
  810bc4:	99000515 	stw	r4,20(r19)
  810bc8:	d8c00015 	stw	r3,0(sp)
  810bcc:	003fca06 	br	810af8 <__alt_data_end+0xff810af8>

00810bd0 <__ratio>:
  810bd0:	defff904 	addi	sp,sp,-28
  810bd4:	dc400315 	stw	r17,12(sp)
  810bd8:	2823883a 	mov	r17,r5
  810bdc:	d9400104 	addi	r5,sp,4
  810be0:	dfc00615 	stw	ra,24(sp)
  810be4:	dcc00515 	stw	r19,20(sp)
  810be8:	dc800415 	stw	r18,16(sp)
  810bec:	2027883a 	mov	r19,r4
  810bf0:	dc000215 	stw	r16,8(sp)
  810bf4:	08109780 	call	810978 <__b2d>
  810bf8:	d80b883a 	mov	r5,sp
  810bfc:	8809883a 	mov	r4,r17
  810c00:	1025883a 	mov	r18,r2
  810c04:	1821883a 	mov	r16,r3
  810c08:	08109780 	call	810978 <__b2d>
  810c0c:	8a000417 	ldw	r8,16(r17)
  810c10:	99000417 	ldw	r4,16(r19)
  810c14:	d9400117 	ldw	r5,4(sp)
  810c18:	2209c83a 	sub	r4,r4,r8
  810c1c:	2010917a 	slli	r8,r4,5
  810c20:	d9000017 	ldw	r4,0(sp)
  810c24:	2909c83a 	sub	r4,r5,r4
  810c28:	4109883a 	add	r4,r8,r4
  810c2c:	01000e0e 	bge	zero,r4,810c68 <__ratio+0x98>
  810c30:	2008953a 	slli	r4,r4,20
  810c34:	2421883a 	add	r16,r4,r16
  810c38:	100d883a 	mov	r6,r2
  810c3c:	180f883a 	mov	r7,r3
  810c40:	9009883a 	mov	r4,r18
  810c44:	800b883a 	mov	r5,r16
  810c48:	08152780 	call	815278 <__divdf3>
  810c4c:	dfc00617 	ldw	ra,24(sp)
  810c50:	dcc00517 	ldw	r19,20(sp)
  810c54:	dc800417 	ldw	r18,16(sp)
  810c58:	dc400317 	ldw	r17,12(sp)
  810c5c:	dc000217 	ldw	r16,8(sp)
  810c60:	dec00704 	addi	sp,sp,28
  810c64:	f800283a 	ret
  810c68:	2008953a 	slli	r4,r4,20
  810c6c:	1907c83a 	sub	r3,r3,r4
  810c70:	003ff106 	br	810c38 <__alt_data_end+0xff810c38>

00810c74 <_mprec_log10>:
  810c74:	defffe04 	addi	sp,sp,-8
  810c78:	dc000015 	stw	r16,0(sp)
  810c7c:	dfc00115 	stw	ra,4(sp)
  810c80:	008005c4 	movi	r2,23
  810c84:	2021883a 	mov	r16,r4
  810c88:	11000d0e 	bge	r2,r4,810cc0 <_mprec_log10+0x4c>
  810c8c:	0005883a 	mov	r2,zero
  810c90:	00cffc34 	movhi	r3,16368
  810c94:	843fffc4 	addi	r16,r16,-1
  810c98:	000d883a 	mov	r6,zero
  810c9c:	01d00934 	movhi	r7,16420
  810ca0:	1009883a 	mov	r4,r2
  810ca4:	180b883a 	mov	r5,r3
  810ca8:	0815db80 	call	815db8 <__muldf3>
  810cac:	803ff91e 	bne	r16,zero,810c94 <__alt_data_end+0xff810c94>
  810cb0:	dfc00117 	ldw	ra,4(sp)
  810cb4:	dc000017 	ldw	r16,0(sp)
  810cb8:	dec00204 	addi	sp,sp,8
  810cbc:	f800283a 	ret
  810cc0:	202090fa 	slli	r16,r4,3
  810cc4:	008020b4 	movhi	r2,130
  810cc8:	10ae9804 	addi	r2,r2,-17824
  810ccc:	1421883a 	add	r16,r2,r16
  810cd0:	80800017 	ldw	r2,0(r16)
  810cd4:	80c00117 	ldw	r3,4(r16)
  810cd8:	dfc00117 	ldw	ra,4(sp)
  810cdc:	dc000017 	ldw	r16,0(sp)
  810ce0:	dec00204 	addi	sp,sp,8
  810ce4:	f800283a 	ret

00810ce8 <__copybits>:
  810ce8:	297fffc4 	addi	r5,r5,-1
  810cec:	280fd17a 	srai	r7,r5,5
  810cf0:	30c00417 	ldw	r3,16(r6)
  810cf4:	30800504 	addi	r2,r6,20
  810cf8:	39c00044 	addi	r7,r7,1
  810cfc:	18c7883a 	add	r3,r3,r3
  810d00:	39cf883a 	add	r7,r7,r7
  810d04:	18c7883a 	add	r3,r3,r3
  810d08:	39cf883a 	add	r7,r7,r7
  810d0c:	10c7883a 	add	r3,r2,r3
  810d10:	21cf883a 	add	r7,r4,r7
  810d14:	10c00d2e 	bgeu	r2,r3,810d4c <__copybits+0x64>
  810d18:	200b883a 	mov	r5,r4
  810d1c:	12000017 	ldw	r8,0(r2)
  810d20:	29400104 	addi	r5,r5,4
  810d24:	10800104 	addi	r2,r2,4
  810d28:	2a3fff15 	stw	r8,-4(r5)
  810d2c:	10fffb36 	bltu	r2,r3,810d1c <__alt_data_end+0xff810d1c>
  810d30:	1985c83a 	sub	r2,r3,r6
  810d34:	10bffac4 	addi	r2,r2,-21
  810d38:	1004d0ba 	srli	r2,r2,2
  810d3c:	10800044 	addi	r2,r2,1
  810d40:	1085883a 	add	r2,r2,r2
  810d44:	1085883a 	add	r2,r2,r2
  810d48:	2089883a 	add	r4,r4,r2
  810d4c:	21c0032e 	bgeu	r4,r7,810d5c <__copybits+0x74>
  810d50:	20000015 	stw	zero,0(r4)
  810d54:	21000104 	addi	r4,r4,4
  810d58:	21fffd36 	bltu	r4,r7,810d50 <__alt_data_end+0xff810d50>
  810d5c:	f800283a 	ret

00810d60 <__any_on>:
  810d60:	20c00417 	ldw	r3,16(r4)
  810d64:	2805d17a 	srai	r2,r5,5
  810d68:	21000504 	addi	r4,r4,20
  810d6c:	18800d0e 	bge	r3,r2,810da4 <__any_on+0x44>
  810d70:	18c7883a 	add	r3,r3,r3
  810d74:	18c7883a 	add	r3,r3,r3
  810d78:	20c7883a 	add	r3,r4,r3
  810d7c:	20c0192e 	bgeu	r4,r3,810de4 <__any_on+0x84>
  810d80:	18bfff17 	ldw	r2,-4(r3)
  810d84:	18ffff04 	addi	r3,r3,-4
  810d88:	1000041e 	bne	r2,zero,810d9c <__any_on+0x3c>
  810d8c:	20c0142e 	bgeu	r4,r3,810de0 <__any_on+0x80>
  810d90:	18ffff04 	addi	r3,r3,-4
  810d94:	19400017 	ldw	r5,0(r3)
  810d98:	283ffc26 	beq	r5,zero,810d8c <__alt_data_end+0xff810d8c>
  810d9c:	00800044 	movi	r2,1
  810da0:	f800283a 	ret
  810da4:	10c00a0e 	bge	r2,r3,810dd0 <__any_on+0x70>
  810da8:	1085883a 	add	r2,r2,r2
  810dac:	1085883a 	add	r2,r2,r2
  810db0:	294007cc 	andi	r5,r5,31
  810db4:	2087883a 	add	r3,r4,r2
  810db8:	283ff026 	beq	r5,zero,810d7c <__alt_data_end+0xff810d7c>
  810dbc:	19800017 	ldw	r6,0(r3)
  810dc0:	3144d83a 	srl	r2,r6,r5
  810dc4:	114a983a 	sll	r5,r2,r5
  810dc8:	317ff41e 	bne	r6,r5,810d9c <__alt_data_end+0xff810d9c>
  810dcc:	003feb06 	br	810d7c <__alt_data_end+0xff810d7c>
  810dd0:	1085883a 	add	r2,r2,r2
  810dd4:	1085883a 	add	r2,r2,r2
  810dd8:	2087883a 	add	r3,r4,r2
  810ddc:	003fe706 	br	810d7c <__alt_data_end+0xff810d7c>
  810de0:	f800283a 	ret
  810de4:	0005883a 	mov	r2,zero
  810de8:	f800283a 	ret

00810dec <_putc_r>:
  810dec:	defffc04 	addi	sp,sp,-16
  810df0:	dc000215 	stw	r16,8(sp)
  810df4:	dfc00315 	stw	ra,12(sp)
  810df8:	2021883a 	mov	r16,r4
  810dfc:	20000226 	beq	r4,zero,810e08 <_putc_r+0x1c>
  810e00:	20800e17 	ldw	r2,56(r4)
  810e04:	10001b26 	beq	r2,zero,810e74 <_putc_r+0x88>
  810e08:	30800217 	ldw	r2,8(r6)
  810e0c:	10bfffc4 	addi	r2,r2,-1
  810e10:	30800215 	stw	r2,8(r6)
  810e14:	10000a16 	blt	r2,zero,810e40 <_putc_r+0x54>
  810e18:	30800017 	ldw	r2,0(r6)
  810e1c:	11400005 	stb	r5,0(r2)
  810e20:	30800017 	ldw	r2,0(r6)
  810e24:	10c00044 	addi	r3,r2,1
  810e28:	30c00015 	stw	r3,0(r6)
  810e2c:	10800003 	ldbu	r2,0(r2)
  810e30:	dfc00317 	ldw	ra,12(sp)
  810e34:	dc000217 	ldw	r16,8(sp)
  810e38:	dec00404 	addi	sp,sp,16
  810e3c:	f800283a 	ret
  810e40:	30c00617 	ldw	r3,24(r6)
  810e44:	10c00616 	blt	r2,r3,810e60 <_putc_r+0x74>
  810e48:	30800017 	ldw	r2,0(r6)
  810e4c:	00c00284 	movi	r3,10
  810e50:	11400005 	stb	r5,0(r2)
  810e54:	30800017 	ldw	r2,0(r6)
  810e58:	11400003 	ldbu	r5,0(r2)
  810e5c:	28fff11e 	bne	r5,r3,810e24 <__alt_data_end+0xff810e24>
  810e60:	8009883a 	mov	r4,r16
  810e64:	dfc00317 	ldw	ra,12(sp)
  810e68:	dc000217 	ldw	r16,8(sp)
  810e6c:	dec00404 	addi	sp,sp,16
  810e70:	0812a6c1 	jmpi	812a6c <__swbuf_r>
  810e74:	d9400015 	stw	r5,0(sp)
  810e78:	d9800115 	stw	r6,4(sp)
  810e7c:	080eb140 	call	80eb14 <__sinit>
  810e80:	d9800117 	ldw	r6,4(sp)
  810e84:	d9400017 	ldw	r5,0(sp)
  810e88:	003fdf06 	br	810e08 <__alt_data_end+0xff810e08>

00810e8c <putc>:
  810e8c:	008020b4 	movhi	r2,130
  810e90:	defffc04 	addi	sp,sp,-16
  810e94:	10b30204 	addi	r2,r2,-13304
  810e98:	dc000115 	stw	r16,4(sp)
  810e9c:	14000017 	ldw	r16,0(r2)
  810ea0:	dc400215 	stw	r17,8(sp)
  810ea4:	dfc00315 	stw	ra,12(sp)
  810ea8:	2023883a 	mov	r17,r4
  810eac:	80000226 	beq	r16,zero,810eb8 <putc+0x2c>
  810eb0:	80800e17 	ldw	r2,56(r16)
  810eb4:	10001a26 	beq	r2,zero,810f20 <putc+0x94>
  810eb8:	28800217 	ldw	r2,8(r5)
  810ebc:	10bfffc4 	addi	r2,r2,-1
  810ec0:	28800215 	stw	r2,8(r5)
  810ec4:	10000b16 	blt	r2,zero,810ef4 <putc+0x68>
  810ec8:	28800017 	ldw	r2,0(r5)
  810ecc:	14400005 	stb	r17,0(r2)
  810ed0:	28800017 	ldw	r2,0(r5)
  810ed4:	10c00044 	addi	r3,r2,1
  810ed8:	28c00015 	stw	r3,0(r5)
  810edc:	10800003 	ldbu	r2,0(r2)
  810ee0:	dfc00317 	ldw	ra,12(sp)
  810ee4:	dc400217 	ldw	r17,8(sp)
  810ee8:	dc000117 	ldw	r16,4(sp)
  810eec:	dec00404 	addi	sp,sp,16
  810ef0:	f800283a 	ret
  810ef4:	28c00617 	ldw	r3,24(r5)
  810ef8:	10c00e16 	blt	r2,r3,810f34 <putc+0xa8>
  810efc:	28800017 	ldw	r2,0(r5)
  810f00:	01000284 	movi	r4,10
  810f04:	14400005 	stb	r17,0(r2)
  810f08:	28800017 	ldw	r2,0(r5)
  810f0c:	10c00003 	ldbu	r3,0(r2)
  810f10:	193ff01e 	bne	r3,r4,810ed4 <__alt_data_end+0xff810ed4>
  810f14:	280d883a 	mov	r6,r5
  810f18:	180b883a 	mov	r5,r3
  810f1c:	00000706 	br	810f3c <putc+0xb0>
  810f20:	8009883a 	mov	r4,r16
  810f24:	d9400015 	stw	r5,0(sp)
  810f28:	080eb140 	call	80eb14 <__sinit>
  810f2c:	d9400017 	ldw	r5,0(sp)
  810f30:	003fe106 	br	810eb8 <__alt_data_end+0xff810eb8>
  810f34:	280d883a 	mov	r6,r5
  810f38:	880b883a 	mov	r5,r17
  810f3c:	8009883a 	mov	r4,r16
  810f40:	dfc00317 	ldw	ra,12(sp)
  810f44:	dc400217 	ldw	r17,8(sp)
  810f48:	dc000117 	ldw	r16,4(sp)
  810f4c:	dec00404 	addi	sp,sp,16
  810f50:	0812a6c1 	jmpi	812a6c <__swbuf_r>

00810f54 <lflush>:
  810f54:	2080030b 	ldhu	r2,12(r4)
  810f58:	00c00244 	movi	r3,9
  810f5c:	1080024c 	andi	r2,r2,9
  810f60:	10c00226 	beq	r2,r3,810f6c <lflush+0x18>
  810f64:	0005883a 	mov	r2,zero
  810f68:	f800283a 	ret
  810f6c:	080e7941 	jmpi	80e794 <fflush>

00810f70 <__srefill_r>:
  810f70:	defffc04 	addi	sp,sp,-16
  810f74:	dc400115 	stw	r17,4(sp)
  810f78:	dc000015 	stw	r16,0(sp)
  810f7c:	dfc00315 	stw	ra,12(sp)
  810f80:	dc800215 	stw	r18,8(sp)
  810f84:	2023883a 	mov	r17,r4
  810f88:	2821883a 	mov	r16,r5
  810f8c:	20000226 	beq	r4,zero,810f98 <__srefill_r+0x28>
  810f90:	20800e17 	ldw	r2,56(r4)
  810f94:	10003c26 	beq	r2,zero,811088 <__srefill_r+0x118>
  810f98:	80c0030b 	ldhu	r3,12(r16)
  810f9c:	1908000c 	andi	r4,r3,8192
  810fa0:	1805883a 	mov	r2,r3
  810fa4:	2000071e 	bne	r4,zero,810fc4 <__srefill_r+0x54>
  810fa8:	81001917 	ldw	r4,100(r16)
  810fac:	18880014 	ori	r2,r3,8192
  810fb0:	00f7ffc4 	movi	r3,-8193
  810fb4:	20c8703a 	and	r4,r4,r3
  810fb8:	8080030d 	sth	r2,12(r16)
  810fbc:	1007883a 	mov	r3,r2
  810fc0:	81001915 	stw	r4,100(r16)
  810fc4:	80000115 	stw	zero,4(r16)
  810fc8:	1100080c 	andi	r4,r2,32
  810fcc:	2000571e 	bne	r4,zero,81112c <__srefill_r+0x1bc>
  810fd0:	1100010c 	andi	r4,r2,4
  810fd4:	20001f26 	beq	r4,zero,811054 <__srefill_r+0xe4>
  810fd8:	81400c17 	ldw	r5,48(r16)
  810fdc:	28000826 	beq	r5,zero,811000 <__srefill_r+0x90>
  810fe0:	80801004 	addi	r2,r16,64
  810fe4:	28800226 	beq	r5,r2,810ff0 <__srefill_r+0x80>
  810fe8:	8809883a 	mov	r4,r17
  810fec:	080ec880 	call	80ec88 <_free_r>
  810ff0:	80800f17 	ldw	r2,60(r16)
  810ff4:	80000c15 	stw	zero,48(r16)
  810ff8:	80800115 	stw	r2,4(r16)
  810ffc:	1000391e 	bne	r2,zero,8110e4 <__srefill_r+0x174>
  811000:	80800417 	ldw	r2,16(r16)
  811004:	10004b26 	beq	r2,zero,811134 <__srefill_r+0x1c4>
  811008:	8480030b 	ldhu	r18,12(r16)
  81100c:	908000cc 	andi	r2,r18,3
  811010:	10001f1e 	bne	r2,zero,811090 <__srefill_r+0x120>
  811014:	81800417 	ldw	r6,16(r16)
  811018:	80800817 	ldw	r2,32(r16)
  81101c:	81c00517 	ldw	r7,20(r16)
  811020:	81400717 	ldw	r5,28(r16)
  811024:	81800015 	stw	r6,0(r16)
  811028:	8809883a 	mov	r4,r17
  81102c:	103ee83a 	callr	r2
  811030:	80800115 	stw	r2,4(r16)
  811034:	00800e0e 	bge	zero,r2,811070 <__srefill_r+0x100>
  811038:	0005883a 	mov	r2,zero
  81103c:	dfc00317 	ldw	ra,12(sp)
  811040:	dc800217 	ldw	r18,8(sp)
  811044:	dc400117 	ldw	r17,4(sp)
  811048:	dc000017 	ldw	r16,0(sp)
  81104c:	dec00404 	addi	sp,sp,16
  811050:	f800283a 	ret
  811054:	1100040c 	andi	r4,r2,16
  811058:	20003026 	beq	r4,zero,81111c <__srefill_r+0x1ac>
  81105c:	1080020c 	andi	r2,r2,8
  811060:	1000241e 	bne	r2,zero,8110f4 <__srefill_r+0x184>
  811064:	18c00114 	ori	r3,r3,4
  811068:	80c0030d 	sth	r3,12(r16)
  81106c:	003fe406 	br	811000 <__alt_data_end+0xff811000>
  811070:	80c0030b 	ldhu	r3,12(r16)
  811074:	1000161e 	bne	r2,zero,8110d0 <__srefill_r+0x160>
  811078:	18c00814 	ori	r3,r3,32
  81107c:	00bfffc4 	movi	r2,-1
  811080:	80c0030d 	sth	r3,12(r16)
  811084:	003fed06 	br	81103c <__alt_data_end+0xff81103c>
  811088:	080eb140 	call	80eb14 <__sinit>
  81108c:	003fc206 	br	810f98 <__alt_data_end+0xff810f98>
  811090:	008020b4 	movhi	r2,130
  811094:	10b30104 	addi	r2,r2,-13308
  811098:	11000017 	ldw	r4,0(r2)
  81109c:	01402074 	movhi	r5,129
  8110a0:	00800044 	movi	r2,1
  8110a4:	2943d504 	addi	r5,r5,3924
  8110a8:	8080030d 	sth	r2,12(r16)
  8110ac:	080ef980 	call	80ef98 <_fwalk>
  8110b0:	00800244 	movi	r2,9
  8110b4:	8480030d 	sth	r18,12(r16)
  8110b8:	9480024c 	andi	r18,r18,9
  8110bc:	90bfd51e 	bne	r18,r2,811014 <__alt_data_end+0xff811014>
  8110c0:	800b883a 	mov	r5,r16
  8110c4:	8809883a 	mov	r4,r17
  8110c8:	080e51c0 	call	80e51c <__sflush_r>
  8110cc:	003fd106 	br	811014 <__alt_data_end+0xff811014>
  8110d0:	18c01014 	ori	r3,r3,64
  8110d4:	80000115 	stw	zero,4(r16)
  8110d8:	00bfffc4 	movi	r2,-1
  8110dc:	80c0030d 	sth	r3,12(r16)
  8110e0:	003fd606 	br	81103c <__alt_data_end+0xff81103c>
  8110e4:	80c00e17 	ldw	r3,56(r16)
  8110e8:	0005883a 	mov	r2,zero
  8110ec:	80c00015 	stw	r3,0(r16)
  8110f0:	003fd206 	br	81103c <__alt_data_end+0xff81103c>
  8110f4:	800b883a 	mov	r5,r16
  8110f8:	8809883a 	mov	r4,r17
  8110fc:	080e7380 	call	80e738 <_fflush_r>
  811100:	10000a1e 	bne	r2,zero,81112c <__srefill_r+0x1bc>
  811104:	8080030b 	ldhu	r2,12(r16)
  811108:	00fffdc4 	movi	r3,-9
  81110c:	80000215 	stw	zero,8(r16)
  811110:	1886703a 	and	r3,r3,r2
  811114:	80000615 	stw	zero,24(r16)
  811118:	003fd206 	br	811064 <__alt_data_end+0xff811064>
  81111c:	00800244 	movi	r2,9
  811120:	88800015 	stw	r2,0(r17)
  811124:	18c01014 	ori	r3,r3,64
  811128:	80c0030d 	sth	r3,12(r16)
  81112c:	00bfffc4 	movi	r2,-1
  811130:	003fc206 	br	81103c <__alt_data_end+0xff81103c>
  811134:	800b883a 	mov	r5,r16
  811138:	8809883a 	mov	r4,r17
  81113c:	080f1fc0 	call	80f1fc <__smakebuf_r>
  811140:	003fb106 	br	811008 <__alt_data_end+0xff811008>

00811144 <__fpclassifyd>:
  811144:	00a00034 	movhi	r2,32768
  811148:	10bfffc4 	addi	r2,r2,-1
  81114c:	2884703a 	and	r2,r5,r2
  811150:	10000726 	beq	r2,zero,811170 <__fpclassifyd+0x2c>
  811154:	00fffc34 	movhi	r3,65520
  811158:	019ff834 	movhi	r6,32736
  81115c:	28c7883a 	add	r3,r5,r3
  811160:	31bfffc4 	addi	r6,r6,-1
  811164:	30c00536 	bltu	r6,r3,81117c <__fpclassifyd+0x38>
  811168:	00800104 	movi	r2,4
  81116c:	f800283a 	ret
  811170:	2000021e 	bne	r4,zero,81117c <__fpclassifyd+0x38>
  811174:	00800084 	movi	r2,2
  811178:	f800283a 	ret
  81117c:	00dffc34 	movhi	r3,32752
  811180:	019ff834 	movhi	r6,32736
  811184:	28cb883a 	add	r5,r5,r3
  811188:	31bfffc4 	addi	r6,r6,-1
  81118c:	317ff62e 	bgeu	r6,r5,811168 <__alt_data_end+0xff811168>
  811190:	01400434 	movhi	r5,16
  811194:	297fffc4 	addi	r5,r5,-1
  811198:	28800236 	bltu	r5,r2,8111a4 <__fpclassifyd+0x60>
  81119c:	008000c4 	movi	r2,3
  8111a0:	f800283a 	ret
  8111a4:	10c00226 	beq	r2,r3,8111b0 <__fpclassifyd+0x6c>
  8111a8:	0005883a 	mov	r2,zero
  8111ac:	f800283a 	ret
  8111b0:	2005003a 	cmpeq	r2,r4,zero
  8111b4:	f800283a 	ret

008111b8 <_sbrk_r>:
  8111b8:	defffd04 	addi	sp,sp,-12
  8111bc:	dc000015 	stw	r16,0(sp)
  8111c0:	040020b4 	movhi	r16,130
  8111c4:	dc400115 	stw	r17,4(sp)
  8111c8:	84366604 	addi	r16,r16,-9832
  8111cc:	2023883a 	mov	r17,r4
  8111d0:	2809883a 	mov	r4,r5
  8111d4:	dfc00215 	stw	ra,8(sp)
  8111d8:	80000015 	stw	zero,0(r16)
  8111dc:	0817b280 	call	817b28 <sbrk>
  8111e0:	00ffffc4 	movi	r3,-1
  8111e4:	10c00526 	beq	r2,r3,8111fc <_sbrk_r+0x44>
  8111e8:	dfc00217 	ldw	ra,8(sp)
  8111ec:	dc400117 	ldw	r17,4(sp)
  8111f0:	dc000017 	ldw	r16,0(sp)
  8111f4:	dec00304 	addi	sp,sp,12
  8111f8:	f800283a 	ret
  8111fc:	80c00017 	ldw	r3,0(r16)
  811200:	183ff926 	beq	r3,zero,8111e8 <__alt_data_end+0xff8111e8>
  811204:	88c00015 	stw	r3,0(r17)
  811208:	003ff706 	br	8111e8 <__alt_data_end+0xff8111e8>

0081120c <__sread>:
  81120c:	defffe04 	addi	sp,sp,-8
  811210:	dc000015 	stw	r16,0(sp)
  811214:	2821883a 	mov	r16,r5
  811218:	2940038f 	ldh	r5,14(r5)
  81121c:	dfc00115 	stw	ra,4(sp)
  811220:	08137700 	call	813770 <_read_r>
  811224:	10000716 	blt	r2,zero,811244 <__sread+0x38>
  811228:	80c01417 	ldw	r3,80(r16)
  81122c:	1887883a 	add	r3,r3,r2
  811230:	80c01415 	stw	r3,80(r16)
  811234:	dfc00117 	ldw	ra,4(sp)
  811238:	dc000017 	ldw	r16,0(sp)
  81123c:	dec00204 	addi	sp,sp,8
  811240:	f800283a 	ret
  811244:	80c0030b 	ldhu	r3,12(r16)
  811248:	18fbffcc 	andi	r3,r3,61439
  81124c:	80c0030d 	sth	r3,12(r16)
  811250:	dfc00117 	ldw	ra,4(sp)
  811254:	dc000017 	ldw	r16,0(sp)
  811258:	dec00204 	addi	sp,sp,8
  81125c:	f800283a 	ret

00811260 <__seofread>:
  811260:	0005883a 	mov	r2,zero
  811264:	f800283a 	ret

00811268 <__swrite>:
  811268:	2880030b 	ldhu	r2,12(r5)
  81126c:	defffb04 	addi	sp,sp,-20
  811270:	dcc00315 	stw	r19,12(sp)
  811274:	dc800215 	stw	r18,8(sp)
  811278:	dc400115 	stw	r17,4(sp)
  81127c:	dc000015 	stw	r16,0(sp)
  811280:	dfc00415 	stw	ra,16(sp)
  811284:	10c0400c 	andi	r3,r2,256
  811288:	2821883a 	mov	r16,r5
  81128c:	2023883a 	mov	r17,r4
  811290:	3025883a 	mov	r18,r6
  811294:	3827883a 	mov	r19,r7
  811298:	18000526 	beq	r3,zero,8112b0 <__swrite+0x48>
  81129c:	2940038f 	ldh	r5,14(r5)
  8112a0:	01c00084 	movi	r7,2
  8112a4:	000d883a 	mov	r6,zero
  8112a8:	08135b40 	call	8135b4 <_lseek_r>
  8112ac:	8080030b 	ldhu	r2,12(r16)
  8112b0:	8140038f 	ldh	r5,14(r16)
  8112b4:	10bbffcc 	andi	r2,r2,61439
  8112b8:	980f883a 	mov	r7,r19
  8112bc:	900d883a 	mov	r6,r18
  8112c0:	8809883a 	mov	r4,r17
  8112c4:	8080030d 	sth	r2,12(r16)
  8112c8:	dfc00417 	ldw	ra,16(sp)
  8112cc:	dcc00317 	ldw	r19,12(sp)
  8112d0:	dc800217 	ldw	r18,8(sp)
  8112d4:	dc400117 	ldw	r17,4(sp)
  8112d8:	dc000017 	ldw	r16,0(sp)
  8112dc:	dec00504 	addi	sp,sp,20
  8112e0:	0812bc41 	jmpi	812bc4 <_write_r>

008112e4 <__sseek>:
  8112e4:	defffe04 	addi	sp,sp,-8
  8112e8:	dc000015 	stw	r16,0(sp)
  8112ec:	2821883a 	mov	r16,r5
  8112f0:	2940038f 	ldh	r5,14(r5)
  8112f4:	dfc00115 	stw	ra,4(sp)
  8112f8:	08135b40 	call	8135b4 <_lseek_r>
  8112fc:	00ffffc4 	movi	r3,-1
  811300:	10c00826 	beq	r2,r3,811324 <__sseek+0x40>
  811304:	80c0030b 	ldhu	r3,12(r16)
  811308:	80801415 	stw	r2,80(r16)
  81130c:	18c40014 	ori	r3,r3,4096
  811310:	80c0030d 	sth	r3,12(r16)
  811314:	dfc00117 	ldw	ra,4(sp)
  811318:	dc000017 	ldw	r16,0(sp)
  81131c:	dec00204 	addi	sp,sp,8
  811320:	f800283a 	ret
  811324:	80c0030b 	ldhu	r3,12(r16)
  811328:	18fbffcc 	andi	r3,r3,61439
  81132c:	80c0030d 	sth	r3,12(r16)
  811330:	dfc00117 	ldw	ra,4(sp)
  811334:	dc000017 	ldw	r16,0(sp)
  811338:	dec00204 	addi	sp,sp,8
  81133c:	f800283a 	ret

00811340 <__sclose>:
  811340:	2940038f 	ldh	r5,14(r5)
  811344:	0812c241 	jmpi	812c24 <_close_r>

00811348 <strcmp>:
  811348:	2144b03a 	or	r2,r4,r5
  81134c:	108000cc 	andi	r2,r2,3
  811350:	1000171e 	bne	r2,zero,8113b0 <strcmp+0x68>
  811354:	20800017 	ldw	r2,0(r4)
  811358:	28c00017 	ldw	r3,0(r5)
  81135c:	10c0141e 	bne	r2,r3,8113b0 <strcmp+0x68>
  811360:	027fbff4 	movhi	r9,65279
  811364:	4a7fbfc4 	addi	r9,r9,-257
  811368:	0086303a 	nor	r3,zero,r2
  81136c:	02202074 	movhi	r8,32897
  811370:	1245883a 	add	r2,r2,r9
  811374:	42202004 	addi	r8,r8,-32640
  811378:	10c4703a 	and	r2,r2,r3
  81137c:	1204703a 	and	r2,r2,r8
  811380:	10000226 	beq	r2,zero,81138c <strcmp+0x44>
  811384:	00002306 	br	811414 <strcmp+0xcc>
  811388:	1000221e 	bne	r2,zero,811414 <strcmp+0xcc>
  81138c:	21000104 	addi	r4,r4,4
  811390:	20c00017 	ldw	r3,0(r4)
  811394:	29400104 	addi	r5,r5,4
  811398:	29800017 	ldw	r6,0(r5)
  81139c:	1a4f883a 	add	r7,r3,r9
  8113a0:	00c4303a 	nor	r2,zero,r3
  8113a4:	3884703a 	and	r2,r7,r2
  8113a8:	1204703a 	and	r2,r2,r8
  8113ac:	19bff626 	beq	r3,r6,811388 <__alt_data_end+0xff811388>
  8113b0:	20800003 	ldbu	r2,0(r4)
  8113b4:	10c03fcc 	andi	r3,r2,255
  8113b8:	18c0201c 	xori	r3,r3,128
  8113bc:	18ffe004 	addi	r3,r3,-128
  8113c0:	18000c26 	beq	r3,zero,8113f4 <strcmp+0xac>
  8113c4:	29800007 	ldb	r6,0(r5)
  8113c8:	19800326 	beq	r3,r6,8113d8 <strcmp+0x90>
  8113cc:	00001306 	br	81141c <strcmp+0xd4>
  8113d0:	29800007 	ldb	r6,0(r5)
  8113d4:	11800b1e 	bne	r2,r6,811404 <strcmp+0xbc>
  8113d8:	21000044 	addi	r4,r4,1
  8113dc:	20c00003 	ldbu	r3,0(r4)
  8113e0:	29400044 	addi	r5,r5,1
  8113e4:	18803fcc 	andi	r2,r3,255
  8113e8:	1080201c 	xori	r2,r2,128
  8113ec:	10bfe004 	addi	r2,r2,-128
  8113f0:	103ff71e 	bne	r2,zero,8113d0 <__alt_data_end+0xff8113d0>
  8113f4:	0007883a 	mov	r3,zero
  8113f8:	28800003 	ldbu	r2,0(r5)
  8113fc:	1885c83a 	sub	r2,r3,r2
  811400:	f800283a 	ret
  811404:	28800003 	ldbu	r2,0(r5)
  811408:	18c03fcc 	andi	r3,r3,255
  81140c:	1885c83a 	sub	r2,r3,r2
  811410:	f800283a 	ret
  811414:	0005883a 	mov	r2,zero
  811418:	f800283a 	ret
  81141c:	10c03fcc 	andi	r3,r2,255
  811420:	003ff506 	br	8113f8 <__alt_data_end+0xff8113f8>

00811424 <__sprint_r.part.0>:
  811424:	28801917 	ldw	r2,100(r5)
  811428:	defff604 	addi	sp,sp,-40
  81142c:	dd400515 	stw	r21,20(sp)
  811430:	dfc00915 	stw	ra,36(sp)
  811434:	df000815 	stw	fp,32(sp)
  811438:	ddc00715 	stw	r23,28(sp)
  81143c:	dd800615 	stw	r22,24(sp)
  811440:	dd000415 	stw	r20,16(sp)
  811444:	dcc00315 	stw	r19,12(sp)
  811448:	dc800215 	stw	r18,8(sp)
  81144c:	dc400115 	stw	r17,4(sp)
  811450:	dc000015 	stw	r16,0(sp)
  811454:	1088000c 	andi	r2,r2,8192
  811458:	302b883a 	mov	r21,r6
  81145c:	10002e26 	beq	r2,zero,811518 <__sprint_r.part.0+0xf4>
  811460:	30800217 	ldw	r2,8(r6)
  811464:	35800017 	ldw	r22,0(r6)
  811468:	10002926 	beq	r2,zero,811510 <__sprint_r.part.0+0xec>
  81146c:	2827883a 	mov	r19,r5
  811470:	2029883a 	mov	r20,r4
  811474:	b5c00104 	addi	r23,r22,4
  811478:	04bfffc4 	movi	r18,-1
  81147c:	bc400017 	ldw	r17,0(r23)
  811480:	b4000017 	ldw	r16,0(r22)
  811484:	0039883a 	mov	fp,zero
  811488:	8822d0ba 	srli	r17,r17,2
  81148c:	8800031e 	bne	r17,zero,81149c <__sprint_r.part.0+0x78>
  811490:	00001806 	br	8114f4 <__sprint_r.part.0+0xd0>
  811494:	84000104 	addi	r16,r16,4
  811498:	8f001526 	beq	r17,fp,8114f0 <__sprint_r.part.0+0xcc>
  81149c:	81400017 	ldw	r5,0(r16)
  8114a0:	980d883a 	mov	r6,r19
  8114a4:	a009883a 	mov	r4,r20
  8114a8:	0812fa40 	call	812fa4 <_fputwc_r>
  8114ac:	e7000044 	addi	fp,fp,1
  8114b0:	14bff81e 	bne	r2,r18,811494 <__alt_data_end+0xff811494>
  8114b4:	9005883a 	mov	r2,r18
  8114b8:	a8000215 	stw	zero,8(r21)
  8114bc:	a8000115 	stw	zero,4(r21)
  8114c0:	dfc00917 	ldw	ra,36(sp)
  8114c4:	df000817 	ldw	fp,32(sp)
  8114c8:	ddc00717 	ldw	r23,28(sp)
  8114cc:	dd800617 	ldw	r22,24(sp)
  8114d0:	dd400517 	ldw	r21,20(sp)
  8114d4:	dd000417 	ldw	r20,16(sp)
  8114d8:	dcc00317 	ldw	r19,12(sp)
  8114dc:	dc800217 	ldw	r18,8(sp)
  8114e0:	dc400117 	ldw	r17,4(sp)
  8114e4:	dc000017 	ldw	r16,0(sp)
  8114e8:	dec00a04 	addi	sp,sp,40
  8114ec:	f800283a 	ret
  8114f0:	a8800217 	ldw	r2,8(r21)
  8114f4:	8c63883a 	add	r17,r17,r17
  8114f8:	8c63883a 	add	r17,r17,r17
  8114fc:	1445c83a 	sub	r2,r2,r17
  811500:	a8800215 	stw	r2,8(r21)
  811504:	b5800204 	addi	r22,r22,8
  811508:	bdc00204 	addi	r23,r23,8
  81150c:	103fdb1e 	bne	r2,zero,81147c <__alt_data_end+0xff81147c>
  811510:	0005883a 	mov	r2,zero
  811514:	003fe806 	br	8114b8 <__alt_data_end+0xff8114b8>
  811518:	08130a40 	call	8130a4 <__sfvwrite_r>
  81151c:	003fe606 	br	8114b8 <__alt_data_end+0xff8114b8>

00811520 <__sprint_r>:
  811520:	30c00217 	ldw	r3,8(r6)
  811524:	18000126 	beq	r3,zero,81152c <__sprint_r+0xc>
  811528:	08114241 	jmpi	811424 <__sprint_r.part.0>
  81152c:	30000115 	stw	zero,4(r6)
  811530:	0005883a 	mov	r2,zero
  811534:	f800283a 	ret

00811538 <___vfiprintf_internal_r>:
  811538:	deffc904 	addi	sp,sp,-220
  81153c:	df003515 	stw	fp,212(sp)
  811540:	dd003115 	stw	r20,196(sp)
  811544:	dfc03615 	stw	ra,216(sp)
  811548:	ddc03415 	stw	r23,208(sp)
  81154c:	dd803315 	stw	r22,204(sp)
  811550:	dd403215 	stw	r21,200(sp)
  811554:	dcc03015 	stw	r19,192(sp)
  811558:	dc802f15 	stw	r18,188(sp)
  81155c:	dc402e15 	stw	r17,184(sp)
  811560:	dc002d15 	stw	r16,180(sp)
  811564:	d9002015 	stw	r4,128(sp)
  811568:	d9c02215 	stw	r7,136(sp)
  81156c:	2829883a 	mov	r20,r5
  811570:	3039883a 	mov	fp,r6
  811574:	20000226 	beq	r4,zero,811580 <___vfiprintf_internal_r+0x48>
  811578:	20800e17 	ldw	r2,56(r4)
  81157c:	1000cf26 	beq	r2,zero,8118bc <___vfiprintf_internal_r+0x384>
  811580:	a080030b 	ldhu	r2,12(r20)
  811584:	10c8000c 	andi	r3,r2,8192
  811588:	1800061e 	bne	r3,zero,8115a4 <___vfiprintf_internal_r+0x6c>
  81158c:	a1001917 	ldw	r4,100(r20)
  811590:	00f7ffc4 	movi	r3,-8193
  811594:	10880014 	ori	r2,r2,8192
  811598:	20c6703a 	and	r3,r4,r3
  81159c:	a080030d 	sth	r2,12(r20)
  8115a0:	a0c01915 	stw	r3,100(r20)
  8115a4:	10c0020c 	andi	r3,r2,8
  8115a8:	1800a926 	beq	r3,zero,811850 <___vfiprintf_internal_r+0x318>
  8115ac:	a0c00417 	ldw	r3,16(r20)
  8115b0:	1800a726 	beq	r3,zero,811850 <___vfiprintf_internal_r+0x318>
  8115b4:	1080068c 	andi	r2,r2,26
  8115b8:	00c00284 	movi	r3,10
  8115bc:	10c0ac26 	beq	r2,r3,811870 <___vfiprintf_internal_r+0x338>
  8115c0:	da801a04 	addi	r10,sp,104
  8115c4:	da801e15 	stw	r10,120(sp)
  8115c8:	d8801e17 	ldw	r2,120(sp)
  8115cc:	da8019c4 	addi	r10,sp,103
  8115d0:	058020b4 	movhi	r22,130
  8115d4:	05c020b4 	movhi	r23,130
  8115d8:	da801f15 	stw	r10,124(sp)
  8115dc:	1295c83a 	sub	r10,r2,r10
  8115e0:	b5aece04 	addi	r22,r22,-17608
  8115e4:	bdeeca04 	addi	r23,r23,-17624
  8115e8:	dec01a15 	stw	sp,104(sp)
  8115ec:	d8001c15 	stw	zero,112(sp)
  8115f0:	d8001b15 	stw	zero,108(sp)
  8115f4:	d8002615 	stw	zero,152(sp)
  8115f8:	d8002315 	stw	zero,140(sp)
  8115fc:	da802715 	stw	r10,156(sp)
  811600:	d811883a 	mov	r8,sp
  811604:	dd002115 	stw	r20,132(sp)
  811608:	e021883a 	mov	r16,fp
  81160c:	80800007 	ldb	r2,0(r16)
  811610:	1003ea26 	beq	r2,zero,8125bc <___vfiprintf_internal_r+0x1084>
  811614:	00c00944 	movi	r3,37
  811618:	8025883a 	mov	r18,r16
  81161c:	10c0021e 	bne	r2,r3,811628 <___vfiprintf_internal_r+0xf0>
  811620:	00001606 	br	81167c <___vfiprintf_internal_r+0x144>
  811624:	10c00326 	beq	r2,r3,811634 <___vfiprintf_internal_r+0xfc>
  811628:	94800044 	addi	r18,r18,1
  81162c:	90800007 	ldb	r2,0(r18)
  811630:	103ffc1e 	bne	r2,zero,811624 <__alt_data_end+0xff811624>
  811634:	9423c83a 	sub	r17,r18,r16
  811638:	88001026 	beq	r17,zero,81167c <___vfiprintf_internal_r+0x144>
  81163c:	d8c01c17 	ldw	r3,112(sp)
  811640:	d8801b17 	ldw	r2,108(sp)
  811644:	44000015 	stw	r16,0(r8)
  811648:	88c7883a 	add	r3,r17,r3
  81164c:	10800044 	addi	r2,r2,1
  811650:	44400115 	stw	r17,4(r8)
  811654:	d8c01c15 	stw	r3,112(sp)
  811658:	d8801b15 	stw	r2,108(sp)
  81165c:	010001c4 	movi	r4,7
  811660:	2080760e 	bge	r4,r2,81183c <___vfiprintf_internal_r+0x304>
  811664:	1803821e 	bne	r3,zero,812470 <___vfiprintf_internal_r+0xf38>
  811668:	da802317 	ldw	r10,140(sp)
  81166c:	d8001b15 	stw	zero,108(sp)
  811670:	d811883a 	mov	r8,sp
  811674:	5455883a 	add	r10,r10,r17
  811678:	da802315 	stw	r10,140(sp)
  81167c:	90800007 	ldb	r2,0(r18)
  811680:	10044626 	beq	r2,zero,81279c <___vfiprintf_internal_r+0x1264>
  811684:	90c00047 	ldb	r3,1(r18)
  811688:	94000044 	addi	r16,r18,1
  81168c:	d8001d85 	stb	zero,118(sp)
  811690:	0009883a 	mov	r4,zero
  811694:	000f883a 	mov	r7,zero
  811698:	027fffc4 	movi	r9,-1
  81169c:	0023883a 	mov	r17,zero
  8116a0:	0029883a 	mov	r20,zero
  8116a4:	01401604 	movi	r5,88
  8116a8:	01800244 	movi	r6,9
  8116ac:	03400a84 	movi	r13,42
  8116b0:	03001b04 	movi	r12,108
  8116b4:	84000044 	addi	r16,r16,1
  8116b8:	18bff804 	addi	r2,r3,-32
  8116bc:	28827336 	bltu	r5,r2,81208c <___vfiprintf_internal_r+0xb54>
  8116c0:	100490ba 	slli	r2,r2,2
  8116c4:	02802074 	movhi	r10,129
  8116c8:	5285b604 	addi	r10,r10,5848
  8116cc:	1285883a 	add	r2,r2,r10
  8116d0:	10800017 	ldw	r2,0(r2)
  8116d4:	1000683a 	jmp	r2
  8116d8:	00811dc0 	call	811dc <__alt_mem_sdram_0-0x77ee24>
  8116dc:	0081208c 	andi	r2,zero,1154
  8116e0:	0081208c 	andi	r2,zero,1154
  8116e4:	00811de0 	cmpeqi	r2,zero,1143
  8116e8:	0081208c 	andi	r2,zero,1154
  8116ec:	0081208c 	andi	r2,zero,1154
  8116f0:	0081208c 	andi	r2,zero,1154
  8116f4:	0081208c 	andi	r2,zero,1154
  8116f8:	0081208c 	andi	r2,zero,1154
  8116fc:	0081208c 	andi	r2,zero,1154
  811700:	00811fc8 	cmpgei	r2,zero,1151
  811704:	00811fe4 	muli	r2,zero,1151
  811708:	0081208c 	andi	r2,zero,1154
  81170c:	008118cc 	andi	r2,zero,1123
  811710:	00811ff4 	movhi	r2,1151
  811714:	0081208c 	andi	r2,zero,1154
  811718:	00811dec 	andhi	r2,zero,1143
  81171c:	00811df8 	rdprs	r2,zero,1143
  811720:	00811df8 	rdprs	r2,zero,1143
  811724:	00811df8 	rdprs	r2,zero,1143
  811728:	00811df8 	rdprs	r2,zero,1143
  81172c:	00811df8 	rdprs	r2,zero,1143
  811730:	00811df8 	rdprs	r2,zero,1143
  811734:	00811df8 	rdprs	r2,zero,1143
  811738:	00811df8 	rdprs	r2,zero,1143
  81173c:	00811df8 	rdprs	r2,zero,1143
  811740:	0081208c 	andi	r2,zero,1154
  811744:	0081208c 	andi	r2,zero,1154
  811748:	0081208c 	andi	r2,zero,1154
  81174c:	0081208c 	andi	r2,zero,1154
  811750:	0081208c 	andi	r2,zero,1154
  811754:	0081208c 	andi	r2,zero,1154
  811758:	0081208c 	andi	r2,zero,1154
  81175c:	0081208c 	andi	r2,zero,1154
  811760:	0081208c 	andi	r2,zero,1154
  811764:	0081208c 	andi	r2,zero,1154
  811768:	00811e24 	muli	r2,zero,1144
  81176c:	0081208c 	andi	r2,zero,1154
  811770:	0081208c 	andi	r2,zero,1154
  811774:	0081208c 	andi	r2,zero,1154
  811778:	0081208c 	andi	r2,zero,1154
  81177c:	0081208c 	andi	r2,zero,1154
  811780:	0081208c 	andi	r2,zero,1154
  811784:	0081208c 	andi	r2,zero,1154
  811788:	0081208c 	andi	r2,zero,1154
  81178c:	0081208c 	andi	r2,zero,1154
  811790:	0081208c 	andi	r2,zero,1154
  811794:	00811e5c 	xori	r2,zero,1145
  811798:	0081208c 	andi	r2,zero,1154
  81179c:	0081208c 	andi	r2,zero,1154
  8117a0:	0081208c 	andi	r2,zero,1154
  8117a4:	0081208c 	andi	r2,zero,1154
  8117a8:	0081208c 	andi	r2,zero,1154
  8117ac:	00811eb4 	movhi	r2,1146
  8117b0:	0081208c 	andi	r2,zero,1154
  8117b4:	0081208c 	andi	r2,zero,1154
  8117b8:	00811f24 	muli	r2,zero,1148
  8117bc:	0081208c 	andi	r2,zero,1154
  8117c0:	0081208c 	andi	r2,zero,1154
  8117c4:	0081208c 	andi	r2,zero,1154
  8117c8:	0081208c 	andi	r2,zero,1154
  8117cc:	0081208c 	andi	r2,zero,1154
  8117d0:	0081208c 	andi	r2,zero,1154
  8117d4:	0081208c 	andi	r2,zero,1154
  8117d8:	0081208c 	andi	r2,zero,1154
  8117dc:	0081208c 	andi	r2,zero,1154
  8117e0:	0081208c 	andi	r2,zero,1154
  8117e4:	00811cd0 	cmplti	r2,zero,1139
  8117e8:	00811cfc 	xorhi	r2,zero,1139
  8117ec:	0081208c 	andi	r2,zero,1154
  8117f0:	0081208c 	andi	r2,zero,1154
  8117f4:	0081208c 	andi	r2,zero,1154
  8117f8:	00812034 	movhi	r2,1152
  8117fc:	00811cfc 	xorhi	r2,zero,1139
  811800:	0081208c 	andi	r2,zero,1154
  811804:	0081208c 	andi	r2,zero,1154
  811808:	00811b90 	cmplti	r2,zero,1134
  81180c:	0081208c 	andi	r2,zero,1154
  811810:	00811ba0 	cmpeqi	r2,zero,1134
  811814:	00811bdc 	xori	r2,zero,1135
  811818:	008118d8 	cmpnei	r2,zero,1123
  81181c:	00811b84 	movi	r2,1134
  811820:	0081208c 	andi	r2,zero,1154
  811824:	00811f60 	cmpeqi	r2,zero,1149
  811828:	0081208c 	andi	r2,zero,1154
  81182c:	00811fb8 	rdprs	r2,zero,1150
  811830:	0081208c 	andi	r2,zero,1154
  811834:	0081208c 	andi	r2,zero,1154
  811838:	00811c7c 	xorhi	r2,zero,1137
  81183c:	42000204 	addi	r8,r8,8
  811840:	da802317 	ldw	r10,140(sp)
  811844:	5455883a 	add	r10,r10,r17
  811848:	da802315 	stw	r10,140(sp)
  81184c:	003f8b06 	br	81167c <__alt_data_end+0xff81167c>
  811850:	d9002017 	ldw	r4,128(sp)
  811854:	a00b883a 	mov	r5,r20
  811858:	080cb400 	call	80cb40 <__swsetup_r>
  81185c:	1003b11e 	bne	r2,zero,812724 <___vfiprintf_internal_r+0x11ec>
  811860:	a080030b 	ldhu	r2,12(r20)
  811864:	00c00284 	movi	r3,10
  811868:	1080068c 	andi	r2,r2,26
  81186c:	10ff541e 	bne	r2,r3,8115c0 <__alt_data_end+0xff8115c0>
  811870:	a080038f 	ldh	r2,14(r20)
  811874:	103f5216 	blt	r2,zero,8115c0 <__alt_data_end+0xff8115c0>
  811878:	d9c02217 	ldw	r7,136(sp)
  81187c:	d9002017 	ldw	r4,128(sp)
  811880:	e00d883a 	mov	r6,fp
  811884:	a00b883a 	mov	r5,r20
  811888:	08129b00 	call	8129b0 <__sbprintf>
  81188c:	dfc03617 	ldw	ra,216(sp)
  811890:	df003517 	ldw	fp,212(sp)
  811894:	ddc03417 	ldw	r23,208(sp)
  811898:	dd803317 	ldw	r22,204(sp)
  81189c:	dd403217 	ldw	r21,200(sp)
  8118a0:	dd003117 	ldw	r20,196(sp)
  8118a4:	dcc03017 	ldw	r19,192(sp)
  8118a8:	dc802f17 	ldw	r18,188(sp)
  8118ac:	dc402e17 	ldw	r17,184(sp)
  8118b0:	dc002d17 	ldw	r16,180(sp)
  8118b4:	dec03704 	addi	sp,sp,220
  8118b8:	f800283a 	ret
  8118bc:	080eb140 	call	80eb14 <__sinit>
  8118c0:	003f2f06 	br	811580 <__alt_data_end+0xff811580>
  8118c4:	0463c83a 	sub	r17,zero,r17
  8118c8:	d8802215 	stw	r2,136(sp)
  8118cc:	a5000114 	ori	r20,r20,4
  8118d0:	80c00007 	ldb	r3,0(r16)
  8118d4:	003f7706 	br	8116b4 <__alt_data_end+0xff8116b4>
  8118d8:	00800c04 	movi	r2,48
  8118dc:	da802217 	ldw	r10,136(sp)
  8118e0:	d8801d05 	stb	r2,116(sp)
  8118e4:	00801e04 	movi	r2,120
  8118e8:	d8801d45 	stb	r2,117(sp)
  8118ec:	d8001d85 	stb	zero,118(sp)
  8118f0:	50c00104 	addi	r3,r10,4
  8118f4:	54800017 	ldw	r18,0(r10)
  8118f8:	0027883a 	mov	r19,zero
  8118fc:	a0800094 	ori	r2,r20,2
  811900:	48030b16 	blt	r9,zero,812530 <___vfiprintf_internal_r+0xff8>
  811904:	00bfdfc4 	movi	r2,-129
  811908:	a096703a 	and	r11,r20,r2
  81190c:	d8c02215 	stw	r3,136(sp)
  811910:	5d000094 	ori	r20,r11,2
  811914:	90032b1e 	bne	r18,zero,8125c4 <___vfiprintf_internal_r+0x108c>
  811918:	008020b4 	movhi	r2,130
  81191c:	10ae6a04 	addi	r2,r2,-18008
  811920:	d8802615 	stw	r2,152(sp)
  811924:	0039883a 	mov	fp,zero
  811928:	48017b1e 	bne	r9,zero,811f18 <___vfiprintf_internal_r+0x9e0>
  81192c:	0013883a 	mov	r9,zero
  811930:	0027883a 	mov	r19,zero
  811934:	dd401a04 	addi	r21,sp,104
  811938:	4825883a 	mov	r18,r9
  81193c:	4cc0010e 	bge	r9,r19,811944 <___vfiprintf_internal_r+0x40c>
  811940:	9825883a 	mov	r18,r19
  811944:	e7003fcc 	andi	fp,fp,255
  811948:	e700201c 	xori	fp,fp,128
  81194c:	e73fe004 	addi	fp,fp,-128
  811950:	e0000126 	beq	fp,zero,811958 <___vfiprintf_internal_r+0x420>
  811954:	94800044 	addi	r18,r18,1
  811958:	a380008c 	andi	r14,r20,2
  81195c:	70000126 	beq	r14,zero,811964 <___vfiprintf_internal_r+0x42c>
  811960:	94800084 	addi	r18,r18,2
  811964:	a700210c 	andi	fp,r20,132
  811968:	e001df1e 	bne	fp,zero,8120e8 <___vfiprintf_internal_r+0xbb0>
  81196c:	8c87c83a 	sub	r3,r17,r18
  811970:	00c1dd0e 	bge	zero,r3,8120e8 <___vfiprintf_internal_r+0xbb0>
  811974:	01c00404 	movi	r7,16
  811978:	d8801c17 	ldw	r2,112(sp)
  81197c:	38c3ad0e 	bge	r7,r3,812834 <___vfiprintf_internal_r+0x12fc>
  811980:	028020b4 	movhi	r10,130
  811984:	52aece04 	addi	r10,r10,-17608
  811988:	dc002915 	stw	r16,164(sp)
  81198c:	d9801b17 	ldw	r6,108(sp)
  811990:	da802415 	stw	r10,144(sp)
  811994:	03c001c4 	movi	r15,7
  811998:	da402515 	stw	r9,148(sp)
  81199c:	db802815 	stw	r14,160(sp)
  8119a0:	1821883a 	mov	r16,r3
  8119a4:	00000506 	br	8119bc <___vfiprintf_internal_r+0x484>
  8119a8:	31400084 	addi	r5,r6,2
  8119ac:	42000204 	addi	r8,r8,8
  8119b0:	200d883a 	mov	r6,r4
  8119b4:	843ffc04 	addi	r16,r16,-16
  8119b8:	3c000d0e 	bge	r7,r16,8119f0 <___vfiprintf_internal_r+0x4b8>
  8119bc:	10800404 	addi	r2,r2,16
  8119c0:	31000044 	addi	r4,r6,1
  8119c4:	45800015 	stw	r22,0(r8)
  8119c8:	41c00115 	stw	r7,4(r8)
  8119cc:	d8801c15 	stw	r2,112(sp)
  8119d0:	d9001b15 	stw	r4,108(sp)
  8119d4:	793ff40e 	bge	r15,r4,8119a8 <__alt_data_end+0xff8119a8>
  8119d8:	1001b51e 	bne	r2,zero,8120b0 <___vfiprintf_internal_r+0xb78>
  8119dc:	843ffc04 	addi	r16,r16,-16
  8119e0:	000d883a 	mov	r6,zero
  8119e4:	01400044 	movi	r5,1
  8119e8:	d811883a 	mov	r8,sp
  8119ec:	3c3ff316 	blt	r7,r16,8119bc <__alt_data_end+0xff8119bc>
  8119f0:	8007883a 	mov	r3,r16
  8119f4:	da402517 	ldw	r9,148(sp)
  8119f8:	db802817 	ldw	r14,160(sp)
  8119fc:	dc002917 	ldw	r16,164(sp)
  811a00:	da802417 	ldw	r10,144(sp)
  811a04:	1885883a 	add	r2,r3,r2
  811a08:	40c00115 	stw	r3,4(r8)
  811a0c:	42800015 	stw	r10,0(r8)
  811a10:	d8801c15 	stw	r2,112(sp)
  811a14:	d9401b15 	stw	r5,108(sp)
  811a18:	00c001c4 	movi	r3,7
  811a1c:	19426016 	blt	r3,r5,8123a0 <___vfiprintf_internal_r+0xe68>
  811a20:	d8c01d87 	ldb	r3,118(sp)
  811a24:	42000204 	addi	r8,r8,8
  811a28:	29000044 	addi	r4,r5,1
  811a2c:	1801b31e 	bne	r3,zero,8120fc <___vfiprintf_internal_r+0xbc4>
  811a30:	7001c026 	beq	r14,zero,812134 <___vfiprintf_internal_r+0xbfc>
  811a34:	d8c01d04 	addi	r3,sp,116
  811a38:	10800084 	addi	r2,r2,2
  811a3c:	40c00015 	stw	r3,0(r8)
  811a40:	00c00084 	movi	r3,2
  811a44:	40c00115 	stw	r3,4(r8)
  811a48:	d8801c15 	stw	r2,112(sp)
  811a4c:	d9001b15 	stw	r4,108(sp)
  811a50:	00c001c4 	movi	r3,7
  811a54:	1902650e 	bge	r3,r4,8123ec <___vfiprintf_internal_r+0xeb4>
  811a58:	10029a1e 	bne	r2,zero,8124c4 <___vfiprintf_internal_r+0xf8c>
  811a5c:	00c02004 	movi	r3,128
  811a60:	01000044 	movi	r4,1
  811a64:	000b883a 	mov	r5,zero
  811a68:	d811883a 	mov	r8,sp
  811a6c:	e0c1b31e 	bne	fp,r3,81213c <___vfiprintf_internal_r+0xc04>
  811a70:	8cb9c83a 	sub	fp,r17,r18
  811a74:	0701b10e 	bge	zero,fp,81213c <___vfiprintf_internal_r+0xc04>
  811a78:	01c00404 	movi	r7,16
  811a7c:	3f03890e 	bge	r7,fp,8128a4 <___vfiprintf_internal_r+0x136c>
  811a80:	00c020b4 	movhi	r3,130
  811a84:	18eeca04 	addi	r3,r3,-17624
  811a88:	d8c02415 	stw	r3,144(sp)
  811a8c:	8007883a 	mov	r3,r16
  811a90:	034001c4 	movi	r13,7
  811a94:	e021883a 	mov	r16,fp
  811a98:	da402515 	stw	r9,148(sp)
  811a9c:	1839883a 	mov	fp,r3
  811aa0:	00000506 	br	811ab8 <___vfiprintf_internal_r+0x580>
  811aa4:	29800084 	addi	r6,r5,2
  811aa8:	42000204 	addi	r8,r8,8
  811aac:	180b883a 	mov	r5,r3
  811ab0:	843ffc04 	addi	r16,r16,-16
  811ab4:	3c000d0e 	bge	r7,r16,811aec <___vfiprintf_internal_r+0x5b4>
  811ab8:	10800404 	addi	r2,r2,16
  811abc:	28c00044 	addi	r3,r5,1
  811ac0:	45c00015 	stw	r23,0(r8)
  811ac4:	41c00115 	stw	r7,4(r8)
  811ac8:	d8801c15 	stw	r2,112(sp)
  811acc:	d8c01b15 	stw	r3,108(sp)
  811ad0:	68fff40e 	bge	r13,r3,811aa4 <__alt_data_end+0xff811aa4>
  811ad4:	1002241e 	bne	r2,zero,812368 <___vfiprintf_internal_r+0xe30>
  811ad8:	843ffc04 	addi	r16,r16,-16
  811adc:	01800044 	movi	r6,1
  811ae0:	000b883a 	mov	r5,zero
  811ae4:	d811883a 	mov	r8,sp
  811ae8:	3c3ff316 	blt	r7,r16,811ab8 <__alt_data_end+0xff811ab8>
  811aec:	da402517 	ldw	r9,148(sp)
  811af0:	e007883a 	mov	r3,fp
  811af4:	8039883a 	mov	fp,r16
  811af8:	1821883a 	mov	r16,r3
  811afc:	d8c02417 	ldw	r3,144(sp)
  811b00:	1705883a 	add	r2,r2,fp
  811b04:	47000115 	stw	fp,4(r8)
  811b08:	40c00015 	stw	r3,0(r8)
  811b0c:	d8801c15 	stw	r2,112(sp)
  811b10:	d9801b15 	stw	r6,108(sp)
  811b14:	00c001c4 	movi	r3,7
  811b18:	19827616 	blt	r3,r6,8124f4 <___vfiprintf_internal_r+0xfbc>
  811b1c:	4cf9c83a 	sub	fp,r9,r19
  811b20:	42000204 	addi	r8,r8,8
  811b24:	31000044 	addi	r4,r6,1
  811b28:	300b883a 	mov	r5,r6
  811b2c:	07018516 	blt	zero,fp,812144 <___vfiprintf_internal_r+0xc0c>
  811b30:	9885883a 	add	r2,r19,r2
  811b34:	45400015 	stw	r21,0(r8)
  811b38:	44c00115 	stw	r19,4(r8)
  811b3c:	d8801c15 	stw	r2,112(sp)
  811b40:	d9001b15 	stw	r4,108(sp)
  811b44:	00c001c4 	movi	r3,7
  811b48:	1901dd0e 	bge	r3,r4,8122c0 <___vfiprintf_internal_r+0xd88>
  811b4c:	1002401e 	bne	r2,zero,812450 <___vfiprintf_internal_r+0xf18>
  811b50:	d8001b15 	stw	zero,108(sp)
  811b54:	a2c0010c 	andi	r11,r20,4
  811b58:	58000226 	beq	r11,zero,811b64 <___vfiprintf_internal_r+0x62c>
  811b5c:	8ca7c83a 	sub	r19,r17,r18
  811b60:	04c2f216 	blt	zero,r19,81272c <___vfiprintf_internal_r+0x11f4>
  811b64:	8c80010e 	bge	r17,r18,811b6c <___vfiprintf_internal_r+0x634>
  811b68:	9023883a 	mov	r17,r18
  811b6c:	da802317 	ldw	r10,140(sp)
  811b70:	5455883a 	add	r10,r10,r17
  811b74:	da802315 	stw	r10,140(sp)
  811b78:	d8001b15 	stw	zero,108(sp)
  811b7c:	d811883a 	mov	r8,sp
  811b80:	003ea206 	br	81160c <__alt_data_end+0xff81160c>
  811b84:	a5000814 	ori	r20,r20,32
  811b88:	80c00007 	ldb	r3,0(r16)
  811b8c:	003ec906 	br	8116b4 <__alt_data_end+0xff8116b4>
  811b90:	80c00007 	ldb	r3,0(r16)
  811b94:	1b030926 	beq	r3,r12,8127bc <___vfiprintf_internal_r+0x1284>
  811b98:	a5000414 	ori	r20,r20,16
  811b9c:	003ec506 	br	8116b4 <__alt_data_end+0xff8116b4>
  811ba0:	21003fcc 	andi	r4,r4,255
  811ba4:	20035e1e 	bne	r4,zero,812920 <___vfiprintf_internal_r+0x13e8>
  811ba8:	a080080c 	andi	r2,r20,32
  811bac:	1002a526 	beq	r2,zero,812644 <___vfiprintf_internal_r+0x110c>
  811bb0:	da802217 	ldw	r10,136(sp)
  811bb4:	50800017 	ldw	r2,0(r10)
  811bb8:	da802317 	ldw	r10,140(sp)
  811bbc:	5007d7fa 	srai	r3,r10,31
  811bc0:	da802217 	ldw	r10,136(sp)
  811bc4:	10c00115 	stw	r3,4(r2)
  811bc8:	52800104 	addi	r10,r10,4
  811bcc:	da802215 	stw	r10,136(sp)
  811bd0:	da802317 	ldw	r10,140(sp)
  811bd4:	12800015 	stw	r10,0(r2)
  811bd8:	003e8c06 	br	81160c <__alt_data_end+0xff81160c>
  811bdc:	21003fcc 	andi	r4,r4,255
  811be0:	2003511e 	bne	r4,zero,812928 <___vfiprintf_internal_r+0x13f0>
  811be4:	a080080c 	andi	r2,r20,32
  811be8:	1000a126 	beq	r2,zero,811e70 <___vfiprintf_internal_r+0x938>
  811bec:	da802217 	ldw	r10,136(sp)
  811bf0:	d8001d85 	stb	zero,118(sp)
  811bf4:	50800204 	addi	r2,r10,8
  811bf8:	54800017 	ldw	r18,0(r10)
  811bfc:	54c00117 	ldw	r19,4(r10)
  811c00:	4802b416 	blt	r9,zero,8126d4 <___vfiprintf_internal_r+0x119c>
  811c04:	013fdfc4 	movi	r4,-129
  811c08:	94c6b03a 	or	r3,r18,r19
  811c0c:	d8802215 	stw	r2,136(sp)
  811c10:	a128703a 	and	r20,r20,r4
  811c14:	1800a226 	beq	r3,zero,811ea0 <___vfiprintf_internal_r+0x968>
  811c18:	0039883a 	mov	fp,zero
  811c1c:	dd401a04 	addi	r21,sp,104
  811c20:	9006d0fa 	srli	r3,r18,3
  811c24:	9808977a 	slli	r4,r19,29
  811c28:	9826d0fa 	srli	r19,r19,3
  811c2c:	948001cc 	andi	r18,r18,7
  811c30:	90800c04 	addi	r2,r18,48
  811c34:	ad7fffc4 	addi	r21,r21,-1
  811c38:	20e4b03a 	or	r18,r4,r3
  811c3c:	a8800005 	stb	r2,0(r21)
  811c40:	94c6b03a 	or	r3,r18,r19
  811c44:	183ff61e 	bne	r3,zero,811c20 <__alt_data_end+0xff811c20>
  811c48:	a0c0004c 	andi	r3,r20,1
  811c4c:	18005926 	beq	r3,zero,811db4 <___vfiprintf_internal_r+0x87c>
  811c50:	10803fcc 	andi	r2,r2,255
  811c54:	1080201c 	xori	r2,r2,128
  811c58:	10bfe004 	addi	r2,r2,-128
  811c5c:	00c00c04 	movi	r3,48
  811c60:	10c05426 	beq	r2,r3,811db4 <___vfiprintf_internal_r+0x87c>
  811c64:	da801e17 	ldw	r10,120(sp)
  811c68:	a8bfffc4 	addi	r2,r21,-1
  811c6c:	a8ffffc5 	stb	r3,-1(r21)
  811c70:	50a7c83a 	sub	r19,r10,r2
  811c74:	102b883a 	mov	r21,r2
  811c78:	003f2f06 	br	811938 <__alt_data_end+0xff811938>
  811c7c:	21003fcc 	andi	r4,r4,255
  811c80:	2003421e 	bne	r4,zero,81298c <___vfiprintf_internal_r+0x1454>
  811c84:	008020b4 	movhi	r2,130
  811c88:	10ae6a04 	addi	r2,r2,-18008
  811c8c:	d8802615 	stw	r2,152(sp)
  811c90:	a080080c 	andi	r2,r20,32
  811c94:	1000aa26 	beq	r2,zero,811f40 <___vfiprintf_internal_r+0xa08>
  811c98:	da802217 	ldw	r10,136(sp)
  811c9c:	54800017 	ldw	r18,0(r10)
  811ca0:	54c00117 	ldw	r19,4(r10)
  811ca4:	52800204 	addi	r10,r10,8
  811ca8:	da802215 	stw	r10,136(sp)
  811cac:	a080004c 	andi	r2,r20,1
  811cb0:	1001d226 	beq	r2,zero,8123fc <___vfiprintf_internal_r+0xec4>
  811cb4:	94c4b03a 	or	r2,r18,r19
  811cb8:	1002351e 	bne	r2,zero,812590 <___vfiprintf_internal_r+0x1058>
  811cbc:	d8001d85 	stb	zero,118(sp)
  811cc0:	48022216 	blt	r9,zero,81254c <___vfiprintf_internal_r+0x1014>
  811cc4:	00bfdfc4 	movi	r2,-129
  811cc8:	a0a8703a 	and	r20,r20,r2
  811ccc:	003f1506 	br	811924 <__alt_data_end+0xff811924>
  811cd0:	da802217 	ldw	r10,136(sp)
  811cd4:	04800044 	movi	r18,1
  811cd8:	d8001d85 	stb	zero,118(sp)
  811cdc:	50800017 	ldw	r2,0(r10)
  811ce0:	52800104 	addi	r10,r10,4
  811ce4:	da802215 	stw	r10,136(sp)
  811ce8:	d8801005 	stb	r2,64(sp)
  811cec:	9027883a 	mov	r19,r18
  811cf0:	dd401004 	addi	r21,sp,64
  811cf4:	0013883a 	mov	r9,zero
  811cf8:	003f1706 	br	811958 <__alt_data_end+0xff811958>
  811cfc:	21003fcc 	andi	r4,r4,255
  811d00:	2003201e 	bne	r4,zero,812984 <___vfiprintf_internal_r+0x144c>
  811d04:	a080080c 	andi	r2,r20,32
  811d08:	10004b26 	beq	r2,zero,811e38 <___vfiprintf_internal_r+0x900>
  811d0c:	da802217 	ldw	r10,136(sp)
  811d10:	50800117 	ldw	r2,4(r10)
  811d14:	54800017 	ldw	r18,0(r10)
  811d18:	52800204 	addi	r10,r10,8
  811d1c:	da802215 	stw	r10,136(sp)
  811d20:	1027883a 	mov	r19,r2
  811d24:	10022c16 	blt	r2,zero,8125d8 <___vfiprintf_internal_r+0x10a0>
  811d28:	df001d83 	ldbu	fp,118(sp)
  811d2c:	48007216 	blt	r9,zero,811ef8 <___vfiprintf_internal_r+0x9c0>
  811d30:	00ffdfc4 	movi	r3,-129
  811d34:	94c4b03a 	or	r2,r18,r19
  811d38:	a0e8703a 	and	r20,r20,r3
  811d3c:	1000cc26 	beq	r2,zero,812070 <___vfiprintf_internal_r+0xb38>
  811d40:	98021026 	beq	r19,zero,812584 <___vfiprintf_internal_r+0x104c>
  811d44:	dc402415 	stw	r17,144(sp)
  811d48:	dc002515 	stw	r16,148(sp)
  811d4c:	9823883a 	mov	r17,r19
  811d50:	9021883a 	mov	r16,r18
  811d54:	dd401a04 	addi	r21,sp,104
  811d58:	4825883a 	mov	r18,r9
  811d5c:	4027883a 	mov	r19,r8
  811d60:	8009883a 	mov	r4,r16
  811d64:	880b883a 	mov	r5,r17
  811d68:	01800284 	movi	r6,10
  811d6c:	000f883a 	mov	r7,zero
  811d70:	08144940 	call	814494 <__umoddi3>
  811d74:	10800c04 	addi	r2,r2,48
  811d78:	ad7fffc4 	addi	r21,r21,-1
  811d7c:	8009883a 	mov	r4,r16
  811d80:	880b883a 	mov	r5,r17
  811d84:	a8800005 	stb	r2,0(r21)
  811d88:	01800284 	movi	r6,10
  811d8c:	000f883a 	mov	r7,zero
  811d90:	0813f1c0 	call	813f1c <__udivdi3>
  811d94:	1021883a 	mov	r16,r2
  811d98:	10c4b03a 	or	r2,r2,r3
  811d9c:	1823883a 	mov	r17,r3
  811da0:	103fef1e 	bne	r2,zero,811d60 <__alt_data_end+0xff811d60>
  811da4:	dc402417 	ldw	r17,144(sp)
  811da8:	dc002517 	ldw	r16,148(sp)
  811dac:	9013883a 	mov	r9,r18
  811db0:	9811883a 	mov	r8,r19
  811db4:	da801e17 	ldw	r10,120(sp)
  811db8:	5567c83a 	sub	r19,r10,r21
  811dbc:	003ede06 	br	811938 <__alt_data_end+0xff811938>
  811dc0:	38803fcc 	andi	r2,r7,255
  811dc4:	1080201c 	xori	r2,r2,128
  811dc8:	10bfe004 	addi	r2,r2,-128
  811dcc:	1002371e 	bne	r2,zero,8126ac <___vfiprintf_internal_r+0x1174>
  811dd0:	01000044 	movi	r4,1
  811dd4:	01c00804 	movi	r7,32
  811dd8:	80c00007 	ldb	r3,0(r16)
  811ddc:	003e3506 	br	8116b4 <__alt_data_end+0xff8116b4>
  811de0:	a5000054 	ori	r20,r20,1
  811de4:	80c00007 	ldb	r3,0(r16)
  811de8:	003e3206 	br	8116b4 <__alt_data_end+0xff8116b4>
  811dec:	a5002014 	ori	r20,r20,128
  811df0:	80c00007 	ldb	r3,0(r16)
  811df4:	003e2f06 	br	8116b4 <__alt_data_end+0xff8116b4>
  811df8:	8015883a 	mov	r10,r16
  811dfc:	0023883a 	mov	r17,zero
  811e00:	18bff404 	addi	r2,r3,-48
  811e04:	50c00007 	ldb	r3,0(r10)
  811e08:	8c4002a4 	muli	r17,r17,10
  811e0c:	84000044 	addi	r16,r16,1
  811e10:	8015883a 	mov	r10,r16
  811e14:	1463883a 	add	r17,r2,r17
  811e18:	18bff404 	addi	r2,r3,-48
  811e1c:	30bff92e 	bgeu	r6,r2,811e04 <__alt_data_end+0xff811e04>
  811e20:	003e2506 	br	8116b8 <__alt_data_end+0xff8116b8>
  811e24:	21003fcc 	andi	r4,r4,255
  811e28:	2002d41e 	bne	r4,zero,81297c <___vfiprintf_internal_r+0x1444>
  811e2c:	a5000414 	ori	r20,r20,16
  811e30:	a080080c 	andi	r2,r20,32
  811e34:	103fb51e 	bne	r2,zero,811d0c <__alt_data_end+0xff811d0c>
  811e38:	a080040c 	andi	r2,r20,16
  811e3c:	1001f826 	beq	r2,zero,812620 <___vfiprintf_internal_r+0x10e8>
  811e40:	da802217 	ldw	r10,136(sp)
  811e44:	54800017 	ldw	r18,0(r10)
  811e48:	52800104 	addi	r10,r10,4
  811e4c:	da802215 	stw	r10,136(sp)
  811e50:	9027d7fa 	srai	r19,r18,31
  811e54:	9805883a 	mov	r2,r19
  811e58:	003fb206 	br	811d24 <__alt_data_end+0xff811d24>
  811e5c:	21003fcc 	andi	r4,r4,255
  811e60:	2002c41e 	bne	r4,zero,812974 <___vfiprintf_internal_r+0x143c>
  811e64:	a5000414 	ori	r20,r20,16
  811e68:	a080080c 	andi	r2,r20,32
  811e6c:	103f5f1e 	bne	r2,zero,811bec <__alt_data_end+0xff811bec>
  811e70:	a080040c 	andi	r2,r20,16
  811e74:	10020f26 	beq	r2,zero,8126b4 <___vfiprintf_internal_r+0x117c>
  811e78:	da802217 	ldw	r10,136(sp)
  811e7c:	d8001d85 	stb	zero,118(sp)
  811e80:	0027883a 	mov	r19,zero
  811e84:	50800104 	addi	r2,r10,4
  811e88:	54800017 	ldw	r18,0(r10)
  811e8c:	48021116 	blt	r9,zero,8126d4 <___vfiprintf_internal_r+0x119c>
  811e90:	00ffdfc4 	movi	r3,-129
  811e94:	d8802215 	stw	r2,136(sp)
  811e98:	a0e8703a 	and	r20,r20,r3
  811e9c:	903f5e1e 	bne	r18,zero,811c18 <__alt_data_end+0xff811c18>
  811ea0:	0039883a 	mov	fp,zero
  811ea4:	4802a626 	beq	r9,zero,812940 <___vfiprintf_internal_r+0x1408>
  811ea8:	0025883a 	mov	r18,zero
  811eac:	0027883a 	mov	r19,zero
  811eb0:	003f5a06 	br	811c1c <__alt_data_end+0xff811c1c>
  811eb4:	21003fcc 	andi	r4,r4,255
  811eb8:	20029f1e 	bne	r4,zero,812938 <___vfiprintf_internal_r+0x1400>
  811ebc:	a5000414 	ori	r20,r20,16
  811ec0:	a080080c 	andi	r2,r20,32
  811ec4:	10005e1e 	bne	r2,zero,812040 <___vfiprintf_internal_r+0xb08>
  811ec8:	a080040c 	andi	r2,r20,16
  811ecc:	1001a21e 	bne	r2,zero,812558 <___vfiprintf_internal_r+0x1020>
  811ed0:	a080100c 	andi	r2,r20,64
  811ed4:	d8001d85 	stb	zero,118(sp)
  811ed8:	da802217 	ldw	r10,136(sp)
  811edc:	1002231e 	bne	r2,zero,81276c <___vfiprintf_internal_r+0x1234>
  811ee0:	50800104 	addi	r2,r10,4
  811ee4:	54800017 	ldw	r18,0(r10)
  811ee8:	0027883a 	mov	r19,zero
  811eec:	4801a00e 	bge	r9,zero,812570 <___vfiprintf_internal_r+0x1038>
  811ef0:	d8802215 	stw	r2,136(sp)
  811ef4:	0039883a 	mov	fp,zero
  811ef8:	94c4b03a 	or	r2,r18,r19
  811efc:	103f901e 	bne	r2,zero,811d40 <__alt_data_end+0xff811d40>
  811f00:	00800044 	movi	r2,1
  811f04:	10803fcc 	andi	r2,r2,255
  811f08:	00c00044 	movi	r3,1
  811f0c:	10c05926 	beq	r2,r3,812074 <___vfiprintf_internal_r+0xb3c>
  811f10:	00c00084 	movi	r3,2
  811f14:	10ffe41e 	bne	r2,r3,811ea8 <__alt_data_end+0xff811ea8>
  811f18:	0025883a 	mov	r18,zero
  811f1c:	0027883a 	mov	r19,zero
  811f20:	00013d06 	br	812418 <___vfiprintf_internal_r+0xee0>
  811f24:	21003fcc 	andi	r4,r4,255
  811f28:	2002811e 	bne	r4,zero,812930 <___vfiprintf_internal_r+0x13f8>
  811f2c:	008020b4 	movhi	r2,130
  811f30:	10ae6504 	addi	r2,r2,-18028
  811f34:	d8802615 	stw	r2,152(sp)
  811f38:	a080080c 	andi	r2,r20,32
  811f3c:	103f561e 	bne	r2,zero,811c98 <__alt_data_end+0xff811c98>
  811f40:	a080040c 	andi	r2,r20,16
  811f44:	1001d126 	beq	r2,zero,81268c <___vfiprintf_internal_r+0x1154>
  811f48:	da802217 	ldw	r10,136(sp)
  811f4c:	0027883a 	mov	r19,zero
  811f50:	54800017 	ldw	r18,0(r10)
  811f54:	52800104 	addi	r10,r10,4
  811f58:	da802215 	stw	r10,136(sp)
  811f5c:	003f5306 	br	811cac <__alt_data_end+0xff811cac>
  811f60:	da802217 	ldw	r10,136(sp)
  811f64:	d8001d85 	stb	zero,118(sp)
  811f68:	55400017 	ldw	r21,0(r10)
  811f6c:	50c00104 	addi	r3,r10,4
  811f70:	a8024226 	beq	r21,zero,81287c <___vfiprintf_internal_r+0x1344>
  811f74:	48021816 	blt	r9,zero,8127d8 <___vfiprintf_internal_r+0x12a0>
  811f78:	480d883a 	mov	r6,r9
  811f7c:	000b883a 	mov	r5,zero
  811f80:	a809883a 	mov	r4,r21
  811f84:	d8c02a15 	stw	r3,168(sp)
  811f88:	da002b15 	stw	r8,172(sp)
  811f8c:	da402c15 	stw	r9,176(sp)
  811f90:	080fbc40 	call	80fbc4 <memchr>
  811f94:	d8c02a17 	ldw	r3,168(sp)
  811f98:	da002b17 	ldw	r8,172(sp)
  811f9c:	da402c17 	ldw	r9,176(sp)
  811fa0:	10024826 	beq	r2,zero,8128c4 <___vfiprintf_internal_r+0x138c>
  811fa4:	1567c83a 	sub	r19,r2,r21
  811fa8:	df001d83 	ldbu	fp,118(sp)
  811fac:	d8c02215 	stw	r3,136(sp)
  811fb0:	0013883a 	mov	r9,zero
  811fb4:	003e6006 	br	811938 <__alt_data_end+0xff811938>
  811fb8:	21003fcc 	andi	r4,r4,255
  811fbc:	203fc026 	beq	r4,zero,811ec0 <__alt_data_end+0xff811ec0>
  811fc0:	d9c01d85 	stb	r7,118(sp)
  811fc4:	003fbe06 	br	811ec0 <__alt_data_end+0xff811ec0>
  811fc8:	da802217 	ldw	r10,136(sp)
  811fcc:	54400017 	ldw	r17,0(r10)
  811fd0:	50800104 	addi	r2,r10,4
  811fd4:	883e3b16 	blt	r17,zero,8118c4 <__alt_data_end+0xff8118c4>
  811fd8:	d8802215 	stw	r2,136(sp)
  811fdc:	80c00007 	ldb	r3,0(r16)
  811fe0:	003db406 	br	8116b4 <__alt_data_end+0xff8116b4>
  811fe4:	01000044 	movi	r4,1
  811fe8:	01c00ac4 	movi	r7,43
  811fec:	80c00007 	ldb	r3,0(r16)
  811ff0:	003db006 	br	8116b4 <__alt_data_end+0xff8116b4>
  811ff4:	80c00007 	ldb	r3,0(r16)
  811ff8:	82800044 	addi	r10,r16,1
  811ffc:	1b423c26 	beq	r3,r13,8128f0 <___vfiprintf_internal_r+0x13b8>
  812000:	18bff404 	addi	r2,r3,-48
  812004:	0013883a 	mov	r9,zero
  812008:	30822b36 	bltu	r6,r2,8128b8 <___vfiprintf_internal_r+0x1380>
  81200c:	50c00007 	ldb	r3,0(r10)
  812010:	4a4002a4 	muli	r9,r9,10
  812014:	54000044 	addi	r16,r10,1
  812018:	8015883a 	mov	r10,r16
  81201c:	4893883a 	add	r9,r9,r2
  812020:	18bff404 	addi	r2,r3,-48
  812024:	30bff92e 	bgeu	r6,r2,81200c <__alt_data_end+0xff81200c>
  812028:	483da30e 	bge	r9,zero,8116b8 <__alt_data_end+0xff8116b8>
  81202c:	027fffc4 	movi	r9,-1
  812030:	003da106 	br	8116b8 <__alt_data_end+0xff8116b8>
  812034:	a5001014 	ori	r20,r20,64
  812038:	80c00007 	ldb	r3,0(r16)
  81203c:	003d9d06 	br	8116b4 <__alt_data_end+0xff8116b4>
  812040:	da802217 	ldw	r10,136(sp)
  812044:	d8001d85 	stb	zero,118(sp)
  812048:	50c00204 	addi	r3,r10,8
  81204c:	54800017 	ldw	r18,0(r10)
  812050:	54c00117 	ldw	r19,4(r10)
  812054:	4801ca16 	blt	r9,zero,812780 <___vfiprintf_internal_r+0x1248>
  812058:	013fdfc4 	movi	r4,-129
  81205c:	94c4b03a 	or	r2,r18,r19
  812060:	d8c02215 	stw	r3,136(sp)
  812064:	a128703a 	and	r20,r20,r4
  812068:	0039883a 	mov	fp,zero
  81206c:	103f341e 	bne	r2,zero,811d40 <__alt_data_end+0xff811d40>
  812070:	483e2e26 	beq	r9,zero,81192c <__alt_data_end+0xff81192c>
  812074:	0025883a 	mov	r18,zero
  812078:	94800c04 	addi	r18,r18,48
  81207c:	dc8019c5 	stb	r18,103(sp)
  812080:	dcc02717 	ldw	r19,156(sp)
  812084:	dd4019c4 	addi	r21,sp,103
  812088:	003e2b06 	br	811938 <__alt_data_end+0xff811938>
  81208c:	21003fcc 	andi	r4,r4,255
  812090:	2002361e 	bne	r4,zero,81296c <___vfiprintf_internal_r+0x1434>
  812094:	1801c126 	beq	r3,zero,81279c <___vfiprintf_internal_r+0x1264>
  812098:	04800044 	movi	r18,1
  81209c:	d8c01005 	stb	r3,64(sp)
  8120a0:	d8001d85 	stb	zero,118(sp)
  8120a4:	9027883a 	mov	r19,r18
  8120a8:	dd401004 	addi	r21,sp,64
  8120ac:	003f1106 	br	811cf4 <__alt_data_end+0xff811cf4>
  8120b0:	d9402117 	ldw	r5,132(sp)
  8120b4:	d9002017 	ldw	r4,128(sp)
  8120b8:	d9801a04 	addi	r6,sp,104
  8120bc:	d9c02b15 	stw	r7,172(sp)
  8120c0:	dbc02a15 	stw	r15,168(sp)
  8120c4:	08114240 	call	811424 <__sprint_r.part.0>
  8120c8:	d9c02b17 	ldw	r7,172(sp)
  8120cc:	dbc02a17 	ldw	r15,168(sp)
  8120d0:	10006d1e 	bne	r2,zero,812288 <___vfiprintf_internal_r+0xd50>
  8120d4:	d9801b17 	ldw	r6,108(sp)
  8120d8:	d8801c17 	ldw	r2,112(sp)
  8120dc:	d811883a 	mov	r8,sp
  8120e0:	31400044 	addi	r5,r6,1
  8120e4:	003e3306 	br	8119b4 <__alt_data_end+0xff8119b4>
  8120e8:	d9401b17 	ldw	r5,108(sp)
  8120ec:	d8801c17 	ldw	r2,112(sp)
  8120f0:	29000044 	addi	r4,r5,1
  8120f4:	d8c01d87 	ldb	r3,118(sp)
  8120f8:	183e4d26 	beq	r3,zero,811a30 <__alt_data_end+0xff811a30>
  8120fc:	00c00044 	movi	r3,1
  812100:	d9401d84 	addi	r5,sp,118
  812104:	10c5883a 	add	r2,r2,r3
  812108:	41400015 	stw	r5,0(r8)
  81210c:	40c00115 	stw	r3,4(r8)
  812110:	d8801c15 	stw	r2,112(sp)
  812114:	d9001b15 	stw	r4,108(sp)
  812118:	014001c4 	movi	r5,7
  81211c:	2900a90e 	bge	r5,r4,8123c4 <___vfiprintf_internal_r+0xe8c>
  812120:	1000da1e 	bne	r2,zero,81248c <___vfiprintf_internal_r+0xf54>
  812124:	7000ab1e 	bne	r14,zero,8123d4 <___vfiprintf_internal_r+0xe9c>
  812128:	000b883a 	mov	r5,zero
  81212c:	1809883a 	mov	r4,r3
  812130:	d811883a 	mov	r8,sp
  812134:	00c02004 	movi	r3,128
  812138:	e0fe4d26 	beq	fp,r3,811a70 <__alt_data_end+0xff811a70>
  81213c:	4cf9c83a 	sub	fp,r9,r19
  812140:	073e7b0e 	bge	zero,fp,811b30 <__alt_data_end+0xff811b30>
  812144:	01c00404 	movi	r7,16
  812148:	3f01900e 	bge	r7,fp,81278c <___vfiprintf_internal_r+0x1254>
  81214c:	00c020b4 	movhi	r3,130
  812150:	18eeca04 	addi	r3,r3,-17624
  812154:	d8c02415 	stw	r3,144(sp)
  812158:	034001c4 	movi	r13,7
  81215c:	00000506 	br	812174 <___vfiprintf_internal_r+0xc3c>
  812160:	29000084 	addi	r4,r5,2
  812164:	42000204 	addi	r8,r8,8
  812168:	180b883a 	mov	r5,r3
  81216c:	e73ffc04 	addi	fp,fp,-16
  812170:	3f000d0e 	bge	r7,fp,8121a8 <___vfiprintf_internal_r+0xc70>
  812174:	10800404 	addi	r2,r2,16
  812178:	28c00044 	addi	r3,r5,1
  81217c:	45c00015 	stw	r23,0(r8)
  812180:	41c00115 	stw	r7,4(r8)
  812184:	d8801c15 	stw	r2,112(sp)
  812188:	d8c01b15 	stw	r3,108(sp)
  81218c:	68fff40e 	bge	r13,r3,812160 <__alt_data_end+0xff812160>
  812190:	1000101e 	bne	r2,zero,8121d4 <___vfiprintf_internal_r+0xc9c>
  812194:	e73ffc04 	addi	fp,fp,-16
  812198:	01000044 	movi	r4,1
  81219c:	000b883a 	mov	r5,zero
  8121a0:	d811883a 	mov	r8,sp
  8121a4:	3f3ff316 	blt	r7,fp,812174 <__alt_data_end+0xff812174>
  8121a8:	da802417 	ldw	r10,144(sp)
  8121ac:	1705883a 	add	r2,r2,fp
  8121b0:	47000115 	stw	fp,4(r8)
  8121b4:	42800015 	stw	r10,0(r8)
  8121b8:	d8801c15 	stw	r2,112(sp)
  8121bc:	d9001b15 	stw	r4,108(sp)
  8121c0:	00c001c4 	movi	r3,7
  8121c4:	19003616 	blt	r3,r4,8122a0 <___vfiprintf_internal_r+0xd68>
  8121c8:	42000204 	addi	r8,r8,8
  8121cc:	21000044 	addi	r4,r4,1
  8121d0:	003e5706 	br	811b30 <__alt_data_end+0xff811b30>
  8121d4:	d9402117 	ldw	r5,132(sp)
  8121d8:	d9002017 	ldw	r4,128(sp)
  8121dc:	d9801a04 	addi	r6,sp,104
  8121e0:	d9c02b15 	stw	r7,172(sp)
  8121e4:	db402a15 	stw	r13,168(sp)
  8121e8:	08114240 	call	811424 <__sprint_r.part.0>
  8121ec:	d9c02b17 	ldw	r7,172(sp)
  8121f0:	db402a17 	ldw	r13,168(sp)
  8121f4:	1000241e 	bne	r2,zero,812288 <___vfiprintf_internal_r+0xd50>
  8121f8:	d9401b17 	ldw	r5,108(sp)
  8121fc:	d8801c17 	ldw	r2,112(sp)
  812200:	d811883a 	mov	r8,sp
  812204:	29000044 	addi	r4,r5,1
  812208:	003fd806 	br	81216c <__alt_data_end+0xff81216c>
  81220c:	d9401b17 	ldw	r5,108(sp)
  812210:	00c020b4 	movhi	r3,130
  812214:	18eece04 	addi	r3,r3,-17608
  812218:	d8c02415 	stw	r3,144(sp)
  81221c:	29400044 	addi	r5,r5,1
  812220:	d8c02417 	ldw	r3,144(sp)
  812224:	14c5883a 	add	r2,r2,r19
  812228:	44c00115 	stw	r19,4(r8)
  81222c:	40c00015 	stw	r3,0(r8)
  812230:	d8801c15 	stw	r2,112(sp)
  812234:	d9401b15 	stw	r5,108(sp)
  812238:	00c001c4 	movi	r3,7
  81223c:	1940070e 	bge	r3,r5,81225c <___vfiprintf_internal_r+0xd24>
  812240:	103e4826 	beq	r2,zero,811b64 <__alt_data_end+0xff811b64>
  812244:	d9402117 	ldw	r5,132(sp)
  812248:	d9002017 	ldw	r4,128(sp)
  81224c:	d9801a04 	addi	r6,sp,104
  812250:	08114240 	call	811424 <__sprint_r.part.0>
  812254:	10000c1e 	bne	r2,zero,812288 <___vfiprintf_internal_r+0xd50>
  812258:	d8801c17 	ldw	r2,112(sp)
  81225c:	8c80010e 	bge	r17,r18,812264 <___vfiprintf_internal_r+0xd2c>
  812260:	9023883a 	mov	r17,r18
  812264:	da802317 	ldw	r10,140(sp)
  812268:	5455883a 	add	r10,r10,r17
  81226c:	da802315 	stw	r10,140(sp)
  812270:	103e4126 	beq	r2,zero,811b78 <__alt_data_end+0xff811b78>
  812274:	d9402117 	ldw	r5,132(sp)
  812278:	d9002017 	ldw	r4,128(sp)
  81227c:	d9801a04 	addi	r6,sp,104
  812280:	08114240 	call	811424 <__sprint_r.part.0>
  812284:	103e3c26 	beq	r2,zero,811b78 <__alt_data_end+0xff811b78>
  812288:	dd002117 	ldw	r20,132(sp)
  81228c:	a080030b 	ldhu	r2,12(r20)
  812290:	1080100c 	andi	r2,r2,64
  812294:	1001231e 	bne	r2,zero,812724 <___vfiprintf_internal_r+0x11ec>
  812298:	d8802317 	ldw	r2,140(sp)
  81229c:	003d7b06 	br	81188c <__alt_data_end+0xff81188c>
  8122a0:	1000991e 	bne	r2,zero,812508 <___vfiprintf_internal_r+0xfd0>
  8122a4:	00c00044 	movi	r3,1
  8122a8:	9805883a 	mov	r2,r19
  8122ac:	dd400015 	stw	r21,0(sp)
  8122b0:	dcc00115 	stw	r19,4(sp)
  8122b4:	dcc01c15 	stw	r19,112(sp)
  8122b8:	d8c01b15 	stw	r3,108(sp)
  8122bc:	d811883a 	mov	r8,sp
  8122c0:	42000204 	addi	r8,r8,8
  8122c4:	a2c0010c 	andi	r11,r20,4
  8122c8:	583fe426 	beq	r11,zero,81225c <__alt_data_end+0xff81225c>
  8122cc:	8ca7c83a 	sub	r19,r17,r18
  8122d0:	04ffe20e 	bge	zero,r19,81225c <__alt_data_end+0xff81225c>
  8122d4:	01c00404 	movi	r7,16
  8122d8:	3cffcc0e 	bge	r7,r19,81220c <__alt_data_end+0xff81220c>
  8122dc:	028020b4 	movhi	r10,130
  8122e0:	52aece04 	addi	r10,r10,-17608
  8122e4:	d9001b17 	ldw	r4,108(sp)
  8122e8:	da802415 	stw	r10,144(sp)
  8122ec:	382b883a 	mov	r21,r7
  8122f0:	050001c4 	movi	r20,7
  8122f4:	df002017 	ldw	fp,128(sp)
  8122f8:	00000506 	br	812310 <___vfiprintf_internal_r+0xdd8>
  8122fc:	21400084 	addi	r5,r4,2
  812300:	42000204 	addi	r8,r8,8
  812304:	1809883a 	mov	r4,r3
  812308:	9cfffc04 	addi	r19,r19,-16
  81230c:	acffc40e 	bge	r21,r19,812220 <__alt_data_end+0xff812220>
  812310:	10800404 	addi	r2,r2,16
  812314:	20c00044 	addi	r3,r4,1
  812318:	45800015 	stw	r22,0(r8)
  81231c:	45400115 	stw	r21,4(r8)
  812320:	d8801c15 	stw	r2,112(sp)
  812324:	d8c01b15 	stw	r3,108(sp)
  812328:	a0fff40e 	bge	r20,r3,8122fc <__alt_data_end+0xff8122fc>
  81232c:	1000041e 	bne	r2,zero,812340 <___vfiprintf_internal_r+0xe08>
  812330:	01400044 	movi	r5,1
  812334:	0009883a 	mov	r4,zero
  812338:	d811883a 	mov	r8,sp
  81233c:	003ff206 	br	812308 <__alt_data_end+0xff812308>
  812340:	d9402117 	ldw	r5,132(sp)
  812344:	d9801a04 	addi	r6,sp,104
  812348:	e009883a 	mov	r4,fp
  81234c:	08114240 	call	811424 <__sprint_r.part.0>
  812350:	103fcd1e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  812354:	d9001b17 	ldw	r4,108(sp)
  812358:	d8801c17 	ldw	r2,112(sp)
  81235c:	d811883a 	mov	r8,sp
  812360:	21400044 	addi	r5,r4,1
  812364:	003fe806 	br	812308 <__alt_data_end+0xff812308>
  812368:	d9402117 	ldw	r5,132(sp)
  81236c:	d9002017 	ldw	r4,128(sp)
  812370:	d9801a04 	addi	r6,sp,104
  812374:	d9c02b15 	stw	r7,172(sp)
  812378:	db402a15 	stw	r13,168(sp)
  81237c:	08114240 	call	811424 <__sprint_r.part.0>
  812380:	d9c02b17 	ldw	r7,172(sp)
  812384:	db402a17 	ldw	r13,168(sp)
  812388:	103fbf1e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  81238c:	d9401b17 	ldw	r5,108(sp)
  812390:	d8801c17 	ldw	r2,112(sp)
  812394:	d811883a 	mov	r8,sp
  812398:	29800044 	addi	r6,r5,1
  81239c:	003dc406 	br	811ab0 <__alt_data_end+0xff811ab0>
  8123a0:	1000d21e 	bne	r2,zero,8126ec <___vfiprintf_internal_r+0x11b4>
  8123a4:	d8c01d87 	ldb	r3,118(sp)
  8123a8:	18009526 	beq	r3,zero,812600 <___vfiprintf_internal_r+0x10c8>
  8123ac:	00800044 	movi	r2,1
  8123b0:	d8c01d84 	addi	r3,sp,118
  8123b4:	1009883a 	mov	r4,r2
  8123b8:	d8c00015 	stw	r3,0(sp)
  8123bc:	d8800115 	stw	r2,4(sp)
  8123c0:	d811883a 	mov	r8,sp
  8123c4:	200b883a 	mov	r5,r4
  8123c8:	42000204 	addi	r8,r8,8
  8123cc:	21000044 	addi	r4,r4,1
  8123d0:	003d9706 	br	811a30 <__alt_data_end+0xff811a30>
  8123d4:	d9001d04 	addi	r4,sp,116
  8123d8:	00800084 	movi	r2,2
  8123dc:	d9000015 	stw	r4,0(sp)
  8123e0:	d8800115 	stw	r2,4(sp)
  8123e4:	1809883a 	mov	r4,r3
  8123e8:	d811883a 	mov	r8,sp
  8123ec:	200b883a 	mov	r5,r4
  8123f0:	42000204 	addi	r8,r8,8
  8123f4:	21000044 	addi	r4,r4,1
  8123f8:	003f4e06 	br	812134 <__alt_data_end+0xff812134>
  8123fc:	d8001d85 	stb	zero,118(sp)
  812400:	48005016 	blt	r9,zero,812544 <___vfiprintf_internal_r+0x100c>
  812404:	00ffdfc4 	movi	r3,-129
  812408:	94c4b03a 	or	r2,r18,r19
  81240c:	a0e8703a 	and	r20,r20,r3
  812410:	103d4426 	beq	r2,zero,811924 <__alt_data_end+0xff811924>
  812414:	0039883a 	mov	fp,zero
  812418:	d9002617 	ldw	r4,152(sp)
  81241c:	dd401a04 	addi	r21,sp,104
  812420:	908003cc 	andi	r2,r18,15
  812424:	9806973a 	slli	r3,r19,28
  812428:	2085883a 	add	r2,r4,r2
  81242c:	9024d13a 	srli	r18,r18,4
  812430:	10800003 	ldbu	r2,0(r2)
  812434:	9826d13a 	srli	r19,r19,4
  812438:	ad7fffc4 	addi	r21,r21,-1
  81243c:	1ca4b03a 	or	r18,r3,r18
  812440:	a8800005 	stb	r2,0(r21)
  812444:	94c4b03a 	or	r2,r18,r19
  812448:	103ff51e 	bne	r2,zero,812420 <__alt_data_end+0xff812420>
  81244c:	003e5906 	br	811db4 <__alt_data_end+0xff811db4>
  812450:	d9402117 	ldw	r5,132(sp)
  812454:	d9002017 	ldw	r4,128(sp)
  812458:	d9801a04 	addi	r6,sp,104
  81245c:	08114240 	call	811424 <__sprint_r.part.0>
  812460:	103f891e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  812464:	d8801c17 	ldw	r2,112(sp)
  812468:	d811883a 	mov	r8,sp
  81246c:	003f9506 	br	8122c4 <__alt_data_end+0xff8122c4>
  812470:	d9402117 	ldw	r5,132(sp)
  812474:	d9002017 	ldw	r4,128(sp)
  812478:	d9801a04 	addi	r6,sp,104
  81247c:	08114240 	call	811424 <__sprint_r.part.0>
  812480:	103f811e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  812484:	d811883a 	mov	r8,sp
  812488:	003ced06 	br	811840 <__alt_data_end+0xff811840>
  81248c:	d9402117 	ldw	r5,132(sp)
  812490:	d9002017 	ldw	r4,128(sp)
  812494:	d9801a04 	addi	r6,sp,104
  812498:	da402c15 	stw	r9,176(sp)
  81249c:	db802a15 	stw	r14,168(sp)
  8124a0:	08114240 	call	811424 <__sprint_r.part.0>
  8124a4:	da402c17 	ldw	r9,176(sp)
  8124a8:	db802a17 	ldw	r14,168(sp)
  8124ac:	103f761e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  8124b0:	d9401b17 	ldw	r5,108(sp)
  8124b4:	d8801c17 	ldw	r2,112(sp)
  8124b8:	d811883a 	mov	r8,sp
  8124bc:	29000044 	addi	r4,r5,1
  8124c0:	003d5b06 	br	811a30 <__alt_data_end+0xff811a30>
  8124c4:	d9402117 	ldw	r5,132(sp)
  8124c8:	d9002017 	ldw	r4,128(sp)
  8124cc:	d9801a04 	addi	r6,sp,104
  8124d0:	da402c15 	stw	r9,176(sp)
  8124d4:	08114240 	call	811424 <__sprint_r.part.0>
  8124d8:	da402c17 	ldw	r9,176(sp)
  8124dc:	103f6a1e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  8124e0:	d9401b17 	ldw	r5,108(sp)
  8124e4:	d8801c17 	ldw	r2,112(sp)
  8124e8:	d811883a 	mov	r8,sp
  8124ec:	29000044 	addi	r4,r5,1
  8124f0:	003f1006 	br	812134 <__alt_data_end+0xff812134>
  8124f4:	1000c31e 	bne	r2,zero,812804 <___vfiprintf_internal_r+0x12cc>
  8124f8:	01000044 	movi	r4,1
  8124fc:	000b883a 	mov	r5,zero
  812500:	d811883a 	mov	r8,sp
  812504:	003f0d06 	br	81213c <__alt_data_end+0xff81213c>
  812508:	d9402117 	ldw	r5,132(sp)
  81250c:	d9002017 	ldw	r4,128(sp)
  812510:	d9801a04 	addi	r6,sp,104
  812514:	08114240 	call	811424 <__sprint_r.part.0>
  812518:	103f5b1e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  81251c:	d9001b17 	ldw	r4,108(sp)
  812520:	d8801c17 	ldw	r2,112(sp)
  812524:	d811883a 	mov	r8,sp
  812528:	21000044 	addi	r4,r4,1
  81252c:	003d8006 	br	811b30 <__alt_data_end+0xff811b30>
  812530:	010020b4 	movhi	r4,130
  812534:	212e6a04 	addi	r4,r4,-18008
  812538:	d9002615 	stw	r4,152(sp)
  81253c:	d8c02215 	stw	r3,136(sp)
  812540:	1029883a 	mov	r20,r2
  812544:	94c4b03a 	or	r2,r18,r19
  812548:	103fb21e 	bne	r2,zero,812414 <__alt_data_end+0xff812414>
  81254c:	0039883a 	mov	fp,zero
  812550:	00800084 	movi	r2,2
  812554:	003e6b06 	br	811f04 <__alt_data_end+0xff811f04>
  812558:	da802217 	ldw	r10,136(sp)
  81255c:	d8001d85 	stb	zero,118(sp)
  812560:	0027883a 	mov	r19,zero
  812564:	50800104 	addi	r2,r10,4
  812568:	54800017 	ldw	r18,0(r10)
  81256c:	483e6016 	blt	r9,zero,811ef0 <__alt_data_end+0xff811ef0>
  812570:	00ffdfc4 	movi	r3,-129
  812574:	d8802215 	stw	r2,136(sp)
  812578:	a0e8703a 	and	r20,r20,r3
  81257c:	0039883a 	mov	fp,zero
  812580:	903ebb26 	beq	r18,zero,812070 <__alt_data_end+0xff812070>
  812584:	00800244 	movi	r2,9
  812588:	14bdee36 	bltu	r2,r18,811d44 <__alt_data_end+0xff811d44>
  81258c:	003eba06 	br	812078 <__alt_data_end+0xff812078>
  812590:	00800c04 	movi	r2,48
  812594:	d8c01d45 	stb	r3,117(sp)
  812598:	d8801d05 	stb	r2,116(sp)
  81259c:	d8001d85 	stb	zero,118(sp)
  8125a0:	a0c00094 	ori	r3,r20,2
  8125a4:	4800a916 	blt	r9,zero,81284c <___vfiprintf_internal_r+0x1314>
  8125a8:	00bfdfc4 	movi	r2,-129
  8125ac:	a096703a 	and	r11,r20,r2
  8125b0:	5d000094 	ori	r20,r11,2
  8125b4:	0039883a 	mov	fp,zero
  8125b8:	003f9706 	br	812418 <__alt_data_end+0xff812418>
  8125bc:	8025883a 	mov	r18,r16
  8125c0:	003c2e06 	br	81167c <__alt_data_end+0xff81167c>
  8125c4:	008020b4 	movhi	r2,130
  8125c8:	10ae6a04 	addi	r2,r2,-18008
  8125cc:	0039883a 	mov	fp,zero
  8125d0:	d8802615 	stw	r2,152(sp)
  8125d4:	003f9006 	br	812418 <__alt_data_end+0xff812418>
  8125d8:	04a5c83a 	sub	r18,zero,r18
  8125dc:	07000b44 	movi	fp,45
  8125e0:	9004c03a 	cmpne	r2,r18,zero
  8125e4:	04e7c83a 	sub	r19,zero,r19
  8125e8:	df001d85 	stb	fp,118(sp)
  8125ec:	98a7c83a 	sub	r19,r19,r2
  8125f0:	48009f16 	blt	r9,zero,812870 <___vfiprintf_internal_r+0x1338>
  8125f4:	00bfdfc4 	movi	r2,-129
  8125f8:	a0a8703a 	and	r20,r20,r2
  8125fc:	003dd006 	br	811d40 <__alt_data_end+0xff811d40>
  812600:	70004c26 	beq	r14,zero,812734 <___vfiprintf_internal_r+0x11fc>
  812604:	00800084 	movi	r2,2
  812608:	d8c01d04 	addi	r3,sp,116
  81260c:	d8c00015 	stw	r3,0(sp)
  812610:	d8800115 	stw	r2,4(sp)
  812614:	01000044 	movi	r4,1
  812618:	d811883a 	mov	r8,sp
  81261c:	003f7306 	br	8123ec <__alt_data_end+0xff8123ec>
  812620:	a080100c 	andi	r2,r20,64
  812624:	da802217 	ldw	r10,136(sp)
  812628:	103e0626 	beq	r2,zero,811e44 <__alt_data_end+0xff811e44>
  81262c:	5480000f 	ldh	r18,0(r10)
  812630:	52800104 	addi	r10,r10,4
  812634:	da802215 	stw	r10,136(sp)
  812638:	9027d7fa 	srai	r19,r18,31
  81263c:	9805883a 	mov	r2,r19
  812640:	003db806 	br	811d24 <__alt_data_end+0xff811d24>
  812644:	a080040c 	andi	r2,r20,16
  812648:	1000091e 	bne	r2,zero,812670 <___vfiprintf_internal_r+0x1138>
  81264c:	a2c0100c 	andi	r11,r20,64
  812650:	58000726 	beq	r11,zero,812670 <___vfiprintf_internal_r+0x1138>
  812654:	da802217 	ldw	r10,136(sp)
  812658:	50800017 	ldw	r2,0(r10)
  81265c:	52800104 	addi	r10,r10,4
  812660:	da802215 	stw	r10,136(sp)
  812664:	da802317 	ldw	r10,140(sp)
  812668:	1280000d 	sth	r10,0(r2)
  81266c:	003be706 	br	81160c <__alt_data_end+0xff81160c>
  812670:	da802217 	ldw	r10,136(sp)
  812674:	50800017 	ldw	r2,0(r10)
  812678:	52800104 	addi	r10,r10,4
  81267c:	da802215 	stw	r10,136(sp)
  812680:	da802317 	ldw	r10,140(sp)
  812684:	12800015 	stw	r10,0(r2)
  812688:	003be006 	br	81160c <__alt_data_end+0xff81160c>
  81268c:	a080100c 	andi	r2,r20,64
  812690:	da802217 	ldw	r10,136(sp)
  812694:	10003026 	beq	r2,zero,812758 <___vfiprintf_internal_r+0x1220>
  812698:	5480000b 	ldhu	r18,0(r10)
  81269c:	52800104 	addi	r10,r10,4
  8126a0:	0027883a 	mov	r19,zero
  8126a4:	da802215 	stw	r10,136(sp)
  8126a8:	003d8006 	br	811cac <__alt_data_end+0xff811cac>
  8126ac:	80c00007 	ldb	r3,0(r16)
  8126b0:	003c0006 	br	8116b4 <__alt_data_end+0xff8116b4>
  8126b4:	a080100c 	andi	r2,r20,64
  8126b8:	d8001d85 	stb	zero,118(sp)
  8126bc:	da802217 	ldw	r10,136(sp)
  8126c0:	1000201e 	bne	r2,zero,812744 <___vfiprintf_internal_r+0x120c>
  8126c4:	50800104 	addi	r2,r10,4
  8126c8:	54800017 	ldw	r18,0(r10)
  8126cc:	0027883a 	mov	r19,zero
  8126d0:	483def0e 	bge	r9,zero,811e90 <__alt_data_end+0xff811e90>
  8126d4:	94c6b03a 	or	r3,r18,r19
  8126d8:	d8802215 	stw	r2,136(sp)
  8126dc:	183d4e1e 	bne	r3,zero,811c18 <__alt_data_end+0xff811c18>
  8126e0:	0039883a 	mov	fp,zero
  8126e4:	0005883a 	mov	r2,zero
  8126e8:	003e0606 	br	811f04 <__alt_data_end+0xff811f04>
  8126ec:	d9402117 	ldw	r5,132(sp)
  8126f0:	d9002017 	ldw	r4,128(sp)
  8126f4:	d9801a04 	addi	r6,sp,104
  8126f8:	da402c15 	stw	r9,176(sp)
  8126fc:	db802a15 	stw	r14,168(sp)
  812700:	08114240 	call	811424 <__sprint_r.part.0>
  812704:	da402c17 	ldw	r9,176(sp)
  812708:	db802a17 	ldw	r14,168(sp)
  81270c:	103ede1e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  812710:	d9401b17 	ldw	r5,108(sp)
  812714:	d8801c17 	ldw	r2,112(sp)
  812718:	d811883a 	mov	r8,sp
  81271c:	29000044 	addi	r4,r5,1
  812720:	003e7406 	br	8120f4 <__alt_data_end+0xff8120f4>
  812724:	00bfffc4 	movi	r2,-1
  812728:	003c5806 	br	81188c <__alt_data_end+0xff81188c>
  81272c:	d811883a 	mov	r8,sp
  812730:	003ee806 	br	8122d4 <__alt_data_end+0xff8122d4>
  812734:	000b883a 	mov	r5,zero
  812738:	01000044 	movi	r4,1
  81273c:	d811883a 	mov	r8,sp
  812740:	003e7c06 	br	812134 <__alt_data_end+0xff812134>
  812744:	50800104 	addi	r2,r10,4
  812748:	5480000b 	ldhu	r18,0(r10)
  81274c:	0027883a 	mov	r19,zero
  812750:	483dcf0e 	bge	r9,zero,811e90 <__alt_data_end+0xff811e90>
  812754:	003fdf06 	br	8126d4 <__alt_data_end+0xff8126d4>
  812758:	54800017 	ldw	r18,0(r10)
  81275c:	52800104 	addi	r10,r10,4
  812760:	0027883a 	mov	r19,zero
  812764:	da802215 	stw	r10,136(sp)
  812768:	003d5006 	br	811cac <__alt_data_end+0xff811cac>
  81276c:	50800104 	addi	r2,r10,4
  812770:	5480000b 	ldhu	r18,0(r10)
  812774:	0027883a 	mov	r19,zero
  812778:	483f7d0e 	bge	r9,zero,812570 <__alt_data_end+0xff812570>
  81277c:	003ddc06 	br	811ef0 <__alt_data_end+0xff811ef0>
  812780:	d8c02215 	stw	r3,136(sp)
  812784:	0039883a 	mov	fp,zero
  812788:	003ddb06 	br	811ef8 <__alt_data_end+0xff811ef8>
  81278c:	028020b4 	movhi	r10,130
  812790:	52aeca04 	addi	r10,r10,-17624
  812794:	da802415 	stw	r10,144(sp)
  812798:	003e8306 	br	8121a8 <__alt_data_end+0xff8121a8>
  81279c:	d8801c17 	ldw	r2,112(sp)
  8127a0:	dd002117 	ldw	r20,132(sp)
  8127a4:	103eb926 	beq	r2,zero,81228c <__alt_data_end+0xff81228c>
  8127a8:	d9002017 	ldw	r4,128(sp)
  8127ac:	d9801a04 	addi	r6,sp,104
  8127b0:	a00b883a 	mov	r5,r20
  8127b4:	08114240 	call	811424 <__sprint_r.part.0>
  8127b8:	003eb406 	br	81228c <__alt_data_end+0xff81228c>
  8127bc:	80c00043 	ldbu	r3,1(r16)
  8127c0:	a5000814 	ori	r20,r20,32
  8127c4:	84000044 	addi	r16,r16,1
  8127c8:	18c03fcc 	andi	r3,r3,255
  8127cc:	18c0201c 	xori	r3,r3,128
  8127d0:	18ffe004 	addi	r3,r3,-128
  8127d4:	003bb706 	br	8116b4 <__alt_data_end+0xff8116b4>
  8127d8:	a809883a 	mov	r4,r21
  8127dc:	d8c02a15 	stw	r3,168(sp)
  8127e0:	da002b15 	stw	r8,172(sp)
  8127e4:	080a7d80 	call	80a7d8 <strlen>
  8127e8:	d8c02a17 	ldw	r3,168(sp)
  8127ec:	1027883a 	mov	r19,r2
  8127f0:	df001d83 	ldbu	fp,118(sp)
  8127f4:	d8c02215 	stw	r3,136(sp)
  8127f8:	0013883a 	mov	r9,zero
  8127fc:	da002b17 	ldw	r8,172(sp)
  812800:	003c4d06 	br	811938 <__alt_data_end+0xff811938>
  812804:	d9402117 	ldw	r5,132(sp)
  812808:	d9002017 	ldw	r4,128(sp)
  81280c:	d9801a04 	addi	r6,sp,104
  812810:	da402c15 	stw	r9,176(sp)
  812814:	08114240 	call	811424 <__sprint_r.part.0>
  812818:	da402c17 	ldw	r9,176(sp)
  81281c:	103e9a1e 	bne	r2,zero,812288 <__alt_data_end+0xff812288>
  812820:	d9401b17 	ldw	r5,108(sp)
  812824:	d8801c17 	ldw	r2,112(sp)
  812828:	d811883a 	mov	r8,sp
  81282c:	29000044 	addi	r4,r5,1
  812830:	003e4206 	br	81213c <__alt_data_end+0xff81213c>
  812834:	d9401b17 	ldw	r5,108(sp)
  812838:	010020b4 	movhi	r4,130
  81283c:	212ece04 	addi	r4,r4,-17608
  812840:	d9002415 	stw	r4,144(sp)
  812844:	29400044 	addi	r5,r5,1
  812848:	003c6d06 	br	811a00 <__alt_data_end+0xff811a00>
  81284c:	0039883a 	mov	fp,zero
  812850:	00800084 	movi	r2,2
  812854:	10803fcc 	andi	r2,r2,255
  812858:	01000044 	movi	r4,1
  81285c:	11001e26 	beq	r2,r4,8128d8 <___vfiprintf_internal_r+0x13a0>
  812860:	01000084 	movi	r4,2
  812864:	11001e1e 	bne	r2,r4,8128e0 <___vfiprintf_internal_r+0x13a8>
  812868:	1829883a 	mov	r20,r3
  81286c:	003eea06 	br	812418 <__alt_data_end+0xff812418>
  812870:	a007883a 	mov	r3,r20
  812874:	00800044 	movi	r2,1
  812878:	003ff606 	br	812854 <__alt_data_end+0xff812854>
  81287c:	00800184 	movi	r2,6
  812880:	1240012e 	bgeu	r2,r9,812888 <___vfiprintf_internal_r+0x1350>
  812884:	1013883a 	mov	r9,r2
  812888:	4827883a 	mov	r19,r9
  81288c:	4825883a 	mov	r18,r9
  812890:	48001516 	blt	r9,zero,8128e8 <___vfiprintf_internal_r+0x13b0>
  812894:	054020b4 	movhi	r21,130
  812898:	d8c02215 	stw	r3,136(sp)
  81289c:	ad6e6f04 	addi	r21,r21,-17988
  8128a0:	003d1406 	br	811cf4 <__alt_data_end+0xff811cf4>
  8128a4:	028020b4 	movhi	r10,130
  8128a8:	52aeca04 	addi	r10,r10,-17624
  8128ac:	da802415 	stw	r10,144(sp)
  8128b0:	200d883a 	mov	r6,r4
  8128b4:	003c9106 	br	811afc <__alt_data_end+0xff811afc>
  8128b8:	5021883a 	mov	r16,r10
  8128bc:	0013883a 	mov	r9,zero
  8128c0:	003b7d06 	br	8116b8 <__alt_data_end+0xff8116b8>
  8128c4:	4827883a 	mov	r19,r9
  8128c8:	df001d83 	ldbu	fp,118(sp)
  8128cc:	d8c02215 	stw	r3,136(sp)
  8128d0:	0013883a 	mov	r9,zero
  8128d4:	003c1806 	br	811938 <__alt_data_end+0xff811938>
  8128d8:	1829883a 	mov	r20,r3
  8128dc:	003d1806 	br	811d40 <__alt_data_end+0xff811d40>
  8128e0:	1829883a 	mov	r20,r3
  8128e4:	003ccd06 	br	811c1c <__alt_data_end+0xff811c1c>
  8128e8:	0025883a 	mov	r18,zero
  8128ec:	003fe906 	br	812894 <__alt_data_end+0xff812894>
  8128f0:	d8802217 	ldw	r2,136(sp)
  8128f4:	80c00043 	ldbu	r3,1(r16)
  8128f8:	5021883a 	mov	r16,r10
  8128fc:	12400017 	ldw	r9,0(r2)
  812900:	10800104 	addi	r2,r2,4
  812904:	d8802215 	stw	r2,136(sp)
  812908:	483faf0e 	bge	r9,zero,8127c8 <__alt_data_end+0xff8127c8>
  81290c:	18c03fcc 	andi	r3,r3,255
  812910:	18c0201c 	xori	r3,r3,128
  812914:	027fffc4 	movi	r9,-1
  812918:	18ffe004 	addi	r3,r3,-128
  81291c:	003b6506 	br	8116b4 <__alt_data_end+0xff8116b4>
  812920:	d9c01d85 	stb	r7,118(sp)
  812924:	003ca006 	br	811ba8 <__alt_data_end+0xff811ba8>
  812928:	d9c01d85 	stb	r7,118(sp)
  81292c:	003cad06 	br	811be4 <__alt_data_end+0xff811be4>
  812930:	d9c01d85 	stb	r7,118(sp)
  812934:	003d7d06 	br	811f2c <__alt_data_end+0xff811f2c>
  812938:	d9c01d85 	stb	r7,118(sp)
  81293c:	003d5f06 	br	811ebc <__alt_data_end+0xff811ebc>
  812940:	a080004c 	andi	r2,r20,1
  812944:	0039883a 	mov	fp,zero
  812948:	10000526 	beq	r2,zero,812960 <___vfiprintf_internal_r+0x1428>
  81294c:	00800c04 	movi	r2,48
  812950:	d88019c5 	stb	r2,103(sp)
  812954:	dcc02717 	ldw	r19,156(sp)
  812958:	dd4019c4 	addi	r21,sp,103
  81295c:	003bf606 	br	811938 <__alt_data_end+0xff811938>
  812960:	0027883a 	mov	r19,zero
  812964:	dd401a04 	addi	r21,sp,104
  812968:	003bf306 	br	811938 <__alt_data_end+0xff811938>
  81296c:	d9c01d85 	stb	r7,118(sp)
  812970:	003dc806 	br	812094 <__alt_data_end+0xff812094>
  812974:	d9c01d85 	stb	r7,118(sp)
  812978:	003d3a06 	br	811e64 <__alt_data_end+0xff811e64>
  81297c:	d9c01d85 	stb	r7,118(sp)
  812980:	003d2a06 	br	811e2c <__alt_data_end+0xff811e2c>
  812984:	d9c01d85 	stb	r7,118(sp)
  812988:	003cde06 	br	811d04 <__alt_data_end+0xff811d04>
  81298c:	d9c01d85 	stb	r7,118(sp)
  812990:	003cbc06 	br	811c84 <__alt_data_end+0xff811c84>

00812994 <__vfiprintf_internal>:
  812994:	008020b4 	movhi	r2,130
  812998:	10b30204 	addi	r2,r2,-13304
  81299c:	300f883a 	mov	r7,r6
  8129a0:	280d883a 	mov	r6,r5
  8129a4:	200b883a 	mov	r5,r4
  8129a8:	11000017 	ldw	r4,0(r2)
  8129ac:	08115381 	jmpi	811538 <___vfiprintf_internal_r>

008129b0 <__sbprintf>:
  8129b0:	2880030b 	ldhu	r2,12(r5)
  8129b4:	2ac01917 	ldw	r11,100(r5)
  8129b8:	2a80038b 	ldhu	r10,14(r5)
  8129bc:	2a400717 	ldw	r9,28(r5)
  8129c0:	2a000917 	ldw	r8,36(r5)
  8129c4:	defee204 	addi	sp,sp,-1144
  8129c8:	00c10004 	movi	r3,1024
  8129cc:	dc011a15 	stw	r16,1128(sp)
  8129d0:	10bfff4c 	andi	r2,r2,65533
  8129d4:	2821883a 	mov	r16,r5
  8129d8:	d8cb883a 	add	r5,sp,r3
  8129dc:	dc811c15 	stw	r18,1136(sp)
  8129e0:	dc411b15 	stw	r17,1132(sp)
  8129e4:	dfc11d15 	stw	ra,1140(sp)
  8129e8:	2025883a 	mov	r18,r4
  8129ec:	d881030d 	sth	r2,1036(sp)
  8129f0:	dac11915 	stw	r11,1124(sp)
  8129f4:	da81038d 	sth	r10,1038(sp)
  8129f8:	da410715 	stw	r9,1052(sp)
  8129fc:	da010915 	stw	r8,1060(sp)
  812a00:	dec10015 	stw	sp,1024(sp)
  812a04:	dec10415 	stw	sp,1040(sp)
  812a08:	d8c10215 	stw	r3,1032(sp)
  812a0c:	d8c10515 	stw	r3,1044(sp)
  812a10:	d8010615 	stw	zero,1048(sp)
  812a14:	08115380 	call	811538 <___vfiprintf_internal_r>
  812a18:	1023883a 	mov	r17,r2
  812a1c:	10000416 	blt	r2,zero,812a30 <__sbprintf+0x80>
  812a20:	d9410004 	addi	r5,sp,1024
  812a24:	9009883a 	mov	r4,r18
  812a28:	080e7380 	call	80e738 <_fflush_r>
  812a2c:	10000d1e 	bne	r2,zero,812a64 <__sbprintf+0xb4>
  812a30:	d881030b 	ldhu	r2,1036(sp)
  812a34:	1080100c 	andi	r2,r2,64
  812a38:	10000326 	beq	r2,zero,812a48 <__sbprintf+0x98>
  812a3c:	8080030b 	ldhu	r2,12(r16)
  812a40:	10801014 	ori	r2,r2,64
  812a44:	8080030d 	sth	r2,12(r16)
  812a48:	8805883a 	mov	r2,r17
  812a4c:	dfc11d17 	ldw	ra,1140(sp)
  812a50:	dc811c17 	ldw	r18,1136(sp)
  812a54:	dc411b17 	ldw	r17,1132(sp)
  812a58:	dc011a17 	ldw	r16,1128(sp)
  812a5c:	dec11e04 	addi	sp,sp,1144
  812a60:	f800283a 	ret
  812a64:	047fffc4 	movi	r17,-1
  812a68:	003ff106 	br	812a30 <__alt_data_end+0xff812a30>

00812a6c <__swbuf_r>:
  812a6c:	defffb04 	addi	sp,sp,-20
  812a70:	dcc00315 	stw	r19,12(sp)
  812a74:	dc800215 	stw	r18,8(sp)
  812a78:	dc000015 	stw	r16,0(sp)
  812a7c:	dfc00415 	stw	ra,16(sp)
  812a80:	dc400115 	stw	r17,4(sp)
  812a84:	2025883a 	mov	r18,r4
  812a88:	2827883a 	mov	r19,r5
  812a8c:	3021883a 	mov	r16,r6
  812a90:	20000226 	beq	r4,zero,812a9c <__swbuf_r+0x30>
  812a94:	20800e17 	ldw	r2,56(r4)
  812a98:	10004226 	beq	r2,zero,812ba4 <__swbuf_r+0x138>
  812a9c:	80800617 	ldw	r2,24(r16)
  812aa0:	8100030b 	ldhu	r4,12(r16)
  812aa4:	80800215 	stw	r2,8(r16)
  812aa8:	2080020c 	andi	r2,r4,8
  812aac:	10003626 	beq	r2,zero,812b88 <__swbuf_r+0x11c>
  812ab0:	80c00417 	ldw	r3,16(r16)
  812ab4:	18003426 	beq	r3,zero,812b88 <__swbuf_r+0x11c>
  812ab8:	2088000c 	andi	r2,r4,8192
  812abc:	9c403fcc 	andi	r17,r19,255
  812ac0:	10001a26 	beq	r2,zero,812b2c <__swbuf_r+0xc0>
  812ac4:	80800017 	ldw	r2,0(r16)
  812ac8:	81000517 	ldw	r4,20(r16)
  812acc:	10c7c83a 	sub	r3,r2,r3
  812ad0:	1900200e 	bge	r3,r4,812b54 <__swbuf_r+0xe8>
  812ad4:	18c00044 	addi	r3,r3,1
  812ad8:	81000217 	ldw	r4,8(r16)
  812adc:	11400044 	addi	r5,r2,1
  812ae0:	81400015 	stw	r5,0(r16)
  812ae4:	213fffc4 	addi	r4,r4,-1
  812ae8:	81000215 	stw	r4,8(r16)
  812aec:	14c00005 	stb	r19,0(r2)
  812af0:	80800517 	ldw	r2,20(r16)
  812af4:	10c01e26 	beq	r2,r3,812b70 <__swbuf_r+0x104>
  812af8:	8080030b 	ldhu	r2,12(r16)
  812afc:	1080004c 	andi	r2,r2,1
  812b00:	10000226 	beq	r2,zero,812b0c <__swbuf_r+0xa0>
  812b04:	00800284 	movi	r2,10
  812b08:	88801926 	beq	r17,r2,812b70 <__swbuf_r+0x104>
  812b0c:	8805883a 	mov	r2,r17
  812b10:	dfc00417 	ldw	ra,16(sp)
  812b14:	dcc00317 	ldw	r19,12(sp)
  812b18:	dc800217 	ldw	r18,8(sp)
  812b1c:	dc400117 	ldw	r17,4(sp)
  812b20:	dc000017 	ldw	r16,0(sp)
  812b24:	dec00504 	addi	sp,sp,20
  812b28:	f800283a 	ret
  812b2c:	81401917 	ldw	r5,100(r16)
  812b30:	00b7ffc4 	movi	r2,-8193
  812b34:	21080014 	ori	r4,r4,8192
  812b38:	2884703a 	and	r2,r5,r2
  812b3c:	80801915 	stw	r2,100(r16)
  812b40:	80800017 	ldw	r2,0(r16)
  812b44:	8100030d 	sth	r4,12(r16)
  812b48:	81000517 	ldw	r4,20(r16)
  812b4c:	10c7c83a 	sub	r3,r2,r3
  812b50:	193fe016 	blt	r3,r4,812ad4 <__alt_data_end+0xff812ad4>
  812b54:	800b883a 	mov	r5,r16
  812b58:	9009883a 	mov	r4,r18
  812b5c:	080e7380 	call	80e738 <_fflush_r>
  812b60:	1000071e 	bne	r2,zero,812b80 <__swbuf_r+0x114>
  812b64:	80800017 	ldw	r2,0(r16)
  812b68:	00c00044 	movi	r3,1
  812b6c:	003fda06 	br	812ad8 <__alt_data_end+0xff812ad8>
  812b70:	800b883a 	mov	r5,r16
  812b74:	9009883a 	mov	r4,r18
  812b78:	080e7380 	call	80e738 <_fflush_r>
  812b7c:	103fe326 	beq	r2,zero,812b0c <__alt_data_end+0xff812b0c>
  812b80:	00bfffc4 	movi	r2,-1
  812b84:	003fe206 	br	812b10 <__alt_data_end+0xff812b10>
  812b88:	800b883a 	mov	r5,r16
  812b8c:	9009883a 	mov	r4,r18
  812b90:	080cb400 	call	80cb40 <__swsetup_r>
  812b94:	103ffa1e 	bne	r2,zero,812b80 <__alt_data_end+0xff812b80>
  812b98:	8100030b 	ldhu	r4,12(r16)
  812b9c:	80c00417 	ldw	r3,16(r16)
  812ba0:	003fc506 	br	812ab8 <__alt_data_end+0xff812ab8>
  812ba4:	080eb140 	call	80eb14 <__sinit>
  812ba8:	003fbc06 	br	812a9c <__alt_data_end+0xff812a9c>

00812bac <__swbuf>:
  812bac:	008020b4 	movhi	r2,130
  812bb0:	10b30204 	addi	r2,r2,-13304
  812bb4:	280d883a 	mov	r6,r5
  812bb8:	200b883a 	mov	r5,r4
  812bbc:	11000017 	ldw	r4,0(r2)
  812bc0:	0812a6c1 	jmpi	812a6c <__swbuf_r>

00812bc4 <_write_r>:
  812bc4:	defffd04 	addi	sp,sp,-12
  812bc8:	2805883a 	mov	r2,r5
  812bcc:	dc000015 	stw	r16,0(sp)
  812bd0:	040020b4 	movhi	r16,130
  812bd4:	dc400115 	stw	r17,4(sp)
  812bd8:	300b883a 	mov	r5,r6
  812bdc:	84366604 	addi	r16,r16,-9832
  812be0:	2023883a 	mov	r17,r4
  812be4:	380d883a 	mov	r6,r7
  812be8:	1009883a 	mov	r4,r2
  812bec:	dfc00215 	stw	ra,8(sp)
  812bf0:	80000015 	stw	zero,0(r16)
  812bf4:	0817db80 	call	817db8 <write>
  812bf8:	00ffffc4 	movi	r3,-1
  812bfc:	10c00526 	beq	r2,r3,812c14 <_write_r+0x50>
  812c00:	dfc00217 	ldw	ra,8(sp)
  812c04:	dc400117 	ldw	r17,4(sp)
  812c08:	dc000017 	ldw	r16,0(sp)
  812c0c:	dec00304 	addi	sp,sp,12
  812c10:	f800283a 	ret
  812c14:	80c00017 	ldw	r3,0(r16)
  812c18:	183ff926 	beq	r3,zero,812c00 <__alt_data_end+0xff812c00>
  812c1c:	88c00015 	stw	r3,0(r17)
  812c20:	003ff706 	br	812c00 <__alt_data_end+0xff812c00>

00812c24 <_close_r>:
  812c24:	defffd04 	addi	sp,sp,-12
  812c28:	dc000015 	stw	r16,0(sp)
  812c2c:	040020b4 	movhi	r16,130
  812c30:	dc400115 	stw	r17,4(sp)
  812c34:	84366604 	addi	r16,r16,-9832
  812c38:	2023883a 	mov	r17,r4
  812c3c:	2809883a 	mov	r4,r5
  812c40:	dfc00215 	stw	ra,8(sp)
  812c44:	80000015 	stw	zero,0(r16)
  812c48:	081719c0 	call	81719c <close>
  812c4c:	00ffffc4 	movi	r3,-1
  812c50:	10c00526 	beq	r2,r3,812c68 <_close_r+0x44>
  812c54:	dfc00217 	ldw	ra,8(sp)
  812c58:	dc400117 	ldw	r17,4(sp)
  812c5c:	dc000017 	ldw	r16,0(sp)
  812c60:	dec00304 	addi	sp,sp,12
  812c64:	f800283a 	ret
  812c68:	80c00017 	ldw	r3,0(r16)
  812c6c:	183ff926 	beq	r3,zero,812c54 <__alt_data_end+0xff812c54>
  812c70:	88c00015 	stw	r3,0(r17)
  812c74:	003ff706 	br	812c54 <__alt_data_end+0xff812c54>

00812c78 <_calloc_r>:
  812c78:	298b383a 	mul	r5,r5,r6
  812c7c:	defffe04 	addi	sp,sp,-8
  812c80:	dfc00115 	stw	ra,4(sp)
  812c84:	dc000015 	stw	r16,0(sp)
  812c88:	080f3b80 	call	80f3b8 <_malloc_r>
  812c8c:	10002926 	beq	r2,zero,812d34 <_calloc_r+0xbc>
  812c90:	11bfff17 	ldw	r6,-4(r2)
  812c94:	1021883a 	mov	r16,r2
  812c98:	00bfff04 	movi	r2,-4
  812c9c:	308c703a 	and	r6,r6,r2
  812ca0:	00c00904 	movi	r3,36
  812ca4:	308d883a 	add	r6,r6,r2
  812ca8:	19801636 	bltu	r3,r6,812d04 <_calloc_r+0x8c>
  812cac:	008004c4 	movi	r2,19
  812cb0:	11800b2e 	bgeu	r2,r6,812ce0 <_calloc_r+0x68>
  812cb4:	80000015 	stw	zero,0(r16)
  812cb8:	80000115 	stw	zero,4(r16)
  812cbc:	008006c4 	movi	r2,27
  812cc0:	11801a2e 	bgeu	r2,r6,812d2c <_calloc_r+0xb4>
  812cc4:	80000215 	stw	zero,8(r16)
  812cc8:	80000315 	stw	zero,12(r16)
  812ccc:	30c0151e 	bne	r6,r3,812d24 <_calloc_r+0xac>
  812cd0:	80000415 	stw	zero,16(r16)
  812cd4:	80800604 	addi	r2,r16,24
  812cd8:	80000515 	stw	zero,20(r16)
  812cdc:	00000106 	br	812ce4 <_calloc_r+0x6c>
  812ce0:	8005883a 	mov	r2,r16
  812ce4:	10000015 	stw	zero,0(r2)
  812ce8:	10000115 	stw	zero,4(r2)
  812cec:	10000215 	stw	zero,8(r2)
  812cf0:	8005883a 	mov	r2,r16
  812cf4:	dfc00117 	ldw	ra,4(sp)
  812cf8:	dc000017 	ldw	r16,0(sp)
  812cfc:	dec00204 	addi	sp,sp,8
  812d00:	f800283a 	ret
  812d04:	000b883a 	mov	r5,zero
  812d08:	8009883a 	mov	r4,r16
  812d0c:	080a50c0 	call	80a50c <memset>
  812d10:	8005883a 	mov	r2,r16
  812d14:	dfc00117 	ldw	ra,4(sp)
  812d18:	dc000017 	ldw	r16,0(sp)
  812d1c:	dec00204 	addi	sp,sp,8
  812d20:	f800283a 	ret
  812d24:	80800404 	addi	r2,r16,16
  812d28:	003fee06 	br	812ce4 <__alt_data_end+0xff812ce4>
  812d2c:	80800204 	addi	r2,r16,8
  812d30:	003fec06 	br	812ce4 <__alt_data_end+0xff812ce4>
  812d34:	0005883a 	mov	r2,zero
  812d38:	003fee06 	br	812cf4 <__alt_data_end+0xff812cf4>

00812d3c <_fclose_r>:
  812d3c:	28003926 	beq	r5,zero,812e24 <_fclose_r+0xe8>
  812d40:	defffc04 	addi	sp,sp,-16
  812d44:	dc400115 	stw	r17,4(sp)
  812d48:	dc000015 	stw	r16,0(sp)
  812d4c:	dfc00315 	stw	ra,12(sp)
  812d50:	dc800215 	stw	r18,8(sp)
  812d54:	2023883a 	mov	r17,r4
  812d58:	2821883a 	mov	r16,r5
  812d5c:	20000226 	beq	r4,zero,812d68 <_fclose_r+0x2c>
  812d60:	20800e17 	ldw	r2,56(r4)
  812d64:	10002726 	beq	r2,zero,812e04 <_fclose_r+0xc8>
  812d68:	8080030f 	ldh	r2,12(r16)
  812d6c:	1000071e 	bne	r2,zero,812d8c <_fclose_r+0x50>
  812d70:	0005883a 	mov	r2,zero
  812d74:	dfc00317 	ldw	ra,12(sp)
  812d78:	dc800217 	ldw	r18,8(sp)
  812d7c:	dc400117 	ldw	r17,4(sp)
  812d80:	dc000017 	ldw	r16,0(sp)
  812d84:	dec00404 	addi	sp,sp,16
  812d88:	f800283a 	ret
  812d8c:	800b883a 	mov	r5,r16
  812d90:	8809883a 	mov	r4,r17
  812d94:	080e51c0 	call	80e51c <__sflush_r>
  812d98:	1025883a 	mov	r18,r2
  812d9c:	80800b17 	ldw	r2,44(r16)
  812da0:	10000426 	beq	r2,zero,812db4 <_fclose_r+0x78>
  812da4:	81400717 	ldw	r5,28(r16)
  812da8:	8809883a 	mov	r4,r17
  812dac:	103ee83a 	callr	r2
  812db0:	10001616 	blt	r2,zero,812e0c <_fclose_r+0xd0>
  812db4:	8080030b 	ldhu	r2,12(r16)
  812db8:	1080200c 	andi	r2,r2,128
  812dbc:	1000151e 	bne	r2,zero,812e14 <_fclose_r+0xd8>
  812dc0:	81400c17 	ldw	r5,48(r16)
  812dc4:	28000526 	beq	r5,zero,812ddc <_fclose_r+0xa0>
  812dc8:	80801004 	addi	r2,r16,64
  812dcc:	28800226 	beq	r5,r2,812dd8 <_fclose_r+0x9c>
  812dd0:	8809883a 	mov	r4,r17
  812dd4:	080ec880 	call	80ec88 <_free_r>
  812dd8:	80000c15 	stw	zero,48(r16)
  812ddc:	81401117 	ldw	r5,68(r16)
  812de0:	28000326 	beq	r5,zero,812df0 <_fclose_r+0xb4>
  812de4:	8809883a 	mov	r4,r17
  812de8:	080ec880 	call	80ec88 <_free_r>
  812dec:	80001115 	stw	zero,68(r16)
  812df0:	080eb240 	call	80eb24 <__sfp_lock_acquire>
  812df4:	8000030d 	sth	zero,12(r16)
  812df8:	080eb280 	call	80eb28 <__sfp_lock_release>
  812dfc:	9005883a 	mov	r2,r18
  812e00:	003fdc06 	br	812d74 <__alt_data_end+0xff812d74>
  812e04:	080eb140 	call	80eb14 <__sinit>
  812e08:	003fd706 	br	812d68 <__alt_data_end+0xff812d68>
  812e0c:	04bfffc4 	movi	r18,-1
  812e10:	003fe806 	br	812db4 <__alt_data_end+0xff812db4>
  812e14:	81400417 	ldw	r5,16(r16)
  812e18:	8809883a 	mov	r4,r17
  812e1c:	080ec880 	call	80ec88 <_free_r>
  812e20:	003fe706 	br	812dc0 <__alt_data_end+0xff812dc0>
  812e24:	0005883a 	mov	r2,zero
  812e28:	f800283a 	ret

00812e2c <fclose>:
  812e2c:	008020b4 	movhi	r2,130
  812e30:	10b30204 	addi	r2,r2,-13304
  812e34:	200b883a 	mov	r5,r4
  812e38:	11000017 	ldw	r4,0(r2)
  812e3c:	0812d3c1 	jmpi	812d3c <_fclose_r>

00812e40 <__fputwc>:
  812e40:	defff804 	addi	sp,sp,-32
  812e44:	dcc00415 	stw	r19,16(sp)
  812e48:	dc800315 	stw	r18,12(sp)
  812e4c:	dc000115 	stw	r16,4(sp)
  812e50:	dfc00715 	stw	ra,28(sp)
  812e54:	dd400615 	stw	r21,24(sp)
  812e58:	dd000515 	stw	r20,20(sp)
  812e5c:	dc400215 	stw	r17,8(sp)
  812e60:	2027883a 	mov	r19,r4
  812e64:	2825883a 	mov	r18,r5
  812e68:	3021883a 	mov	r16,r6
  812e6c:	080f1a80 	call	80f1a8 <__locale_mb_cur_max>
  812e70:	00c00044 	movi	r3,1
  812e74:	10c03e26 	beq	r2,r3,812f70 <__fputwc+0x130>
  812e78:	81c01704 	addi	r7,r16,92
  812e7c:	900d883a 	mov	r6,r18
  812e80:	d80b883a 	mov	r5,sp
  812e84:	9809883a 	mov	r4,r19
  812e88:	0813d340 	call	813d34 <_wcrtomb_r>
  812e8c:	1029883a 	mov	r20,r2
  812e90:	00bfffc4 	movi	r2,-1
  812e94:	a0802026 	beq	r20,r2,812f18 <__fputwc+0xd8>
  812e98:	d9400003 	ldbu	r5,0(sp)
  812e9c:	a0001c26 	beq	r20,zero,812f10 <__fputwc+0xd0>
  812ea0:	0023883a 	mov	r17,zero
  812ea4:	05400284 	movi	r21,10
  812ea8:	00000906 	br	812ed0 <__fputwc+0x90>
  812eac:	80800017 	ldw	r2,0(r16)
  812eb0:	11400005 	stb	r5,0(r2)
  812eb4:	80c00017 	ldw	r3,0(r16)
  812eb8:	18c00044 	addi	r3,r3,1
  812ebc:	80c00015 	stw	r3,0(r16)
  812ec0:	8c400044 	addi	r17,r17,1
  812ec4:	dc45883a 	add	r2,sp,r17
  812ec8:	8d00112e 	bgeu	r17,r20,812f10 <__fputwc+0xd0>
  812ecc:	11400003 	ldbu	r5,0(r2)
  812ed0:	80c00217 	ldw	r3,8(r16)
  812ed4:	18ffffc4 	addi	r3,r3,-1
  812ed8:	80c00215 	stw	r3,8(r16)
  812edc:	183ff30e 	bge	r3,zero,812eac <__alt_data_end+0xff812eac>
  812ee0:	80800617 	ldw	r2,24(r16)
  812ee4:	18801916 	blt	r3,r2,812f4c <__fputwc+0x10c>
  812ee8:	80800017 	ldw	r2,0(r16)
  812eec:	11400005 	stb	r5,0(r2)
  812ef0:	80800017 	ldw	r2,0(r16)
  812ef4:	10c00003 	ldbu	r3,0(r2)
  812ef8:	10800044 	addi	r2,r2,1
  812efc:	1d402326 	beq	r3,r21,812f8c <__fputwc+0x14c>
  812f00:	80800015 	stw	r2,0(r16)
  812f04:	8c400044 	addi	r17,r17,1
  812f08:	dc45883a 	add	r2,sp,r17
  812f0c:	8d3fef36 	bltu	r17,r20,812ecc <__alt_data_end+0xff812ecc>
  812f10:	9005883a 	mov	r2,r18
  812f14:	00000406 	br	812f28 <__fputwc+0xe8>
  812f18:	80c0030b 	ldhu	r3,12(r16)
  812f1c:	a005883a 	mov	r2,r20
  812f20:	18c01014 	ori	r3,r3,64
  812f24:	80c0030d 	sth	r3,12(r16)
  812f28:	dfc00717 	ldw	ra,28(sp)
  812f2c:	dd400617 	ldw	r21,24(sp)
  812f30:	dd000517 	ldw	r20,20(sp)
  812f34:	dcc00417 	ldw	r19,16(sp)
  812f38:	dc800317 	ldw	r18,12(sp)
  812f3c:	dc400217 	ldw	r17,8(sp)
  812f40:	dc000117 	ldw	r16,4(sp)
  812f44:	dec00804 	addi	sp,sp,32
  812f48:	f800283a 	ret
  812f4c:	800d883a 	mov	r6,r16
  812f50:	29403fcc 	andi	r5,r5,255
  812f54:	9809883a 	mov	r4,r19
  812f58:	0812a6c0 	call	812a6c <__swbuf_r>
  812f5c:	10bfffe0 	cmpeqi	r2,r2,-1
  812f60:	10803fcc 	andi	r2,r2,255
  812f64:	103fd626 	beq	r2,zero,812ec0 <__alt_data_end+0xff812ec0>
  812f68:	00bfffc4 	movi	r2,-1
  812f6c:	003fee06 	br	812f28 <__alt_data_end+0xff812f28>
  812f70:	90ffffc4 	addi	r3,r18,-1
  812f74:	01003f84 	movi	r4,254
  812f78:	20ffbf36 	bltu	r4,r3,812e78 <__alt_data_end+0xff812e78>
  812f7c:	900b883a 	mov	r5,r18
  812f80:	dc800005 	stb	r18,0(sp)
  812f84:	1029883a 	mov	r20,r2
  812f88:	003fc506 	br	812ea0 <__alt_data_end+0xff812ea0>
  812f8c:	800d883a 	mov	r6,r16
  812f90:	a80b883a 	mov	r5,r21
  812f94:	9809883a 	mov	r4,r19
  812f98:	0812a6c0 	call	812a6c <__swbuf_r>
  812f9c:	10bfffe0 	cmpeqi	r2,r2,-1
  812fa0:	003fef06 	br	812f60 <__alt_data_end+0xff812f60>

00812fa4 <_fputwc_r>:
  812fa4:	3080030b 	ldhu	r2,12(r6)
  812fa8:	10c8000c 	andi	r3,r2,8192
  812fac:	1800051e 	bne	r3,zero,812fc4 <_fputwc_r+0x20>
  812fb0:	30c01917 	ldw	r3,100(r6)
  812fb4:	10880014 	ori	r2,r2,8192
  812fb8:	3080030d 	sth	r2,12(r6)
  812fbc:	18880014 	ori	r2,r3,8192
  812fc0:	30801915 	stw	r2,100(r6)
  812fc4:	0812e401 	jmpi	812e40 <__fputwc>

00812fc8 <fputwc>:
  812fc8:	008020b4 	movhi	r2,130
  812fcc:	defffc04 	addi	sp,sp,-16
  812fd0:	10b30204 	addi	r2,r2,-13304
  812fd4:	dc000115 	stw	r16,4(sp)
  812fd8:	14000017 	ldw	r16,0(r2)
  812fdc:	dc400215 	stw	r17,8(sp)
  812fe0:	dfc00315 	stw	ra,12(sp)
  812fe4:	2023883a 	mov	r17,r4
  812fe8:	80000226 	beq	r16,zero,812ff4 <fputwc+0x2c>
  812fec:	80800e17 	ldw	r2,56(r16)
  812ff0:	10001026 	beq	r2,zero,813034 <fputwc+0x6c>
  812ff4:	2880030b 	ldhu	r2,12(r5)
  812ff8:	10c8000c 	andi	r3,r2,8192
  812ffc:	1800051e 	bne	r3,zero,813014 <fputwc+0x4c>
  813000:	28c01917 	ldw	r3,100(r5)
  813004:	10880014 	ori	r2,r2,8192
  813008:	2880030d 	sth	r2,12(r5)
  81300c:	18880014 	ori	r2,r3,8192
  813010:	28801915 	stw	r2,100(r5)
  813014:	280d883a 	mov	r6,r5
  813018:	8009883a 	mov	r4,r16
  81301c:	880b883a 	mov	r5,r17
  813020:	dfc00317 	ldw	ra,12(sp)
  813024:	dc400217 	ldw	r17,8(sp)
  813028:	dc000117 	ldw	r16,4(sp)
  81302c:	dec00404 	addi	sp,sp,16
  813030:	0812e401 	jmpi	812e40 <__fputwc>
  813034:	8009883a 	mov	r4,r16
  813038:	d9400015 	stw	r5,0(sp)
  81303c:	080eb140 	call	80eb14 <__sinit>
  813040:	d9400017 	ldw	r5,0(sp)
  813044:	003feb06 	br	812ff4 <__alt_data_end+0xff812ff4>

00813048 <_fstat_r>:
  813048:	defffd04 	addi	sp,sp,-12
  81304c:	2805883a 	mov	r2,r5
  813050:	dc000015 	stw	r16,0(sp)
  813054:	040020b4 	movhi	r16,130
  813058:	dc400115 	stw	r17,4(sp)
  81305c:	84366604 	addi	r16,r16,-9832
  813060:	2023883a 	mov	r17,r4
  813064:	300b883a 	mov	r5,r6
  813068:	1009883a 	mov	r4,r2
  81306c:	dfc00215 	stw	ra,8(sp)
  813070:	80000015 	stw	zero,0(r16)
  813074:	08172d40 	call	8172d4 <fstat>
  813078:	00ffffc4 	movi	r3,-1
  81307c:	10c00526 	beq	r2,r3,813094 <_fstat_r+0x4c>
  813080:	dfc00217 	ldw	ra,8(sp)
  813084:	dc400117 	ldw	r17,4(sp)
  813088:	dc000017 	ldw	r16,0(sp)
  81308c:	dec00304 	addi	sp,sp,12
  813090:	f800283a 	ret
  813094:	80c00017 	ldw	r3,0(r16)
  813098:	183ff926 	beq	r3,zero,813080 <__alt_data_end+0xff813080>
  81309c:	88c00015 	stw	r3,0(r17)
  8130a0:	003ff706 	br	813080 <__alt_data_end+0xff813080>

008130a4 <__sfvwrite_r>:
  8130a4:	30800217 	ldw	r2,8(r6)
  8130a8:	10006726 	beq	r2,zero,813248 <__sfvwrite_r+0x1a4>
  8130ac:	28c0030b 	ldhu	r3,12(r5)
  8130b0:	defff404 	addi	sp,sp,-48
  8130b4:	dd400715 	stw	r21,28(sp)
  8130b8:	dd000615 	stw	r20,24(sp)
  8130bc:	dc000215 	stw	r16,8(sp)
  8130c0:	dfc00b15 	stw	ra,44(sp)
  8130c4:	df000a15 	stw	fp,40(sp)
  8130c8:	ddc00915 	stw	r23,36(sp)
  8130cc:	dd800815 	stw	r22,32(sp)
  8130d0:	dcc00515 	stw	r19,20(sp)
  8130d4:	dc800415 	stw	r18,16(sp)
  8130d8:	dc400315 	stw	r17,12(sp)
  8130dc:	1880020c 	andi	r2,r3,8
  8130e0:	2821883a 	mov	r16,r5
  8130e4:	202b883a 	mov	r21,r4
  8130e8:	3029883a 	mov	r20,r6
  8130ec:	10002726 	beq	r2,zero,81318c <__sfvwrite_r+0xe8>
  8130f0:	28800417 	ldw	r2,16(r5)
  8130f4:	10002526 	beq	r2,zero,81318c <__sfvwrite_r+0xe8>
  8130f8:	1880008c 	andi	r2,r3,2
  8130fc:	a4400017 	ldw	r17,0(r20)
  813100:	10002a26 	beq	r2,zero,8131ac <__sfvwrite_r+0x108>
  813104:	05a00034 	movhi	r22,32768
  813108:	0027883a 	mov	r19,zero
  81310c:	0025883a 	mov	r18,zero
  813110:	b5bf0004 	addi	r22,r22,-1024
  813114:	980d883a 	mov	r6,r19
  813118:	a809883a 	mov	r4,r21
  81311c:	90004626 	beq	r18,zero,813238 <__sfvwrite_r+0x194>
  813120:	900f883a 	mov	r7,r18
  813124:	b480022e 	bgeu	r22,r18,813130 <__sfvwrite_r+0x8c>
  813128:	01e00034 	movhi	r7,32768
  81312c:	39ff0004 	addi	r7,r7,-1024
  813130:	80800917 	ldw	r2,36(r16)
  813134:	81400717 	ldw	r5,28(r16)
  813138:	103ee83a 	callr	r2
  81313c:	0080570e 	bge	zero,r2,81329c <__sfvwrite_r+0x1f8>
  813140:	a0c00217 	ldw	r3,8(r20)
  813144:	98a7883a 	add	r19,r19,r2
  813148:	90a5c83a 	sub	r18,r18,r2
  81314c:	1885c83a 	sub	r2,r3,r2
  813150:	a0800215 	stw	r2,8(r20)
  813154:	103fef1e 	bne	r2,zero,813114 <__alt_data_end+0xff813114>
  813158:	0005883a 	mov	r2,zero
  81315c:	dfc00b17 	ldw	ra,44(sp)
  813160:	df000a17 	ldw	fp,40(sp)
  813164:	ddc00917 	ldw	r23,36(sp)
  813168:	dd800817 	ldw	r22,32(sp)
  81316c:	dd400717 	ldw	r21,28(sp)
  813170:	dd000617 	ldw	r20,24(sp)
  813174:	dcc00517 	ldw	r19,20(sp)
  813178:	dc800417 	ldw	r18,16(sp)
  81317c:	dc400317 	ldw	r17,12(sp)
  813180:	dc000217 	ldw	r16,8(sp)
  813184:	dec00c04 	addi	sp,sp,48
  813188:	f800283a 	ret
  81318c:	800b883a 	mov	r5,r16
  813190:	a809883a 	mov	r4,r21
  813194:	080cb400 	call	80cb40 <__swsetup_r>
  813198:	1000eb1e 	bne	r2,zero,813548 <__sfvwrite_r+0x4a4>
  81319c:	80c0030b 	ldhu	r3,12(r16)
  8131a0:	a4400017 	ldw	r17,0(r20)
  8131a4:	1880008c 	andi	r2,r3,2
  8131a8:	103fd61e 	bne	r2,zero,813104 <__alt_data_end+0xff813104>
  8131ac:	1880004c 	andi	r2,r3,1
  8131b0:	10003f1e 	bne	r2,zero,8132b0 <__sfvwrite_r+0x20c>
  8131b4:	0039883a 	mov	fp,zero
  8131b8:	0025883a 	mov	r18,zero
  8131bc:	90001a26 	beq	r18,zero,813228 <__sfvwrite_r+0x184>
  8131c0:	1880800c 	andi	r2,r3,512
  8131c4:	84c00217 	ldw	r19,8(r16)
  8131c8:	10002126 	beq	r2,zero,813250 <__sfvwrite_r+0x1ac>
  8131cc:	982f883a 	mov	r23,r19
  8131d0:	94c09336 	bltu	r18,r19,813420 <__sfvwrite_r+0x37c>
  8131d4:	1881200c 	andi	r2,r3,1152
  8131d8:	10009e1e 	bne	r2,zero,813454 <__sfvwrite_r+0x3b0>
  8131dc:	81000017 	ldw	r4,0(r16)
  8131e0:	b80d883a 	mov	r6,r23
  8131e4:	e00b883a 	mov	r5,fp
  8131e8:	08136140 	call	813614 <memmove>
  8131ec:	80c00217 	ldw	r3,8(r16)
  8131f0:	81000017 	ldw	r4,0(r16)
  8131f4:	9005883a 	mov	r2,r18
  8131f8:	1ce7c83a 	sub	r19,r3,r19
  8131fc:	25cf883a 	add	r7,r4,r23
  813200:	84c00215 	stw	r19,8(r16)
  813204:	81c00015 	stw	r7,0(r16)
  813208:	a0c00217 	ldw	r3,8(r20)
  81320c:	e0b9883a 	add	fp,fp,r2
  813210:	90a5c83a 	sub	r18,r18,r2
  813214:	18a7c83a 	sub	r19,r3,r2
  813218:	a4c00215 	stw	r19,8(r20)
  81321c:	983fce26 	beq	r19,zero,813158 <__alt_data_end+0xff813158>
  813220:	80c0030b 	ldhu	r3,12(r16)
  813224:	903fe61e 	bne	r18,zero,8131c0 <__alt_data_end+0xff8131c0>
  813228:	8f000017 	ldw	fp,0(r17)
  81322c:	8c800117 	ldw	r18,4(r17)
  813230:	8c400204 	addi	r17,r17,8
  813234:	003fe106 	br	8131bc <__alt_data_end+0xff8131bc>
  813238:	8cc00017 	ldw	r19,0(r17)
  81323c:	8c800117 	ldw	r18,4(r17)
  813240:	8c400204 	addi	r17,r17,8
  813244:	003fb306 	br	813114 <__alt_data_end+0xff813114>
  813248:	0005883a 	mov	r2,zero
  81324c:	f800283a 	ret
  813250:	81000017 	ldw	r4,0(r16)
  813254:	80800417 	ldw	r2,16(r16)
  813258:	11005736 	bltu	r2,r4,8133b8 <__sfvwrite_r+0x314>
  81325c:	85c00517 	ldw	r23,20(r16)
  813260:	95c05536 	bltu	r18,r23,8133b8 <__sfvwrite_r+0x314>
  813264:	00a00034 	movhi	r2,32768
  813268:	10bfffc4 	addi	r2,r2,-1
  81326c:	9009883a 	mov	r4,r18
  813270:	1480012e 	bgeu	r2,r18,813278 <__sfvwrite_r+0x1d4>
  813274:	1009883a 	mov	r4,r2
  813278:	b80b883a 	mov	r5,r23
  81327c:	080a2600 	call	80a260 <__divsi3>
  813280:	15cf383a 	mul	r7,r2,r23
  813284:	81400717 	ldw	r5,28(r16)
  813288:	80800917 	ldw	r2,36(r16)
  81328c:	e00d883a 	mov	r6,fp
  813290:	a809883a 	mov	r4,r21
  813294:	103ee83a 	callr	r2
  813298:	00bfdb16 	blt	zero,r2,813208 <__alt_data_end+0xff813208>
  81329c:	8080030b 	ldhu	r2,12(r16)
  8132a0:	10801014 	ori	r2,r2,64
  8132a4:	8080030d 	sth	r2,12(r16)
  8132a8:	00bfffc4 	movi	r2,-1
  8132ac:	003fab06 	br	81315c <__alt_data_end+0xff81315c>
  8132b0:	0027883a 	mov	r19,zero
  8132b4:	0011883a 	mov	r8,zero
  8132b8:	0039883a 	mov	fp,zero
  8132bc:	0025883a 	mov	r18,zero
  8132c0:	90001f26 	beq	r18,zero,813340 <__sfvwrite_r+0x29c>
  8132c4:	40005a26 	beq	r8,zero,813430 <__sfvwrite_r+0x38c>
  8132c8:	982d883a 	mov	r22,r19
  8132cc:	94c0012e 	bgeu	r18,r19,8132d4 <__sfvwrite_r+0x230>
  8132d0:	902d883a 	mov	r22,r18
  8132d4:	81000017 	ldw	r4,0(r16)
  8132d8:	80800417 	ldw	r2,16(r16)
  8132dc:	b02f883a 	mov	r23,r22
  8132e0:	81c00517 	ldw	r7,20(r16)
  8132e4:	1100032e 	bgeu	r2,r4,8132f4 <__sfvwrite_r+0x250>
  8132e8:	80c00217 	ldw	r3,8(r16)
  8132ec:	38c7883a 	add	r3,r7,r3
  8132f0:	1d801816 	blt	r3,r22,813354 <__sfvwrite_r+0x2b0>
  8132f4:	b1c03e16 	blt	r22,r7,8133f0 <__sfvwrite_r+0x34c>
  8132f8:	80800917 	ldw	r2,36(r16)
  8132fc:	81400717 	ldw	r5,28(r16)
  813300:	e00d883a 	mov	r6,fp
  813304:	da000115 	stw	r8,4(sp)
  813308:	a809883a 	mov	r4,r21
  81330c:	103ee83a 	callr	r2
  813310:	102f883a 	mov	r23,r2
  813314:	da000117 	ldw	r8,4(sp)
  813318:	00bfe00e 	bge	zero,r2,81329c <__alt_data_end+0xff81329c>
  81331c:	9de7c83a 	sub	r19,r19,r23
  813320:	98001f26 	beq	r19,zero,8133a0 <__sfvwrite_r+0x2fc>
  813324:	a0800217 	ldw	r2,8(r20)
  813328:	e5f9883a 	add	fp,fp,r23
  81332c:	95e5c83a 	sub	r18,r18,r23
  813330:	15efc83a 	sub	r23,r2,r23
  813334:	a5c00215 	stw	r23,8(r20)
  813338:	b83f8726 	beq	r23,zero,813158 <__alt_data_end+0xff813158>
  81333c:	903fe11e 	bne	r18,zero,8132c4 <__alt_data_end+0xff8132c4>
  813340:	8f000017 	ldw	fp,0(r17)
  813344:	8c800117 	ldw	r18,4(r17)
  813348:	0011883a 	mov	r8,zero
  81334c:	8c400204 	addi	r17,r17,8
  813350:	003fdb06 	br	8132c0 <__alt_data_end+0xff8132c0>
  813354:	180d883a 	mov	r6,r3
  813358:	e00b883a 	mov	r5,fp
  81335c:	da000115 	stw	r8,4(sp)
  813360:	d8c00015 	stw	r3,0(sp)
  813364:	08136140 	call	813614 <memmove>
  813368:	d8c00017 	ldw	r3,0(sp)
  81336c:	80800017 	ldw	r2,0(r16)
  813370:	800b883a 	mov	r5,r16
  813374:	a809883a 	mov	r4,r21
  813378:	10c5883a 	add	r2,r2,r3
  81337c:	80800015 	stw	r2,0(r16)
  813380:	d8c00015 	stw	r3,0(sp)
  813384:	080e7380 	call	80e738 <_fflush_r>
  813388:	d8c00017 	ldw	r3,0(sp)
  81338c:	da000117 	ldw	r8,4(sp)
  813390:	103fc21e 	bne	r2,zero,81329c <__alt_data_end+0xff81329c>
  813394:	182f883a 	mov	r23,r3
  813398:	9de7c83a 	sub	r19,r19,r23
  81339c:	983fe11e 	bne	r19,zero,813324 <__alt_data_end+0xff813324>
  8133a0:	800b883a 	mov	r5,r16
  8133a4:	a809883a 	mov	r4,r21
  8133a8:	080e7380 	call	80e738 <_fflush_r>
  8133ac:	103fbb1e 	bne	r2,zero,81329c <__alt_data_end+0xff81329c>
  8133b0:	0011883a 	mov	r8,zero
  8133b4:	003fdb06 	br	813324 <__alt_data_end+0xff813324>
  8133b8:	94c0012e 	bgeu	r18,r19,8133c0 <__sfvwrite_r+0x31c>
  8133bc:	9027883a 	mov	r19,r18
  8133c0:	980d883a 	mov	r6,r19
  8133c4:	e00b883a 	mov	r5,fp
  8133c8:	08136140 	call	813614 <memmove>
  8133cc:	80800217 	ldw	r2,8(r16)
  8133d0:	80c00017 	ldw	r3,0(r16)
  8133d4:	14c5c83a 	sub	r2,r2,r19
  8133d8:	1cc7883a 	add	r3,r3,r19
  8133dc:	80800215 	stw	r2,8(r16)
  8133e0:	80c00015 	stw	r3,0(r16)
  8133e4:	10004326 	beq	r2,zero,8134f4 <__sfvwrite_r+0x450>
  8133e8:	9805883a 	mov	r2,r19
  8133ec:	003f8606 	br	813208 <__alt_data_end+0xff813208>
  8133f0:	b00d883a 	mov	r6,r22
  8133f4:	e00b883a 	mov	r5,fp
  8133f8:	da000115 	stw	r8,4(sp)
  8133fc:	08136140 	call	813614 <memmove>
  813400:	80800217 	ldw	r2,8(r16)
  813404:	80c00017 	ldw	r3,0(r16)
  813408:	da000117 	ldw	r8,4(sp)
  81340c:	1585c83a 	sub	r2,r2,r22
  813410:	1dad883a 	add	r22,r3,r22
  813414:	80800215 	stw	r2,8(r16)
  813418:	85800015 	stw	r22,0(r16)
  81341c:	003fbf06 	br	81331c <__alt_data_end+0xff81331c>
  813420:	81000017 	ldw	r4,0(r16)
  813424:	9027883a 	mov	r19,r18
  813428:	902f883a 	mov	r23,r18
  81342c:	003f6c06 	br	8131e0 <__alt_data_end+0xff8131e0>
  813430:	900d883a 	mov	r6,r18
  813434:	01400284 	movi	r5,10
  813438:	e009883a 	mov	r4,fp
  81343c:	080fbc40 	call	80fbc4 <memchr>
  813440:	10003e26 	beq	r2,zero,81353c <__sfvwrite_r+0x498>
  813444:	10800044 	addi	r2,r2,1
  813448:	1727c83a 	sub	r19,r2,fp
  81344c:	02000044 	movi	r8,1
  813450:	003f9d06 	br	8132c8 <__alt_data_end+0xff8132c8>
  813454:	80800517 	ldw	r2,20(r16)
  813458:	81400417 	ldw	r5,16(r16)
  81345c:	81c00017 	ldw	r7,0(r16)
  813460:	10a7883a 	add	r19,r2,r2
  813464:	9885883a 	add	r2,r19,r2
  813468:	1026d7fa 	srli	r19,r2,31
  81346c:	396dc83a 	sub	r22,r7,r5
  813470:	b1000044 	addi	r4,r22,1
  813474:	9885883a 	add	r2,r19,r2
  813478:	1027d07a 	srai	r19,r2,1
  81347c:	2485883a 	add	r2,r4,r18
  813480:	980d883a 	mov	r6,r19
  813484:	9880022e 	bgeu	r19,r2,813490 <__sfvwrite_r+0x3ec>
  813488:	1027883a 	mov	r19,r2
  81348c:	100d883a 	mov	r6,r2
  813490:	18c1000c 	andi	r3,r3,1024
  813494:	18001c26 	beq	r3,zero,813508 <__sfvwrite_r+0x464>
  813498:	300b883a 	mov	r5,r6
  81349c:	a809883a 	mov	r4,r21
  8134a0:	080f3b80 	call	80f3b8 <_malloc_r>
  8134a4:	102f883a 	mov	r23,r2
  8134a8:	10002926 	beq	r2,zero,813550 <__sfvwrite_r+0x4ac>
  8134ac:	81400417 	ldw	r5,16(r16)
  8134b0:	b00d883a 	mov	r6,r22
  8134b4:	1009883a 	mov	r4,r2
  8134b8:	080fca80 	call	80fca8 <memcpy>
  8134bc:	8080030b 	ldhu	r2,12(r16)
  8134c0:	00fedfc4 	movi	r3,-1153
  8134c4:	10c4703a 	and	r2,r2,r3
  8134c8:	10802014 	ori	r2,r2,128
  8134cc:	8080030d 	sth	r2,12(r16)
  8134d0:	bd89883a 	add	r4,r23,r22
  8134d4:	9d8fc83a 	sub	r7,r19,r22
  8134d8:	85c00415 	stw	r23,16(r16)
  8134dc:	84c00515 	stw	r19,20(r16)
  8134e0:	81000015 	stw	r4,0(r16)
  8134e4:	9027883a 	mov	r19,r18
  8134e8:	81c00215 	stw	r7,8(r16)
  8134ec:	902f883a 	mov	r23,r18
  8134f0:	003f3b06 	br	8131e0 <__alt_data_end+0xff8131e0>
  8134f4:	800b883a 	mov	r5,r16
  8134f8:	a809883a 	mov	r4,r21
  8134fc:	080e7380 	call	80e738 <_fflush_r>
  813500:	103fb926 	beq	r2,zero,8133e8 <__alt_data_end+0xff8133e8>
  813504:	003f6506 	br	81329c <__alt_data_end+0xff81329c>
  813508:	a809883a 	mov	r4,r21
  81350c:	08137d00 	call	8137d0 <_realloc_r>
  813510:	102f883a 	mov	r23,r2
  813514:	103fee1e 	bne	r2,zero,8134d0 <__alt_data_end+0xff8134d0>
  813518:	81400417 	ldw	r5,16(r16)
  81351c:	a809883a 	mov	r4,r21
  813520:	080ec880 	call	80ec88 <_free_r>
  813524:	8080030b 	ldhu	r2,12(r16)
  813528:	00ffdfc4 	movi	r3,-129
  81352c:	1884703a 	and	r2,r3,r2
  813530:	00c00304 	movi	r3,12
  813534:	a8c00015 	stw	r3,0(r21)
  813538:	003f5906 	br	8132a0 <__alt_data_end+0xff8132a0>
  81353c:	94c00044 	addi	r19,r18,1
  813540:	02000044 	movi	r8,1
  813544:	003f6006 	br	8132c8 <__alt_data_end+0xff8132c8>
  813548:	00bfffc4 	movi	r2,-1
  81354c:	003f0306 	br	81315c <__alt_data_end+0xff81315c>
  813550:	00800304 	movi	r2,12
  813554:	a8800015 	stw	r2,0(r21)
  813558:	8080030b 	ldhu	r2,12(r16)
  81355c:	003f5006 	br	8132a0 <__alt_data_end+0xff8132a0>

00813560 <_isatty_r>:
  813560:	defffd04 	addi	sp,sp,-12
  813564:	dc000015 	stw	r16,0(sp)
  813568:	040020b4 	movhi	r16,130
  81356c:	dc400115 	stw	r17,4(sp)
  813570:	84366604 	addi	r16,r16,-9832
  813574:	2023883a 	mov	r17,r4
  813578:	2809883a 	mov	r4,r5
  81357c:	dfc00215 	stw	ra,8(sp)
  813580:	80000015 	stw	zero,0(r16)
  813584:	08173c00 	call	8173c0 <isatty>
  813588:	00ffffc4 	movi	r3,-1
  81358c:	10c00526 	beq	r2,r3,8135a4 <_isatty_r+0x44>
  813590:	dfc00217 	ldw	ra,8(sp)
  813594:	dc400117 	ldw	r17,4(sp)
  813598:	dc000017 	ldw	r16,0(sp)
  81359c:	dec00304 	addi	sp,sp,12
  8135a0:	f800283a 	ret
  8135a4:	80c00017 	ldw	r3,0(r16)
  8135a8:	183ff926 	beq	r3,zero,813590 <__alt_data_end+0xff813590>
  8135ac:	88c00015 	stw	r3,0(r17)
  8135b0:	003ff706 	br	813590 <__alt_data_end+0xff813590>

008135b4 <_lseek_r>:
  8135b4:	defffd04 	addi	sp,sp,-12
  8135b8:	2805883a 	mov	r2,r5
  8135bc:	dc000015 	stw	r16,0(sp)
  8135c0:	040020b4 	movhi	r16,130
  8135c4:	dc400115 	stw	r17,4(sp)
  8135c8:	300b883a 	mov	r5,r6
  8135cc:	84366604 	addi	r16,r16,-9832
  8135d0:	2023883a 	mov	r17,r4
  8135d4:	380d883a 	mov	r6,r7
  8135d8:	1009883a 	mov	r4,r2
  8135dc:	dfc00215 	stw	ra,8(sp)
  8135e0:	80000015 	stw	zero,0(r16)
  8135e4:	081758c0 	call	81758c <lseek>
  8135e8:	00ffffc4 	movi	r3,-1
  8135ec:	10c00526 	beq	r2,r3,813604 <_lseek_r+0x50>
  8135f0:	dfc00217 	ldw	ra,8(sp)
  8135f4:	dc400117 	ldw	r17,4(sp)
  8135f8:	dc000017 	ldw	r16,0(sp)
  8135fc:	dec00304 	addi	sp,sp,12
  813600:	f800283a 	ret
  813604:	80c00017 	ldw	r3,0(r16)
  813608:	183ff926 	beq	r3,zero,8135f0 <__alt_data_end+0xff8135f0>
  81360c:	88c00015 	stw	r3,0(r17)
  813610:	003ff706 	br	8135f0 <__alt_data_end+0xff8135f0>

00813614 <memmove>:
  813614:	2005883a 	mov	r2,r4
  813618:	29000b2e 	bgeu	r5,r4,813648 <memmove+0x34>
  81361c:	298f883a 	add	r7,r5,r6
  813620:	21c0092e 	bgeu	r4,r7,813648 <memmove+0x34>
  813624:	2187883a 	add	r3,r4,r6
  813628:	198bc83a 	sub	r5,r3,r6
  81362c:	30004826 	beq	r6,zero,813750 <memmove+0x13c>
  813630:	39ffffc4 	addi	r7,r7,-1
  813634:	39000003 	ldbu	r4,0(r7)
  813638:	18ffffc4 	addi	r3,r3,-1
  81363c:	19000005 	stb	r4,0(r3)
  813640:	28fffb1e 	bne	r5,r3,813630 <__alt_data_end+0xff813630>
  813644:	f800283a 	ret
  813648:	00c003c4 	movi	r3,15
  81364c:	1980412e 	bgeu	r3,r6,813754 <memmove+0x140>
  813650:	2886b03a 	or	r3,r5,r2
  813654:	18c000cc 	andi	r3,r3,3
  813658:	1800401e 	bne	r3,zero,81375c <memmove+0x148>
  81365c:	33fffc04 	addi	r15,r6,-16
  813660:	781ed13a 	srli	r15,r15,4
  813664:	28c00104 	addi	r3,r5,4
  813668:	13400104 	addi	r13,r2,4
  81366c:	781c913a 	slli	r14,r15,4
  813670:	2b000204 	addi	r12,r5,8
  813674:	12c00204 	addi	r11,r2,8
  813678:	73800504 	addi	r14,r14,20
  81367c:	2a800304 	addi	r10,r5,12
  813680:	12400304 	addi	r9,r2,12
  813684:	2b9d883a 	add	r14,r5,r14
  813688:	2811883a 	mov	r8,r5
  81368c:	100f883a 	mov	r7,r2
  813690:	41000017 	ldw	r4,0(r8)
  813694:	39c00404 	addi	r7,r7,16
  813698:	18c00404 	addi	r3,r3,16
  81369c:	393ffc15 	stw	r4,-16(r7)
  8136a0:	193ffc17 	ldw	r4,-16(r3)
  8136a4:	6b400404 	addi	r13,r13,16
  8136a8:	5ac00404 	addi	r11,r11,16
  8136ac:	693ffc15 	stw	r4,-16(r13)
  8136b0:	61000017 	ldw	r4,0(r12)
  8136b4:	4a400404 	addi	r9,r9,16
  8136b8:	42000404 	addi	r8,r8,16
  8136bc:	593ffc15 	stw	r4,-16(r11)
  8136c0:	51000017 	ldw	r4,0(r10)
  8136c4:	63000404 	addi	r12,r12,16
  8136c8:	52800404 	addi	r10,r10,16
  8136cc:	493ffc15 	stw	r4,-16(r9)
  8136d0:	1bbfef1e 	bne	r3,r14,813690 <__alt_data_end+0xff813690>
  8136d4:	79000044 	addi	r4,r15,1
  8136d8:	2008913a 	slli	r4,r4,4
  8136dc:	328003cc 	andi	r10,r6,15
  8136e0:	02c000c4 	movi	r11,3
  8136e4:	1107883a 	add	r3,r2,r4
  8136e8:	290b883a 	add	r5,r5,r4
  8136ec:	5a801e2e 	bgeu	r11,r10,813768 <memmove+0x154>
  8136f0:	1813883a 	mov	r9,r3
  8136f4:	2811883a 	mov	r8,r5
  8136f8:	500f883a 	mov	r7,r10
  8136fc:	41000017 	ldw	r4,0(r8)
  813700:	4a400104 	addi	r9,r9,4
  813704:	39ffff04 	addi	r7,r7,-4
  813708:	493fff15 	stw	r4,-4(r9)
  81370c:	42000104 	addi	r8,r8,4
  813710:	59fffa36 	bltu	r11,r7,8136fc <__alt_data_end+0xff8136fc>
  813714:	513fff04 	addi	r4,r10,-4
  813718:	2008d0ba 	srli	r4,r4,2
  81371c:	318000cc 	andi	r6,r6,3
  813720:	21000044 	addi	r4,r4,1
  813724:	2109883a 	add	r4,r4,r4
  813728:	2109883a 	add	r4,r4,r4
  81372c:	1907883a 	add	r3,r3,r4
  813730:	290b883a 	add	r5,r5,r4
  813734:	30000b26 	beq	r6,zero,813764 <memmove+0x150>
  813738:	198d883a 	add	r6,r3,r6
  81373c:	29c00003 	ldbu	r7,0(r5)
  813740:	18c00044 	addi	r3,r3,1
  813744:	29400044 	addi	r5,r5,1
  813748:	19ffffc5 	stb	r7,-1(r3)
  81374c:	19bffb1e 	bne	r3,r6,81373c <__alt_data_end+0xff81373c>
  813750:	f800283a 	ret
  813754:	1007883a 	mov	r3,r2
  813758:	003ff606 	br	813734 <__alt_data_end+0xff813734>
  81375c:	1007883a 	mov	r3,r2
  813760:	003ff506 	br	813738 <__alt_data_end+0xff813738>
  813764:	f800283a 	ret
  813768:	500d883a 	mov	r6,r10
  81376c:	003ff106 	br	813734 <__alt_data_end+0xff813734>

00813770 <_read_r>:
  813770:	defffd04 	addi	sp,sp,-12
  813774:	2805883a 	mov	r2,r5
  813778:	dc000015 	stw	r16,0(sp)
  81377c:	040020b4 	movhi	r16,130
  813780:	dc400115 	stw	r17,4(sp)
  813784:	300b883a 	mov	r5,r6
  813788:	84366604 	addi	r16,r16,-9832
  81378c:	2023883a 	mov	r17,r4
  813790:	380d883a 	mov	r6,r7
  813794:	1009883a 	mov	r4,r2
  813798:	dfc00215 	stw	ra,8(sp)
  81379c:	80000015 	stw	zero,0(r16)
  8137a0:	08179c80 	call	8179c8 <read>
  8137a4:	00ffffc4 	movi	r3,-1
  8137a8:	10c00526 	beq	r2,r3,8137c0 <_read_r+0x50>
  8137ac:	dfc00217 	ldw	ra,8(sp)
  8137b0:	dc400117 	ldw	r17,4(sp)
  8137b4:	dc000017 	ldw	r16,0(sp)
  8137b8:	dec00304 	addi	sp,sp,12
  8137bc:	f800283a 	ret
  8137c0:	80c00017 	ldw	r3,0(r16)
  8137c4:	183ff926 	beq	r3,zero,8137ac <__alt_data_end+0xff8137ac>
  8137c8:	88c00015 	stw	r3,0(r17)
  8137cc:	003ff706 	br	8137ac <__alt_data_end+0xff8137ac>

008137d0 <_realloc_r>:
  8137d0:	defff604 	addi	sp,sp,-40
  8137d4:	dc800215 	stw	r18,8(sp)
  8137d8:	dfc00915 	stw	ra,36(sp)
  8137dc:	df000815 	stw	fp,32(sp)
  8137e0:	ddc00715 	stw	r23,28(sp)
  8137e4:	dd800615 	stw	r22,24(sp)
  8137e8:	dd400515 	stw	r21,20(sp)
  8137ec:	dd000415 	stw	r20,16(sp)
  8137f0:	dcc00315 	stw	r19,12(sp)
  8137f4:	dc400115 	stw	r17,4(sp)
  8137f8:	dc000015 	stw	r16,0(sp)
  8137fc:	3025883a 	mov	r18,r6
  813800:	2800b726 	beq	r5,zero,813ae0 <_realloc_r+0x310>
  813804:	282b883a 	mov	r21,r5
  813808:	2029883a 	mov	r20,r4
  81380c:	08176dc0 	call	8176dc <__malloc_lock>
  813810:	a8bfff17 	ldw	r2,-4(r21)
  813814:	043fff04 	movi	r16,-4
  813818:	90c002c4 	addi	r3,r18,11
  81381c:	01000584 	movi	r4,22
  813820:	acfffe04 	addi	r19,r21,-8
  813824:	1420703a 	and	r16,r2,r16
  813828:	20c0332e 	bgeu	r4,r3,8138f8 <_realloc_r+0x128>
  81382c:	047ffe04 	movi	r17,-8
  813830:	1c62703a 	and	r17,r3,r17
  813834:	8807883a 	mov	r3,r17
  813838:	88005816 	blt	r17,zero,81399c <_realloc_r+0x1cc>
  81383c:	8c805736 	bltu	r17,r18,81399c <_realloc_r+0x1cc>
  813840:	80c0300e 	bge	r16,r3,813904 <_realloc_r+0x134>
  813844:	070020b4 	movhi	fp,130
  813848:	e730f704 	addi	fp,fp,-15396
  81384c:	e1c00217 	ldw	r7,8(fp)
  813850:	9c09883a 	add	r4,r19,r16
  813854:	22000117 	ldw	r8,4(r4)
  813858:	21c06326 	beq	r4,r7,8139e8 <_realloc_r+0x218>
  81385c:	017fff84 	movi	r5,-2
  813860:	414a703a 	and	r5,r8,r5
  813864:	214b883a 	add	r5,r4,r5
  813868:	29800117 	ldw	r6,4(r5)
  81386c:	3180004c 	andi	r6,r6,1
  813870:	30003f26 	beq	r6,zero,813970 <_realloc_r+0x1a0>
  813874:	1080004c 	andi	r2,r2,1
  813878:	10008326 	beq	r2,zero,813a88 <_realloc_r+0x2b8>
  81387c:	900b883a 	mov	r5,r18
  813880:	a009883a 	mov	r4,r20
  813884:	080f3b80 	call	80f3b8 <_malloc_r>
  813888:	1025883a 	mov	r18,r2
  81388c:	10011e26 	beq	r2,zero,813d08 <_realloc_r+0x538>
  813890:	a93fff17 	ldw	r4,-4(r21)
  813894:	10fffe04 	addi	r3,r2,-8
  813898:	00bfff84 	movi	r2,-2
  81389c:	2084703a 	and	r2,r4,r2
  8138a0:	9885883a 	add	r2,r19,r2
  8138a4:	1880ee26 	beq	r3,r2,813c60 <_realloc_r+0x490>
  8138a8:	81bfff04 	addi	r6,r16,-4
  8138ac:	00800904 	movi	r2,36
  8138b0:	1180b836 	bltu	r2,r6,813b94 <_realloc_r+0x3c4>
  8138b4:	00c004c4 	movi	r3,19
  8138b8:	19809636 	bltu	r3,r6,813b14 <_realloc_r+0x344>
  8138bc:	9005883a 	mov	r2,r18
  8138c0:	a807883a 	mov	r3,r21
  8138c4:	19000017 	ldw	r4,0(r3)
  8138c8:	11000015 	stw	r4,0(r2)
  8138cc:	19000117 	ldw	r4,4(r3)
  8138d0:	11000115 	stw	r4,4(r2)
  8138d4:	18c00217 	ldw	r3,8(r3)
  8138d8:	10c00215 	stw	r3,8(r2)
  8138dc:	a80b883a 	mov	r5,r21
  8138e0:	a009883a 	mov	r4,r20
  8138e4:	080ec880 	call	80ec88 <_free_r>
  8138e8:	a009883a 	mov	r4,r20
  8138ec:	08177000 	call	817700 <__malloc_unlock>
  8138f0:	9005883a 	mov	r2,r18
  8138f4:	00001206 	br	813940 <_realloc_r+0x170>
  8138f8:	00c00404 	movi	r3,16
  8138fc:	1823883a 	mov	r17,r3
  813900:	003fce06 	br	81383c <__alt_data_end+0xff81383c>
  813904:	a825883a 	mov	r18,r21
  813908:	8445c83a 	sub	r2,r16,r17
  81390c:	00c003c4 	movi	r3,15
  813910:	18802636 	bltu	r3,r2,8139ac <_realloc_r+0x1dc>
  813914:	99800117 	ldw	r6,4(r19)
  813918:	9c07883a 	add	r3,r19,r16
  81391c:	3180004c 	andi	r6,r6,1
  813920:	3420b03a 	or	r16,r6,r16
  813924:	9c000115 	stw	r16,4(r19)
  813928:	18800117 	ldw	r2,4(r3)
  81392c:	10800054 	ori	r2,r2,1
  813930:	18800115 	stw	r2,4(r3)
  813934:	a009883a 	mov	r4,r20
  813938:	08177000 	call	817700 <__malloc_unlock>
  81393c:	9005883a 	mov	r2,r18
  813940:	dfc00917 	ldw	ra,36(sp)
  813944:	df000817 	ldw	fp,32(sp)
  813948:	ddc00717 	ldw	r23,28(sp)
  81394c:	dd800617 	ldw	r22,24(sp)
  813950:	dd400517 	ldw	r21,20(sp)
  813954:	dd000417 	ldw	r20,16(sp)
  813958:	dcc00317 	ldw	r19,12(sp)
  81395c:	dc800217 	ldw	r18,8(sp)
  813960:	dc400117 	ldw	r17,4(sp)
  813964:	dc000017 	ldw	r16,0(sp)
  813968:	dec00a04 	addi	sp,sp,40
  81396c:	f800283a 	ret
  813970:	017fff04 	movi	r5,-4
  813974:	414a703a 	and	r5,r8,r5
  813978:	814d883a 	add	r6,r16,r5
  81397c:	30c01f16 	blt	r6,r3,8139fc <_realloc_r+0x22c>
  813980:	20800317 	ldw	r2,12(r4)
  813984:	20c00217 	ldw	r3,8(r4)
  813988:	a825883a 	mov	r18,r21
  81398c:	3021883a 	mov	r16,r6
  813990:	18800315 	stw	r2,12(r3)
  813994:	10c00215 	stw	r3,8(r2)
  813998:	003fdb06 	br	813908 <__alt_data_end+0xff813908>
  81399c:	00800304 	movi	r2,12
  8139a0:	a0800015 	stw	r2,0(r20)
  8139a4:	0005883a 	mov	r2,zero
  8139a8:	003fe506 	br	813940 <__alt_data_end+0xff813940>
  8139ac:	98c00117 	ldw	r3,4(r19)
  8139b0:	9c4b883a 	add	r5,r19,r17
  8139b4:	11000054 	ori	r4,r2,1
  8139b8:	18c0004c 	andi	r3,r3,1
  8139bc:	1c62b03a 	or	r17,r3,r17
  8139c0:	9c400115 	stw	r17,4(r19)
  8139c4:	29000115 	stw	r4,4(r5)
  8139c8:	2885883a 	add	r2,r5,r2
  8139cc:	10c00117 	ldw	r3,4(r2)
  8139d0:	29400204 	addi	r5,r5,8
  8139d4:	a009883a 	mov	r4,r20
  8139d8:	18c00054 	ori	r3,r3,1
  8139dc:	10c00115 	stw	r3,4(r2)
  8139e0:	080ec880 	call	80ec88 <_free_r>
  8139e4:	003fd306 	br	813934 <__alt_data_end+0xff813934>
  8139e8:	017fff04 	movi	r5,-4
  8139ec:	414a703a 	and	r5,r8,r5
  8139f0:	89800404 	addi	r6,r17,16
  8139f4:	8151883a 	add	r8,r16,r5
  8139f8:	4180590e 	bge	r8,r6,813b60 <_realloc_r+0x390>
  8139fc:	1080004c 	andi	r2,r2,1
  813a00:	103f9e1e 	bne	r2,zero,81387c <__alt_data_end+0xff81387c>
  813a04:	adbffe17 	ldw	r22,-8(r21)
  813a08:	00bfff04 	movi	r2,-4
  813a0c:	9dadc83a 	sub	r22,r19,r22
  813a10:	b1800117 	ldw	r6,4(r22)
  813a14:	3084703a 	and	r2,r6,r2
  813a18:	20002026 	beq	r4,zero,813a9c <_realloc_r+0x2cc>
  813a1c:	80af883a 	add	r23,r16,r2
  813a20:	b96f883a 	add	r23,r23,r5
  813a24:	21c05f26 	beq	r4,r7,813ba4 <_realloc_r+0x3d4>
  813a28:	b8c01c16 	blt	r23,r3,813a9c <_realloc_r+0x2cc>
  813a2c:	20800317 	ldw	r2,12(r4)
  813a30:	20c00217 	ldw	r3,8(r4)
  813a34:	81bfff04 	addi	r6,r16,-4
  813a38:	01000904 	movi	r4,36
  813a3c:	18800315 	stw	r2,12(r3)
  813a40:	10c00215 	stw	r3,8(r2)
  813a44:	b0c00217 	ldw	r3,8(r22)
  813a48:	b0800317 	ldw	r2,12(r22)
  813a4c:	b4800204 	addi	r18,r22,8
  813a50:	18800315 	stw	r2,12(r3)
  813a54:	10c00215 	stw	r3,8(r2)
  813a58:	21801b36 	bltu	r4,r6,813ac8 <_realloc_r+0x2f8>
  813a5c:	008004c4 	movi	r2,19
  813a60:	1180352e 	bgeu	r2,r6,813b38 <_realloc_r+0x368>
  813a64:	a8800017 	ldw	r2,0(r21)
  813a68:	b0800215 	stw	r2,8(r22)
  813a6c:	a8800117 	ldw	r2,4(r21)
  813a70:	b0800315 	stw	r2,12(r22)
  813a74:	008006c4 	movi	r2,27
  813a78:	11807f36 	bltu	r2,r6,813c78 <_realloc_r+0x4a8>
  813a7c:	b0800404 	addi	r2,r22,16
  813a80:	ad400204 	addi	r21,r21,8
  813a84:	00002d06 	br	813b3c <_realloc_r+0x36c>
  813a88:	adbffe17 	ldw	r22,-8(r21)
  813a8c:	00bfff04 	movi	r2,-4
  813a90:	9dadc83a 	sub	r22,r19,r22
  813a94:	b1000117 	ldw	r4,4(r22)
  813a98:	2084703a 	and	r2,r4,r2
  813a9c:	b03f7726 	beq	r22,zero,81387c <__alt_data_end+0xff81387c>
  813aa0:	80af883a 	add	r23,r16,r2
  813aa4:	b8ff7516 	blt	r23,r3,81387c <__alt_data_end+0xff81387c>
  813aa8:	b0800317 	ldw	r2,12(r22)
  813aac:	b0c00217 	ldw	r3,8(r22)
  813ab0:	81bfff04 	addi	r6,r16,-4
  813ab4:	01000904 	movi	r4,36
  813ab8:	18800315 	stw	r2,12(r3)
  813abc:	10c00215 	stw	r3,8(r2)
  813ac0:	b4800204 	addi	r18,r22,8
  813ac4:	21bfe52e 	bgeu	r4,r6,813a5c <__alt_data_end+0xff813a5c>
  813ac8:	a80b883a 	mov	r5,r21
  813acc:	9009883a 	mov	r4,r18
  813ad0:	08136140 	call	813614 <memmove>
  813ad4:	b821883a 	mov	r16,r23
  813ad8:	b027883a 	mov	r19,r22
  813adc:	003f8a06 	br	813908 <__alt_data_end+0xff813908>
  813ae0:	300b883a 	mov	r5,r6
  813ae4:	dfc00917 	ldw	ra,36(sp)
  813ae8:	df000817 	ldw	fp,32(sp)
  813aec:	ddc00717 	ldw	r23,28(sp)
  813af0:	dd800617 	ldw	r22,24(sp)
  813af4:	dd400517 	ldw	r21,20(sp)
  813af8:	dd000417 	ldw	r20,16(sp)
  813afc:	dcc00317 	ldw	r19,12(sp)
  813b00:	dc800217 	ldw	r18,8(sp)
  813b04:	dc400117 	ldw	r17,4(sp)
  813b08:	dc000017 	ldw	r16,0(sp)
  813b0c:	dec00a04 	addi	sp,sp,40
  813b10:	080f3b81 	jmpi	80f3b8 <_malloc_r>
  813b14:	a8c00017 	ldw	r3,0(r21)
  813b18:	90c00015 	stw	r3,0(r18)
  813b1c:	a8c00117 	ldw	r3,4(r21)
  813b20:	90c00115 	stw	r3,4(r18)
  813b24:	00c006c4 	movi	r3,27
  813b28:	19804536 	bltu	r3,r6,813c40 <_realloc_r+0x470>
  813b2c:	90800204 	addi	r2,r18,8
  813b30:	a8c00204 	addi	r3,r21,8
  813b34:	003f6306 	br	8138c4 <__alt_data_end+0xff8138c4>
  813b38:	9005883a 	mov	r2,r18
  813b3c:	a8c00017 	ldw	r3,0(r21)
  813b40:	b821883a 	mov	r16,r23
  813b44:	b027883a 	mov	r19,r22
  813b48:	10c00015 	stw	r3,0(r2)
  813b4c:	a8c00117 	ldw	r3,4(r21)
  813b50:	10c00115 	stw	r3,4(r2)
  813b54:	a8c00217 	ldw	r3,8(r21)
  813b58:	10c00215 	stw	r3,8(r2)
  813b5c:	003f6a06 	br	813908 <__alt_data_end+0xff813908>
  813b60:	9c67883a 	add	r19,r19,r17
  813b64:	4445c83a 	sub	r2,r8,r17
  813b68:	e4c00215 	stw	r19,8(fp)
  813b6c:	10800054 	ori	r2,r2,1
  813b70:	98800115 	stw	r2,4(r19)
  813b74:	a8bfff17 	ldw	r2,-4(r21)
  813b78:	a009883a 	mov	r4,r20
  813b7c:	1080004c 	andi	r2,r2,1
  813b80:	1462b03a 	or	r17,r2,r17
  813b84:	ac7fff15 	stw	r17,-4(r21)
  813b88:	08177000 	call	817700 <__malloc_unlock>
  813b8c:	a805883a 	mov	r2,r21
  813b90:	003f6b06 	br	813940 <__alt_data_end+0xff813940>
  813b94:	a80b883a 	mov	r5,r21
  813b98:	9009883a 	mov	r4,r18
  813b9c:	08136140 	call	813614 <memmove>
  813ba0:	003f4e06 	br	8138dc <__alt_data_end+0xff8138dc>
  813ba4:	89000404 	addi	r4,r17,16
  813ba8:	b93fbc16 	blt	r23,r4,813a9c <__alt_data_end+0xff813a9c>
  813bac:	b0800317 	ldw	r2,12(r22)
  813bb0:	b0c00217 	ldw	r3,8(r22)
  813bb4:	81bfff04 	addi	r6,r16,-4
  813bb8:	01000904 	movi	r4,36
  813bbc:	18800315 	stw	r2,12(r3)
  813bc0:	10c00215 	stw	r3,8(r2)
  813bc4:	b4800204 	addi	r18,r22,8
  813bc8:	21804336 	bltu	r4,r6,813cd8 <_realloc_r+0x508>
  813bcc:	008004c4 	movi	r2,19
  813bd0:	11803f2e 	bgeu	r2,r6,813cd0 <_realloc_r+0x500>
  813bd4:	a8800017 	ldw	r2,0(r21)
  813bd8:	b0800215 	stw	r2,8(r22)
  813bdc:	a8800117 	ldw	r2,4(r21)
  813be0:	b0800315 	stw	r2,12(r22)
  813be4:	008006c4 	movi	r2,27
  813be8:	11803f36 	bltu	r2,r6,813ce8 <_realloc_r+0x518>
  813bec:	b0800404 	addi	r2,r22,16
  813bf0:	ad400204 	addi	r21,r21,8
  813bf4:	a8c00017 	ldw	r3,0(r21)
  813bf8:	10c00015 	stw	r3,0(r2)
  813bfc:	a8c00117 	ldw	r3,4(r21)
  813c00:	10c00115 	stw	r3,4(r2)
  813c04:	a8c00217 	ldw	r3,8(r21)
  813c08:	10c00215 	stw	r3,8(r2)
  813c0c:	b447883a 	add	r3,r22,r17
  813c10:	bc45c83a 	sub	r2,r23,r17
  813c14:	e0c00215 	stw	r3,8(fp)
  813c18:	10800054 	ori	r2,r2,1
  813c1c:	18800115 	stw	r2,4(r3)
  813c20:	b0800117 	ldw	r2,4(r22)
  813c24:	a009883a 	mov	r4,r20
  813c28:	1080004c 	andi	r2,r2,1
  813c2c:	1462b03a 	or	r17,r2,r17
  813c30:	b4400115 	stw	r17,4(r22)
  813c34:	08177000 	call	817700 <__malloc_unlock>
  813c38:	9005883a 	mov	r2,r18
  813c3c:	003f4006 	br	813940 <__alt_data_end+0xff813940>
  813c40:	a8c00217 	ldw	r3,8(r21)
  813c44:	90c00215 	stw	r3,8(r18)
  813c48:	a8c00317 	ldw	r3,12(r21)
  813c4c:	90c00315 	stw	r3,12(r18)
  813c50:	30801126 	beq	r6,r2,813c98 <_realloc_r+0x4c8>
  813c54:	90800404 	addi	r2,r18,16
  813c58:	a8c00404 	addi	r3,r21,16
  813c5c:	003f1906 	br	8138c4 <__alt_data_end+0xff8138c4>
  813c60:	90ffff17 	ldw	r3,-4(r18)
  813c64:	00bfff04 	movi	r2,-4
  813c68:	a825883a 	mov	r18,r21
  813c6c:	1884703a 	and	r2,r3,r2
  813c70:	80a1883a 	add	r16,r16,r2
  813c74:	003f2406 	br	813908 <__alt_data_end+0xff813908>
  813c78:	a8800217 	ldw	r2,8(r21)
  813c7c:	b0800415 	stw	r2,16(r22)
  813c80:	a8800317 	ldw	r2,12(r21)
  813c84:	b0800515 	stw	r2,20(r22)
  813c88:	31000a26 	beq	r6,r4,813cb4 <_realloc_r+0x4e4>
  813c8c:	b0800604 	addi	r2,r22,24
  813c90:	ad400404 	addi	r21,r21,16
  813c94:	003fa906 	br	813b3c <__alt_data_end+0xff813b3c>
  813c98:	a9000417 	ldw	r4,16(r21)
  813c9c:	90800604 	addi	r2,r18,24
  813ca0:	a8c00604 	addi	r3,r21,24
  813ca4:	91000415 	stw	r4,16(r18)
  813ca8:	a9000517 	ldw	r4,20(r21)
  813cac:	91000515 	stw	r4,20(r18)
  813cb0:	003f0406 	br	8138c4 <__alt_data_end+0xff8138c4>
  813cb4:	a8c00417 	ldw	r3,16(r21)
  813cb8:	ad400604 	addi	r21,r21,24
  813cbc:	b0800804 	addi	r2,r22,32
  813cc0:	b0c00615 	stw	r3,24(r22)
  813cc4:	a8ffff17 	ldw	r3,-4(r21)
  813cc8:	b0c00715 	stw	r3,28(r22)
  813ccc:	003f9b06 	br	813b3c <__alt_data_end+0xff813b3c>
  813cd0:	9005883a 	mov	r2,r18
  813cd4:	003fc706 	br	813bf4 <__alt_data_end+0xff813bf4>
  813cd8:	a80b883a 	mov	r5,r21
  813cdc:	9009883a 	mov	r4,r18
  813ce0:	08136140 	call	813614 <memmove>
  813ce4:	003fc906 	br	813c0c <__alt_data_end+0xff813c0c>
  813ce8:	a8800217 	ldw	r2,8(r21)
  813cec:	b0800415 	stw	r2,16(r22)
  813cf0:	a8800317 	ldw	r2,12(r21)
  813cf4:	b0800515 	stw	r2,20(r22)
  813cf8:	31000726 	beq	r6,r4,813d18 <_realloc_r+0x548>
  813cfc:	b0800604 	addi	r2,r22,24
  813d00:	ad400404 	addi	r21,r21,16
  813d04:	003fbb06 	br	813bf4 <__alt_data_end+0xff813bf4>
  813d08:	a009883a 	mov	r4,r20
  813d0c:	08177000 	call	817700 <__malloc_unlock>
  813d10:	0005883a 	mov	r2,zero
  813d14:	003f0a06 	br	813940 <__alt_data_end+0xff813940>
  813d18:	a8c00417 	ldw	r3,16(r21)
  813d1c:	ad400604 	addi	r21,r21,24
  813d20:	b0800804 	addi	r2,r22,32
  813d24:	b0c00615 	stw	r3,24(r22)
  813d28:	a8ffff17 	ldw	r3,-4(r21)
  813d2c:	b0c00715 	stw	r3,28(r22)
  813d30:	003fb006 	br	813bf4 <__alt_data_end+0xff813bf4>

00813d34 <_wcrtomb_r>:
  813d34:	defff604 	addi	sp,sp,-40
  813d38:	008020b4 	movhi	r2,130
  813d3c:	dc800815 	stw	r18,32(sp)
  813d40:	dc400715 	stw	r17,28(sp)
  813d44:	dc000615 	stw	r16,24(sp)
  813d48:	10b30604 	addi	r2,r2,-13288
  813d4c:	dfc00915 	stw	ra,36(sp)
  813d50:	2021883a 	mov	r16,r4
  813d54:	3823883a 	mov	r17,r7
  813d58:	14800017 	ldw	r18,0(r2)
  813d5c:	28001426 	beq	r5,zero,813db0 <_wcrtomb_r+0x7c>
  813d60:	d9400415 	stw	r5,16(sp)
  813d64:	d9800515 	stw	r6,20(sp)
  813d68:	080f19c0 	call	80f19c <__locale_charset>
  813d6c:	d9800517 	ldw	r6,20(sp)
  813d70:	d9400417 	ldw	r5,16(sp)
  813d74:	100f883a 	mov	r7,r2
  813d78:	dc400015 	stw	r17,0(sp)
  813d7c:	8009883a 	mov	r4,r16
  813d80:	903ee83a 	callr	r18
  813d84:	00ffffc4 	movi	r3,-1
  813d88:	10c0031e 	bne	r2,r3,813d98 <_wcrtomb_r+0x64>
  813d8c:	88000015 	stw	zero,0(r17)
  813d90:	00c02284 	movi	r3,138
  813d94:	80c00015 	stw	r3,0(r16)
  813d98:	dfc00917 	ldw	ra,36(sp)
  813d9c:	dc800817 	ldw	r18,32(sp)
  813da0:	dc400717 	ldw	r17,28(sp)
  813da4:	dc000617 	ldw	r16,24(sp)
  813da8:	dec00a04 	addi	sp,sp,40
  813dac:	f800283a 	ret
  813db0:	080f19c0 	call	80f19c <__locale_charset>
  813db4:	100f883a 	mov	r7,r2
  813db8:	dc400015 	stw	r17,0(sp)
  813dbc:	000d883a 	mov	r6,zero
  813dc0:	d9400104 	addi	r5,sp,4
  813dc4:	8009883a 	mov	r4,r16
  813dc8:	903ee83a 	callr	r18
  813dcc:	003fed06 	br	813d84 <__alt_data_end+0xff813d84>

00813dd0 <wcrtomb>:
  813dd0:	defff604 	addi	sp,sp,-40
  813dd4:	008020b4 	movhi	r2,130
  813dd8:	dc800615 	stw	r18,24(sp)
  813ddc:	dc400515 	stw	r17,20(sp)
  813de0:	10b30204 	addi	r2,r2,-13304
  813de4:	dfc00915 	stw	ra,36(sp)
  813de8:	dd000815 	stw	r20,32(sp)
  813dec:	dcc00715 	stw	r19,28(sp)
  813df0:	dc000415 	stw	r16,16(sp)
  813df4:	3025883a 	mov	r18,r6
  813df8:	14400017 	ldw	r17,0(r2)
  813dfc:	20001926 	beq	r4,zero,813e64 <wcrtomb+0x94>
  813e00:	008020b4 	movhi	r2,130
  813e04:	10b30604 	addi	r2,r2,-13288
  813e08:	15000017 	ldw	r20,0(r2)
  813e0c:	2021883a 	mov	r16,r4
  813e10:	2827883a 	mov	r19,r5
  813e14:	080f19c0 	call	80f19c <__locale_charset>
  813e18:	100f883a 	mov	r7,r2
  813e1c:	dc800015 	stw	r18,0(sp)
  813e20:	980d883a 	mov	r6,r19
  813e24:	800b883a 	mov	r5,r16
  813e28:	8809883a 	mov	r4,r17
  813e2c:	a03ee83a 	callr	r20
  813e30:	00ffffc4 	movi	r3,-1
  813e34:	10c0031e 	bne	r2,r3,813e44 <wcrtomb+0x74>
  813e38:	90000015 	stw	zero,0(r18)
  813e3c:	00c02284 	movi	r3,138
  813e40:	88c00015 	stw	r3,0(r17)
  813e44:	dfc00917 	ldw	ra,36(sp)
  813e48:	dd000817 	ldw	r20,32(sp)
  813e4c:	dcc00717 	ldw	r19,28(sp)
  813e50:	dc800617 	ldw	r18,24(sp)
  813e54:	dc400517 	ldw	r17,20(sp)
  813e58:	dc000417 	ldw	r16,16(sp)
  813e5c:	dec00a04 	addi	sp,sp,40
  813e60:	f800283a 	ret
  813e64:	008020b4 	movhi	r2,130
  813e68:	10b30604 	addi	r2,r2,-13288
  813e6c:	14000017 	ldw	r16,0(r2)
  813e70:	080f19c0 	call	80f19c <__locale_charset>
  813e74:	100f883a 	mov	r7,r2
  813e78:	dc800015 	stw	r18,0(sp)
  813e7c:	000d883a 	mov	r6,zero
  813e80:	d9400104 	addi	r5,sp,4
  813e84:	8809883a 	mov	r4,r17
  813e88:	803ee83a 	callr	r16
  813e8c:	003fe806 	br	813e30 <__alt_data_end+0xff813e30>

00813e90 <__ascii_wctomb>:
  813e90:	28000526 	beq	r5,zero,813ea8 <__ascii_wctomb+0x18>
  813e94:	00803fc4 	movi	r2,255
  813e98:	11800536 	bltu	r2,r6,813eb0 <__ascii_wctomb+0x20>
  813e9c:	29800005 	stb	r6,0(r5)
  813ea0:	00800044 	movi	r2,1
  813ea4:	f800283a 	ret
  813ea8:	0005883a 	mov	r2,zero
  813eac:	f800283a 	ret
  813eb0:	00802284 	movi	r2,138
  813eb4:	20800015 	stw	r2,0(r4)
  813eb8:	00bfffc4 	movi	r2,-1
  813ebc:	f800283a 	ret

00813ec0 <_wctomb_r>:
  813ec0:	008020b4 	movhi	r2,130
  813ec4:	defff904 	addi	sp,sp,-28
  813ec8:	10b30604 	addi	r2,r2,-13288
  813ecc:	dfc00615 	stw	ra,24(sp)
  813ed0:	dc400515 	stw	r17,20(sp)
  813ed4:	dc000415 	stw	r16,16(sp)
  813ed8:	3823883a 	mov	r17,r7
  813edc:	14000017 	ldw	r16,0(r2)
  813ee0:	d9000115 	stw	r4,4(sp)
  813ee4:	d9400215 	stw	r5,8(sp)
  813ee8:	d9800315 	stw	r6,12(sp)
  813eec:	080f19c0 	call	80f19c <__locale_charset>
  813ef0:	d9800317 	ldw	r6,12(sp)
  813ef4:	d9400217 	ldw	r5,8(sp)
  813ef8:	d9000117 	ldw	r4,4(sp)
  813efc:	100f883a 	mov	r7,r2
  813f00:	dc400015 	stw	r17,0(sp)
  813f04:	803ee83a 	callr	r16
  813f08:	dfc00617 	ldw	ra,24(sp)
  813f0c:	dc400517 	ldw	r17,20(sp)
  813f10:	dc000417 	ldw	r16,16(sp)
  813f14:	dec00704 	addi	sp,sp,28
  813f18:	f800283a 	ret

00813f1c <__udivdi3>:
  813f1c:	defff504 	addi	sp,sp,-44
  813f20:	dcc00415 	stw	r19,16(sp)
  813f24:	dc000115 	stw	r16,4(sp)
  813f28:	dfc00a15 	stw	ra,40(sp)
  813f2c:	df000915 	stw	fp,36(sp)
  813f30:	ddc00815 	stw	r23,32(sp)
  813f34:	dd800715 	stw	r22,28(sp)
  813f38:	dd400615 	stw	r21,24(sp)
  813f3c:	dd000515 	stw	r20,20(sp)
  813f40:	dc800315 	stw	r18,12(sp)
  813f44:	dc400215 	stw	r17,8(sp)
  813f48:	2027883a 	mov	r19,r4
  813f4c:	2821883a 	mov	r16,r5
  813f50:	3800411e 	bne	r7,zero,814058 <__udivdi3+0x13c>
  813f54:	3023883a 	mov	r17,r6
  813f58:	2025883a 	mov	r18,r4
  813f5c:	2980522e 	bgeu	r5,r6,8140a8 <__udivdi3+0x18c>
  813f60:	00bfffd4 	movui	r2,65535
  813f64:	282d883a 	mov	r22,r5
  813f68:	1180a836 	bltu	r2,r6,81420c <__udivdi3+0x2f0>
  813f6c:	00803fc4 	movi	r2,255
  813f70:	1185803a 	cmpltu	r2,r2,r6
  813f74:	100490fa 	slli	r2,r2,3
  813f78:	3086d83a 	srl	r3,r6,r2
  813f7c:	010020b4 	movhi	r4,130
  813f80:	212ed204 	addi	r4,r4,-17592
  813f84:	20c7883a 	add	r3,r4,r3
  813f88:	18c00003 	ldbu	r3,0(r3)
  813f8c:	1885883a 	add	r2,r3,r2
  813f90:	00c00804 	movi	r3,32
  813f94:	1887c83a 	sub	r3,r3,r2
  813f98:	18000526 	beq	r3,zero,813fb0 <__udivdi3+0x94>
  813f9c:	80e0983a 	sll	r16,r16,r3
  813fa0:	9884d83a 	srl	r2,r19,r2
  813fa4:	30e2983a 	sll	r17,r6,r3
  813fa8:	98e4983a 	sll	r18,r19,r3
  813fac:	142cb03a 	or	r22,r2,r16
  813fb0:	882ad43a 	srli	r21,r17,16
  813fb4:	b009883a 	mov	r4,r22
  813fb8:	8d3fffcc 	andi	r20,r17,65535
  813fbc:	a80b883a 	mov	r5,r21
  813fc0:	080a3bc0 	call	80a3bc <__umodsi3>
  813fc4:	b009883a 	mov	r4,r22
  813fc8:	a80b883a 	mov	r5,r21
  813fcc:	1027883a 	mov	r19,r2
  813fd0:	080a3580 	call	80a358 <__udivsi3>
  813fd4:	102d883a 	mov	r22,r2
  813fd8:	9826943a 	slli	r19,r19,16
  813fdc:	9004d43a 	srli	r2,r18,16
  813fe0:	a5a1383a 	mul	r16,r20,r22
  813fe4:	14c4b03a 	or	r2,r2,r19
  813fe8:	1400052e 	bgeu	r2,r16,814000 <__udivdi3+0xe4>
  813fec:	1445883a 	add	r2,r2,r17
  813ff0:	b0ffffc4 	addi	r3,r22,-1
  813ff4:	14400136 	bltu	r2,r17,813ffc <__udivdi3+0xe0>
  813ff8:	14012336 	bltu	r2,r16,814488 <__udivdi3+0x56c>
  813ffc:	182d883a 	mov	r22,r3
  814000:	1421c83a 	sub	r16,r2,r16
  814004:	a80b883a 	mov	r5,r21
  814008:	8009883a 	mov	r4,r16
  81400c:	080a3bc0 	call	80a3bc <__umodsi3>
  814010:	1027883a 	mov	r19,r2
  814014:	a80b883a 	mov	r5,r21
  814018:	8009883a 	mov	r4,r16
  81401c:	080a3580 	call	80a358 <__udivsi3>
  814020:	9826943a 	slli	r19,r19,16
  814024:	a0a9383a 	mul	r20,r20,r2
  814028:	94bfffcc 	andi	r18,r18,65535
  81402c:	94e4b03a 	or	r18,r18,r19
  814030:	9500052e 	bgeu	r18,r20,814048 <__udivdi3+0x12c>
  814034:	8ca5883a 	add	r18,r17,r18
  814038:	10ffffc4 	addi	r3,r2,-1
  81403c:	9440f136 	bltu	r18,r17,814404 <__udivdi3+0x4e8>
  814040:	9500f02e 	bgeu	r18,r20,814404 <__udivdi3+0x4e8>
  814044:	10bfff84 	addi	r2,r2,-2
  814048:	b00c943a 	slli	r6,r22,16
  81404c:	0007883a 	mov	r3,zero
  814050:	3084b03a 	or	r2,r6,r2
  814054:	00005906 	br	8141bc <__udivdi3+0x2a0>
  814058:	29c05636 	bltu	r5,r7,8141b4 <__udivdi3+0x298>
  81405c:	00bfffd4 	movui	r2,65535
  814060:	11c0622e 	bgeu	r2,r7,8141ec <__udivdi3+0x2d0>
  814064:	00804034 	movhi	r2,256
  814068:	10bfffc4 	addi	r2,r2,-1
  81406c:	11c0ee36 	bltu	r2,r7,814428 <__udivdi3+0x50c>
  814070:	00800404 	movi	r2,16
  814074:	3886d83a 	srl	r3,r7,r2
  814078:	010020b4 	movhi	r4,130
  81407c:	212ed204 	addi	r4,r4,-17592
  814080:	20c7883a 	add	r3,r4,r3
  814084:	18c00003 	ldbu	r3,0(r3)
  814088:	05400804 	movi	r21,32
  81408c:	1885883a 	add	r2,r3,r2
  814090:	a8abc83a 	sub	r21,r21,r2
  814094:	a800621e 	bne	r21,zero,814220 <__udivdi3+0x304>
  814098:	3c00e936 	bltu	r7,r16,814440 <__udivdi3+0x524>
  81409c:	9985403a 	cmpgeu	r2,r19,r6
  8140a0:	0007883a 	mov	r3,zero
  8140a4:	00004506 	br	8141bc <__udivdi3+0x2a0>
  8140a8:	3000041e 	bne	r6,zero,8140bc <__udivdi3+0x1a0>
  8140ac:	000b883a 	mov	r5,zero
  8140b0:	01000044 	movi	r4,1
  8140b4:	080a3580 	call	80a358 <__udivsi3>
  8140b8:	1023883a 	mov	r17,r2
  8140bc:	00bfffd4 	movui	r2,65535
  8140c0:	14404e2e 	bgeu	r2,r17,8141fc <__udivdi3+0x2e0>
  8140c4:	00804034 	movhi	r2,256
  8140c8:	10bfffc4 	addi	r2,r2,-1
  8140cc:	1440d836 	bltu	r2,r17,814430 <__udivdi3+0x514>
  8140d0:	00800404 	movi	r2,16
  8140d4:	8886d83a 	srl	r3,r17,r2
  8140d8:	010020b4 	movhi	r4,130
  8140dc:	212ed204 	addi	r4,r4,-17592
  8140e0:	20c7883a 	add	r3,r4,r3
  8140e4:	18c00003 	ldbu	r3,0(r3)
  8140e8:	1885883a 	add	r2,r3,r2
  8140ec:	00c00804 	movi	r3,32
  8140f0:	1887c83a 	sub	r3,r3,r2
  8140f4:	18008f1e 	bne	r3,zero,814334 <__udivdi3+0x418>
  8140f8:	882ad43a 	srli	r21,r17,16
  8140fc:	8461c83a 	sub	r16,r16,r17
  814100:	8d3fffcc 	andi	r20,r17,65535
  814104:	00c00044 	movi	r3,1
  814108:	8009883a 	mov	r4,r16
  81410c:	a80b883a 	mov	r5,r21
  814110:	d8c00015 	stw	r3,0(sp)
  814114:	080a3bc0 	call	80a3bc <__umodsi3>
  814118:	8009883a 	mov	r4,r16
  81411c:	a80b883a 	mov	r5,r21
  814120:	1027883a 	mov	r19,r2
  814124:	080a3580 	call	80a358 <__udivsi3>
  814128:	9826943a 	slli	r19,r19,16
  81412c:	9008d43a 	srli	r4,r18,16
  814130:	1521383a 	mul	r16,r2,r20
  814134:	102d883a 	mov	r22,r2
  814138:	24c8b03a 	or	r4,r4,r19
  81413c:	d8c00017 	ldw	r3,0(sp)
  814140:	2400052e 	bgeu	r4,r16,814158 <__udivdi3+0x23c>
  814144:	2449883a 	add	r4,r4,r17
  814148:	b0bfffc4 	addi	r2,r22,-1
  81414c:	24400136 	bltu	r4,r17,814154 <__udivdi3+0x238>
  814150:	2400ca36 	bltu	r4,r16,81447c <__udivdi3+0x560>
  814154:	102d883a 	mov	r22,r2
  814158:	2421c83a 	sub	r16,r4,r16
  81415c:	a80b883a 	mov	r5,r21
  814160:	8009883a 	mov	r4,r16
  814164:	d8c00015 	stw	r3,0(sp)
  814168:	080a3bc0 	call	80a3bc <__umodsi3>
  81416c:	1027883a 	mov	r19,r2
  814170:	a80b883a 	mov	r5,r21
  814174:	8009883a 	mov	r4,r16
  814178:	080a3580 	call	80a358 <__udivsi3>
  81417c:	9826943a 	slli	r19,r19,16
  814180:	1529383a 	mul	r20,r2,r20
  814184:	94bfffcc 	andi	r18,r18,65535
  814188:	94e4b03a 	or	r18,r18,r19
  81418c:	d8c00017 	ldw	r3,0(sp)
  814190:	9500052e 	bgeu	r18,r20,8141a8 <__udivdi3+0x28c>
  814194:	8ca5883a 	add	r18,r17,r18
  814198:	113fffc4 	addi	r4,r2,-1
  81419c:	94409736 	bltu	r18,r17,8143fc <__udivdi3+0x4e0>
  8141a0:	9500962e 	bgeu	r18,r20,8143fc <__udivdi3+0x4e0>
  8141a4:	10bfff84 	addi	r2,r2,-2
  8141a8:	b00c943a 	slli	r6,r22,16
  8141ac:	3084b03a 	or	r2,r6,r2
  8141b0:	00000206 	br	8141bc <__udivdi3+0x2a0>
  8141b4:	0007883a 	mov	r3,zero
  8141b8:	0005883a 	mov	r2,zero
  8141bc:	dfc00a17 	ldw	ra,40(sp)
  8141c0:	df000917 	ldw	fp,36(sp)
  8141c4:	ddc00817 	ldw	r23,32(sp)
  8141c8:	dd800717 	ldw	r22,28(sp)
  8141cc:	dd400617 	ldw	r21,24(sp)
  8141d0:	dd000517 	ldw	r20,20(sp)
  8141d4:	dcc00417 	ldw	r19,16(sp)
  8141d8:	dc800317 	ldw	r18,12(sp)
  8141dc:	dc400217 	ldw	r17,8(sp)
  8141e0:	dc000117 	ldw	r16,4(sp)
  8141e4:	dec00b04 	addi	sp,sp,44
  8141e8:	f800283a 	ret
  8141ec:	00803fc4 	movi	r2,255
  8141f0:	11c5803a 	cmpltu	r2,r2,r7
  8141f4:	100490fa 	slli	r2,r2,3
  8141f8:	003f9e06 	br	814074 <__alt_data_end+0xff814074>
  8141fc:	00803fc4 	movi	r2,255
  814200:	1445803a 	cmpltu	r2,r2,r17
  814204:	100490fa 	slli	r2,r2,3
  814208:	003fb206 	br	8140d4 <__alt_data_end+0xff8140d4>
  81420c:	00804034 	movhi	r2,256
  814210:	10bfffc4 	addi	r2,r2,-1
  814214:	11808836 	bltu	r2,r6,814438 <__udivdi3+0x51c>
  814218:	00800404 	movi	r2,16
  81421c:	003f5606 	br	813f78 <__alt_data_end+0xff813f78>
  814220:	30aed83a 	srl	r23,r6,r2
  814224:	3d4e983a 	sll	r7,r7,r21
  814228:	80acd83a 	srl	r22,r16,r2
  81422c:	9884d83a 	srl	r2,r19,r2
  814230:	3deeb03a 	or	r23,r7,r23
  814234:	b824d43a 	srli	r18,r23,16
  814238:	8560983a 	sll	r16,r16,r21
  81423c:	b009883a 	mov	r4,r22
  814240:	900b883a 	mov	r5,r18
  814244:	3568983a 	sll	r20,r6,r21
  814248:	1420b03a 	or	r16,r2,r16
  81424c:	080a3bc0 	call	80a3bc <__umodsi3>
  814250:	b009883a 	mov	r4,r22
  814254:	900b883a 	mov	r5,r18
  814258:	1023883a 	mov	r17,r2
  81425c:	080a3580 	call	80a358 <__udivsi3>
  814260:	8808943a 	slli	r4,r17,16
  814264:	bf3fffcc 	andi	fp,r23,65535
  814268:	8006d43a 	srli	r3,r16,16
  81426c:	e0a3383a 	mul	r17,fp,r2
  814270:	100d883a 	mov	r6,r2
  814274:	1906b03a 	or	r3,r3,r4
  814278:	1c40042e 	bgeu	r3,r17,81428c <__udivdi3+0x370>
  81427c:	1dc7883a 	add	r3,r3,r23
  814280:	10bfffc4 	addi	r2,r2,-1
  814284:	1dc0752e 	bgeu	r3,r23,81445c <__udivdi3+0x540>
  814288:	100d883a 	mov	r6,r2
  81428c:	1c63c83a 	sub	r17,r3,r17
  814290:	900b883a 	mov	r5,r18
  814294:	8809883a 	mov	r4,r17
  814298:	d9800015 	stw	r6,0(sp)
  81429c:	080a3bc0 	call	80a3bc <__umodsi3>
  8142a0:	102d883a 	mov	r22,r2
  8142a4:	8809883a 	mov	r4,r17
  8142a8:	900b883a 	mov	r5,r18
  8142ac:	080a3580 	call	80a358 <__udivsi3>
  8142b0:	b02c943a 	slli	r22,r22,16
  8142b4:	e089383a 	mul	r4,fp,r2
  8142b8:	843fffcc 	andi	r16,r16,65535
  8142bc:	85a0b03a 	or	r16,r16,r22
  8142c0:	d9800017 	ldw	r6,0(sp)
  8142c4:	8100042e 	bgeu	r16,r4,8142d8 <__udivdi3+0x3bc>
  8142c8:	85e1883a 	add	r16,r16,r23
  8142cc:	10ffffc4 	addi	r3,r2,-1
  8142d0:	85c05e2e 	bgeu	r16,r23,81444c <__udivdi3+0x530>
  8142d4:	1805883a 	mov	r2,r3
  8142d8:	300c943a 	slli	r6,r6,16
  8142dc:	a17fffcc 	andi	r5,r20,65535
  8142e0:	a028d43a 	srli	r20,r20,16
  8142e4:	3084b03a 	or	r2,r6,r2
  8142e8:	10ffffcc 	andi	r3,r2,65535
  8142ec:	100cd43a 	srli	r6,r2,16
  8142f0:	194f383a 	mul	r7,r3,r5
  8142f4:	1d07383a 	mul	r3,r3,r20
  8142f8:	314b383a 	mul	r5,r6,r5
  8142fc:	3810d43a 	srli	r8,r7,16
  814300:	8121c83a 	sub	r16,r16,r4
  814304:	1947883a 	add	r3,r3,r5
  814308:	40c7883a 	add	r3,r8,r3
  81430c:	350d383a 	mul	r6,r6,r20
  814310:	1940022e 	bgeu	r3,r5,81431c <__udivdi3+0x400>
  814314:	01000074 	movhi	r4,1
  814318:	310d883a 	add	r6,r6,r4
  81431c:	1828d43a 	srli	r20,r3,16
  814320:	a18d883a 	add	r6,r20,r6
  814324:	81803e36 	bltu	r16,r6,814420 <__udivdi3+0x504>
  814328:	81803826 	beq	r16,r6,81440c <__udivdi3+0x4f0>
  81432c:	0007883a 	mov	r3,zero
  814330:	003fa206 	br	8141bc <__alt_data_end+0xff8141bc>
  814334:	88e2983a 	sll	r17,r17,r3
  814338:	80a8d83a 	srl	r20,r16,r2
  81433c:	80e0983a 	sll	r16,r16,r3
  814340:	882ad43a 	srli	r21,r17,16
  814344:	9884d83a 	srl	r2,r19,r2
  814348:	a009883a 	mov	r4,r20
  81434c:	a80b883a 	mov	r5,r21
  814350:	142eb03a 	or	r23,r2,r16
  814354:	98e4983a 	sll	r18,r19,r3
  814358:	080a3bc0 	call	80a3bc <__umodsi3>
  81435c:	a009883a 	mov	r4,r20
  814360:	a80b883a 	mov	r5,r21
  814364:	1021883a 	mov	r16,r2
  814368:	080a3580 	call	80a358 <__udivsi3>
  81436c:	1039883a 	mov	fp,r2
  814370:	8d3fffcc 	andi	r20,r17,65535
  814374:	8020943a 	slli	r16,r16,16
  814378:	b804d43a 	srli	r2,r23,16
  81437c:	a72d383a 	mul	r22,r20,fp
  814380:	1404b03a 	or	r2,r2,r16
  814384:	1580062e 	bgeu	r2,r22,8143a0 <__udivdi3+0x484>
  814388:	1445883a 	add	r2,r2,r17
  81438c:	e0ffffc4 	addi	r3,fp,-1
  814390:	14403836 	bltu	r2,r17,814474 <__udivdi3+0x558>
  814394:	1580372e 	bgeu	r2,r22,814474 <__udivdi3+0x558>
  814398:	e73fff84 	addi	fp,fp,-2
  81439c:	1445883a 	add	r2,r2,r17
  8143a0:	15adc83a 	sub	r22,r2,r22
  8143a4:	a80b883a 	mov	r5,r21
  8143a8:	b009883a 	mov	r4,r22
  8143ac:	080a3bc0 	call	80a3bc <__umodsi3>
  8143b0:	1027883a 	mov	r19,r2
  8143b4:	b009883a 	mov	r4,r22
  8143b8:	a80b883a 	mov	r5,r21
  8143bc:	080a3580 	call	80a358 <__udivsi3>
  8143c0:	9826943a 	slli	r19,r19,16
  8143c4:	a0a1383a 	mul	r16,r20,r2
  8143c8:	b93fffcc 	andi	r4,r23,65535
  8143cc:	24c8b03a 	or	r4,r4,r19
  8143d0:	2400062e 	bgeu	r4,r16,8143ec <__udivdi3+0x4d0>
  8143d4:	2449883a 	add	r4,r4,r17
  8143d8:	10ffffc4 	addi	r3,r2,-1
  8143dc:	24402336 	bltu	r4,r17,81446c <__udivdi3+0x550>
  8143e0:	2400222e 	bgeu	r4,r16,81446c <__udivdi3+0x550>
  8143e4:	10bfff84 	addi	r2,r2,-2
  8143e8:	2449883a 	add	r4,r4,r17
  8143ec:	e038943a 	slli	fp,fp,16
  8143f0:	2421c83a 	sub	r16,r4,r16
  8143f4:	e086b03a 	or	r3,fp,r2
  8143f8:	003f4306 	br	814108 <__alt_data_end+0xff814108>
  8143fc:	2005883a 	mov	r2,r4
  814400:	003f6906 	br	8141a8 <__alt_data_end+0xff8141a8>
  814404:	1805883a 	mov	r2,r3
  814408:	003f0f06 	br	814048 <__alt_data_end+0xff814048>
  81440c:	1806943a 	slli	r3,r3,16
  814410:	9d66983a 	sll	r19,r19,r21
  814414:	39ffffcc 	andi	r7,r7,65535
  814418:	19c7883a 	add	r3,r3,r7
  81441c:	98ffc32e 	bgeu	r19,r3,81432c <__alt_data_end+0xff81432c>
  814420:	10bfffc4 	addi	r2,r2,-1
  814424:	003fc106 	br	81432c <__alt_data_end+0xff81432c>
  814428:	00800604 	movi	r2,24
  81442c:	003f1106 	br	814074 <__alt_data_end+0xff814074>
  814430:	00800604 	movi	r2,24
  814434:	003f2706 	br	8140d4 <__alt_data_end+0xff8140d4>
  814438:	00800604 	movi	r2,24
  81443c:	003ece06 	br	813f78 <__alt_data_end+0xff813f78>
  814440:	0007883a 	mov	r3,zero
  814444:	00800044 	movi	r2,1
  814448:	003f5c06 	br	8141bc <__alt_data_end+0xff8141bc>
  81444c:	813fa12e 	bgeu	r16,r4,8142d4 <__alt_data_end+0xff8142d4>
  814450:	10bfff84 	addi	r2,r2,-2
  814454:	85e1883a 	add	r16,r16,r23
  814458:	003f9f06 	br	8142d8 <__alt_data_end+0xff8142d8>
  81445c:	1c7f8a2e 	bgeu	r3,r17,814288 <__alt_data_end+0xff814288>
  814460:	31bfff84 	addi	r6,r6,-2
  814464:	1dc7883a 	add	r3,r3,r23
  814468:	003f8806 	br	81428c <__alt_data_end+0xff81428c>
  81446c:	1805883a 	mov	r2,r3
  814470:	003fde06 	br	8143ec <__alt_data_end+0xff8143ec>
  814474:	1839883a 	mov	fp,r3
  814478:	003fc906 	br	8143a0 <__alt_data_end+0xff8143a0>
  81447c:	b5bfff84 	addi	r22,r22,-2
  814480:	2449883a 	add	r4,r4,r17
  814484:	003f3406 	br	814158 <__alt_data_end+0xff814158>
  814488:	b5bfff84 	addi	r22,r22,-2
  81448c:	1445883a 	add	r2,r2,r17
  814490:	003edb06 	br	814000 <__alt_data_end+0xff814000>

00814494 <__umoddi3>:
  814494:	defff404 	addi	sp,sp,-48
  814498:	df000a15 	stw	fp,40(sp)
  81449c:	dc400315 	stw	r17,12(sp)
  8144a0:	dc000215 	stw	r16,8(sp)
  8144a4:	dfc00b15 	stw	ra,44(sp)
  8144a8:	ddc00915 	stw	r23,36(sp)
  8144ac:	dd800815 	stw	r22,32(sp)
  8144b0:	dd400715 	stw	r21,28(sp)
  8144b4:	dd000615 	stw	r20,24(sp)
  8144b8:	dcc00515 	stw	r19,20(sp)
  8144bc:	dc800415 	stw	r18,16(sp)
  8144c0:	2021883a 	mov	r16,r4
  8144c4:	2823883a 	mov	r17,r5
  8144c8:	2839883a 	mov	fp,r5
  8144cc:	38003c1e 	bne	r7,zero,8145c0 <__umoddi3+0x12c>
  8144d0:	3027883a 	mov	r19,r6
  8144d4:	2029883a 	mov	r20,r4
  8144d8:	2980512e 	bgeu	r5,r6,814620 <__umoddi3+0x18c>
  8144dc:	00bfffd4 	movui	r2,65535
  8144e0:	11809a36 	bltu	r2,r6,81474c <__umoddi3+0x2b8>
  8144e4:	01003fc4 	movi	r4,255
  8144e8:	2189803a 	cmpltu	r4,r4,r6
  8144ec:	200890fa 	slli	r4,r4,3
  8144f0:	3104d83a 	srl	r2,r6,r4
  8144f4:	00c020b4 	movhi	r3,130
  8144f8:	18eed204 	addi	r3,r3,-17592
  8144fc:	1885883a 	add	r2,r3,r2
  814500:	10c00003 	ldbu	r3,0(r2)
  814504:	00800804 	movi	r2,32
  814508:	1909883a 	add	r4,r3,r4
  81450c:	1125c83a 	sub	r18,r2,r4
  814510:	90000526 	beq	r18,zero,814528 <__umoddi3+0x94>
  814514:	8ca2983a 	sll	r17,r17,r18
  814518:	8108d83a 	srl	r4,r16,r4
  81451c:	34a6983a 	sll	r19,r6,r18
  814520:	84a8983a 	sll	r20,r16,r18
  814524:	2478b03a 	or	fp,r4,r17
  814528:	982ed43a 	srli	r23,r19,16
  81452c:	e009883a 	mov	r4,fp
  814530:	9dbfffcc 	andi	r22,r19,65535
  814534:	b80b883a 	mov	r5,r23
  814538:	080a3bc0 	call	80a3bc <__umodsi3>
  81453c:	e009883a 	mov	r4,fp
  814540:	b80b883a 	mov	r5,r23
  814544:	102b883a 	mov	r21,r2
  814548:	080a3580 	call	80a358 <__udivsi3>
  81454c:	a806943a 	slli	r3,r21,16
  814550:	a008d43a 	srli	r4,r20,16
  814554:	b085383a 	mul	r2,r22,r2
  814558:	20c8b03a 	or	r4,r4,r3
  81455c:	2080032e 	bgeu	r4,r2,81456c <__umoddi3+0xd8>
  814560:	24c9883a 	add	r4,r4,r19
  814564:	24c00136 	bltu	r4,r19,81456c <__umoddi3+0xd8>
  814568:	20811036 	bltu	r4,r2,8149ac <__umoddi3+0x518>
  81456c:	20abc83a 	sub	r21,r4,r2
  814570:	b80b883a 	mov	r5,r23
  814574:	a809883a 	mov	r4,r21
  814578:	080a3bc0 	call	80a3bc <__umodsi3>
  81457c:	1023883a 	mov	r17,r2
  814580:	b80b883a 	mov	r5,r23
  814584:	a809883a 	mov	r4,r21
  814588:	080a3580 	call	80a358 <__udivsi3>
  81458c:	8822943a 	slli	r17,r17,16
  814590:	b085383a 	mul	r2,r22,r2
  814594:	a0ffffcc 	andi	r3,r20,65535
  814598:	1c46b03a 	or	r3,r3,r17
  81459c:	1880042e 	bgeu	r3,r2,8145b0 <__umoddi3+0x11c>
  8145a0:	1cc7883a 	add	r3,r3,r19
  8145a4:	1cc00236 	bltu	r3,r19,8145b0 <__umoddi3+0x11c>
  8145a8:	1880012e 	bgeu	r3,r2,8145b0 <__umoddi3+0x11c>
  8145ac:	1cc7883a 	add	r3,r3,r19
  8145b0:	1885c83a 	sub	r2,r3,r2
  8145b4:	1484d83a 	srl	r2,r2,r18
  8145b8:	0007883a 	mov	r3,zero
  8145bc:	00004f06 	br	8146fc <__umoddi3+0x268>
  8145c0:	29c04c36 	bltu	r5,r7,8146f4 <__umoddi3+0x260>
  8145c4:	00bfffd4 	movui	r2,65535
  8145c8:	11c0582e 	bgeu	r2,r7,81472c <__umoddi3+0x298>
  8145cc:	00804034 	movhi	r2,256
  8145d0:	10bfffc4 	addi	r2,r2,-1
  8145d4:	11c0e736 	bltu	r2,r7,814974 <__umoddi3+0x4e0>
  8145d8:	01000404 	movi	r4,16
  8145dc:	3904d83a 	srl	r2,r7,r4
  8145e0:	00c020b4 	movhi	r3,130
  8145e4:	18eed204 	addi	r3,r3,-17592
  8145e8:	1885883a 	add	r2,r3,r2
  8145ec:	14c00003 	ldbu	r19,0(r2)
  8145f0:	00c00804 	movi	r3,32
  8145f4:	9927883a 	add	r19,r19,r4
  8145f8:	1ce9c83a 	sub	r20,r3,r19
  8145fc:	a000581e 	bne	r20,zero,814760 <__umoddi3+0x2cc>
  814600:	3c400136 	bltu	r7,r17,814608 <__umoddi3+0x174>
  814604:	8180eb36 	bltu	r16,r6,8149b4 <__umoddi3+0x520>
  814608:	8185c83a 	sub	r2,r16,r6
  81460c:	89e3c83a 	sub	r17,r17,r7
  814610:	8089803a 	cmpltu	r4,r16,r2
  814614:	8939c83a 	sub	fp,r17,r4
  814618:	e007883a 	mov	r3,fp
  81461c:	00003706 	br	8146fc <__umoddi3+0x268>
  814620:	3000041e 	bne	r6,zero,814634 <__umoddi3+0x1a0>
  814624:	000b883a 	mov	r5,zero
  814628:	01000044 	movi	r4,1
  81462c:	080a3580 	call	80a358 <__udivsi3>
  814630:	1027883a 	mov	r19,r2
  814634:	00bfffd4 	movui	r2,65535
  814638:	14c0402e 	bgeu	r2,r19,81473c <__umoddi3+0x2a8>
  81463c:	00804034 	movhi	r2,256
  814640:	10bfffc4 	addi	r2,r2,-1
  814644:	14c0cd36 	bltu	r2,r19,81497c <__umoddi3+0x4e8>
  814648:	00800404 	movi	r2,16
  81464c:	9886d83a 	srl	r3,r19,r2
  814650:	010020b4 	movhi	r4,130
  814654:	212ed204 	addi	r4,r4,-17592
  814658:	20c7883a 	add	r3,r4,r3
  81465c:	18c00003 	ldbu	r3,0(r3)
  814660:	1887883a 	add	r3,r3,r2
  814664:	00800804 	movi	r2,32
  814668:	10e5c83a 	sub	r18,r2,r3
  81466c:	9000901e 	bne	r18,zero,8148b0 <__umoddi3+0x41c>
  814670:	982cd43a 	srli	r22,r19,16
  814674:	8ce3c83a 	sub	r17,r17,r19
  814678:	9d7fffcc 	andi	r21,r19,65535
  81467c:	b00b883a 	mov	r5,r22
  814680:	8809883a 	mov	r4,r17
  814684:	080a3bc0 	call	80a3bc <__umodsi3>
  814688:	8809883a 	mov	r4,r17
  81468c:	b00b883a 	mov	r5,r22
  814690:	1021883a 	mov	r16,r2
  814694:	080a3580 	call	80a358 <__udivsi3>
  814698:	8006943a 	slli	r3,r16,16
  81469c:	a008d43a 	srli	r4,r20,16
  8146a0:	1545383a 	mul	r2,r2,r21
  8146a4:	20c8b03a 	or	r4,r4,r3
  8146a8:	2080042e 	bgeu	r4,r2,8146bc <__umoddi3+0x228>
  8146ac:	24c9883a 	add	r4,r4,r19
  8146b0:	24c00236 	bltu	r4,r19,8146bc <__umoddi3+0x228>
  8146b4:	2080012e 	bgeu	r4,r2,8146bc <__umoddi3+0x228>
  8146b8:	24c9883a 	add	r4,r4,r19
  8146bc:	20a1c83a 	sub	r16,r4,r2
  8146c0:	b00b883a 	mov	r5,r22
  8146c4:	8009883a 	mov	r4,r16
  8146c8:	080a3bc0 	call	80a3bc <__umodsi3>
  8146cc:	1023883a 	mov	r17,r2
  8146d0:	b00b883a 	mov	r5,r22
  8146d4:	8009883a 	mov	r4,r16
  8146d8:	080a3580 	call	80a358 <__udivsi3>
  8146dc:	8822943a 	slli	r17,r17,16
  8146e0:	1545383a 	mul	r2,r2,r21
  8146e4:	a53fffcc 	andi	r20,r20,65535
  8146e8:	a446b03a 	or	r3,r20,r17
  8146ec:	18bfb02e 	bgeu	r3,r2,8145b0 <__alt_data_end+0xff8145b0>
  8146f0:	003fab06 	br	8145a0 <__alt_data_end+0xff8145a0>
  8146f4:	2005883a 	mov	r2,r4
  8146f8:	2807883a 	mov	r3,r5
  8146fc:	dfc00b17 	ldw	ra,44(sp)
  814700:	df000a17 	ldw	fp,40(sp)
  814704:	ddc00917 	ldw	r23,36(sp)
  814708:	dd800817 	ldw	r22,32(sp)
  81470c:	dd400717 	ldw	r21,28(sp)
  814710:	dd000617 	ldw	r20,24(sp)
  814714:	dcc00517 	ldw	r19,20(sp)
  814718:	dc800417 	ldw	r18,16(sp)
  81471c:	dc400317 	ldw	r17,12(sp)
  814720:	dc000217 	ldw	r16,8(sp)
  814724:	dec00c04 	addi	sp,sp,48
  814728:	f800283a 	ret
  81472c:	04c03fc4 	movi	r19,255
  814730:	99c9803a 	cmpltu	r4,r19,r7
  814734:	200890fa 	slli	r4,r4,3
  814738:	003fa806 	br	8145dc <__alt_data_end+0xff8145dc>
  81473c:	00803fc4 	movi	r2,255
  814740:	14c5803a 	cmpltu	r2,r2,r19
  814744:	100490fa 	slli	r2,r2,3
  814748:	003fc006 	br	81464c <__alt_data_end+0xff81464c>
  81474c:	00804034 	movhi	r2,256
  814750:	10bfffc4 	addi	r2,r2,-1
  814754:	11808b36 	bltu	r2,r6,814984 <__umoddi3+0x4f0>
  814758:	01000404 	movi	r4,16
  81475c:	003f6406 	br	8144f0 <__alt_data_end+0xff8144f0>
  814760:	34c4d83a 	srl	r2,r6,r19
  814764:	3d0e983a 	sll	r7,r7,r20
  814768:	8cf8d83a 	srl	fp,r17,r19
  81476c:	8d10983a 	sll	r8,r17,r20
  814770:	38aab03a 	or	r21,r7,r2
  814774:	a82cd43a 	srli	r22,r21,16
  814778:	84e2d83a 	srl	r17,r16,r19
  81477c:	e009883a 	mov	r4,fp
  814780:	b00b883a 	mov	r5,r22
  814784:	8a22b03a 	or	r17,r17,r8
  814788:	3524983a 	sll	r18,r6,r20
  81478c:	080a3bc0 	call	80a3bc <__umodsi3>
  814790:	e009883a 	mov	r4,fp
  814794:	b00b883a 	mov	r5,r22
  814798:	102f883a 	mov	r23,r2
  81479c:	080a3580 	call	80a358 <__udivsi3>
  8147a0:	100d883a 	mov	r6,r2
  8147a4:	b808943a 	slli	r4,r23,16
  8147a8:	aa3fffcc 	andi	r8,r21,65535
  8147ac:	8804d43a 	srli	r2,r17,16
  8147b0:	41af383a 	mul	r23,r8,r6
  8147b4:	8520983a 	sll	r16,r16,r20
  8147b8:	1104b03a 	or	r2,r2,r4
  8147bc:	15c0042e 	bgeu	r2,r23,8147d0 <__umoddi3+0x33c>
  8147c0:	1545883a 	add	r2,r2,r21
  8147c4:	30ffffc4 	addi	r3,r6,-1
  8147c8:	1540742e 	bgeu	r2,r21,81499c <__umoddi3+0x508>
  8147cc:	180d883a 	mov	r6,r3
  8147d0:	15efc83a 	sub	r23,r2,r23
  8147d4:	b00b883a 	mov	r5,r22
  8147d8:	b809883a 	mov	r4,r23
  8147dc:	d9800115 	stw	r6,4(sp)
  8147e0:	da000015 	stw	r8,0(sp)
  8147e4:	080a3bc0 	call	80a3bc <__umodsi3>
  8147e8:	b00b883a 	mov	r5,r22
  8147ec:	b809883a 	mov	r4,r23
  8147f0:	1039883a 	mov	fp,r2
  8147f4:	080a3580 	call	80a358 <__udivsi3>
  8147f8:	da000017 	ldw	r8,0(sp)
  8147fc:	e038943a 	slli	fp,fp,16
  814800:	100b883a 	mov	r5,r2
  814804:	4089383a 	mul	r4,r8,r2
  814808:	8a3fffcc 	andi	r8,r17,65535
  81480c:	4710b03a 	or	r8,r8,fp
  814810:	d9800117 	ldw	r6,4(sp)
  814814:	4100042e 	bgeu	r8,r4,814828 <__umoddi3+0x394>
  814818:	4551883a 	add	r8,r8,r21
  81481c:	10bfffc4 	addi	r2,r2,-1
  814820:	45405a2e 	bgeu	r8,r21,81498c <__umoddi3+0x4f8>
  814824:	100b883a 	mov	r5,r2
  814828:	300c943a 	slli	r6,r6,16
  81482c:	91ffffcc 	andi	r7,r18,65535
  814830:	9004d43a 	srli	r2,r18,16
  814834:	314cb03a 	or	r6,r6,r5
  814838:	317fffcc 	andi	r5,r6,65535
  81483c:	300cd43a 	srli	r6,r6,16
  814840:	29d3383a 	mul	r9,r5,r7
  814844:	288b383a 	mul	r5,r5,r2
  814848:	31cf383a 	mul	r7,r6,r7
  81484c:	4806d43a 	srli	r3,r9,16
  814850:	4111c83a 	sub	r8,r8,r4
  814854:	29cb883a 	add	r5,r5,r7
  814858:	194b883a 	add	r5,r3,r5
  81485c:	3085383a 	mul	r2,r6,r2
  814860:	29c0022e 	bgeu	r5,r7,81486c <__umoddi3+0x3d8>
  814864:	00c00074 	movhi	r3,1
  814868:	10c5883a 	add	r2,r2,r3
  81486c:	2808d43a 	srli	r4,r5,16
  814870:	280a943a 	slli	r5,r5,16
  814874:	4a7fffcc 	andi	r9,r9,65535
  814878:	2085883a 	add	r2,r4,r2
  81487c:	2a4b883a 	add	r5,r5,r9
  814880:	40803636 	bltu	r8,r2,81495c <__umoddi3+0x4c8>
  814884:	40804d26 	beq	r8,r2,8149bc <__umoddi3+0x528>
  814888:	4089c83a 	sub	r4,r8,r2
  81488c:	280f883a 	mov	r7,r5
  814890:	81cfc83a 	sub	r7,r16,r7
  814894:	81c7803a 	cmpltu	r3,r16,r7
  814898:	20c7c83a 	sub	r3,r4,r3
  81489c:	1cc4983a 	sll	r2,r3,r19
  8148a0:	3d0ed83a 	srl	r7,r7,r20
  8148a4:	1d06d83a 	srl	r3,r3,r20
  8148a8:	11c4b03a 	or	r2,r2,r7
  8148ac:	003f9306 	br	8146fc <__alt_data_end+0xff8146fc>
  8148b0:	9ca6983a 	sll	r19,r19,r18
  8148b4:	88e8d83a 	srl	r20,r17,r3
  8148b8:	80c4d83a 	srl	r2,r16,r3
  8148bc:	982cd43a 	srli	r22,r19,16
  8148c0:	8ca2983a 	sll	r17,r17,r18
  8148c4:	a009883a 	mov	r4,r20
  8148c8:	b00b883a 	mov	r5,r22
  8148cc:	1478b03a 	or	fp,r2,r17
  8148d0:	080a3bc0 	call	80a3bc <__umodsi3>
  8148d4:	a009883a 	mov	r4,r20
  8148d8:	b00b883a 	mov	r5,r22
  8148dc:	1023883a 	mov	r17,r2
  8148e0:	080a3580 	call	80a358 <__udivsi3>
  8148e4:	9d7fffcc 	andi	r21,r19,65535
  8148e8:	880a943a 	slli	r5,r17,16
  8148ec:	e008d43a 	srli	r4,fp,16
  8148f0:	a885383a 	mul	r2,r21,r2
  8148f4:	84a8983a 	sll	r20,r16,r18
  8148f8:	2148b03a 	or	r4,r4,r5
  8148fc:	2080042e 	bgeu	r4,r2,814910 <__umoddi3+0x47c>
  814900:	24c9883a 	add	r4,r4,r19
  814904:	24c00236 	bltu	r4,r19,814910 <__umoddi3+0x47c>
  814908:	2080012e 	bgeu	r4,r2,814910 <__umoddi3+0x47c>
  81490c:	24c9883a 	add	r4,r4,r19
  814910:	20a3c83a 	sub	r17,r4,r2
  814914:	b00b883a 	mov	r5,r22
  814918:	8809883a 	mov	r4,r17
  81491c:	080a3bc0 	call	80a3bc <__umodsi3>
  814920:	102f883a 	mov	r23,r2
  814924:	8809883a 	mov	r4,r17
  814928:	b00b883a 	mov	r5,r22
  81492c:	080a3580 	call	80a358 <__udivsi3>
  814930:	b82e943a 	slli	r23,r23,16
  814934:	a885383a 	mul	r2,r21,r2
  814938:	e13fffcc 	andi	r4,fp,65535
  81493c:	25c8b03a 	or	r4,r4,r23
  814940:	2080042e 	bgeu	r4,r2,814954 <__umoddi3+0x4c0>
  814944:	24c9883a 	add	r4,r4,r19
  814948:	24c00236 	bltu	r4,r19,814954 <__umoddi3+0x4c0>
  81494c:	2080012e 	bgeu	r4,r2,814954 <__umoddi3+0x4c0>
  814950:	24c9883a 	add	r4,r4,r19
  814954:	20a3c83a 	sub	r17,r4,r2
  814958:	003f4806 	br	81467c <__alt_data_end+0xff81467c>
  81495c:	2c8fc83a 	sub	r7,r5,r18
  814960:	1545c83a 	sub	r2,r2,r21
  814964:	29cb803a 	cmpltu	r5,r5,r7
  814968:	1145c83a 	sub	r2,r2,r5
  81496c:	4089c83a 	sub	r4,r8,r2
  814970:	003fc706 	br	814890 <__alt_data_end+0xff814890>
  814974:	01000604 	movi	r4,24
  814978:	003f1806 	br	8145dc <__alt_data_end+0xff8145dc>
  81497c:	00800604 	movi	r2,24
  814980:	003f3206 	br	81464c <__alt_data_end+0xff81464c>
  814984:	01000604 	movi	r4,24
  814988:	003ed906 	br	8144f0 <__alt_data_end+0xff8144f0>
  81498c:	413fa52e 	bgeu	r8,r4,814824 <__alt_data_end+0xff814824>
  814990:	297fff84 	addi	r5,r5,-2
  814994:	4551883a 	add	r8,r8,r21
  814998:	003fa306 	br	814828 <__alt_data_end+0xff814828>
  81499c:	15ff8b2e 	bgeu	r2,r23,8147cc <__alt_data_end+0xff8147cc>
  8149a0:	31bfff84 	addi	r6,r6,-2
  8149a4:	1545883a 	add	r2,r2,r21
  8149a8:	003f8906 	br	8147d0 <__alt_data_end+0xff8147d0>
  8149ac:	24c9883a 	add	r4,r4,r19
  8149b0:	003eee06 	br	81456c <__alt_data_end+0xff81456c>
  8149b4:	8005883a 	mov	r2,r16
  8149b8:	003f1706 	br	814618 <__alt_data_end+0xff814618>
  8149bc:	817fe736 	bltu	r16,r5,81495c <__alt_data_end+0xff81495c>
  8149c0:	280f883a 	mov	r7,r5
  8149c4:	0009883a 	mov	r4,zero
  8149c8:	003fb106 	br	814890 <__alt_data_end+0xff814890>

008149cc <__adddf3>:
  8149cc:	02c00434 	movhi	r11,16
  8149d0:	5affffc4 	addi	r11,r11,-1
  8149d4:	2806d7fa 	srli	r3,r5,31
  8149d8:	2ad4703a 	and	r10,r5,r11
  8149dc:	3ad2703a 	and	r9,r7,r11
  8149e0:	3804d53a 	srli	r2,r7,20
  8149e4:	3018d77a 	srli	r12,r6,29
  8149e8:	280ad53a 	srli	r5,r5,20
  8149ec:	501490fa 	slli	r10,r10,3
  8149f0:	2010d77a 	srli	r8,r4,29
  8149f4:	481290fa 	slli	r9,r9,3
  8149f8:	380ed7fa 	srli	r7,r7,31
  8149fc:	defffb04 	addi	sp,sp,-20
  814a00:	dc800215 	stw	r18,8(sp)
  814a04:	dc400115 	stw	r17,4(sp)
  814a08:	dc000015 	stw	r16,0(sp)
  814a0c:	dfc00415 	stw	ra,16(sp)
  814a10:	dcc00315 	stw	r19,12(sp)
  814a14:	1c803fcc 	andi	r18,r3,255
  814a18:	2c01ffcc 	andi	r16,r5,2047
  814a1c:	5210b03a 	or	r8,r10,r8
  814a20:	202290fa 	slli	r17,r4,3
  814a24:	1081ffcc 	andi	r2,r2,2047
  814a28:	4b12b03a 	or	r9,r9,r12
  814a2c:	300c90fa 	slli	r6,r6,3
  814a30:	91c07526 	beq	r18,r7,814c08 <__adddf3+0x23c>
  814a34:	8087c83a 	sub	r3,r16,r2
  814a38:	00c0ab0e 	bge	zero,r3,814ce8 <__adddf3+0x31c>
  814a3c:	10002a1e 	bne	r2,zero,814ae8 <__adddf3+0x11c>
  814a40:	4984b03a 	or	r2,r9,r6
  814a44:	1000961e 	bne	r2,zero,814ca0 <__adddf3+0x2d4>
  814a48:	888001cc 	andi	r2,r17,7
  814a4c:	10000726 	beq	r2,zero,814a6c <__adddf3+0xa0>
  814a50:	888003cc 	andi	r2,r17,15
  814a54:	00c00104 	movi	r3,4
  814a58:	10c00426 	beq	r2,r3,814a6c <__adddf3+0xa0>
  814a5c:	88c7883a 	add	r3,r17,r3
  814a60:	1c63803a 	cmpltu	r17,r3,r17
  814a64:	4451883a 	add	r8,r8,r17
  814a68:	1823883a 	mov	r17,r3
  814a6c:	4080202c 	andhi	r2,r8,128
  814a70:	10005926 	beq	r2,zero,814bd8 <__adddf3+0x20c>
  814a74:	84000044 	addi	r16,r16,1
  814a78:	0081ffc4 	movi	r2,2047
  814a7c:	8080ba26 	beq	r16,r2,814d68 <__adddf3+0x39c>
  814a80:	00bfe034 	movhi	r2,65408
  814a84:	10bfffc4 	addi	r2,r2,-1
  814a88:	4090703a 	and	r8,r8,r2
  814a8c:	4004977a 	slli	r2,r8,29
  814a90:	4010927a 	slli	r8,r8,9
  814a94:	8822d0fa 	srli	r17,r17,3
  814a98:	8401ffcc 	andi	r16,r16,2047
  814a9c:	4010d33a 	srli	r8,r8,12
  814aa0:	9007883a 	mov	r3,r18
  814aa4:	1444b03a 	or	r2,r2,r17
  814aa8:	8401ffcc 	andi	r16,r16,2047
  814aac:	8020953a 	slli	r16,r16,20
  814ab0:	18c03fcc 	andi	r3,r3,255
  814ab4:	01000434 	movhi	r4,16
  814ab8:	213fffc4 	addi	r4,r4,-1
  814abc:	180697fa 	slli	r3,r3,31
  814ac0:	4110703a 	and	r8,r8,r4
  814ac4:	4410b03a 	or	r8,r8,r16
  814ac8:	40c6b03a 	or	r3,r8,r3
  814acc:	dfc00417 	ldw	ra,16(sp)
  814ad0:	dcc00317 	ldw	r19,12(sp)
  814ad4:	dc800217 	ldw	r18,8(sp)
  814ad8:	dc400117 	ldw	r17,4(sp)
  814adc:	dc000017 	ldw	r16,0(sp)
  814ae0:	dec00504 	addi	sp,sp,20
  814ae4:	f800283a 	ret
  814ae8:	0081ffc4 	movi	r2,2047
  814aec:	80bfd626 	beq	r16,r2,814a48 <__alt_data_end+0xff814a48>
  814af0:	4a402034 	orhi	r9,r9,128
  814af4:	00800e04 	movi	r2,56
  814af8:	10c09f16 	blt	r2,r3,814d78 <__adddf3+0x3ac>
  814afc:	008007c4 	movi	r2,31
  814b00:	10c0c216 	blt	r2,r3,814e0c <__adddf3+0x440>
  814b04:	00800804 	movi	r2,32
  814b08:	10c5c83a 	sub	r2,r2,r3
  814b0c:	488a983a 	sll	r5,r9,r2
  814b10:	30c8d83a 	srl	r4,r6,r3
  814b14:	3084983a 	sll	r2,r6,r2
  814b18:	48c6d83a 	srl	r3,r9,r3
  814b1c:	290cb03a 	or	r6,r5,r4
  814b20:	1004c03a 	cmpne	r2,r2,zero
  814b24:	308cb03a 	or	r6,r6,r2
  814b28:	898dc83a 	sub	r6,r17,r6
  814b2c:	89a3803a 	cmpltu	r17,r17,r6
  814b30:	40d1c83a 	sub	r8,r8,r3
  814b34:	4451c83a 	sub	r8,r8,r17
  814b38:	3023883a 	mov	r17,r6
  814b3c:	4080202c 	andhi	r2,r8,128
  814b40:	10002326 	beq	r2,zero,814bd0 <__adddf3+0x204>
  814b44:	04c02034 	movhi	r19,128
  814b48:	9cffffc4 	addi	r19,r19,-1
  814b4c:	44e6703a 	and	r19,r8,r19
  814b50:	98007626 	beq	r19,zero,814d2c <__adddf3+0x360>
  814b54:	9809883a 	mov	r4,r19
  814b58:	0816fd00 	call	816fd0 <__clzsi2>
  814b5c:	10fffe04 	addi	r3,r2,-8
  814b60:	010007c4 	movi	r4,31
  814b64:	20c07716 	blt	r4,r3,814d44 <__adddf3+0x378>
  814b68:	00800804 	movi	r2,32
  814b6c:	10c5c83a 	sub	r2,r2,r3
  814b70:	8884d83a 	srl	r2,r17,r2
  814b74:	98d0983a 	sll	r8,r19,r3
  814b78:	88e2983a 	sll	r17,r17,r3
  814b7c:	1204b03a 	or	r2,r2,r8
  814b80:	1c007416 	blt	r3,r16,814d54 <__adddf3+0x388>
  814b84:	1c21c83a 	sub	r16,r3,r16
  814b88:	82000044 	addi	r8,r16,1
  814b8c:	00c007c4 	movi	r3,31
  814b90:	1a009116 	blt	r3,r8,814dd8 <__adddf3+0x40c>
  814b94:	00c00804 	movi	r3,32
  814b98:	1a07c83a 	sub	r3,r3,r8
  814b9c:	8a08d83a 	srl	r4,r17,r8
  814ba0:	88e2983a 	sll	r17,r17,r3
  814ba4:	10c6983a 	sll	r3,r2,r3
  814ba8:	1210d83a 	srl	r8,r2,r8
  814bac:	8804c03a 	cmpne	r2,r17,zero
  814bb0:	1906b03a 	or	r3,r3,r4
  814bb4:	18a2b03a 	or	r17,r3,r2
  814bb8:	0021883a 	mov	r16,zero
  814bbc:	003fa206 	br	814a48 <__alt_data_end+0xff814a48>
  814bc0:	1890b03a 	or	r8,r3,r2
  814bc4:	40017d26 	beq	r8,zero,8151bc <__adddf3+0x7f0>
  814bc8:	1011883a 	mov	r8,r2
  814bcc:	1823883a 	mov	r17,r3
  814bd0:	888001cc 	andi	r2,r17,7
  814bd4:	103f9e1e 	bne	r2,zero,814a50 <__alt_data_end+0xff814a50>
  814bd8:	4004977a 	slli	r2,r8,29
  814bdc:	8822d0fa 	srli	r17,r17,3
  814be0:	4010d0fa 	srli	r8,r8,3
  814be4:	9007883a 	mov	r3,r18
  814be8:	1444b03a 	or	r2,r2,r17
  814bec:	0101ffc4 	movi	r4,2047
  814bf0:	81002426 	beq	r16,r4,814c84 <__adddf3+0x2b8>
  814bf4:	8120703a 	and	r16,r16,r4
  814bf8:	01000434 	movhi	r4,16
  814bfc:	213fffc4 	addi	r4,r4,-1
  814c00:	4110703a 	and	r8,r8,r4
  814c04:	003fa806 	br	814aa8 <__alt_data_end+0xff814aa8>
  814c08:	8089c83a 	sub	r4,r16,r2
  814c0c:	01005e0e 	bge	zero,r4,814d88 <__adddf3+0x3bc>
  814c10:	10002b26 	beq	r2,zero,814cc0 <__adddf3+0x2f4>
  814c14:	0081ffc4 	movi	r2,2047
  814c18:	80bf8b26 	beq	r16,r2,814a48 <__alt_data_end+0xff814a48>
  814c1c:	4a402034 	orhi	r9,r9,128
  814c20:	00800e04 	movi	r2,56
  814c24:	1100a40e 	bge	r2,r4,814eb8 <__adddf3+0x4ec>
  814c28:	498cb03a 	or	r6,r9,r6
  814c2c:	300ac03a 	cmpne	r5,r6,zero
  814c30:	0013883a 	mov	r9,zero
  814c34:	2c4b883a 	add	r5,r5,r17
  814c38:	2c63803a 	cmpltu	r17,r5,r17
  814c3c:	4a11883a 	add	r8,r9,r8
  814c40:	8a11883a 	add	r8,r17,r8
  814c44:	2823883a 	mov	r17,r5
  814c48:	4080202c 	andhi	r2,r8,128
  814c4c:	103fe026 	beq	r2,zero,814bd0 <__alt_data_end+0xff814bd0>
  814c50:	84000044 	addi	r16,r16,1
  814c54:	0081ffc4 	movi	r2,2047
  814c58:	8080d226 	beq	r16,r2,814fa4 <__adddf3+0x5d8>
  814c5c:	00bfe034 	movhi	r2,65408
  814c60:	10bfffc4 	addi	r2,r2,-1
  814c64:	4090703a 	and	r8,r8,r2
  814c68:	880ad07a 	srli	r5,r17,1
  814c6c:	400897fa 	slli	r4,r8,31
  814c70:	88c0004c 	andi	r3,r17,1
  814c74:	28e2b03a 	or	r17,r5,r3
  814c78:	4010d07a 	srli	r8,r8,1
  814c7c:	2462b03a 	or	r17,r4,r17
  814c80:	003f7106 	br	814a48 <__alt_data_end+0xff814a48>
  814c84:	4088b03a 	or	r4,r8,r2
  814c88:	20014526 	beq	r4,zero,8151a0 <__adddf3+0x7d4>
  814c8c:	01000434 	movhi	r4,16
  814c90:	42000234 	orhi	r8,r8,8
  814c94:	213fffc4 	addi	r4,r4,-1
  814c98:	4110703a 	and	r8,r8,r4
  814c9c:	003f8206 	br	814aa8 <__alt_data_end+0xff814aa8>
  814ca0:	18ffffc4 	addi	r3,r3,-1
  814ca4:	1800491e 	bne	r3,zero,814dcc <__adddf3+0x400>
  814ca8:	898bc83a 	sub	r5,r17,r6
  814cac:	8963803a 	cmpltu	r17,r17,r5
  814cb0:	4251c83a 	sub	r8,r8,r9
  814cb4:	4451c83a 	sub	r8,r8,r17
  814cb8:	2823883a 	mov	r17,r5
  814cbc:	003f9f06 	br	814b3c <__alt_data_end+0xff814b3c>
  814cc0:	4984b03a 	or	r2,r9,r6
  814cc4:	103f6026 	beq	r2,zero,814a48 <__alt_data_end+0xff814a48>
  814cc8:	213fffc4 	addi	r4,r4,-1
  814ccc:	2000931e 	bne	r4,zero,814f1c <__adddf3+0x550>
  814cd0:	898d883a 	add	r6,r17,r6
  814cd4:	3463803a 	cmpltu	r17,r6,r17
  814cd8:	4251883a 	add	r8,r8,r9
  814cdc:	8a11883a 	add	r8,r17,r8
  814ce0:	3023883a 	mov	r17,r6
  814ce4:	003fd806 	br	814c48 <__alt_data_end+0xff814c48>
  814ce8:	1800541e 	bne	r3,zero,814e3c <__adddf3+0x470>
  814cec:	80800044 	addi	r2,r16,1
  814cf0:	1081ffcc 	andi	r2,r2,2047
  814cf4:	00c00044 	movi	r3,1
  814cf8:	1880a00e 	bge	r3,r2,814f7c <__adddf3+0x5b0>
  814cfc:	8989c83a 	sub	r4,r17,r6
  814d00:	8905803a 	cmpltu	r2,r17,r4
  814d04:	4267c83a 	sub	r19,r8,r9
  814d08:	98a7c83a 	sub	r19,r19,r2
  814d0c:	9880202c 	andhi	r2,r19,128
  814d10:	10006326 	beq	r2,zero,814ea0 <__adddf3+0x4d4>
  814d14:	3463c83a 	sub	r17,r6,r17
  814d18:	4a07c83a 	sub	r3,r9,r8
  814d1c:	344d803a 	cmpltu	r6,r6,r17
  814d20:	19a7c83a 	sub	r19,r3,r6
  814d24:	3825883a 	mov	r18,r7
  814d28:	983f8a1e 	bne	r19,zero,814b54 <__alt_data_end+0xff814b54>
  814d2c:	8809883a 	mov	r4,r17
  814d30:	0816fd00 	call	816fd0 <__clzsi2>
  814d34:	10800804 	addi	r2,r2,32
  814d38:	10fffe04 	addi	r3,r2,-8
  814d3c:	010007c4 	movi	r4,31
  814d40:	20ff890e 	bge	r4,r3,814b68 <__alt_data_end+0xff814b68>
  814d44:	10bff604 	addi	r2,r2,-40
  814d48:	8884983a 	sll	r2,r17,r2
  814d4c:	0023883a 	mov	r17,zero
  814d50:	1c3f8c0e 	bge	r3,r16,814b84 <__alt_data_end+0xff814b84>
  814d54:	023fe034 	movhi	r8,65408
  814d58:	423fffc4 	addi	r8,r8,-1
  814d5c:	80e1c83a 	sub	r16,r16,r3
  814d60:	1210703a 	and	r8,r2,r8
  814d64:	003f3806 	br	814a48 <__alt_data_end+0xff814a48>
  814d68:	9007883a 	mov	r3,r18
  814d6c:	0011883a 	mov	r8,zero
  814d70:	0005883a 	mov	r2,zero
  814d74:	003f4c06 	br	814aa8 <__alt_data_end+0xff814aa8>
  814d78:	498cb03a 	or	r6,r9,r6
  814d7c:	300cc03a 	cmpne	r6,r6,zero
  814d80:	0007883a 	mov	r3,zero
  814d84:	003f6806 	br	814b28 <__alt_data_end+0xff814b28>
  814d88:	20009c1e 	bne	r4,zero,814ffc <__adddf3+0x630>
  814d8c:	80800044 	addi	r2,r16,1
  814d90:	1141ffcc 	andi	r5,r2,2047
  814d94:	01000044 	movi	r4,1
  814d98:	2140670e 	bge	r4,r5,814f38 <__adddf3+0x56c>
  814d9c:	0101ffc4 	movi	r4,2047
  814da0:	11007f26 	beq	r2,r4,814fa0 <__adddf3+0x5d4>
  814da4:	898d883a 	add	r6,r17,r6
  814da8:	4247883a 	add	r3,r8,r9
  814dac:	3451803a 	cmpltu	r8,r6,r17
  814db0:	40d1883a 	add	r8,r8,r3
  814db4:	402297fa 	slli	r17,r8,31
  814db8:	300cd07a 	srli	r6,r6,1
  814dbc:	4010d07a 	srli	r8,r8,1
  814dc0:	1021883a 	mov	r16,r2
  814dc4:	89a2b03a 	or	r17,r17,r6
  814dc8:	003f1f06 	br	814a48 <__alt_data_end+0xff814a48>
  814dcc:	0081ffc4 	movi	r2,2047
  814dd0:	80bf481e 	bne	r16,r2,814af4 <__alt_data_end+0xff814af4>
  814dd4:	003f1c06 	br	814a48 <__alt_data_end+0xff814a48>
  814dd8:	843ff844 	addi	r16,r16,-31
  814ddc:	01000804 	movi	r4,32
  814de0:	1406d83a 	srl	r3,r2,r16
  814de4:	41005026 	beq	r8,r4,814f28 <__adddf3+0x55c>
  814de8:	01001004 	movi	r4,64
  814dec:	2211c83a 	sub	r8,r4,r8
  814df0:	1204983a 	sll	r2,r2,r8
  814df4:	88a2b03a 	or	r17,r17,r2
  814df8:	8822c03a 	cmpne	r17,r17,zero
  814dfc:	1c62b03a 	or	r17,r3,r17
  814e00:	0011883a 	mov	r8,zero
  814e04:	0021883a 	mov	r16,zero
  814e08:	003f7106 	br	814bd0 <__alt_data_end+0xff814bd0>
  814e0c:	193ff804 	addi	r4,r3,-32
  814e10:	00800804 	movi	r2,32
  814e14:	4908d83a 	srl	r4,r9,r4
  814e18:	18804526 	beq	r3,r2,814f30 <__adddf3+0x564>
  814e1c:	00801004 	movi	r2,64
  814e20:	10c5c83a 	sub	r2,r2,r3
  814e24:	4886983a 	sll	r3,r9,r2
  814e28:	198cb03a 	or	r6,r3,r6
  814e2c:	300cc03a 	cmpne	r6,r6,zero
  814e30:	218cb03a 	or	r6,r4,r6
  814e34:	0007883a 	mov	r3,zero
  814e38:	003f3b06 	br	814b28 <__alt_data_end+0xff814b28>
  814e3c:	80002a26 	beq	r16,zero,814ee8 <__adddf3+0x51c>
  814e40:	0101ffc4 	movi	r4,2047
  814e44:	11006826 	beq	r2,r4,814fe8 <__adddf3+0x61c>
  814e48:	00c7c83a 	sub	r3,zero,r3
  814e4c:	42002034 	orhi	r8,r8,128
  814e50:	01000e04 	movi	r4,56
  814e54:	20c07c16 	blt	r4,r3,815048 <__adddf3+0x67c>
  814e58:	010007c4 	movi	r4,31
  814e5c:	20c0da16 	blt	r4,r3,8151c8 <__adddf3+0x7fc>
  814e60:	01000804 	movi	r4,32
  814e64:	20c9c83a 	sub	r4,r4,r3
  814e68:	4114983a 	sll	r10,r8,r4
  814e6c:	88cad83a 	srl	r5,r17,r3
  814e70:	8908983a 	sll	r4,r17,r4
  814e74:	40c6d83a 	srl	r3,r8,r3
  814e78:	5162b03a 	or	r17,r10,r5
  814e7c:	2008c03a 	cmpne	r4,r4,zero
  814e80:	8922b03a 	or	r17,r17,r4
  814e84:	3463c83a 	sub	r17,r6,r17
  814e88:	48c7c83a 	sub	r3,r9,r3
  814e8c:	344d803a 	cmpltu	r6,r6,r17
  814e90:	1991c83a 	sub	r8,r3,r6
  814e94:	1021883a 	mov	r16,r2
  814e98:	3825883a 	mov	r18,r7
  814e9c:	003f2706 	br	814b3c <__alt_data_end+0xff814b3c>
  814ea0:	24d0b03a 	or	r8,r4,r19
  814ea4:	40001b1e 	bne	r8,zero,814f14 <__adddf3+0x548>
  814ea8:	0005883a 	mov	r2,zero
  814eac:	0007883a 	mov	r3,zero
  814eb0:	0021883a 	mov	r16,zero
  814eb4:	003f4d06 	br	814bec <__alt_data_end+0xff814bec>
  814eb8:	008007c4 	movi	r2,31
  814ebc:	11003c16 	blt	r2,r4,814fb0 <__adddf3+0x5e4>
  814ec0:	00800804 	movi	r2,32
  814ec4:	1105c83a 	sub	r2,r2,r4
  814ec8:	488e983a 	sll	r7,r9,r2
  814ecc:	310ad83a 	srl	r5,r6,r4
  814ed0:	3084983a 	sll	r2,r6,r2
  814ed4:	4912d83a 	srl	r9,r9,r4
  814ed8:	394ab03a 	or	r5,r7,r5
  814edc:	1004c03a 	cmpne	r2,r2,zero
  814ee0:	288ab03a 	or	r5,r5,r2
  814ee4:	003f5306 	br	814c34 <__alt_data_end+0xff814c34>
  814ee8:	4448b03a 	or	r4,r8,r17
  814eec:	20003e26 	beq	r4,zero,814fe8 <__adddf3+0x61c>
  814ef0:	00c6303a 	nor	r3,zero,r3
  814ef4:	18003a1e 	bne	r3,zero,814fe0 <__adddf3+0x614>
  814ef8:	3463c83a 	sub	r17,r6,r17
  814efc:	4a07c83a 	sub	r3,r9,r8
  814f00:	344d803a 	cmpltu	r6,r6,r17
  814f04:	1991c83a 	sub	r8,r3,r6
  814f08:	1021883a 	mov	r16,r2
  814f0c:	3825883a 	mov	r18,r7
  814f10:	003f0a06 	br	814b3c <__alt_data_end+0xff814b3c>
  814f14:	2023883a 	mov	r17,r4
  814f18:	003f0d06 	br	814b50 <__alt_data_end+0xff814b50>
  814f1c:	0081ffc4 	movi	r2,2047
  814f20:	80bf3f1e 	bne	r16,r2,814c20 <__alt_data_end+0xff814c20>
  814f24:	003ec806 	br	814a48 <__alt_data_end+0xff814a48>
  814f28:	0005883a 	mov	r2,zero
  814f2c:	003fb106 	br	814df4 <__alt_data_end+0xff814df4>
  814f30:	0007883a 	mov	r3,zero
  814f34:	003fbc06 	br	814e28 <__alt_data_end+0xff814e28>
  814f38:	4444b03a 	or	r2,r8,r17
  814f3c:	8000871e 	bne	r16,zero,81515c <__adddf3+0x790>
  814f40:	1000ba26 	beq	r2,zero,81522c <__adddf3+0x860>
  814f44:	4984b03a 	or	r2,r9,r6
  814f48:	103ebf26 	beq	r2,zero,814a48 <__alt_data_end+0xff814a48>
  814f4c:	8985883a 	add	r2,r17,r6
  814f50:	4247883a 	add	r3,r8,r9
  814f54:	1451803a 	cmpltu	r8,r2,r17
  814f58:	40d1883a 	add	r8,r8,r3
  814f5c:	40c0202c 	andhi	r3,r8,128
  814f60:	1023883a 	mov	r17,r2
  814f64:	183f1a26 	beq	r3,zero,814bd0 <__alt_data_end+0xff814bd0>
  814f68:	00bfe034 	movhi	r2,65408
  814f6c:	10bfffc4 	addi	r2,r2,-1
  814f70:	2021883a 	mov	r16,r4
  814f74:	4090703a 	and	r8,r8,r2
  814f78:	003eb306 	br	814a48 <__alt_data_end+0xff814a48>
  814f7c:	4444b03a 	or	r2,r8,r17
  814f80:	8000291e 	bne	r16,zero,815028 <__adddf3+0x65c>
  814f84:	10004b1e 	bne	r2,zero,8150b4 <__adddf3+0x6e8>
  814f88:	4990b03a 	or	r8,r9,r6
  814f8c:	40008b26 	beq	r8,zero,8151bc <__adddf3+0x7f0>
  814f90:	4811883a 	mov	r8,r9
  814f94:	3023883a 	mov	r17,r6
  814f98:	3825883a 	mov	r18,r7
  814f9c:	003eaa06 	br	814a48 <__alt_data_end+0xff814a48>
  814fa0:	1021883a 	mov	r16,r2
  814fa4:	0011883a 	mov	r8,zero
  814fa8:	0005883a 	mov	r2,zero
  814fac:	003f0f06 	br	814bec <__alt_data_end+0xff814bec>
  814fb0:	217ff804 	addi	r5,r4,-32
  814fb4:	00800804 	movi	r2,32
  814fb8:	494ad83a 	srl	r5,r9,r5
  814fbc:	20807d26 	beq	r4,r2,8151b4 <__adddf3+0x7e8>
  814fc0:	00801004 	movi	r2,64
  814fc4:	1109c83a 	sub	r4,r2,r4
  814fc8:	4912983a 	sll	r9,r9,r4
  814fcc:	498cb03a 	or	r6,r9,r6
  814fd0:	300cc03a 	cmpne	r6,r6,zero
  814fd4:	298ab03a 	or	r5,r5,r6
  814fd8:	0013883a 	mov	r9,zero
  814fdc:	003f1506 	br	814c34 <__alt_data_end+0xff814c34>
  814fe0:	0101ffc4 	movi	r4,2047
  814fe4:	113f9a1e 	bne	r2,r4,814e50 <__alt_data_end+0xff814e50>
  814fe8:	4811883a 	mov	r8,r9
  814fec:	3023883a 	mov	r17,r6
  814ff0:	1021883a 	mov	r16,r2
  814ff4:	3825883a 	mov	r18,r7
  814ff8:	003e9306 	br	814a48 <__alt_data_end+0xff814a48>
  814ffc:	8000161e 	bne	r16,zero,815058 <__adddf3+0x68c>
  815000:	444ab03a 	or	r5,r8,r17
  815004:	28005126 	beq	r5,zero,81514c <__adddf3+0x780>
  815008:	0108303a 	nor	r4,zero,r4
  81500c:	20004d1e 	bne	r4,zero,815144 <__adddf3+0x778>
  815010:	89a3883a 	add	r17,r17,r6
  815014:	4253883a 	add	r9,r8,r9
  815018:	898d803a 	cmpltu	r6,r17,r6
  81501c:	3251883a 	add	r8,r6,r9
  815020:	1021883a 	mov	r16,r2
  815024:	003f0806 	br	814c48 <__alt_data_end+0xff814c48>
  815028:	1000301e 	bne	r2,zero,8150ec <__adddf3+0x720>
  81502c:	4984b03a 	or	r2,r9,r6
  815030:	10007126 	beq	r2,zero,8151f8 <__adddf3+0x82c>
  815034:	4811883a 	mov	r8,r9
  815038:	3023883a 	mov	r17,r6
  81503c:	3825883a 	mov	r18,r7
  815040:	0401ffc4 	movi	r16,2047
  815044:	003e8006 	br	814a48 <__alt_data_end+0xff814a48>
  815048:	4462b03a 	or	r17,r8,r17
  81504c:	8822c03a 	cmpne	r17,r17,zero
  815050:	0007883a 	mov	r3,zero
  815054:	003f8b06 	br	814e84 <__alt_data_end+0xff814e84>
  815058:	0141ffc4 	movi	r5,2047
  81505c:	11403b26 	beq	r2,r5,81514c <__adddf3+0x780>
  815060:	0109c83a 	sub	r4,zero,r4
  815064:	42002034 	orhi	r8,r8,128
  815068:	01400e04 	movi	r5,56
  81506c:	29006716 	blt	r5,r4,81520c <__adddf3+0x840>
  815070:	014007c4 	movi	r5,31
  815074:	29007016 	blt	r5,r4,815238 <__adddf3+0x86c>
  815078:	01400804 	movi	r5,32
  81507c:	290bc83a 	sub	r5,r5,r4
  815080:	4154983a 	sll	r10,r8,r5
  815084:	890ed83a 	srl	r7,r17,r4
  815088:	894a983a 	sll	r5,r17,r5
  81508c:	4108d83a 	srl	r4,r8,r4
  815090:	51e2b03a 	or	r17,r10,r7
  815094:	280ac03a 	cmpne	r5,r5,zero
  815098:	8962b03a 	or	r17,r17,r5
  81509c:	89a3883a 	add	r17,r17,r6
  8150a0:	2253883a 	add	r9,r4,r9
  8150a4:	898d803a 	cmpltu	r6,r17,r6
  8150a8:	3251883a 	add	r8,r6,r9
  8150ac:	1021883a 	mov	r16,r2
  8150b0:	003ee506 	br	814c48 <__alt_data_end+0xff814c48>
  8150b4:	4984b03a 	or	r2,r9,r6
  8150b8:	103e6326 	beq	r2,zero,814a48 <__alt_data_end+0xff814a48>
  8150bc:	8987c83a 	sub	r3,r17,r6
  8150c0:	88c9803a 	cmpltu	r4,r17,r3
  8150c4:	4245c83a 	sub	r2,r8,r9
  8150c8:	1105c83a 	sub	r2,r2,r4
  8150cc:	1100202c 	andhi	r4,r2,128
  8150d0:	203ebb26 	beq	r4,zero,814bc0 <__alt_data_end+0xff814bc0>
  8150d4:	3463c83a 	sub	r17,r6,r17
  8150d8:	4a07c83a 	sub	r3,r9,r8
  8150dc:	344d803a 	cmpltu	r6,r6,r17
  8150e0:	1991c83a 	sub	r8,r3,r6
  8150e4:	3825883a 	mov	r18,r7
  8150e8:	003e5706 	br	814a48 <__alt_data_end+0xff814a48>
  8150ec:	4984b03a 	or	r2,r9,r6
  8150f0:	10002e26 	beq	r2,zero,8151ac <__adddf3+0x7e0>
  8150f4:	4004d0fa 	srli	r2,r8,3
  8150f8:	8822d0fa 	srli	r17,r17,3
  8150fc:	4010977a 	slli	r8,r8,29
  815100:	10c0022c 	andhi	r3,r2,8
  815104:	4462b03a 	or	r17,r8,r17
  815108:	18000826 	beq	r3,zero,81512c <__adddf3+0x760>
  81510c:	4808d0fa 	srli	r4,r9,3
  815110:	20c0022c 	andhi	r3,r4,8
  815114:	1800051e 	bne	r3,zero,81512c <__adddf3+0x760>
  815118:	300cd0fa 	srli	r6,r6,3
  81511c:	4806977a 	slli	r3,r9,29
  815120:	2005883a 	mov	r2,r4
  815124:	3825883a 	mov	r18,r7
  815128:	19a2b03a 	or	r17,r3,r6
  81512c:	8810d77a 	srli	r8,r17,29
  815130:	100490fa 	slli	r2,r2,3
  815134:	882290fa 	slli	r17,r17,3
  815138:	0401ffc4 	movi	r16,2047
  81513c:	4090b03a 	or	r8,r8,r2
  815140:	003e4106 	br	814a48 <__alt_data_end+0xff814a48>
  815144:	0141ffc4 	movi	r5,2047
  815148:	117fc71e 	bne	r2,r5,815068 <__alt_data_end+0xff815068>
  81514c:	4811883a 	mov	r8,r9
  815150:	3023883a 	mov	r17,r6
  815154:	1021883a 	mov	r16,r2
  815158:	003e3b06 	br	814a48 <__alt_data_end+0xff814a48>
  81515c:	10002f26 	beq	r2,zero,81521c <__adddf3+0x850>
  815160:	4984b03a 	or	r2,r9,r6
  815164:	10001126 	beq	r2,zero,8151ac <__adddf3+0x7e0>
  815168:	4004d0fa 	srli	r2,r8,3
  81516c:	8822d0fa 	srli	r17,r17,3
  815170:	4010977a 	slli	r8,r8,29
  815174:	10c0022c 	andhi	r3,r2,8
  815178:	4462b03a 	or	r17,r8,r17
  81517c:	183feb26 	beq	r3,zero,81512c <__alt_data_end+0xff81512c>
  815180:	4808d0fa 	srli	r4,r9,3
  815184:	20c0022c 	andhi	r3,r4,8
  815188:	183fe81e 	bne	r3,zero,81512c <__alt_data_end+0xff81512c>
  81518c:	300cd0fa 	srli	r6,r6,3
  815190:	4806977a 	slli	r3,r9,29
  815194:	2005883a 	mov	r2,r4
  815198:	19a2b03a 	or	r17,r3,r6
  81519c:	003fe306 	br	81512c <__alt_data_end+0xff81512c>
  8151a0:	0011883a 	mov	r8,zero
  8151a4:	0005883a 	mov	r2,zero
  8151a8:	003e3f06 	br	814aa8 <__alt_data_end+0xff814aa8>
  8151ac:	0401ffc4 	movi	r16,2047
  8151b0:	003e2506 	br	814a48 <__alt_data_end+0xff814a48>
  8151b4:	0013883a 	mov	r9,zero
  8151b8:	003f8406 	br	814fcc <__alt_data_end+0xff814fcc>
  8151bc:	0005883a 	mov	r2,zero
  8151c0:	0007883a 	mov	r3,zero
  8151c4:	003e8906 	br	814bec <__alt_data_end+0xff814bec>
  8151c8:	197ff804 	addi	r5,r3,-32
  8151cc:	01000804 	movi	r4,32
  8151d0:	414ad83a 	srl	r5,r8,r5
  8151d4:	19002426 	beq	r3,r4,815268 <__adddf3+0x89c>
  8151d8:	01001004 	movi	r4,64
  8151dc:	20c7c83a 	sub	r3,r4,r3
  8151e0:	40c6983a 	sll	r3,r8,r3
  8151e4:	1c46b03a 	or	r3,r3,r17
  8151e8:	1806c03a 	cmpne	r3,r3,zero
  8151ec:	28e2b03a 	or	r17,r5,r3
  8151f0:	0007883a 	mov	r3,zero
  8151f4:	003f2306 	br	814e84 <__alt_data_end+0xff814e84>
  8151f8:	0007883a 	mov	r3,zero
  8151fc:	5811883a 	mov	r8,r11
  815200:	00bfffc4 	movi	r2,-1
  815204:	0401ffc4 	movi	r16,2047
  815208:	003e7806 	br	814bec <__alt_data_end+0xff814bec>
  81520c:	4462b03a 	or	r17,r8,r17
  815210:	8822c03a 	cmpne	r17,r17,zero
  815214:	0009883a 	mov	r4,zero
  815218:	003fa006 	br	81509c <__alt_data_end+0xff81509c>
  81521c:	4811883a 	mov	r8,r9
  815220:	3023883a 	mov	r17,r6
  815224:	0401ffc4 	movi	r16,2047
  815228:	003e0706 	br	814a48 <__alt_data_end+0xff814a48>
  81522c:	4811883a 	mov	r8,r9
  815230:	3023883a 	mov	r17,r6
  815234:	003e0406 	br	814a48 <__alt_data_end+0xff814a48>
  815238:	21fff804 	addi	r7,r4,-32
  81523c:	01400804 	movi	r5,32
  815240:	41ced83a 	srl	r7,r8,r7
  815244:	21400a26 	beq	r4,r5,815270 <__adddf3+0x8a4>
  815248:	01401004 	movi	r5,64
  81524c:	2909c83a 	sub	r4,r5,r4
  815250:	4108983a 	sll	r4,r8,r4
  815254:	2448b03a 	or	r4,r4,r17
  815258:	2008c03a 	cmpne	r4,r4,zero
  81525c:	3922b03a 	or	r17,r7,r4
  815260:	0009883a 	mov	r4,zero
  815264:	003f8d06 	br	81509c <__alt_data_end+0xff81509c>
  815268:	0007883a 	mov	r3,zero
  81526c:	003fdd06 	br	8151e4 <__alt_data_end+0xff8151e4>
  815270:	0009883a 	mov	r4,zero
  815274:	003ff706 	br	815254 <__alt_data_end+0xff815254>

00815278 <__divdf3>:
  815278:	defff204 	addi	sp,sp,-56
  81527c:	dd400915 	stw	r21,36(sp)
  815280:	282ad53a 	srli	r21,r5,20
  815284:	dd000815 	stw	r20,32(sp)
  815288:	2828d7fa 	srli	r20,r5,31
  81528c:	dc000415 	stw	r16,16(sp)
  815290:	04000434 	movhi	r16,16
  815294:	df000c15 	stw	fp,48(sp)
  815298:	843fffc4 	addi	r16,r16,-1
  81529c:	dfc00d15 	stw	ra,52(sp)
  8152a0:	ddc00b15 	stw	r23,44(sp)
  8152a4:	dd800a15 	stw	r22,40(sp)
  8152a8:	dcc00715 	stw	r19,28(sp)
  8152ac:	dc800615 	stw	r18,24(sp)
  8152b0:	dc400515 	stw	r17,20(sp)
  8152b4:	ad41ffcc 	andi	r21,r21,2047
  8152b8:	2c20703a 	and	r16,r5,r16
  8152bc:	a7003fcc 	andi	fp,r20,255
  8152c0:	a8006126 	beq	r21,zero,815448 <__divdf3+0x1d0>
  8152c4:	0081ffc4 	movi	r2,2047
  8152c8:	2025883a 	mov	r18,r4
  8152cc:	a8803726 	beq	r21,r2,8153ac <__divdf3+0x134>
  8152d0:	80800434 	orhi	r2,r16,16
  8152d4:	100490fa 	slli	r2,r2,3
  8152d8:	2020d77a 	srli	r16,r4,29
  8152dc:	202490fa 	slli	r18,r4,3
  8152e0:	ad7f0044 	addi	r21,r21,-1023
  8152e4:	80a0b03a 	or	r16,r16,r2
  8152e8:	0027883a 	mov	r19,zero
  8152ec:	0013883a 	mov	r9,zero
  8152f0:	3804d53a 	srli	r2,r7,20
  8152f4:	382cd7fa 	srli	r22,r7,31
  8152f8:	04400434 	movhi	r17,16
  8152fc:	8c7fffc4 	addi	r17,r17,-1
  815300:	1081ffcc 	andi	r2,r2,2047
  815304:	3011883a 	mov	r8,r6
  815308:	3c62703a 	and	r17,r7,r17
  81530c:	b5c03fcc 	andi	r23,r22,255
  815310:	10006c26 	beq	r2,zero,8154c4 <__divdf3+0x24c>
  815314:	00c1ffc4 	movi	r3,2047
  815318:	10c06426 	beq	r2,r3,8154ac <__divdf3+0x234>
  81531c:	88c00434 	orhi	r3,r17,16
  815320:	180690fa 	slli	r3,r3,3
  815324:	3022d77a 	srli	r17,r6,29
  815328:	301090fa 	slli	r8,r6,3
  81532c:	10bf0044 	addi	r2,r2,-1023
  815330:	88e2b03a 	or	r17,r17,r3
  815334:	000f883a 	mov	r7,zero
  815338:	a58cf03a 	xor	r6,r20,r22
  81533c:	3cc8b03a 	or	r4,r7,r19
  815340:	a8abc83a 	sub	r21,r21,r2
  815344:	008003c4 	movi	r2,15
  815348:	3007883a 	mov	r3,r6
  81534c:	34c03fcc 	andi	r19,r6,255
  815350:	11009036 	bltu	r2,r4,815594 <__divdf3+0x31c>
  815354:	200890ba 	slli	r4,r4,2
  815358:	00802074 	movhi	r2,129
  81535c:	1094db04 	addi	r2,r2,21356
  815360:	2089883a 	add	r4,r4,r2
  815364:	20800017 	ldw	r2,0(r4)
  815368:	1000683a 	jmp	r2
  81536c:	00815594 	movui	r2,1366
  815370:	008153e4 	muli	r2,zero,1359
  815374:	00815584 	movi	r2,1366
  815378:	008153d8 	cmpnei	r2,zero,1359
  81537c:	00815584 	movi	r2,1366
  815380:	00815558 	cmpnei	r2,zero,1365
  815384:	00815584 	movi	r2,1366
  815388:	008153d8 	cmpnei	r2,zero,1359
  81538c:	008153e4 	muli	r2,zero,1359
  815390:	008153e4 	muli	r2,zero,1359
  815394:	00815558 	cmpnei	r2,zero,1365
  815398:	008153d8 	cmpnei	r2,zero,1359
  81539c:	008153c8 	cmpgei	r2,zero,1359
  8153a0:	008153c8 	cmpgei	r2,zero,1359
  8153a4:	008153c8 	cmpgei	r2,zero,1359
  8153a8:	00815878 	rdprs	r2,zero,1377
  8153ac:	2404b03a 	or	r2,r4,r16
  8153b0:	1000661e 	bne	r2,zero,81554c <__divdf3+0x2d4>
  8153b4:	04c00204 	movi	r19,8
  8153b8:	0021883a 	mov	r16,zero
  8153bc:	0025883a 	mov	r18,zero
  8153c0:	02400084 	movi	r9,2
  8153c4:	003fca06 	br	8152f0 <__alt_data_end+0xff8152f0>
  8153c8:	8023883a 	mov	r17,r16
  8153cc:	9011883a 	mov	r8,r18
  8153d0:	e02f883a 	mov	r23,fp
  8153d4:	480f883a 	mov	r7,r9
  8153d8:	00800084 	movi	r2,2
  8153dc:	3881311e 	bne	r7,r2,8158a4 <__divdf3+0x62c>
  8153e0:	b827883a 	mov	r19,r23
  8153e4:	98c0004c 	andi	r3,r19,1
  8153e8:	0081ffc4 	movi	r2,2047
  8153ec:	000b883a 	mov	r5,zero
  8153f0:	0025883a 	mov	r18,zero
  8153f4:	1004953a 	slli	r2,r2,20
  8153f8:	18c03fcc 	andi	r3,r3,255
  8153fc:	04400434 	movhi	r17,16
  815400:	8c7fffc4 	addi	r17,r17,-1
  815404:	180697fa 	slli	r3,r3,31
  815408:	2c4a703a 	and	r5,r5,r17
  81540c:	288ab03a 	or	r5,r5,r2
  815410:	28c6b03a 	or	r3,r5,r3
  815414:	9005883a 	mov	r2,r18
  815418:	dfc00d17 	ldw	ra,52(sp)
  81541c:	df000c17 	ldw	fp,48(sp)
  815420:	ddc00b17 	ldw	r23,44(sp)
  815424:	dd800a17 	ldw	r22,40(sp)
  815428:	dd400917 	ldw	r21,36(sp)
  81542c:	dd000817 	ldw	r20,32(sp)
  815430:	dcc00717 	ldw	r19,28(sp)
  815434:	dc800617 	ldw	r18,24(sp)
  815438:	dc400517 	ldw	r17,20(sp)
  81543c:	dc000417 	ldw	r16,16(sp)
  815440:	dec00e04 	addi	sp,sp,56
  815444:	f800283a 	ret
  815448:	2404b03a 	or	r2,r4,r16
  81544c:	2027883a 	mov	r19,r4
  815450:	10003926 	beq	r2,zero,815538 <__divdf3+0x2c0>
  815454:	80012e26 	beq	r16,zero,815910 <__divdf3+0x698>
  815458:	8009883a 	mov	r4,r16
  81545c:	d9800315 	stw	r6,12(sp)
  815460:	d9c00215 	stw	r7,8(sp)
  815464:	0816fd00 	call	816fd0 <__clzsi2>
  815468:	d9800317 	ldw	r6,12(sp)
  81546c:	d9c00217 	ldw	r7,8(sp)
  815470:	113ffd44 	addi	r4,r2,-11
  815474:	00c00704 	movi	r3,28
  815478:	19012116 	blt	r3,r4,815900 <__divdf3+0x688>
  81547c:	00c00744 	movi	r3,29
  815480:	147ffe04 	addi	r17,r2,-8
  815484:	1907c83a 	sub	r3,r3,r4
  815488:	8460983a 	sll	r16,r16,r17
  81548c:	98c6d83a 	srl	r3,r19,r3
  815490:	9c64983a 	sll	r18,r19,r17
  815494:	1c20b03a 	or	r16,r3,r16
  815498:	1080fcc4 	addi	r2,r2,1011
  81549c:	00abc83a 	sub	r21,zero,r2
  8154a0:	0027883a 	mov	r19,zero
  8154a4:	0013883a 	mov	r9,zero
  8154a8:	003f9106 	br	8152f0 <__alt_data_end+0xff8152f0>
  8154ac:	3446b03a 	or	r3,r6,r17
  8154b0:	18001f1e 	bne	r3,zero,815530 <__divdf3+0x2b8>
  8154b4:	0023883a 	mov	r17,zero
  8154b8:	0011883a 	mov	r8,zero
  8154bc:	01c00084 	movi	r7,2
  8154c0:	003f9d06 	br	815338 <__alt_data_end+0xff815338>
  8154c4:	3446b03a 	or	r3,r6,r17
  8154c8:	18001526 	beq	r3,zero,815520 <__divdf3+0x2a8>
  8154cc:	88011b26 	beq	r17,zero,81593c <__divdf3+0x6c4>
  8154d0:	8809883a 	mov	r4,r17
  8154d4:	d9800315 	stw	r6,12(sp)
  8154d8:	da400115 	stw	r9,4(sp)
  8154dc:	0816fd00 	call	816fd0 <__clzsi2>
  8154e0:	d9800317 	ldw	r6,12(sp)
  8154e4:	da400117 	ldw	r9,4(sp)
  8154e8:	113ffd44 	addi	r4,r2,-11
  8154ec:	00c00704 	movi	r3,28
  8154f0:	19010e16 	blt	r3,r4,81592c <__divdf3+0x6b4>
  8154f4:	00c00744 	movi	r3,29
  8154f8:	123ffe04 	addi	r8,r2,-8
  8154fc:	1907c83a 	sub	r3,r3,r4
  815500:	8a22983a 	sll	r17,r17,r8
  815504:	30c6d83a 	srl	r3,r6,r3
  815508:	3210983a 	sll	r8,r6,r8
  81550c:	1c62b03a 	or	r17,r3,r17
  815510:	1080fcc4 	addi	r2,r2,1011
  815514:	0085c83a 	sub	r2,zero,r2
  815518:	000f883a 	mov	r7,zero
  81551c:	003f8606 	br	815338 <__alt_data_end+0xff815338>
  815520:	0023883a 	mov	r17,zero
  815524:	0011883a 	mov	r8,zero
  815528:	01c00044 	movi	r7,1
  81552c:	003f8206 	br	815338 <__alt_data_end+0xff815338>
  815530:	01c000c4 	movi	r7,3
  815534:	003f8006 	br	815338 <__alt_data_end+0xff815338>
  815538:	04c00104 	movi	r19,4
  81553c:	0021883a 	mov	r16,zero
  815540:	0025883a 	mov	r18,zero
  815544:	02400044 	movi	r9,1
  815548:	003f6906 	br	8152f0 <__alt_data_end+0xff8152f0>
  81554c:	04c00304 	movi	r19,12
  815550:	024000c4 	movi	r9,3
  815554:	003f6606 	br	8152f0 <__alt_data_end+0xff8152f0>
  815558:	01400434 	movhi	r5,16
  81555c:	0007883a 	mov	r3,zero
  815560:	297fffc4 	addi	r5,r5,-1
  815564:	04bfffc4 	movi	r18,-1
  815568:	0081ffc4 	movi	r2,2047
  81556c:	003fa106 	br	8153f4 <__alt_data_end+0xff8153f4>
  815570:	00c00044 	movi	r3,1
  815574:	1887c83a 	sub	r3,r3,r2
  815578:	01000e04 	movi	r4,56
  81557c:	20c1210e 	bge	r4,r3,815a04 <__divdf3+0x78c>
  815580:	98c0004c 	andi	r3,r19,1
  815584:	0005883a 	mov	r2,zero
  815588:	000b883a 	mov	r5,zero
  81558c:	0025883a 	mov	r18,zero
  815590:	003f9806 	br	8153f4 <__alt_data_end+0xff8153f4>
  815594:	8c00fd36 	bltu	r17,r16,81598c <__divdf3+0x714>
  815598:	8440fb26 	beq	r16,r17,815988 <__divdf3+0x710>
  81559c:	8007883a 	mov	r3,r16
  8155a0:	ad7fffc4 	addi	r21,r21,-1
  8155a4:	0021883a 	mov	r16,zero
  8155a8:	4004d63a 	srli	r2,r8,24
  8155ac:	8822923a 	slli	r17,r17,8
  8155b0:	1809883a 	mov	r4,r3
  8155b4:	402c923a 	slli	r22,r8,8
  8155b8:	88b8b03a 	or	fp,r17,r2
  8155bc:	e028d43a 	srli	r20,fp,16
  8155c0:	d8c00015 	stw	r3,0(sp)
  8155c4:	e5ffffcc 	andi	r23,fp,65535
  8155c8:	a00b883a 	mov	r5,r20
  8155cc:	080a3580 	call	80a358 <__udivsi3>
  8155d0:	d8c00017 	ldw	r3,0(sp)
  8155d4:	a00b883a 	mov	r5,r20
  8155d8:	d8800315 	stw	r2,12(sp)
  8155dc:	1809883a 	mov	r4,r3
  8155e0:	080a3bc0 	call	80a3bc <__umodsi3>
  8155e4:	d9800317 	ldw	r6,12(sp)
  8155e8:	1006943a 	slli	r3,r2,16
  8155ec:	9004d43a 	srli	r2,r18,16
  8155f0:	b9a3383a 	mul	r17,r23,r6
  8155f4:	10c4b03a 	or	r2,r2,r3
  8155f8:	1440062e 	bgeu	r2,r17,815614 <__divdf3+0x39c>
  8155fc:	1705883a 	add	r2,r2,fp
  815600:	30ffffc4 	addi	r3,r6,-1
  815604:	1700ee36 	bltu	r2,fp,8159c0 <__divdf3+0x748>
  815608:	1440ed2e 	bgeu	r2,r17,8159c0 <__divdf3+0x748>
  81560c:	31bfff84 	addi	r6,r6,-2
  815610:	1705883a 	add	r2,r2,fp
  815614:	1463c83a 	sub	r17,r2,r17
  815618:	a00b883a 	mov	r5,r20
  81561c:	8809883a 	mov	r4,r17
  815620:	d9800315 	stw	r6,12(sp)
  815624:	080a3580 	call	80a358 <__udivsi3>
  815628:	a00b883a 	mov	r5,r20
  81562c:	8809883a 	mov	r4,r17
  815630:	d8800215 	stw	r2,8(sp)
  815634:	080a3bc0 	call	80a3bc <__umodsi3>
  815638:	d9c00217 	ldw	r7,8(sp)
  81563c:	1004943a 	slli	r2,r2,16
  815640:	94bfffcc 	andi	r18,r18,65535
  815644:	b9d1383a 	mul	r8,r23,r7
  815648:	90a4b03a 	or	r18,r18,r2
  81564c:	d9800317 	ldw	r6,12(sp)
  815650:	9200062e 	bgeu	r18,r8,81566c <__divdf3+0x3f4>
  815654:	9725883a 	add	r18,r18,fp
  815658:	38bfffc4 	addi	r2,r7,-1
  81565c:	9700d636 	bltu	r18,fp,8159b8 <__divdf3+0x740>
  815660:	9200d52e 	bgeu	r18,r8,8159b8 <__divdf3+0x740>
  815664:	39ffff84 	addi	r7,r7,-2
  815668:	9725883a 	add	r18,r18,fp
  81566c:	3004943a 	slli	r2,r6,16
  815670:	b012d43a 	srli	r9,r22,16
  815674:	b1bfffcc 	andi	r6,r22,65535
  815678:	11e2b03a 	or	r17,r2,r7
  81567c:	8806d43a 	srli	r3,r17,16
  815680:	893fffcc 	andi	r4,r17,65535
  815684:	218b383a 	mul	r5,r4,r6
  815688:	30c5383a 	mul	r2,r6,r3
  81568c:	2249383a 	mul	r4,r4,r9
  815690:	280ed43a 	srli	r7,r5,16
  815694:	9225c83a 	sub	r18,r18,r8
  815698:	2089883a 	add	r4,r4,r2
  81569c:	3909883a 	add	r4,r7,r4
  8156a0:	1a47383a 	mul	r3,r3,r9
  8156a4:	2080022e 	bgeu	r4,r2,8156b0 <__divdf3+0x438>
  8156a8:	00800074 	movhi	r2,1
  8156ac:	1887883a 	add	r3,r3,r2
  8156b0:	2004d43a 	srli	r2,r4,16
  8156b4:	2008943a 	slli	r4,r4,16
  8156b8:	297fffcc 	andi	r5,r5,65535
  8156bc:	10c7883a 	add	r3,r2,r3
  8156c0:	2149883a 	add	r4,r4,r5
  8156c4:	90c0a536 	bltu	r18,r3,81595c <__divdf3+0x6e4>
  8156c8:	90c0bf26 	beq	r18,r3,8159c8 <__divdf3+0x750>
  8156cc:	90c7c83a 	sub	r3,r18,r3
  8156d0:	810fc83a 	sub	r7,r16,r4
  8156d4:	81e5803a 	cmpltu	r18,r16,r7
  8156d8:	1ca5c83a 	sub	r18,r3,r18
  8156dc:	e480c126 	beq	fp,r18,8159e4 <__divdf3+0x76c>
  8156e0:	a00b883a 	mov	r5,r20
  8156e4:	9009883a 	mov	r4,r18
  8156e8:	d9800315 	stw	r6,12(sp)
  8156ec:	d9c00215 	stw	r7,8(sp)
  8156f0:	da400115 	stw	r9,4(sp)
  8156f4:	080a3580 	call	80a358 <__udivsi3>
  8156f8:	a00b883a 	mov	r5,r20
  8156fc:	9009883a 	mov	r4,r18
  815700:	d8800015 	stw	r2,0(sp)
  815704:	080a3bc0 	call	80a3bc <__umodsi3>
  815708:	d9c00217 	ldw	r7,8(sp)
  81570c:	da000017 	ldw	r8,0(sp)
  815710:	1006943a 	slli	r3,r2,16
  815714:	3804d43a 	srli	r2,r7,16
  815718:	ba21383a 	mul	r16,r23,r8
  81571c:	d9800317 	ldw	r6,12(sp)
  815720:	10c4b03a 	or	r2,r2,r3
  815724:	da400117 	ldw	r9,4(sp)
  815728:	1400062e 	bgeu	r2,r16,815744 <__divdf3+0x4cc>
  81572c:	1705883a 	add	r2,r2,fp
  815730:	40ffffc4 	addi	r3,r8,-1
  815734:	1700ad36 	bltu	r2,fp,8159ec <__divdf3+0x774>
  815738:	1400ac2e 	bgeu	r2,r16,8159ec <__divdf3+0x774>
  81573c:	423fff84 	addi	r8,r8,-2
  815740:	1705883a 	add	r2,r2,fp
  815744:	1421c83a 	sub	r16,r2,r16
  815748:	a00b883a 	mov	r5,r20
  81574c:	8009883a 	mov	r4,r16
  815750:	d9800315 	stw	r6,12(sp)
  815754:	d9c00215 	stw	r7,8(sp)
  815758:	da000015 	stw	r8,0(sp)
  81575c:	da400115 	stw	r9,4(sp)
  815760:	080a3580 	call	80a358 <__udivsi3>
  815764:	8009883a 	mov	r4,r16
  815768:	a00b883a 	mov	r5,r20
  81576c:	1025883a 	mov	r18,r2
  815770:	080a3bc0 	call	80a3bc <__umodsi3>
  815774:	d9c00217 	ldw	r7,8(sp)
  815778:	1004943a 	slli	r2,r2,16
  81577c:	bcaf383a 	mul	r23,r23,r18
  815780:	393fffcc 	andi	r4,r7,65535
  815784:	2088b03a 	or	r4,r4,r2
  815788:	d9800317 	ldw	r6,12(sp)
  81578c:	da000017 	ldw	r8,0(sp)
  815790:	da400117 	ldw	r9,4(sp)
  815794:	25c0062e 	bgeu	r4,r23,8157b0 <__divdf3+0x538>
  815798:	2709883a 	add	r4,r4,fp
  81579c:	90bfffc4 	addi	r2,r18,-1
  8157a0:	27009436 	bltu	r4,fp,8159f4 <__divdf3+0x77c>
  8157a4:	25c0932e 	bgeu	r4,r23,8159f4 <__divdf3+0x77c>
  8157a8:	94bfff84 	addi	r18,r18,-2
  8157ac:	2709883a 	add	r4,r4,fp
  8157b0:	4004943a 	slli	r2,r8,16
  8157b4:	25efc83a 	sub	r23,r4,r23
  8157b8:	1490b03a 	or	r8,r2,r18
  8157bc:	4008d43a 	srli	r4,r8,16
  8157c0:	40ffffcc 	andi	r3,r8,65535
  8157c4:	30c5383a 	mul	r2,r6,r3
  8157c8:	1a47383a 	mul	r3,r3,r9
  8157cc:	310d383a 	mul	r6,r6,r4
  8157d0:	100ad43a 	srli	r5,r2,16
  8157d4:	4913383a 	mul	r9,r9,r4
  8157d8:	1987883a 	add	r3,r3,r6
  8157dc:	28c7883a 	add	r3,r5,r3
  8157e0:	1980022e 	bgeu	r3,r6,8157ec <__divdf3+0x574>
  8157e4:	01000074 	movhi	r4,1
  8157e8:	4913883a 	add	r9,r9,r4
  8157ec:	1808d43a 	srli	r4,r3,16
  8157f0:	1806943a 	slli	r3,r3,16
  8157f4:	10bfffcc 	andi	r2,r2,65535
  8157f8:	2253883a 	add	r9,r4,r9
  8157fc:	1887883a 	add	r3,r3,r2
  815800:	ba403836 	bltu	r23,r9,8158e4 <__divdf3+0x66c>
  815804:	ba403626 	beq	r23,r9,8158e0 <__divdf3+0x668>
  815808:	42000054 	ori	r8,r8,1
  81580c:	a880ffc4 	addi	r2,r21,1023
  815810:	00bf570e 	bge	zero,r2,815570 <__alt_data_end+0xff815570>
  815814:	40c001cc 	andi	r3,r8,7
  815818:	18000726 	beq	r3,zero,815838 <__divdf3+0x5c0>
  81581c:	40c003cc 	andi	r3,r8,15
  815820:	01000104 	movi	r4,4
  815824:	19000426 	beq	r3,r4,815838 <__divdf3+0x5c0>
  815828:	4107883a 	add	r3,r8,r4
  81582c:	1a11803a 	cmpltu	r8,r3,r8
  815830:	8a23883a 	add	r17,r17,r8
  815834:	1811883a 	mov	r8,r3
  815838:	88c0402c 	andhi	r3,r17,256
  81583c:	18000426 	beq	r3,zero,815850 <__divdf3+0x5d8>
  815840:	00ffc034 	movhi	r3,65280
  815844:	18ffffc4 	addi	r3,r3,-1
  815848:	a8810004 	addi	r2,r21,1024
  81584c:	88e2703a 	and	r17,r17,r3
  815850:	00c1ff84 	movi	r3,2046
  815854:	18bee316 	blt	r3,r2,8153e4 <__alt_data_end+0xff8153e4>
  815858:	8824977a 	slli	r18,r17,29
  81585c:	4010d0fa 	srli	r8,r8,3
  815860:	8822927a 	slli	r17,r17,9
  815864:	1081ffcc 	andi	r2,r2,2047
  815868:	9224b03a 	or	r18,r18,r8
  81586c:	880ad33a 	srli	r5,r17,12
  815870:	98c0004c 	andi	r3,r19,1
  815874:	003edf06 	br	8153f4 <__alt_data_end+0xff8153f4>
  815878:	8080022c 	andhi	r2,r16,8
  81587c:	10001226 	beq	r2,zero,8158c8 <__divdf3+0x650>
  815880:	8880022c 	andhi	r2,r17,8
  815884:	1000101e 	bne	r2,zero,8158c8 <__divdf3+0x650>
  815888:	00800434 	movhi	r2,16
  81588c:	89400234 	orhi	r5,r17,8
  815890:	10bfffc4 	addi	r2,r2,-1
  815894:	b007883a 	mov	r3,r22
  815898:	288a703a 	and	r5,r5,r2
  81589c:	4025883a 	mov	r18,r8
  8158a0:	003f3106 	br	815568 <__alt_data_end+0xff815568>
  8158a4:	008000c4 	movi	r2,3
  8158a8:	3880a626 	beq	r7,r2,815b44 <__divdf3+0x8cc>
  8158ac:	00800044 	movi	r2,1
  8158b0:	3880521e 	bne	r7,r2,8159fc <__divdf3+0x784>
  8158b4:	b807883a 	mov	r3,r23
  8158b8:	0005883a 	mov	r2,zero
  8158bc:	000b883a 	mov	r5,zero
  8158c0:	0025883a 	mov	r18,zero
  8158c4:	003ecb06 	br	8153f4 <__alt_data_end+0xff8153f4>
  8158c8:	00800434 	movhi	r2,16
  8158cc:	81400234 	orhi	r5,r16,8
  8158d0:	10bfffc4 	addi	r2,r2,-1
  8158d4:	a007883a 	mov	r3,r20
  8158d8:	288a703a 	and	r5,r5,r2
  8158dc:	003f2206 	br	815568 <__alt_data_end+0xff815568>
  8158e0:	183fca26 	beq	r3,zero,81580c <__alt_data_end+0xff81580c>
  8158e4:	e5ef883a 	add	r23,fp,r23
  8158e8:	40bfffc4 	addi	r2,r8,-1
  8158ec:	bf00392e 	bgeu	r23,fp,8159d4 <__divdf3+0x75c>
  8158f0:	1011883a 	mov	r8,r2
  8158f4:	ba7fc41e 	bne	r23,r9,815808 <__alt_data_end+0xff815808>
  8158f8:	b0ffc31e 	bne	r22,r3,815808 <__alt_data_end+0xff815808>
  8158fc:	003fc306 	br	81580c <__alt_data_end+0xff81580c>
  815900:	143ff604 	addi	r16,r2,-40
  815904:	9c20983a 	sll	r16,r19,r16
  815908:	0025883a 	mov	r18,zero
  81590c:	003ee206 	br	815498 <__alt_data_end+0xff815498>
  815910:	d9800315 	stw	r6,12(sp)
  815914:	d9c00215 	stw	r7,8(sp)
  815918:	0816fd00 	call	816fd0 <__clzsi2>
  81591c:	10800804 	addi	r2,r2,32
  815920:	d9c00217 	ldw	r7,8(sp)
  815924:	d9800317 	ldw	r6,12(sp)
  815928:	003ed106 	br	815470 <__alt_data_end+0xff815470>
  81592c:	147ff604 	addi	r17,r2,-40
  815930:	3462983a 	sll	r17,r6,r17
  815934:	0011883a 	mov	r8,zero
  815938:	003ef506 	br	815510 <__alt_data_end+0xff815510>
  81593c:	3009883a 	mov	r4,r6
  815940:	d9800315 	stw	r6,12(sp)
  815944:	da400115 	stw	r9,4(sp)
  815948:	0816fd00 	call	816fd0 <__clzsi2>
  81594c:	10800804 	addi	r2,r2,32
  815950:	da400117 	ldw	r9,4(sp)
  815954:	d9800317 	ldw	r6,12(sp)
  815958:	003ee306 	br	8154e8 <__alt_data_end+0xff8154e8>
  81595c:	85a1883a 	add	r16,r16,r22
  815960:	8585803a 	cmpltu	r2,r16,r22
  815964:	1705883a 	add	r2,r2,fp
  815968:	14a5883a 	add	r18,r2,r18
  81596c:	88bfffc4 	addi	r2,r17,-1
  815970:	e4800c2e 	bgeu	fp,r18,8159a4 <__divdf3+0x72c>
  815974:	90c03e36 	bltu	r18,r3,815a70 <__divdf3+0x7f8>
  815978:	1c806926 	beq	r3,r18,815b20 <__divdf3+0x8a8>
  81597c:	90c7c83a 	sub	r3,r18,r3
  815980:	1023883a 	mov	r17,r2
  815984:	003f5206 	br	8156d0 <__alt_data_end+0xff8156d0>
  815988:	923f0436 	bltu	r18,r8,81559c <__alt_data_end+0xff81559c>
  81598c:	800897fa 	slli	r4,r16,31
  815990:	9004d07a 	srli	r2,r18,1
  815994:	8006d07a 	srli	r3,r16,1
  815998:	902097fa 	slli	r16,r18,31
  81599c:	20a4b03a 	or	r18,r4,r2
  8159a0:	003f0106 	br	8155a8 <__alt_data_end+0xff8155a8>
  8159a4:	e4bff51e 	bne	fp,r18,81597c <__alt_data_end+0xff81597c>
  8159a8:	85bff22e 	bgeu	r16,r22,815974 <__alt_data_end+0xff815974>
  8159ac:	e0c7c83a 	sub	r3,fp,r3
  8159b0:	1023883a 	mov	r17,r2
  8159b4:	003f4606 	br	8156d0 <__alt_data_end+0xff8156d0>
  8159b8:	100f883a 	mov	r7,r2
  8159bc:	003f2b06 	br	81566c <__alt_data_end+0xff81566c>
  8159c0:	180d883a 	mov	r6,r3
  8159c4:	003f1306 	br	815614 <__alt_data_end+0xff815614>
  8159c8:	813fe436 	bltu	r16,r4,81595c <__alt_data_end+0xff81595c>
  8159cc:	0007883a 	mov	r3,zero
  8159d0:	003f3f06 	br	8156d0 <__alt_data_end+0xff8156d0>
  8159d4:	ba402c36 	bltu	r23,r9,815a88 <__divdf3+0x810>
  8159d8:	4dc05426 	beq	r9,r23,815b2c <__divdf3+0x8b4>
  8159dc:	1011883a 	mov	r8,r2
  8159e0:	003f8906 	br	815808 <__alt_data_end+0xff815808>
  8159e4:	023fffc4 	movi	r8,-1
  8159e8:	003f8806 	br	81580c <__alt_data_end+0xff81580c>
  8159ec:	1811883a 	mov	r8,r3
  8159f0:	003f5406 	br	815744 <__alt_data_end+0xff815744>
  8159f4:	1025883a 	mov	r18,r2
  8159f8:	003f6d06 	br	8157b0 <__alt_data_end+0xff8157b0>
  8159fc:	b827883a 	mov	r19,r23
  815a00:	003f8206 	br	81580c <__alt_data_end+0xff81580c>
  815a04:	010007c4 	movi	r4,31
  815a08:	20c02616 	blt	r4,r3,815aa4 <__divdf3+0x82c>
  815a0c:	00800804 	movi	r2,32
  815a10:	10c5c83a 	sub	r2,r2,r3
  815a14:	888a983a 	sll	r5,r17,r2
  815a18:	40c8d83a 	srl	r4,r8,r3
  815a1c:	4084983a 	sll	r2,r8,r2
  815a20:	88e2d83a 	srl	r17,r17,r3
  815a24:	2906b03a 	or	r3,r5,r4
  815a28:	1004c03a 	cmpne	r2,r2,zero
  815a2c:	1886b03a 	or	r3,r3,r2
  815a30:	188001cc 	andi	r2,r3,7
  815a34:	10000726 	beq	r2,zero,815a54 <__divdf3+0x7dc>
  815a38:	188003cc 	andi	r2,r3,15
  815a3c:	01000104 	movi	r4,4
  815a40:	11000426 	beq	r2,r4,815a54 <__divdf3+0x7dc>
  815a44:	1805883a 	mov	r2,r3
  815a48:	10c00104 	addi	r3,r2,4
  815a4c:	1885803a 	cmpltu	r2,r3,r2
  815a50:	88a3883a 	add	r17,r17,r2
  815a54:	8880202c 	andhi	r2,r17,128
  815a58:	10002726 	beq	r2,zero,815af8 <__divdf3+0x880>
  815a5c:	98c0004c 	andi	r3,r19,1
  815a60:	00800044 	movi	r2,1
  815a64:	000b883a 	mov	r5,zero
  815a68:	0025883a 	mov	r18,zero
  815a6c:	003e6106 	br	8153f4 <__alt_data_end+0xff8153f4>
  815a70:	85a1883a 	add	r16,r16,r22
  815a74:	8585803a 	cmpltu	r2,r16,r22
  815a78:	1705883a 	add	r2,r2,fp
  815a7c:	14a5883a 	add	r18,r2,r18
  815a80:	8c7fff84 	addi	r17,r17,-2
  815a84:	003f1106 	br	8156cc <__alt_data_end+0xff8156cc>
  815a88:	b589883a 	add	r4,r22,r22
  815a8c:	25ad803a 	cmpltu	r22,r4,r22
  815a90:	b739883a 	add	fp,r22,fp
  815a94:	40bfff84 	addi	r2,r8,-2
  815a98:	bf2f883a 	add	r23,r23,fp
  815a9c:	202d883a 	mov	r22,r4
  815aa0:	003f9306 	br	8158f0 <__alt_data_end+0xff8158f0>
  815aa4:	013ff844 	movi	r4,-31
  815aa8:	2085c83a 	sub	r2,r4,r2
  815aac:	8888d83a 	srl	r4,r17,r2
  815ab0:	00800804 	movi	r2,32
  815ab4:	18802126 	beq	r3,r2,815b3c <__divdf3+0x8c4>
  815ab8:	00801004 	movi	r2,64
  815abc:	10c5c83a 	sub	r2,r2,r3
  815ac0:	8884983a 	sll	r2,r17,r2
  815ac4:	1204b03a 	or	r2,r2,r8
  815ac8:	1004c03a 	cmpne	r2,r2,zero
  815acc:	2084b03a 	or	r2,r4,r2
  815ad0:	144001cc 	andi	r17,r2,7
  815ad4:	88000d1e 	bne	r17,zero,815b0c <__divdf3+0x894>
  815ad8:	000b883a 	mov	r5,zero
  815adc:	1024d0fa 	srli	r18,r2,3
  815ae0:	98c0004c 	andi	r3,r19,1
  815ae4:	0005883a 	mov	r2,zero
  815ae8:	9464b03a 	or	r18,r18,r17
  815aec:	003e4106 	br	8153f4 <__alt_data_end+0xff8153f4>
  815af0:	1007883a 	mov	r3,r2
  815af4:	0023883a 	mov	r17,zero
  815af8:	880a927a 	slli	r5,r17,9
  815afc:	1805883a 	mov	r2,r3
  815b00:	8822977a 	slli	r17,r17,29
  815b04:	280ad33a 	srli	r5,r5,12
  815b08:	003ff406 	br	815adc <__alt_data_end+0xff815adc>
  815b0c:	10c003cc 	andi	r3,r2,15
  815b10:	01000104 	movi	r4,4
  815b14:	193ff626 	beq	r3,r4,815af0 <__alt_data_end+0xff815af0>
  815b18:	0023883a 	mov	r17,zero
  815b1c:	003fca06 	br	815a48 <__alt_data_end+0xff815a48>
  815b20:	813fd336 	bltu	r16,r4,815a70 <__alt_data_end+0xff815a70>
  815b24:	1023883a 	mov	r17,r2
  815b28:	003fa806 	br	8159cc <__alt_data_end+0xff8159cc>
  815b2c:	b0ffd636 	bltu	r22,r3,815a88 <__alt_data_end+0xff815a88>
  815b30:	1011883a 	mov	r8,r2
  815b34:	b0ff341e 	bne	r22,r3,815808 <__alt_data_end+0xff815808>
  815b38:	003f3406 	br	81580c <__alt_data_end+0xff81580c>
  815b3c:	0005883a 	mov	r2,zero
  815b40:	003fe006 	br	815ac4 <__alt_data_end+0xff815ac4>
  815b44:	00800434 	movhi	r2,16
  815b48:	89400234 	orhi	r5,r17,8
  815b4c:	10bfffc4 	addi	r2,r2,-1
  815b50:	b807883a 	mov	r3,r23
  815b54:	288a703a 	and	r5,r5,r2
  815b58:	4025883a 	mov	r18,r8
  815b5c:	003e8206 	br	815568 <__alt_data_end+0xff815568>

00815b60 <__eqdf2>:
  815b60:	2804d53a 	srli	r2,r5,20
  815b64:	3806d53a 	srli	r3,r7,20
  815b68:	02000434 	movhi	r8,16
  815b6c:	423fffc4 	addi	r8,r8,-1
  815b70:	1081ffcc 	andi	r2,r2,2047
  815b74:	0281ffc4 	movi	r10,2047
  815b78:	2a12703a 	and	r9,r5,r8
  815b7c:	18c1ffcc 	andi	r3,r3,2047
  815b80:	3a10703a 	and	r8,r7,r8
  815b84:	280ad7fa 	srli	r5,r5,31
  815b88:	380ed7fa 	srli	r7,r7,31
  815b8c:	12801026 	beq	r2,r10,815bd0 <__eqdf2+0x70>
  815b90:	0281ffc4 	movi	r10,2047
  815b94:	1a800a26 	beq	r3,r10,815bc0 <__eqdf2+0x60>
  815b98:	10c00226 	beq	r2,r3,815ba4 <__eqdf2+0x44>
  815b9c:	00800044 	movi	r2,1
  815ba0:	f800283a 	ret
  815ba4:	4a3ffd1e 	bne	r9,r8,815b9c <__alt_data_end+0xff815b9c>
  815ba8:	21bffc1e 	bne	r4,r6,815b9c <__alt_data_end+0xff815b9c>
  815bac:	29c00c26 	beq	r5,r7,815be0 <__eqdf2+0x80>
  815bb0:	103ffa1e 	bne	r2,zero,815b9c <__alt_data_end+0xff815b9c>
  815bb4:	2244b03a 	or	r2,r4,r9
  815bb8:	1004c03a 	cmpne	r2,r2,zero
  815bbc:	f800283a 	ret
  815bc0:	3214b03a 	or	r10,r6,r8
  815bc4:	503ff426 	beq	r10,zero,815b98 <__alt_data_end+0xff815b98>
  815bc8:	00800044 	movi	r2,1
  815bcc:	f800283a 	ret
  815bd0:	2254b03a 	or	r10,r4,r9
  815bd4:	503fee26 	beq	r10,zero,815b90 <__alt_data_end+0xff815b90>
  815bd8:	00800044 	movi	r2,1
  815bdc:	f800283a 	ret
  815be0:	0005883a 	mov	r2,zero
  815be4:	f800283a 	ret

00815be8 <__gedf2>:
  815be8:	2804d53a 	srli	r2,r5,20
  815bec:	3806d53a 	srli	r3,r7,20
  815bf0:	02000434 	movhi	r8,16
  815bf4:	423fffc4 	addi	r8,r8,-1
  815bf8:	1081ffcc 	andi	r2,r2,2047
  815bfc:	0241ffc4 	movi	r9,2047
  815c00:	2a14703a 	and	r10,r5,r8
  815c04:	18c1ffcc 	andi	r3,r3,2047
  815c08:	3a10703a 	and	r8,r7,r8
  815c0c:	280ad7fa 	srli	r5,r5,31
  815c10:	380ed7fa 	srli	r7,r7,31
  815c14:	12401d26 	beq	r2,r9,815c8c <__gedf2+0xa4>
  815c18:	0241ffc4 	movi	r9,2047
  815c1c:	1a401226 	beq	r3,r9,815c68 <__gedf2+0x80>
  815c20:	1000081e 	bne	r2,zero,815c44 <__gedf2+0x5c>
  815c24:	2296b03a 	or	r11,r4,r10
  815c28:	5813003a 	cmpeq	r9,r11,zero
  815c2c:	1800091e 	bne	r3,zero,815c54 <__gedf2+0x6c>
  815c30:	3218b03a 	or	r12,r6,r8
  815c34:	6000071e 	bne	r12,zero,815c54 <__gedf2+0x6c>
  815c38:	0005883a 	mov	r2,zero
  815c3c:	5800101e 	bne	r11,zero,815c80 <__gedf2+0x98>
  815c40:	f800283a 	ret
  815c44:	18000c1e 	bne	r3,zero,815c78 <__gedf2+0x90>
  815c48:	3212b03a 	or	r9,r6,r8
  815c4c:	48000c26 	beq	r9,zero,815c80 <__gedf2+0x98>
  815c50:	0013883a 	mov	r9,zero
  815c54:	39c03fcc 	andi	r7,r7,255
  815c58:	48000826 	beq	r9,zero,815c7c <__gedf2+0x94>
  815c5c:	38000926 	beq	r7,zero,815c84 <__gedf2+0x9c>
  815c60:	00800044 	movi	r2,1
  815c64:	f800283a 	ret
  815c68:	3212b03a 	or	r9,r6,r8
  815c6c:	483fec26 	beq	r9,zero,815c20 <__alt_data_end+0xff815c20>
  815c70:	00bfff84 	movi	r2,-2
  815c74:	f800283a 	ret
  815c78:	39c03fcc 	andi	r7,r7,255
  815c7c:	29c00626 	beq	r5,r7,815c98 <__gedf2+0xb0>
  815c80:	283ff726 	beq	r5,zero,815c60 <__alt_data_end+0xff815c60>
  815c84:	00bfffc4 	movi	r2,-1
  815c88:	f800283a 	ret
  815c8c:	2292b03a 	or	r9,r4,r10
  815c90:	483fe126 	beq	r9,zero,815c18 <__alt_data_end+0xff815c18>
  815c94:	003ff606 	br	815c70 <__alt_data_end+0xff815c70>
  815c98:	18bff916 	blt	r3,r2,815c80 <__alt_data_end+0xff815c80>
  815c9c:	10c00316 	blt	r2,r3,815cac <__gedf2+0xc4>
  815ca0:	42bff736 	bltu	r8,r10,815c80 <__alt_data_end+0xff815c80>
  815ca4:	52000326 	beq	r10,r8,815cb4 <__gedf2+0xcc>
  815ca8:	5200042e 	bgeu	r10,r8,815cbc <__gedf2+0xd4>
  815cac:	283fec1e 	bne	r5,zero,815c60 <__alt_data_end+0xff815c60>
  815cb0:	003ff406 	br	815c84 <__alt_data_end+0xff815c84>
  815cb4:	313ff236 	bltu	r6,r4,815c80 <__alt_data_end+0xff815c80>
  815cb8:	21bffc36 	bltu	r4,r6,815cac <__alt_data_end+0xff815cac>
  815cbc:	0005883a 	mov	r2,zero
  815cc0:	f800283a 	ret

00815cc4 <__ledf2>:
  815cc4:	2804d53a 	srli	r2,r5,20
  815cc8:	3810d53a 	srli	r8,r7,20
  815ccc:	00c00434 	movhi	r3,16
  815cd0:	18ffffc4 	addi	r3,r3,-1
  815cd4:	1081ffcc 	andi	r2,r2,2047
  815cd8:	0241ffc4 	movi	r9,2047
  815cdc:	28d4703a 	and	r10,r5,r3
  815ce0:	4201ffcc 	andi	r8,r8,2047
  815ce4:	38c6703a 	and	r3,r7,r3
  815ce8:	280ad7fa 	srli	r5,r5,31
  815cec:	380ed7fa 	srli	r7,r7,31
  815cf0:	12401f26 	beq	r2,r9,815d70 <__ledf2+0xac>
  815cf4:	0241ffc4 	movi	r9,2047
  815cf8:	42401426 	beq	r8,r9,815d4c <__ledf2+0x88>
  815cfc:	1000091e 	bne	r2,zero,815d24 <__ledf2+0x60>
  815d00:	2296b03a 	or	r11,r4,r10
  815d04:	5813003a 	cmpeq	r9,r11,zero
  815d08:	29403fcc 	andi	r5,r5,255
  815d0c:	40000a1e 	bne	r8,zero,815d38 <__ledf2+0x74>
  815d10:	30d8b03a 	or	r12,r6,r3
  815d14:	6000081e 	bne	r12,zero,815d38 <__ledf2+0x74>
  815d18:	0005883a 	mov	r2,zero
  815d1c:	5800111e 	bne	r11,zero,815d64 <__ledf2+0xa0>
  815d20:	f800283a 	ret
  815d24:	29403fcc 	andi	r5,r5,255
  815d28:	40000c1e 	bne	r8,zero,815d5c <__ledf2+0x98>
  815d2c:	30d2b03a 	or	r9,r6,r3
  815d30:	48000c26 	beq	r9,zero,815d64 <__ledf2+0xa0>
  815d34:	0013883a 	mov	r9,zero
  815d38:	39c03fcc 	andi	r7,r7,255
  815d3c:	48000826 	beq	r9,zero,815d60 <__ledf2+0x9c>
  815d40:	38001126 	beq	r7,zero,815d88 <__ledf2+0xc4>
  815d44:	00800044 	movi	r2,1
  815d48:	f800283a 	ret
  815d4c:	30d2b03a 	or	r9,r6,r3
  815d50:	483fea26 	beq	r9,zero,815cfc <__alt_data_end+0xff815cfc>
  815d54:	00800084 	movi	r2,2
  815d58:	f800283a 	ret
  815d5c:	39c03fcc 	andi	r7,r7,255
  815d60:	39400726 	beq	r7,r5,815d80 <__ledf2+0xbc>
  815d64:	2800081e 	bne	r5,zero,815d88 <__ledf2+0xc4>
  815d68:	00800044 	movi	r2,1
  815d6c:	f800283a 	ret
  815d70:	2292b03a 	or	r9,r4,r10
  815d74:	483fdf26 	beq	r9,zero,815cf4 <__alt_data_end+0xff815cf4>
  815d78:	00800084 	movi	r2,2
  815d7c:	f800283a 	ret
  815d80:	4080030e 	bge	r8,r2,815d90 <__ledf2+0xcc>
  815d84:	383fef26 	beq	r7,zero,815d44 <__alt_data_end+0xff815d44>
  815d88:	00bfffc4 	movi	r2,-1
  815d8c:	f800283a 	ret
  815d90:	123feb16 	blt	r2,r8,815d40 <__alt_data_end+0xff815d40>
  815d94:	1abff336 	bltu	r3,r10,815d64 <__alt_data_end+0xff815d64>
  815d98:	50c00326 	beq	r10,r3,815da8 <__ledf2+0xe4>
  815d9c:	50c0042e 	bgeu	r10,r3,815db0 <__ledf2+0xec>
  815da0:	283fe81e 	bne	r5,zero,815d44 <__alt_data_end+0xff815d44>
  815da4:	003ff806 	br	815d88 <__alt_data_end+0xff815d88>
  815da8:	313fee36 	bltu	r6,r4,815d64 <__alt_data_end+0xff815d64>
  815dac:	21bffc36 	bltu	r4,r6,815da0 <__alt_data_end+0xff815da0>
  815db0:	0005883a 	mov	r2,zero
  815db4:	f800283a 	ret

00815db8 <__muldf3>:
  815db8:	defff304 	addi	sp,sp,-52
  815dbc:	2804d53a 	srli	r2,r5,20
  815dc0:	dd800915 	stw	r22,36(sp)
  815dc4:	282cd7fa 	srli	r22,r5,31
  815dc8:	dc000315 	stw	r16,12(sp)
  815dcc:	04000434 	movhi	r16,16
  815dd0:	dd400815 	stw	r21,32(sp)
  815dd4:	dc800515 	stw	r18,20(sp)
  815dd8:	843fffc4 	addi	r16,r16,-1
  815ddc:	dfc00c15 	stw	ra,48(sp)
  815de0:	df000b15 	stw	fp,44(sp)
  815de4:	ddc00a15 	stw	r23,40(sp)
  815de8:	dd000715 	stw	r20,28(sp)
  815dec:	dcc00615 	stw	r19,24(sp)
  815df0:	dc400415 	stw	r17,16(sp)
  815df4:	1481ffcc 	andi	r18,r2,2047
  815df8:	2c20703a 	and	r16,r5,r16
  815dfc:	b02b883a 	mov	r21,r22
  815e00:	b2403fcc 	andi	r9,r22,255
  815e04:	90006026 	beq	r18,zero,815f88 <__muldf3+0x1d0>
  815e08:	0081ffc4 	movi	r2,2047
  815e0c:	2029883a 	mov	r20,r4
  815e10:	90803626 	beq	r18,r2,815eec <__muldf3+0x134>
  815e14:	80800434 	orhi	r2,r16,16
  815e18:	100490fa 	slli	r2,r2,3
  815e1c:	2020d77a 	srli	r16,r4,29
  815e20:	202890fa 	slli	r20,r4,3
  815e24:	94bf0044 	addi	r18,r18,-1023
  815e28:	80a0b03a 	or	r16,r16,r2
  815e2c:	0027883a 	mov	r19,zero
  815e30:	0039883a 	mov	fp,zero
  815e34:	3804d53a 	srli	r2,r7,20
  815e38:	382ed7fa 	srli	r23,r7,31
  815e3c:	04400434 	movhi	r17,16
  815e40:	8c7fffc4 	addi	r17,r17,-1
  815e44:	1081ffcc 	andi	r2,r2,2047
  815e48:	3011883a 	mov	r8,r6
  815e4c:	3c62703a 	and	r17,r7,r17
  815e50:	ba803fcc 	andi	r10,r23,255
  815e54:	10006d26 	beq	r2,zero,81600c <__muldf3+0x254>
  815e58:	00c1ffc4 	movi	r3,2047
  815e5c:	10c06526 	beq	r2,r3,815ff4 <__muldf3+0x23c>
  815e60:	88c00434 	orhi	r3,r17,16
  815e64:	180690fa 	slli	r3,r3,3
  815e68:	3022d77a 	srli	r17,r6,29
  815e6c:	301090fa 	slli	r8,r6,3
  815e70:	10bf0044 	addi	r2,r2,-1023
  815e74:	88e2b03a 	or	r17,r17,r3
  815e78:	000b883a 	mov	r5,zero
  815e7c:	9085883a 	add	r2,r18,r2
  815e80:	2cc8b03a 	or	r4,r5,r19
  815e84:	00c003c4 	movi	r3,15
  815e88:	bdacf03a 	xor	r22,r23,r22
  815e8c:	12c00044 	addi	r11,r2,1
  815e90:	19009936 	bltu	r3,r4,8160f8 <__muldf3+0x340>
  815e94:	200890ba 	slli	r4,r4,2
  815e98:	00c02074 	movhi	r3,129
  815e9c:	18d7ab04 	addi	r3,r3,24236
  815ea0:	20c9883a 	add	r4,r4,r3
  815ea4:	20c00017 	ldw	r3,0(r4)
  815ea8:	1800683a 	jmp	r3
  815eac:	008160f8 	rdprs	r2,zero,1411
  815eb0:	00815f0c 	andi	r2,zero,1404
  815eb4:	00815f0c 	andi	r2,zero,1404
  815eb8:	00815f08 	cmpgei	r2,zero,1404
  815ebc:	008160d4 	movui	r2,1411
  815ec0:	008160d4 	movui	r2,1411
  815ec4:	008160bc 	xorhi	r2,zero,1410
  815ec8:	00815f08 	cmpgei	r2,zero,1404
  815ecc:	008160d4 	movui	r2,1411
  815ed0:	008160bc 	xorhi	r2,zero,1410
  815ed4:	008160d4 	movui	r2,1411
  815ed8:	00815f08 	cmpgei	r2,zero,1404
  815edc:	008160e4 	muli	r2,zero,1411
  815ee0:	008160e4 	muli	r2,zero,1411
  815ee4:	008160e4 	muli	r2,zero,1411
  815ee8:	00816300 	call	81630 <__alt_mem_sdram_0-0x77e9d0>
  815eec:	2404b03a 	or	r2,r4,r16
  815ef0:	10006f1e 	bne	r2,zero,8160b0 <__muldf3+0x2f8>
  815ef4:	04c00204 	movi	r19,8
  815ef8:	0021883a 	mov	r16,zero
  815efc:	0029883a 	mov	r20,zero
  815f00:	07000084 	movi	fp,2
  815f04:	003fcb06 	br	815e34 <__alt_data_end+0xff815e34>
  815f08:	502d883a 	mov	r22,r10
  815f0c:	00800084 	movi	r2,2
  815f10:	28805726 	beq	r5,r2,816070 <__muldf3+0x2b8>
  815f14:	008000c4 	movi	r2,3
  815f18:	28816626 	beq	r5,r2,8164b4 <__muldf3+0x6fc>
  815f1c:	00800044 	movi	r2,1
  815f20:	2881411e 	bne	r5,r2,816428 <__muldf3+0x670>
  815f24:	b02b883a 	mov	r21,r22
  815f28:	0005883a 	mov	r2,zero
  815f2c:	000b883a 	mov	r5,zero
  815f30:	0029883a 	mov	r20,zero
  815f34:	1004953a 	slli	r2,r2,20
  815f38:	a8c03fcc 	andi	r3,r21,255
  815f3c:	04400434 	movhi	r17,16
  815f40:	8c7fffc4 	addi	r17,r17,-1
  815f44:	180697fa 	slli	r3,r3,31
  815f48:	2c4a703a 	and	r5,r5,r17
  815f4c:	288ab03a 	or	r5,r5,r2
  815f50:	28c6b03a 	or	r3,r5,r3
  815f54:	a005883a 	mov	r2,r20
  815f58:	dfc00c17 	ldw	ra,48(sp)
  815f5c:	df000b17 	ldw	fp,44(sp)
  815f60:	ddc00a17 	ldw	r23,40(sp)
  815f64:	dd800917 	ldw	r22,36(sp)
  815f68:	dd400817 	ldw	r21,32(sp)
  815f6c:	dd000717 	ldw	r20,28(sp)
  815f70:	dcc00617 	ldw	r19,24(sp)
  815f74:	dc800517 	ldw	r18,20(sp)
  815f78:	dc400417 	ldw	r17,16(sp)
  815f7c:	dc000317 	ldw	r16,12(sp)
  815f80:	dec00d04 	addi	sp,sp,52
  815f84:	f800283a 	ret
  815f88:	2404b03a 	or	r2,r4,r16
  815f8c:	2027883a 	mov	r19,r4
  815f90:	10004226 	beq	r2,zero,81609c <__muldf3+0x2e4>
  815f94:	8000fc26 	beq	r16,zero,816388 <__muldf3+0x5d0>
  815f98:	8009883a 	mov	r4,r16
  815f9c:	d9800215 	stw	r6,8(sp)
  815fa0:	d9c00015 	stw	r7,0(sp)
  815fa4:	da400115 	stw	r9,4(sp)
  815fa8:	0816fd00 	call	816fd0 <__clzsi2>
  815fac:	d9800217 	ldw	r6,8(sp)
  815fb0:	d9c00017 	ldw	r7,0(sp)
  815fb4:	da400117 	ldw	r9,4(sp)
  815fb8:	113ffd44 	addi	r4,r2,-11
  815fbc:	00c00704 	movi	r3,28
  815fc0:	1900ed16 	blt	r3,r4,816378 <__muldf3+0x5c0>
  815fc4:	00c00744 	movi	r3,29
  815fc8:	147ffe04 	addi	r17,r2,-8
  815fcc:	1907c83a 	sub	r3,r3,r4
  815fd0:	8460983a 	sll	r16,r16,r17
  815fd4:	98c6d83a 	srl	r3,r19,r3
  815fd8:	9c68983a 	sll	r20,r19,r17
  815fdc:	1c20b03a 	or	r16,r3,r16
  815fe0:	1080fcc4 	addi	r2,r2,1011
  815fe4:	00a5c83a 	sub	r18,zero,r2
  815fe8:	0027883a 	mov	r19,zero
  815fec:	0039883a 	mov	fp,zero
  815ff0:	003f9006 	br	815e34 <__alt_data_end+0xff815e34>
  815ff4:	3446b03a 	or	r3,r6,r17
  815ff8:	1800261e 	bne	r3,zero,816094 <__muldf3+0x2dc>
  815ffc:	0023883a 	mov	r17,zero
  816000:	0011883a 	mov	r8,zero
  816004:	01400084 	movi	r5,2
  816008:	003f9c06 	br	815e7c <__alt_data_end+0xff815e7c>
  81600c:	3446b03a 	or	r3,r6,r17
  816010:	18001c26 	beq	r3,zero,816084 <__muldf3+0x2cc>
  816014:	8800ce26 	beq	r17,zero,816350 <__muldf3+0x598>
  816018:	8809883a 	mov	r4,r17
  81601c:	d9800215 	stw	r6,8(sp)
  816020:	da400115 	stw	r9,4(sp)
  816024:	da800015 	stw	r10,0(sp)
  816028:	0816fd00 	call	816fd0 <__clzsi2>
  81602c:	d9800217 	ldw	r6,8(sp)
  816030:	da400117 	ldw	r9,4(sp)
  816034:	da800017 	ldw	r10,0(sp)
  816038:	113ffd44 	addi	r4,r2,-11
  81603c:	00c00704 	movi	r3,28
  816040:	1900bf16 	blt	r3,r4,816340 <__muldf3+0x588>
  816044:	00c00744 	movi	r3,29
  816048:	123ffe04 	addi	r8,r2,-8
  81604c:	1907c83a 	sub	r3,r3,r4
  816050:	8a22983a 	sll	r17,r17,r8
  816054:	30c6d83a 	srl	r3,r6,r3
  816058:	3210983a 	sll	r8,r6,r8
  81605c:	1c62b03a 	or	r17,r3,r17
  816060:	1080fcc4 	addi	r2,r2,1011
  816064:	0085c83a 	sub	r2,zero,r2
  816068:	000b883a 	mov	r5,zero
  81606c:	003f8306 	br	815e7c <__alt_data_end+0xff815e7c>
  816070:	b02b883a 	mov	r21,r22
  816074:	0081ffc4 	movi	r2,2047
  816078:	000b883a 	mov	r5,zero
  81607c:	0029883a 	mov	r20,zero
  816080:	003fac06 	br	815f34 <__alt_data_end+0xff815f34>
  816084:	0023883a 	mov	r17,zero
  816088:	0011883a 	mov	r8,zero
  81608c:	01400044 	movi	r5,1
  816090:	003f7a06 	br	815e7c <__alt_data_end+0xff815e7c>
  816094:	014000c4 	movi	r5,3
  816098:	003f7806 	br	815e7c <__alt_data_end+0xff815e7c>
  81609c:	04c00104 	movi	r19,4
  8160a0:	0021883a 	mov	r16,zero
  8160a4:	0029883a 	mov	r20,zero
  8160a8:	07000044 	movi	fp,1
  8160ac:	003f6106 	br	815e34 <__alt_data_end+0xff815e34>
  8160b0:	04c00304 	movi	r19,12
  8160b4:	070000c4 	movi	fp,3
  8160b8:	003f5e06 	br	815e34 <__alt_data_end+0xff815e34>
  8160bc:	01400434 	movhi	r5,16
  8160c0:	002b883a 	mov	r21,zero
  8160c4:	297fffc4 	addi	r5,r5,-1
  8160c8:	053fffc4 	movi	r20,-1
  8160cc:	0081ffc4 	movi	r2,2047
  8160d0:	003f9806 	br	815f34 <__alt_data_end+0xff815f34>
  8160d4:	8023883a 	mov	r17,r16
  8160d8:	a011883a 	mov	r8,r20
  8160dc:	e00b883a 	mov	r5,fp
  8160e0:	003f8a06 	br	815f0c <__alt_data_end+0xff815f0c>
  8160e4:	8023883a 	mov	r17,r16
  8160e8:	a011883a 	mov	r8,r20
  8160ec:	482d883a 	mov	r22,r9
  8160f0:	e00b883a 	mov	r5,fp
  8160f4:	003f8506 	br	815f0c <__alt_data_end+0xff815f0c>
  8160f8:	a00ad43a 	srli	r5,r20,16
  8160fc:	401ad43a 	srli	r13,r8,16
  816100:	a53fffcc 	andi	r20,r20,65535
  816104:	423fffcc 	andi	r8,r8,65535
  816108:	4519383a 	mul	r12,r8,r20
  81610c:	4147383a 	mul	r3,r8,r5
  816110:	6d09383a 	mul	r4,r13,r20
  816114:	600cd43a 	srli	r6,r12,16
  816118:	2b5d383a 	mul	r14,r5,r13
  81611c:	20c9883a 	add	r4,r4,r3
  816120:	310d883a 	add	r6,r6,r4
  816124:	30c0022e 	bgeu	r6,r3,816130 <__muldf3+0x378>
  816128:	00c00074 	movhi	r3,1
  81612c:	70dd883a 	add	r14,r14,r3
  816130:	8826d43a 	srli	r19,r17,16
  816134:	8bffffcc 	andi	r15,r17,65535
  816138:	7d23383a 	mul	r17,r15,r20
  81613c:	7949383a 	mul	r4,r15,r5
  816140:	9d29383a 	mul	r20,r19,r20
  816144:	8814d43a 	srli	r10,r17,16
  816148:	3012943a 	slli	r9,r6,16
  81614c:	a129883a 	add	r20,r20,r4
  816150:	633fffcc 	andi	r12,r12,65535
  816154:	5515883a 	add	r10,r10,r20
  816158:	3006d43a 	srli	r3,r6,16
  81615c:	4b13883a 	add	r9,r9,r12
  816160:	2ccb383a 	mul	r5,r5,r19
  816164:	5100022e 	bgeu	r10,r4,816170 <__muldf3+0x3b8>
  816168:	01000074 	movhi	r4,1
  81616c:	290b883a 	add	r5,r5,r4
  816170:	802ad43a 	srli	r21,r16,16
  816174:	843fffcc 	andi	r16,r16,65535
  816178:	440d383a 	mul	r6,r8,r16
  81617c:	4565383a 	mul	r18,r8,r21
  816180:	8349383a 	mul	r4,r16,r13
  816184:	500e943a 	slli	r7,r10,16
  816188:	3010d43a 	srli	r8,r6,16
  81618c:	5028d43a 	srli	r20,r10,16
  816190:	2489883a 	add	r4,r4,r18
  816194:	8abfffcc 	andi	r10,r17,65535
  816198:	3a95883a 	add	r10,r7,r10
  81619c:	4119883a 	add	r12,r8,r4
  8161a0:	a169883a 	add	r20,r20,r5
  8161a4:	1a87883a 	add	r3,r3,r10
  8161a8:	6d5b383a 	mul	r13,r13,r21
  8161ac:	6480022e 	bgeu	r12,r18,8161b8 <__muldf3+0x400>
  8161b0:	01000074 	movhi	r4,1
  8161b4:	691b883a 	add	r13,r13,r4
  8161b8:	7c25383a 	mul	r18,r15,r16
  8161bc:	7d4b383a 	mul	r5,r15,r21
  8161c0:	84cf383a 	mul	r7,r16,r19
  8161c4:	901ed43a 	srli	r15,r18,16
  8161c8:	6008d43a 	srli	r4,r12,16
  8161cc:	6010943a 	slli	r8,r12,16
  8161d0:	394f883a 	add	r7,r7,r5
  8161d4:	333fffcc 	andi	r12,r6,65535
  8161d8:	79df883a 	add	r15,r15,r7
  8161dc:	235b883a 	add	r13,r4,r13
  8161e0:	9d63383a 	mul	r17,r19,r21
  8161e4:	4309883a 	add	r4,r8,r12
  8161e8:	7940022e 	bgeu	r15,r5,8161f4 <__muldf3+0x43c>
  8161ec:	01400074 	movhi	r5,1
  8161f0:	8963883a 	add	r17,r17,r5
  8161f4:	780a943a 	slli	r5,r15,16
  8161f8:	91bfffcc 	andi	r6,r18,65535
  8161fc:	70c7883a 	add	r3,r14,r3
  816200:	298d883a 	add	r6,r5,r6
  816204:	1a8f803a 	cmpltu	r7,r3,r10
  816208:	350b883a 	add	r5,r6,r20
  81620c:	20c7883a 	add	r3,r4,r3
  816210:	3955883a 	add	r10,r7,r5
  816214:	1909803a 	cmpltu	r4,r3,r4
  816218:	6a91883a 	add	r8,r13,r10
  81621c:	780cd43a 	srli	r6,r15,16
  816220:	2219883a 	add	r12,r4,r8
  816224:	2d0b803a 	cmpltu	r5,r5,r20
  816228:	51cf803a 	cmpltu	r7,r10,r7
  81622c:	29ceb03a 	or	r7,r5,r7
  816230:	4351803a 	cmpltu	r8,r8,r13
  816234:	610b803a 	cmpltu	r5,r12,r4
  816238:	4148b03a 	or	r4,r8,r5
  81623c:	398f883a 	add	r7,r7,r6
  816240:	3909883a 	add	r4,r7,r4
  816244:	1810927a 	slli	r8,r3,9
  816248:	2449883a 	add	r4,r4,r17
  81624c:	2008927a 	slli	r4,r4,9
  816250:	6022d5fa 	srli	r17,r12,23
  816254:	1806d5fa 	srli	r3,r3,23
  816258:	4252b03a 	or	r9,r8,r9
  81625c:	600a927a 	slli	r5,r12,9
  816260:	4810c03a 	cmpne	r8,r9,zero
  816264:	2462b03a 	or	r17,r4,r17
  816268:	40c6b03a 	or	r3,r8,r3
  81626c:	8900402c 	andhi	r4,r17,256
  816270:	1950b03a 	or	r8,r3,r5
  816274:	20000726 	beq	r4,zero,816294 <__muldf3+0x4dc>
  816278:	4006d07a 	srli	r3,r8,1
  81627c:	880497fa 	slli	r2,r17,31
  816280:	4200004c 	andi	r8,r8,1
  816284:	8822d07a 	srli	r17,r17,1
  816288:	1a10b03a 	or	r8,r3,r8
  81628c:	1210b03a 	or	r8,r2,r8
  816290:	5805883a 	mov	r2,r11
  816294:	1140ffc4 	addi	r5,r2,1023
  816298:	0140440e 	bge	zero,r5,8163ac <__muldf3+0x5f4>
  81629c:	40c001cc 	andi	r3,r8,7
  8162a0:	18000726 	beq	r3,zero,8162c0 <__muldf3+0x508>
  8162a4:	40c003cc 	andi	r3,r8,15
  8162a8:	01000104 	movi	r4,4
  8162ac:	19000426 	beq	r3,r4,8162c0 <__muldf3+0x508>
  8162b0:	4107883a 	add	r3,r8,r4
  8162b4:	1a11803a 	cmpltu	r8,r3,r8
  8162b8:	8a23883a 	add	r17,r17,r8
  8162bc:	1811883a 	mov	r8,r3
  8162c0:	88c0402c 	andhi	r3,r17,256
  8162c4:	18000426 	beq	r3,zero,8162d8 <__muldf3+0x520>
  8162c8:	11410004 	addi	r5,r2,1024
  8162cc:	00bfc034 	movhi	r2,65280
  8162d0:	10bfffc4 	addi	r2,r2,-1
  8162d4:	88a2703a 	and	r17,r17,r2
  8162d8:	0081ff84 	movi	r2,2046
  8162dc:	117f6416 	blt	r2,r5,816070 <__alt_data_end+0xff816070>
  8162e0:	8828977a 	slli	r20,r17,29
  8162e4:	4010d0fa 	srli	r8,r8,3
  8162e8:	8822927a 	slli	r17,r17,9
  8162ec:	2881ffcc 	andi	r2,r5,2047
  8162f0:	a228b03a 	or	r20,r20,r8
  8162f4:	880ad33a 	srli	r5,r17,12
  8162f8:	b02b883a 	mov	r21,r22
  8162fc:	003f0d06 	br	815f34 <__alt_data_end+0xff815f34>
  816300:	8080022c 	andhi	r2,r16,8
  816304:	10000926 	beq	r2,zero,81632c <__muldf3+0x574>
  816308:	8880022c 	andhi	r2,r17,8
  81630c:	1000071e 	bne	r2,zero,81632c <__muldf3+0x574>
  816310:	00800434 	movhi	r2,16
  816314:	89400234 	orhi	r5,r17,8
  816318:	10bfffc4 	addi	r2,r2,-1
  81631c:	b82b883a 	mov	r21,r23
  816320:	288a703a 	and	r5,r5,r2
  816324:	4029883a 	mov	r20,r8
  816328:	003f6806 	br	8160cc <__alt_data_end+0xff8160cc>
  81632c:	00800434 	movhi	r2,16
  816330:	81400234 	orhi	r5,r16,8
  816334:	10bfffc4 	addi	r2,r2,-1
  816338:	288a703a 	and	r5,r5,r2
  81633c:	003f6306 	br	8160cc <__alt_data_end+0xff8160cc>
  816340:	147ff604 	addi	r17,r2,-40
  816344:	3462983a 	sll	r17,r6,r17
  816348:	0011883a 	mov	r8,zero
  81634c:	003f4406 	br	816060 <__alt_data_end+0xff816060>
  816350:	3009883a 	mov	r4,r6
  816354:	d9800215 	stw	r6,8(sp)
  816358:	da400115 	stw	r9,4(sp)
  81635c:	da800015 	stw	r10,0(sp)
  816360:	0816fd00 	call	816fd0 <__clzsi2>
  816364:	10800804 	addi	r2,r2,32
  816368:	da800017 	ldw	r10,0(sp)
  81636c:	da400117 	ldw	r9,4(sp)
  816370:	d9800217 	ldw	r6,8(sp)
  816374:	003f3006 	br	816038 <__alt_data_end+0xff816038>
  816378:	143ff604 	addi	r16,r2,-40
  81637c:	9c20983a 	sll	r16,r19,r16
  816380:	0029883a 	mov	r20,zero
  816384:	003f1606 	br	815fe0 <__alt_data_end+0xff815fe0>
  816388:	d9800215 	stw	r6,8(sp)
  81638c:	d9c00015 	stw	r7,0(sp)
  816390:	da400115 	stw	r9,4(sp)
  816394:	0816fd00 	call	816fd0 <__clzsi2>
  816398:	10800804 	addi	r2,r2,32
  81639c:	da400117 	ldw	r9,4(sp)
  8163a0:	d9c00017 	ldw	r7,0(sp)
  8163a4:	d9800217 	ldw	r6,8(sp)
  8163a8:	003f0306 	br	815fb8 <__alt_data_end+0xff815fb8>
  8163ac:	00c00044 	movi	r3,1
  8163b0:	1947c83a 	sub	r3,r3,r5
  8163b4:	00800e04 	movi	r2,56
  8163b8:	10feda16 	blt	r2,r3,815f24 <__alt_data_end+0xff815f24>
  8163bc:	008007c4 	movi	r2,31
  8163c0:	10c01b16 	blt	r2,r3,816430 <__muldf3+0x678>
  8163c4:	00800804 	movi	r2,32
  8163c8:	10c5c83a 	sub	r2,r2,r3
  8163cc:	888a983a 	sll	r5,r17,r2
  8163d0:	40c8d83a 	srl	r4,r8,r3
  8163d4:	4084983a 	sll	r2,r8,r2
  8163d8:	88e2d83a 	srl	r17,r17,r3
  8163dc:	2906b03a 	or	r3,r5,r4
  8163e0:	1004c03a 	cmpne	r2,r2,zero
  8163e4:	1886b03a 	or	r3,r3,r2
  8163e8:	188001cc 	andi	r2,r3,7
  8163ec:	10000726 	beq	r2,zero,81640c <__muldf3+0x654>
  8163f0:	188003cc 	andi	r2,r3,15
  8163f4:	01000104 	movi	r4,4
  8163f8:	11000426 	beq	r2,r4,81640c <__muldf3+0x654>
  8163fc:	1805883a 	mov	r2,r3
  816400:	10c00104 	addi	r3,r2,4
  816404:	1885803a 	cmpltu	r2,r3,r2
  816408:	88a3883a 	add	r17,r17,r2
  81640c:	8880202c 	andhi	r2,r17,128
  816410:	10001c26 	beq	r2,zero,816484 <__muldf3+0x6cc>
  816414:	b02b883a 	mov	r21,r22
  816418:	00800044 	movi	r2,1
  81641c:	000b883a 	mov	r5,zero
  816420:	0029883a 	mov	r20,zero
  816424:	003ec306 	br	815f34 <__alt_data_end+0xff815f34>
  816428:	5805883a 	mov	r2,r11
  81642c:	003f9906 	br	816294 <__alt_data_end+0xff816294>
  816430:	00bff844 	movi	r2,-31
  816434:	1145c83a 	sub	r2,r2,r5
  816438:	8888d83a 	srl	r4,r17,r2
  81643c:	00800804 	movi	r2,32
  816440:	18801a26 	beq	r3,r2,8164ac <__muldf3+0x6f4>
  816444:	00801004 	movi	r2,64
  816448:	10c5c83a 	sub	r2,r2,r3
  81644c:	8884983a 	sll	r2,r17,r2
  816450:	1204b03a 	or	r2,r2,r8
  816454:	1004c03a 	cmpne	r2,r2,zero
  816458:	2084b03a 	or	r2,r4,r2
  81645c:	144001cc 	andi	r17,r2,7
  816460:	88000d1e 	bne	r17,zero,816498 <__muldf3+0x6e0>
  816464:	000b883a 	mov	r5,zero
  816468:	1028d0fa 	srli	r20,r2,3
  81646c:	b02b883a 	mov	r21,r22
  816470:	0005883a 	mov	r2,zero
  816474:	a468b03a 	or	r20,r20,r17
  816478:	003eae06 	br	815f34 <__alt_data_end+0xff815f34>
  81647c:	1007883a 	mov	r3,r2
  816480:	0023883a 	mov	r17,zero
  816484:	880a927a 	slli	r5,r17,9
  816488:	1805883a 	mov	r2,r3
  81648c:	8822977a 	slli	r17,r17,29
  816490:	280ad33a 	srli	r5,r5,12
  816494:	003ff406 	br	816468 <__alt_data_end+0xff816468>
  816498:	10c003cc 	andi	r3,r2,15
  81649c:	01000104 	movi	r4,4
  8164a0:	193ff626 	beq	r3,r4,81647c <__alt_data_end+0xff81647c>
  8164a4:	0023883a 	mov	r17,zero
  8164a8:	003fd506 	br	816400 <__alt_data_end+0xff816400>
  8164ac:	0005883a 	mov	r2,zero
  8164b0:	003fe706 	br	816450 <__alt_data_end+0xff816450>
  8164b4:	00800434 	movhi	r2,16
  8164b8:	89400234 	orhi	r5,r17,8
  8164bc:	10bfffc4 	addi	r2,r2,-1
  8164c0:	b02b883a 	mov	r21,r22
  8164c4:	288a703a 	and	r5,r5,r2
  8164c8:	4029883a 	mov	r20,r8
  8164cc:	003eff06 	br	8160cc <__alt_data_end+0xff8160cc>

008164d0 <__subdf3>:
  8164d0:	02000434 	movhi	r8,16
  8164d4:	423fffc4 	addi	r8,r8,-1
  8164d8:	defffb04 	addi	sp,sp,-20
  8164dc:	2a14703a 	and	r10,r5,r8
  8164e0:	3812d53a 	srli	r9,r7,20
  8164e4:	3a10703a 	and	r8,r7,r8
  8164e8:	2006d77a 	srli	r3,r4,29
  8164ec:	3004d77a 	srli	r2,r6,29
  8164f0:	dc000015 	stw	r16,0(sp)
  8164f4:	501490fa 	slli	r10,r10,3
  8164f8:	2820d53a 	srli	r16,r5,20
  8164fc:	401090fa 	slli	r8,r8,3
  816500:	dc800215 	stw	r18,8(sp)
  816504:	dc400115 	stw	r17,4(sp)
  816508:	dfc00415 	stw	ra,16(sp)
  81650c:	202290fa 	slli	r17,r4,3
  816510:	dcc00315 	stw	r19,12(sp)
  816514:	4a41ffcc 	andi	r9,r9,2047
  816518:	0101ffc4 	movi	r4,2047
  81651c:	2824d7fa 	srli	r18,r5,31
  816520:	8401ffcc 	andi	r16,r16,2047
  816524:	50c6b03a 	or	r3,r10,r3
  816528:	380ed7fa 	srli	r7,r7,31
  81652c:	408ab03a 	or	r5,r8,r2
  816530:	300c90fa 	slli	r6,r6,3
  816534:	49009626 	beq	r9,r4,816790 <__subdf3+0x2c0>
  816538:	39c0005c 	xori	r7,r7,1
  81653c:	8245c83a 	sub	r2,r16,r9
  816540:	3c807426 	beq	r7,r18,816714 <__subdf3+0x244>
  816544:	0080af0e 	bge	zero,r2,816804 <__subdf3+0x334>
  816548:	48002a1e 	bne	r9,zero,8165f4 <__subdf3+0x124>
  81654c:	2988b03a 	or	r4,r5,r6
  816550:	20009a1e 	bne	r4,zero,8167bc <__subdf3+0x2ec>
  816554:	888001cc 	andi	r2,r17,7
  816558:	10000726 	beq	r2,zero,816578 <__subdf3+0xa8>
  81655c:	888003cc 	andi	r2,r17,15
  816560:	01000104 	movi	r4,4
  816564:	11000426 	beq	r2,r4,816578 <__subdf3+0xa8>
  816568:	890b883a 	add	r5,r17,r4
  81656c:	2c63803a 	cmpltu	r17,r5,r17
  816570:	1c47883a 	add	r3,r3,r17
  816574:	2823883a 	mov	r17,r5
  816578:	1880202c 	andhi	r2,r3,128
  81657c:	10005926 	beq	r2,zero,8166e4 <__subdf3+0x214>
  816580:	84000044 	addi	r16,r16,1
  816584:	0081ffc4 	movi	r2,2047
  816588:	8080be26 	beq	r16,r2,816884 <__subdf3+0x3b4>
  81658c:	017fe034 	movhi	r5,65408
  816590:	297fffc4 	addi	r5,r5,-1
  816594:	1946703a 	and	r3,r3,r5
  816598:	1804977a 	slli	r2,r3,29
  81659c:	1806927a 	slli	r3,r3,9
  8165a0:	8822d0fa 	srli	r17,r17,3
  8165a4:	8401ffcc 	andi	r16,r16,2047
  8165a8:	180ad33a 	srli	r5,r3,12
  8165ac:	9100004c 	andi	r4,r18,1
  8165b0:	1444b03a 	or	r2,r2,r17
  8165b4:	80c1ffcc 	andi	r3,r16,2047
  8165b8:	1820953a 	slli	r16,r3,20
  8165bc:	20c03fcc 	andi	r3,r4,255
  8165c0:	180897fa 	slli	r4,r3,31
  8165c4:	00c00434 	movhi	r3,16
  8165c8:	18ffffc4 	addi	r3,r3,-1
  8165cc:	28c6703a 	and	r3,r5,r3
  8165d0:	1c06b03a 	or	r3,r3,r16
  8165d4:	1906b03a 	or	r3,r3,r4
  8165d8:	dfc00417 	ldw	ra,16(sp)
  8165dc:	dcc00317 	ldw	r19,12(sp)
  8165e0:	dc800217 	ldw	r18,8(sp)
  8165e4:	dc400117 	ldw	r17,4(sp)
  8165e8:	dc000017 	ldw	r16,0(sp)
  8165ec:	dec00504 	addi	sp,sp,20
  8165f0:	f800283a 	ret
  8165f4:	0101ffc4 	movi	r4,2047
  8165f8:	813fd626 	beq	r16,r4,816554 <__alt_data_end+0xff816554>
  8165fc:	29402034 	orhi	r5,r5,128
  816600:	01000e04 	movi	r4,56
  816604:	2080a316 	blt	r4,r2,816894 <__subdf3+0x3c4>
  816608:	010007c4 	movi	r4,31
  81660c:	2080c616 	blt	r4,r2,816928 <__subdf3+0x458>
  816610:	01000804 	movi	r4,32
  816614:	2089c83a 	sub	r4,r4,r2
  816618:	2910983a 	sll	r8,r5,r4
  81661c:	308ed83a 	srl	r7,r6,r2
  816620:	3108983a 	sll	r4,r6,r4
  816624:	2884d83a 	srl	r2,r5,r2
  816628:	41ccb03a 	or	r6,r8,r7
  81662c:	2008c03a 	cmpne	r4,r4,zero
  816630:	310cb03a 	or	r6,r6,r4
  816634:	898dc83a 	sub	r6,r17,r6
  816638:	89a3803a 	cmpltu	r17,r17,r6
  81663c:	1887c83a 	sub	r3,r3,r2
  816640:	1c47c83a 	sub	r3,r3,r17
  816644:	3023883a 	mov	r17,r6
  816648:	1880202c 	andhi	r2,r3,128
  81664c:	10002326 	beq	r2,zero,8166dc <__subdf3+0x20c>
  816650:	04c02034 	movhi	r19,128
  816654:	9cffffc4 	addi	r19,r19,-1
  816658:	1ce6703a 	and	r19,r3,r19
  81665c:	98007a26 	beq	r19,zero,816848 <__subdf3+0x378>
  816660:	9809883a 	mov	r4,r19
  816664:	0816fd00 	call	816fd0 <__clzsi2>
  816668:	113ffe04 	addi	r4,r2,-8
  81666c:	00c007c4 	movi	r3,31
  816670:	19007b16 	blt	r3,r4,816860 <__subdf3+0x390>
  816674:	00800804 	movi	r2,32
  816678:	1105c83a 	sub	r2,r2,r4
  81667c:	8884d83a 	srl	r2,r17,r2
  816680:	9906983a 	sll	r3,r19,r4
  816684:	8922983a 	sll	r17,r17,r4
  816688:	10c4b03a 	or	r2,r2,r3
  81668c:	24007816 	blt	r4,r16,816870 <__subdf3+0x3a0>
  816690:	2421c83a 	sub	r16,r4,r16
  816694:	80c00044 	addi	r3,r16,1
  816698:	010007c4 	movi	r4,31
  81669c:	20c09516 	blt	r4,r3,8168f4 <__subdf3+0x424>
  8166a0:	01400804 	movi	r5,32
  8166a4:	28cbc83a 	sub	r5,r5,r3
  8166a8:	88c8d83a 	srl	r4,r17,r3
  8166ac:	8962983a 	sll	r17,r17,r5
  8166b0:	114a983a 	sll	r5,r2,r5
  8166b4:	10c6d83a 	srl	r3,r2,r3
  8166b8:	8804c03a 	cmpne	r2,r17,zero
  8166bc:	290ab03a 	or	r5,r5,r4
  8166c0:	28a2b03a 	or	r17,r5,r2
  8166c4:	0021883a 	mov	r16,zero
  8166c8:	003fa206 	br	816554 <__alt_data_end+0xff816554>
  8166cc:	2090b03a 	or	r8,r4,r2
  8166d0:	40018e26 	beq	r8,zero,816d0c <__subdf3+0x83c>
  8166d4:	1007883a 	mov	r3,r2
  8166d8:	2023883a 	mov	r17,r4
  8166dc:	888001cc 	andi	r2,r17,7
  8166e0:	103f9e1e 	bne	r2,zero,81655c <__alt_data_end+0xff81655c>
  8166e4:	1804977a 	slli	r2,r3,29
  8166e8:	8822d0fa 	srli	r17,r17,3
  8166ec:	1810d0fa 	srli	r8,r3,3
  8166f0:	9100004c 	andi	r4,r18,1
  8166f4:	1444b03a 	or	r2,r2,r17
  8166f8:	00c1ffc4 	movi	r3,2047
  8166fc:	80c02826 	beq	r16,r3,8167a0 <__subdf3+0x2d0>
  816700:	01400434 	movhi	r5,16
  816704:	297fffc4 	addi	r5,r5,-1
  816708:	80e0703a 	and	r16,r16,r3
  81670c:	414a703a 	and	r5,r8,r5
  816710:	003fa806 	br	8165b4 <__alt_data_end+0xff8165b4>
  816714:	0080630e 	bge	zero,r2,8168a4 <__subdf3+0x3d4>
  816718:	48003026 	beq	r9,zero,8167dc <__subdf3+0x30c>
  81671c:	0101ffc4 	movi	r4,2047
  816720:	813f8c26 	beq	r16,r4,816554 <__alt_data_end+0xff816554>
  816724:	29402034 	orhi	r5,r5,128
  816728:	01000e04 	movi	r4,56
  81672c:	2080a90e 	bge	r4,r2,8169d4 <__subdf3+0x504>
  816730:	298cb03a 	or	r6,r5,r6
  816734:	3012c03a 	cmpne	r9,r6,zero
  816738:	0005883a 	mov	r2,zero
  81673c:	4c53883a 	add	r9,r9,r17
  816740:	4c63803a 	cmpltu	r17,r9,r17
  816744:	10c7883a 	add	r3,r2,r3
  816748:	88c7883a 	add	r3,r17,r3
  81674c:	4823883a 	mov	r17,r9
  816750:	1880202c 	andhi	r2,r3,128
  816754:	1000d026 	beq	r2,zero,816a98 <__subdf3+0x5c8>
  816758:	84000044 	addi	r16,r16,1
  81675c:	0081ffc4 	movi	r2,2047
  816760:	8080fe26 	beq	r16,r2,816b5c <__subdf3+0x68c>
  816764:	00bfe034 	movhi	r2,65408
  816768:	10bfffc4 	addi	r2,r2,-1
  81676c:	1886703a 	and	r3,r3,r2
  816770:	880ad07a 	srli	r5,r17,1
  816774:	180497fa 	slli	r2,r3,31
  816778:	8900004c 	andi	r4,r17,1
  81677c:	2922b03a 	or	r17,r5,r4
  816780:	1806d07a 	srli	r3,r3,1
  816784:	1462b03a 	or	r17,r2,r17
  816788:	3825883a 	mov	r18,r7
  81678c:	003f7106 	br	816554 <__alt_data_end+0xff816554>
  816790:	2984b03a 	or	r2,r5,r6
  816794:	103f6826 	beq	r2,zero,816538 <__alt_data_end+0xff816538>
  816798:	39c03fcc 	andi	r7,r7,255
  81679c:	003f6706 	br	81653c <__alt_data_end+0xff81653c>
  8167a0:	4086b03a 	or	r3,r8,r2
  8167a4:	18015226 	beq	r3,zero,816cf0 <__subdf3+0x820>
  8167a8:	00c00434 	movhi	r3,16
  8167ac:	41400234 	orhi	r5,r8,8
  8167b0:	18ffffc4 	addi	r3,r3,-1
  8167b4:	28ca703a 	and	r5,r5,r3
  8167b8:	003f7e06 	br	8165b4 <__alt_data_end+0xff8165b4>
  8167bc:	10bfffc4 	addi	r2,r2,-1
  8167c0:	1000491e 	bne	r2,zero,8168e8 <__subdf3+0x418>
  8167c4:	898fc83a 	sub	r7,r17,r6
  8167c8:	89e3803a 	cmpltu	r17,r17,r7
  8167cc:	1947c83a 	sub	r3,r3,r5
  8167d0:	1c47c83a 	sub	r3,r3,r17
  8167d4:	3823883a 	mov	r17,r7
  8167d8:	003f9b06 	br	816648 <__alt_data_end+0xff816648>
  8167dc:	2988b03a 	or	r4,r5,r6
  8167e0:	203f5c26 	beq	r4,zero,816554 <__alt_data_end+0xff816554>
  8167e4:	10bfffc4 	addi	r2,r2,-1
  8167e8:	1000931e 	bne	r2,zero,816a38 <__subdf3+0x568>
  8167ec:	898d883a 	add	r6,r17,r6
  8167f0:	3463803a 	cmpltu	r17,r6,r17
  8167f4:	1947883a 	add	r3,r3,r5
  8167f8:	88c7883a 	add	r3,r17,r3
  8167fc:	3023883a 	mov	r17,r6
  816800:	003fd306 	br	816750 <__alt_data_end+0xff816750>
  816804:	1000541e 	bne	r2,zero,816958 <__subdf3+0x488>
  816808:	80800044 	addi	r2,r16,1
  81680c:	1081ffcc 	andi	r2,r2,2047
  816810:	01000044 	movi	r4,1
  816814:	2080a20e 	bge	r4,r2,816aa0 <__subdf3+0x5d0>
  816818:	8989c83a 	sub	r4,r17,r6
  81681c:	8905803a 	cmpltu	r2,r17,r4
  816820:	1967c83a 	sub	r19,r3,r5
  816824:	98a7c83a 	sub	r19,r19,r2
  816828:	9880202c 	andhi	r2,r19,128
  81682c:	10006326 	beq	r2,zero,8169bc <__subdf3+0x4ec>
  816830:	3463c83a 	sub	r17,r6,r17
  816834:	28c7c83a 	sub	r3,r5,r3
  816838:	344d803a 	cmpltu	r6,r6,r17
  81683c:	19a7c83a 	sub	r19,r3,r6
  816840:	3825883a 	mov	r18,r7
  816844:	983f861e 	bne	r19,zero,816660 <__alt_data_end+0xff816660>
  816848:	8809883a 	mov	r4,r17
  81684c:	0816fd00 	call	816fd0 <__clzsi2>
  816850:	10800804 	addi	r2,r2,32
  816854:	113ffe04 	addi	r4,r2,-8
  816858:	00c007c4 	movi	r3,31
  81685c:	193f850e 	bge	r3,r4,816674 <__alt_data_end+0xff816674>
  816860:	10bff604 	addi	r2,r2,-40
  816864:	8884983a 	sll	r2,r17,r2
  816868:	0023883a 	mov	r17,zero
  81686c:	243f880e 	bge	r4,r16,816690 <__alt_data_end+0xff816690>
  816870:	00ffe034 	movhi	r3,65408
  816874:	18ffffc4 	addi	r3,r3,-1
  816878:	8121c83a 	sub	r16,r16,r4
  81687c:	10c6703a 	and	r3,r2,r3
  816880:	003f3406 	br	816554 <__alt_data_end+0xff816554>
  816884:	9100004c 	andi	r4,r18,1
  816888:	000b883a 	mov	r5,zero
  81688c:	0005883a 	mov	r2,zero
  816890:	003f4806 	br	8165b4 <__alt_data_end+0xff8165b4>
  816894:	298cb03a 	or	r6,r5,r6
  816898:	300cc03a 	cmpne	r6,r6,zero
  81689c:	0005883a 	mov	r2,zero
  8168a0:	003f6406 	br	816634 <__alt_data_end+0xff816634>
  8168a4:	10009a1e 	bne	r2,zero,816b10 <__subdf3+0x640>
  8168a8:	82400044 	addi	r9,r16,1
  8168ac:	4881ffcc 	andi	r2,r9,2047
  8168b0:	02800044 	movi	r10,1
  8168b4:	5080670e 	bge	r10,r2,816a54 <__subdf3+0x584>
  8168b8:	0081ffc4 	movi	r2,2047
  8168bc:	4880af26 	beq	r9,r2,816b7c <__subdf3+0x6ac>
  8168c0:	898d883a 	add	r6,r17,r6
  8168c4:	1945883a 	add	r2,r3,r5
  8168c8:	3447803a 	cmpltu	r3,r6,r17
  8168cc:	1887883a 	add	r3,r3,r2
  8168d0:	182297fa 	slli	r17,r3,31
  8168d4:	300cd07a 	srli	r6,r6,1
  8168d8:	1806d07a 	srli	r3,r3,1
  8168dc:	4821883a 	mov	r16,r9
  8168e0:	89a2b03a 	or	r17,r17,r6
  8168e4:	003f1b06 	br	816554 <__alt_data_end+0xff816554>
  8168e8:	0101ffc4 	movi	r4,2047
  8168ec:	813f441e 	bne	r16,r4,816600 <__alt_data_end+0xff816600>
  8168f0:	003f1806 	br	816554 <__alt_data_end+0xff816554>
  8168f4:	843ff844 	addi	r16,r16,-31
  8168f8:	01400804 	movi	r5,32
  8168fc:	1408d83a 	srl	r4,r2,r16
  816900:	19405026 	beq	r3,r5,816a44 <__subdf3+0x574>
  816904:	01401004 	movi	r5,64
  816908:	28c7c83a 	sub	r3,r5,r3
  81690c:	10c4983a 	sll	r2,r2,r3
  816910:	88a2b03a 	or	r17,r17,r2
  816914:	8822c03a 	cmpne	r17,r17,zero
  816918:	2462b03a 	or	r17,r4,r17
  81691c:	0007883a 	mov	r3,zero
  816920:	0021883a 	mov	r16,zero
  816924:	003f6d06 	br	8166dc <__alt_data_end+0xff8166dc>
  816928:	11fff804 	addi	r7,r2,-32
  81692c:	01000804 	movi	r4,32
  816930:	29ced83a 	srl	r7,r5,r7
  816934:	11004526 	beq	r2,r4,816a4c <__subdf3+0x57c>
  816938:	01001004 	movi	r4,64
  81693c:	2089c83a 	sub	r4,r4,r2
  816940:	2904983a 	sll	r2,r5,r4
  816944:	118cb03a 	or	r6,r2,r6
  816948:	300cc03a 	cmpne	r6,r6,zero
  81694c:	398cb03a 	or	r6,r7,r6
  816950:	0005883a 	mov	r2,zero
  816954:	003f3706 	br	816634 <__alt_data_end+0xff816634>
  816958:	80002a26 	beq	r16,zero,816a04 <__subdf3+0x534>
  81695c:	0101ffc4 	movi	r4,2047
  816960:	49006626 	beq	r9,r4,816afc <__subdf3+0x62c>
  816964:	0085c83a 	sub	r2,zero,r2
  816968:	18c02034 	orhi	r3,r3,128
  81696c:	01000e04 	movi	r4,56
  816970:	20807e16 	blt	r4,r2,816b6c <__subdf3+0x69c>
  816974:	010007c4 	movi	r4,31
  816978:	2080e716 	blt	r4,r2,816d18 <__subdf3+0x848>
  81697c:	01000804 	movi	r4,32
  816980:	2089c83a 	sub	r4,r4,r2
  816984:	1914983a 	sll	r10,r3,r4
  816988:	8890d83a 	srl	r8,r17,r2
  81698c:	8908983a 	sll	r4,r17,r4
  816990:	1884d83a 	srl	r2,r3,r2
  816994:	5222b03a 	or	r17,r10,r8
  816998:	2006c03a 	cmpne	r3,r4,zero
  81699c:	88e2b03a 	or	r17,r17,r3
  8169a0:	3463c83a 	sub	r17,r6,r17
  8169a4:	2885c83a 	sub	r2,r5,r2
  8169a8:	344d803a 	cmpltu	r6,r6,r17
  8169ac:	1187c83a 	sub	r3,r2,r6
  8169b0:	4821883a 	mov	r16,r9
  8169b4:	3825883a 	mov	r18,r7
  8169b8:	003f2306 	br	816648 <__alt_data_end+0xff816648>
  8169bc:	24d0b03a 	or	r8,r4,r19
  8169c0:	40001b1e 	bne	r8,zero,816a30 <__subdf3+0x560>
  8169c4:	0005883a 	mov	r2,zero
  8169c8:	0009883a 	mov	r4,zero
  8169cc:	0021883a 	mov	r16,zero
  8169d0:	003f4906 	br	8166f8 <__alt_data_end+0xff8166f8>
  8169d4:	010007c4 	movi	r4,31
  8169d8:	20803a16 	blt	r4,r2,816ac4 <__subdf3+0x5f4>
  8169dc:	01000804 	movi	r4,32
  8169e0:	2089c83a 	sub	r4,r4,r2
  8169e4:	2912983a 	sll	r9,r5,r4
  8169e8:	3090d83a 	srl	r8,r6,r2
  8169ec:	3108983a 	sll	r4,r6,r4
  8169f0:	2884d83a 	srl	r2,r5,r2
  8169f4:	4a12b03a 	or	r9,r9,r8
  8169f8:	2008c03a 	cmpne	r4,r4,zero
  8169fc:	4912b03a 	or	r9,r9,r4
  816a00:	003f4e06 	br	81673c <__alt_data_end+0xff81673c>
  816a04:	1c48b03a 	or	r4,r3,r17
  816a08:	20003c26 	beq	r4,zero,816afc <__subdf3+0x62c>
  816a0c:	0084303a 	nor	r2,zero,r2
  816a10:	1000381e 	bne	r2,zero,816af4 <__subdf3+0x624>
  816a14:	3463c83a 	sub	r17,r6,r17
  816a18:	28c5c83a 	sub	r2,r5,r3
  816a1c:	344d803a 	cmpltu	r6,r6,r17
  816a20:	1187c83a 	sub	r3,r2,r6
  816a24:	4821883a 	mov	r16,r9
  816a28:	3825883a 	mov	r18,r7
  816a2c:	003f0606 	br	816648 <__alt_data_end+0xff816648>
  816a30:	2023883a 	mov	r17,r4
  816a34:	003f0906 	br	81665c <__alt_data_end+0xff81665c>
  816a38:	0101ffc4 	movi	r4,2047
  816a3c:	813f3a1e 	bne	r16,r4,816728 <__alt_data_end+0xff816728>
  816a40:	003ec406 	br	816554 <__alt_data_end+0xff816554>
  816a44:	0005883a 	mov	r2,zero
  816a48:	003fb106 	br	816910 <__alt_data_end+0xff816910>
  816a4c:	0005883a 	mov	r2,zero
  816a50:	003fbc06 	br	816944 <__alt_data_end+0xff816944>
  816a54:	1c44b03a 	or	r2,r3,r17
  816a58:	80008e1e 	bne	r16,zero,816c94 <__subdf3+0x7c4>
  816a5c:	1000c826 	beq	r2,zero,816d80 <__subdf3+0x8b0>
  816a60:	2984b03a 	or	r2,r5,r6
  816a64:	103ebb26 	beq	r2,zero,816554 <__alt_data_end+0xff816554>
  816a68:	8989883a 	add	r4,r17,r6
  816a6c:	1945883a 	add	r2,r3,r5
  816a70:	2447803a 	cmpltu	r3,r4,r17
  816a74:	1887883a 	add	r3,r3,r2
  816a78:	1880202c 	andhi	r2,r3,128
  816a7c:	2023883a 	mov	r17,r4
  816a80:	103f1626 	beq	r2,zero,8166dc <__alt_data_end+0xff8166dc>
  816a84:	00bfe034 	movhi	r2,65408
  816a88:	10bfffc4 	addi	r2,r2,-1
  816a8c:	5021883a 	mov	r16,r10
  816a90:	1886703a 	and	r3,r3,r2
  816a94:	003eaf06 	br	816554 <__alt_data_end+0xff816554>
  816a98:	3825883a 	mov	r18,r7
  816a9c:	003f0f06 	br	8166dc <__alt_data_end+0xff8166dc>
  816aa0:	1c44b03a 	or	r2,r3,r17
  816aa4:	8000251e 	bne	r16,zero,816b3c <__subdf3+0x66c>
  816aa8:	1000661e 	bne	r2,zero,816c44 <__subdf3+0x774>
  816aac:	2990b03a 	or	r8,r5,r6
  816ab0:	40009626 	beq	r8,zero,816d0c <__subdf3+0x83c>
  816ab4:	2807883a 	mov	r3,r5
  816ab8:	3023883a 	mov	r17,r6
  816abc:	3825883a 	mov	r18,r7
  816ac0:	003ea406 	br	816554 <__alt_data_end+0xff816554>
  816ac4:	127ff804 	addi	r9,r2,-32
  816ac8:	01000804 	movi	r4,32
  816acc:	2a52d83a 	srl	r9,r5,r9
  816ad0:	11008c26 	beq	r2,r4,816d04 <__subdf3+0x834>
  816ad4:	01001004 	movi	r4,64
  816ad8:	2085c83a 	sub	r2,r4,r2
  816adc:	2884983a 	sll	r2,r5,r2
  816ae0:	118cb03a 	or	r6,r2,r6
  816ae4:	300cc03a 	cmpne	r6,r6,zero
  816ae8:	4992b03a 	or	r9,r9,r6
  816aec:	0005883a 	mov	r2,zero
  816af0:	003f1206 	br	81673c <__alt_data_end+0xff81673c>
  816af4:	0101ffc4 	movi	r4,2047
  816af8:	493f9c1e 	bne	r9,r4,81696c <__alt_data_end+0xff81696c>
  816afc:	2807883a 	mov	r3,r5
  816b00:	3023883a 	mov	r17,r6
  816b04:	4821883a 	mov	r16,r9
  816b08:	3825883a 	mov	r18,r7
  816b0c:	003e9106 	br	816554 <__alt_data_end+0xff816554>
  816b10:	80001f1e 	bne	r16,zero,816b90 <__subdf3+0x6c0>
  816b14:	1c48b03a 	or	r4,r3,r17
  816b18:	20005a26 	beq	r4,zero,816c84 <__subdf3+0x7b4>
  816b1c:	0084303a 	nor	r2,zero,r2
  816b20:	1000561e 	bne	r2,zero,816c7c <__subdf3+0x7ac>
  816b24:	89a3883a 	add	r17,r17,r6
  816b28:	1945883a 	add	r2,r3,r5
  816b2c:	898d803a 	cmpltu	r6,r17,r6
  816b30:	3087883a 	add	r3,r6,r2
  816b34:	4821883a 	mov	r16,r9
  816b38:	003f0506 	br	816750 <__alt_data_end+0xff816750>
  816b3c:	10002b1e 	bne	r2,zero,816bec <__subdf3+0x71c>
  816b40:	2984b03a 	or	r2,r5,r6
  816b44:	10008026 	beq	r2,zero,816d48 <__subdf3+0x878>
  816b48:	2807883a 	mov	r3,r5
  816b4c:	3023883a 	mov	r17,r6
  816b50:	3825883a 	mov	r18,r7
  816b54:	0401ffc4 	movi	r16,2047
  816b58:	003e7e06 	br	816554 <__alt_data_end+0xff816554>
  816b5c:	3809883a 	mov	r4,r7
  816b60:	0011883a 	mov	r8,zero
  816b64:	0005883a 	mov	r2,zero
  816b68:	003ee306 	br	8166f8 <__alt_data_end+0xff8166f8>
  816b6c:	1c62b03a 	or	r17,r3,r17
  816b70:	8822c03a 	cmpne	r17,r17,zero
  816b74:	0005883a 	mov	r2,zero
  816b78:	003f8906 	br	8169a0 <__alt_data_end+0xff8169a0>
  816b7c:	3809883a 	mov	r4,r7
  816b80:	4821883a 	mov	r16,r9
  816b84:	0011883a 	mov	r8,zero
  816b88:	0005883a 	mov	r2,zero
  816b8c:	003eda06 	br	8166f8 <__alt_data_end+0xff8166f8>
  816b90:	0101ffc4 	movi	r4,2047
  816b94:	49003b26 	beq	r9,r4,816c84 <__subdf3+0x7b4>
  816b98:	0085c83a 	sub	r2,zero,r2
  816b9c:	18c02034 	orhi	r3,r3,128
  816ba0:	01000e04 	movi	r4,56
  816ba4:	20806e16 	blt	r4,r2,816d60 <__subdf3+0x890>
  816ba8:	010007c4 	movi	r4,31
  816bac:	20807716 	blt	r4,r2,816d8c <__subdf3+0x8bc>
  816bb0:	01000804 	movi	r4,32
  816bb4:	2089c83a 	sub	r4,r4,r2
  816bb8:	1914983a 	sll	r10,r3,r4
  816bbc:	8890d83a 	srl	r8,r17,r2
  816bc0:	8908983a 	sll	r4,r17,r4
  816bc4:	1884d83a 	srl	r2,r3,r2
  816bc8:	5222b03a 	or	r17,r10,r8
  816bcc:	2006c03a 	cmpne	r3,r4,zero
  816bd0:	88e2b03a 	or	r17,r17,r3
  816bd4:	89a3883a 	add	r17,r17,r6
  816bd8:	1145883a 	add	r2,r2,r5
  816bdc:	898d803a 	cmpltu	r6,r17,r6
  816be0:	3087883a 	add	r3,r6,r2
  816be4:	4821883a 	mov	r16,r9
  816be8:	003ed906 	br	816750 <__alt_data_end+0xff816750>
  816bec:	2984b03a 	or	r2,r5,r6
  816bf0:	10004226 	beq	r2,zero,816cfc <__subdf3+0x82c>
  816bf4:	1808d0fa 	srli	r4,r3,3
  816bf8:	8822d0fa 	srli	r17,r17,3
  816bfc:	1806977a 	slli	r3,r3,29
  816c00:	2080022c 	andhi	r2,r4,8
  816c04:	1c62b03a 	or	r17,r3,r17
  816c08:	10000826 	beq	r2,zero,816c2c <__subdf3+0x75c>
  816c0c:	2812d0fa 	srli	r9,r5,3
  816c10:	4880022c 	andhi	r2,r9,8
  816c14:	1000051e 	bne	r2,zero,816c2c <__subdf3+0x75c>
  816c18:	300cd0fa 	srli	r6,r6,3
  816c1c:	2804977a 	slli	r2,r5,29
  816c20:	4809883a 	mov	r4,r9
  816c24:	3825883a 	mov	r18,r7
  816c28:	11a2b03a 	or	r17,r2,r6
  816c2c:	8806d77a 	srli	r3,r17,29
  816c30:	200890fa 	slli	r4,r4,3
  816c34:	882290fa 	slli	r17,r17,3
  816c38:	0401ffc4 	movi	r16,2047
  816c3c:	1906b03a 	or	r3,r3,r4
  816c40:	003e4406 	br	816554 <__alt_data_end+0xff816554>
  816c44:	2984b03a 	or	r2,r5,r6
  816c48:	103e4226 	beq	r2,zero,816554 <__alt_data_end+0xff816554>
  816c4c:	8989c83a 	sub	r4,r17,r6
  816c50:	8911803a 	cmpltu	r8,r17,r4
  816c54:	1945c83a 	sub	r2,r3,r5
  816c58:	1205c83a 	sub	r2,r2,r8
  816c5c:	1200202c 	andhi	r8,r2,128
  816c60:	403e9a26 	beq	r8,zero,8166cc <__alt_data_end+0xff8166cc>
  816c64:	3463c83a 	sub	r17,r6,r17
  816c68:	28c5c83a 	sub	r2,r5,r3
  816c6c:	344d803a 	cmpltu	r6,r6,r17
  816c70:	1187c83a 	sub	r3,r2,r6
  816c74:	3825883a 	mov	r18,r7
  816c78:	003e3606 	br	816554 <__alt_data_end+0xff816554>
  816c7c:	0101ffc4 	movi	r4,2047
  816c80:	493fc71e 	bne	r9,r4,816ba0 <__alt_data_end+0xff816ba0>
  816c84:	2807883a 	mov	r3,r5
  816c88:	3023883a 	mov	r17,r6
  816c8c:	4821883a 	mov	r16,r9
  816c90:	003e3006 	br	816554 <__alt_data_end+0xff816554>
  816c94:	10003626 	beq	r2,zero,816d70 <__subdf3+0x8a0>
  816c98:	2984b03a 	or	r2,r5,r6
  816c9c:	10001726 	beq	r2,zero,816cfc <__subdf3+0x82c>
  816ca0:	1808d0fa 	srli	r4,r3,3
  816ca4:	8822d0fa 	srli	r17,r17,3
  816ca8:	1806977a 	slli	r3,r3,29
  816cac:	2080022c 	andhi	r2,r4,8
  816cb0:	1c62b03a 	or	r17,r3,r17
  816cb4:	10000726 	beq	r2,zero,816cd4 <__subdf3+0x804>
  816cb8:	2812d0fa 	srli	r9,r5,3
  816cbc:	4880022c 	andhi	r2,r9,8
  816cc0:	1000041e 	bne	r2,zero,816cd4 <__subdf3+0x804>
  816cc4:	300cd0fa 	srli	r6,r6,3
  816cc8:	2804977a 	slli	r2,r5,29
  816ccc:	4809883a 	mov	r4,r9
  816cd0:	11a2b03a 	or	r17,r2,r6
  816cd4:	8806d77a 	srli	r3,r17,29
  816cd8:	200890fa 	slli	r4,r4,3
  816cdc:	882290fa 	slli	r17,r17,3
  816ce0:	3825883a 	mov	r18,r7
  816ce4:	1906b03a 	or	r3,r3,r4
  816ce8:	0401ffc4 	movi	r16,2047
  816cec:	003e1906 	br	816554 <__alt_data_end+0xff816554>
  816cf0:	000b883a 	mov	r5,zero
  816cf4:	0005883a 	mov	r2,zero
  816cf8:	003e2e06 	br	8165b4 <__alt_data_end+0xff8165b4>
  816cfc:	0401ffc4 	movi	r16,2047
  816d00:	003e1406 	br	816554 <__alt_data_end+0xff816554>
  816d04:	0005883a 	mov	r2,zero
  816d08:	003f7506 	br	816ae0 <__alt_data_end+0xff816ae0>
  816d0c:	0005883a 	mov	r2,zero
  816d10:	0009883a 	mov	r4,zero
  816d14:	003e7806 	br	8166f8 <__alt_data_end+0xff8166f8>
  816d18:	123ff804 	addi	r8,r2,-32
  816d1c:	01000804 	movi	r4,32
  816d20:	1a10d83a 	srl	r8,r3,r8
  816d24:	11002526 	beq	r2,r4,816dbc <__subdf3+0x8ec>
  816d28:	01001004 	movi	r4,64
  816d2c:	2085c83a 	sub	r2,r4,r2
  816d30:	1884983a 	sll	r2,r3,r2
  816d34:	1444b03a 	or	r2,r2,r17
  816d38:	1004c03a 	cmpne	r2,r2,zero
  816d3c:	40a2b03a 	or	r17,r8,r2
  816d40:	0005883a 	mov	r2,zero
  816d44:	003f1606 	br	8169a0 <__alt_data_end+0xff8169a0>
  816d48:	02000434 	movhi	r8,16
  816d4c:	0009883a 	mov	r4,zero
  816d50:	423fffc4 	addi	r8,r8,-1
  816d54:	00bfffc4 	movi	r2,-1
  816d58:	0401ffc4 	movi	r16,2047
  816d5c:	003e6606 	br	8166f8 <__alt_data_end+0xff8166f8>
  816d60:	1c62b03a 	or	r17,r3,r17
  816d64:	8822c03a 	cmpne	r17,r17,zero
  816d68:	0005883a 	mov	r2,zero
  816d6c:	003f9906 	br	816bd4 <__alt_data_end+0xff816bd4>
  816d70:	2807883a 	mov	r3,r5
  816d74:	3023883a 	mov	r17,r6
  816d78:	0401ffc4 	movi	r16,2047
  816d7c:	003df506 	br	816554 <__alt_data_end+0xff816554>
  816d80:	2807883a 	mov	r3,r5
  816d84:	3023883a 	mov	r17,r6
  816d88:	003df206 	br	816554 <__alt_data_end+0xff816554>
  816d8c:	123ff804 	addi	r8,r2,-32
  816d90:	01000804 	movi	r4,32
  816d94:	1a10d83a 	srl	r8,r3,r8
  816d98:	11000a26 	beq	r2,r4,816dc4 <__subdf3+0x8f4>
  816d9c:	01001004 	movi	r4,64
  816da0:	2085c83a 	sub	r2,r4,r2
  816da4:	1884983a 	sll	r2,r3,r2
  816da8:	1444b03a 	or	r2,r2,r17
  816dac:	1004c03a 	cmpne	r2,r2,zero
  816db0:	40a2b03a 	or	r17,r8,r2
  816db4:	0005883a 	mov	r2,zero
  816db8:	003f8606 	br	816bd4 <__alt_data_end+0xff816bd4>
  816dbc:	0005883a 	mov	r2,zero
  816dc0:	003fdc06 	br	816d34 <__alt_data_end+0xff816d34>
  816dc4:	0005883a 	mov	r2,zero
  816dc8:	003ff706 	br	816da8 <__alt_data_end+0xff816da8>

00816dcc <__fixdfsi>:
  816dcc:	280cd53a 	srli	r6,r5,20
  816dd0:	00c00434 	movhi	r3,16
  816dd4:	18ffffc4 	addi	r3,r3,-1
  816dd8:	3181ffcc 	andi	r6,r6,2047
  816ddc:	01c0ff84 	movi	r7,1022
  816de0:	28c6703a 	and	r3,r5,r3
  816de4:	280ad7fa 	srli	r5,r5,31
  816de8:	3980120e 	bge	r7,r6,816e34 <__fixdfsi+0x68>
  816dec:	00810744 	movi	r2,1053
  816df0:	11800c16 	blt	r2,r6,816e24 <__fixdfsi+0x58>
  816df4:	00810cc4 	movi	r2,1075
  816df8:	1185c83a 	sub	r2,r2,r6
  816dfc:	01c007c4 	movi	r7,31
  816e00:	18c00434 	orhi	r3,r3,16
  816e04:	38800d16 	blt	r7,r2,816e3c <__fixdfsi+0x70>
  816e08:	31befb44 	addi	r6,r6,-1043
  816e0c:	2084d83a 	srl	r2,r4,r2
  816e10:	1986983a 	sll	r3,r3,r6
  816e14:	1884b03a 	or	r2,r3,r2
  816e18:	28000726 	beq	r5,zero,816e38 <__fixdfsi+0x6c>
  816e1c:	0085c83a 	sub	r2,zero,r2
  816e20:	f800283a 	ret
  816e24:	00a00034 	movhi	r2,32768
  816e28:	10bfffc4 	addi	r2,r2,-1
  816e2c:	2885883a 	add	r2,r5,r2
  816e30:	f800283a 	ret
  816e34:	0005883a 	mov	r2,zero
  816e38:	f800283a 	ret
  816e3c:	008104c4 	movi	r2,1043
  816e40:	1185c83a 	sub	r2,r2,r6
  816e44:	1884d83a 	srl	r2,r3,r2
  816e48:	003ff306 	br	816e18 <__alt_data_end+0xff816e18>

00816e4c <__floatsidf>:
  816e4c:	defffd04 	addi	sp,sp,-12
  816e50:	dfc00215 	stw	ra,8(sp)
  816e54:	dc400115 	stw	r17,4(sp)
  816e58:	dc000015 	stw	r16,0(sp)
  816e5c:	20002b26 	beq	r4,zero,816f0c <__floatsidf+0xc0>
  816e60:	2023883a 	mov	r17,r4
  816e64:	2020d7fa 	srli	r16,r4,31
  816e68:	20002d16 	blt	r4,zero,816f20 <__floatsidf+0xd4>
  816e6c:	8809883a 	mov	r4,r17
  816e70:	0816fd00 	call	816fd0 <__clzsi2>
  816e74:	01410784 	movi	r5,1054
  816e78:	288bc83a 	sub	r5,r5,r2
  816e7c:	01010cc4 	movi	r4,1075
  816e80:	2149c83a 	sub	r4,r4,r5
  816e84:	00c007c4 	movi	r3,31
  816e88:	1900160e 	bge	r3,r4,816ee4 <__floatsidf+0x98>
  816e8c:	00c104c4 	movi	r3,1043
  816e90:	1947c83a 	sub	r3,r3,r5
  816e94:	88c6983a 	sll	r3,r17,r3
  816e98:	00800434 	movhi	r2,16
  816e9c:	10bfffc4 	addi	r2,r2,-1
  816ea0:	1886703a 	and	r3,r3,r2
  816ea4:	2941ffcc 	andi	r5,r5,2047
  816ea8:	800d883a 	mov	r6,r16
  816eac:	0005883a 	mov	r2,zero
  816eb0:	280a953a 	slli	r5,r5,20
  816eb4:	31803fcc 	andi	r6,r6,255
  816eb8:	01000434 	movhi	r4,16
  816ebc:	300c97fa 	slli	r6,r6,31
  816ec0:	213fffc4 	addi	r4,r4,-1
  816ec4:	1906703a 	and	r3,r3,r4
  816ec8:	1946b03a 	or	r3,r3,r5
  816ecc:	1986b03a 	or	r3,r3,r6
  816ed0:	dfc00217 	ldw	ra,8(sp)
  816ed4:	dc400117 	ldw	r17,4(sp)
  816ed8:	dc000017 	ldw	r16,0(sp)
  816edc:	dec00304 	addi	sp,sp,12
  816ee0:	f800283a 	ret
  816ee4:	00c002c4 	movi	r3,11
  816ee8:	1887c83a 	sub	r3,r3,r2
  816eec:	88c6d83a 	srl	r3,r17,r3
  816ef0:	8904983a 	sll	r2,r17,r4
  816ef4:	01000434 	movhi	r4,16
  816ef8:	213fffc4 	addi	r4,r4,-1
  816efc:	2941ffcc 	andi	r5,r5,2047
  816f00:	1906703a 	and	r3,r3,r4
  816f04:	800d883a 	mov	r6,r16
  816f08:	003fe906 	br	816eb0 <__alt_data_end+0xff816eb0>
  816f0c:	000d883a 	mov	r6,zero
  816f10:	000b883a 	mov	r5,zero
  816f14:	0007883a 	mov	r3,zero
  816f18:	0005883a 	mov	r2,zero
  816f1c:	003fe406 	br	816eb0 <__alt_data_end+0xff816eb0>
  816f20:	0123c83a 	sub	r17,zero,r4
  816f24:	003fd106 	br	816e6c <__alt_data_end+0xff816e6c>

00816f28 <__floatunsidf>:
  816f28:	defffe04 	addi	sp,sp,-8
  816f2c:	dc000015 	stw	r16,0(sp)
  816f30:	dfc00115 	stw	ra,4(sp)
  816f34:	2021883a 	mov	r16,r4
  816f38:	20002226 	beq	r4,zero,816fc4 <__floatunsidf+0x9c>
  816f3c:	0816fd00 	call	816fd0 <__clzsi2>
  816f40:	01010784 	movi	r4,1054
  816f44:	2089c83a 	sub	r4,r4,r2
  816f48:	01810cc4 	movi	r6,1075
  816f4c:	310dc83a 	sub	r6,r6,r4
  816f50:	00c007c4 	movi	r3,31
  816f54:	1980120e 	bge	r3,r6,816fa0 <__floatunsidf+0x78>
  816f58:	00c104c4 	movi	r3,1043
  816f5c:	1907c83a 	sub	r3,r3,r4
  816f60:	80ca983a 	sll	r5,r16,r3
  816f64:	00800434 	movhi	r2,16
  816f68:	10bfffc4 	addi	r2,r2,-1
  816f6c:	2101ffcc 	andi	r4,r4,2047
  816f70:	0021883a 	mov	r16,zero
  816f74:	288a703a 	and	r5,r5,r2
  816f78:	2008953a 	slli	r4,r4,20
  816f7c:	00c00434 	movhi	r3,16
  816f80:	18ffffc4 	addi	r3,r3,-1
  816f84:	28c6703a 	and	r3,r5,r3
  816f88:	8005883a 	mov	r2,r16
  816f8c:	1906b03a 	or	r3,r3,r4
  816f90:	dfc00117 	ldw	ra,4(sp)
  816f94:	dc000017 	ldw	r16,0(sp)
  816f98:	dec00204 	addi	sp,sp,8
  816f9c:	f800283a 	ret
  816fa0:	00c002c4 	movi	r3,11
  816fa4:	188bc83a 	sub	r5,r3,r2
  816fa8:	814ad83a 	srl	r5,r16,r5
  816fac:	00c00434 	movhi	r3,16
  816fb0:	18ffffc4 	addi	r3,r3,-1
  816fb4:	81a0983a 	sll	r16,r16,r6
  816fb8:	2101ffcc 	andi	r4,r4,2047
  816fbc:	28ca703a 	and	r5,r5,r3
  816fc0:	003fed06 	br	816f78 <__alt_data_end+0xff816f78>
  816fc4:	0009883a 	mov	r4,zero
  816fc8:	000b883a 	mov	r5,zero
  816fcc:	003fea06 	br	816f78 <__alt_data_end+0xff816f78>

00816fd0 <__clzsi2>:
  816fd0:	00bfffd4 	movui	r2,65535
  816fd4:	11000536 	bltu	r2,r4,816fec <__clzsi2+0x1c>
  816fd8:	00803fc4 	movi	r2,255
  816fdc:	11000f36 	bltu	r2,r4,81701c <__clzsi2+0x4c>
  816fe0:	00800804 	movi	r2,32
  816fe4:	0007883a 	mov	r3,zero
  816fe8:	00000506 	br	817000 <__clzsi2+0x30>
  816fec:	00804034 	movhi	r2,256
  816ff0:	10bfffc4 	addi	r2,r2,-1
  816ff4:	11000c2e 	bgeu	r2,r4,817028 <__clzsi2+0x58>
  816ff8:	00800204 	movi	r2,8
  816ffc:	00c00604 	movi	r3,24
  817000:	20c8d83a 	srl	r4,r4,r3
  817004:	00c020b4 	movhi	r3,130
  817008:	18eed204 	addi	r3,r3,-17592
  81700c:	1909883a 	add	r4,r3,r4
  817010:	20c00003 	ldbu	r3,0(r4)
  817014:	10c5c83a 	sub	r2,r2,r3
  817018:	f800283a 	ret
  81701c:	00800604 	movi	r2,24
  817020:	00c00204 	movi	r3,8
  817024:	003ff606 	br	817000 <__alt_data_end+0xff817000>
  817028:	00800404 	movi	r2,16
  81702c:	1007883a 	mov	r3,r2
  817030:	003ff306 	br	817000 <__alt_data_end+0xff817000>

00817034 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  817034:	defff504 	addi	sp,sp,-44
  817038:	df000a15 	stw	fp,40(sp)
  81703c:	df000a04 	addi	fp,sp,40
  817040:	e13ffc15 	stw	r4,-16(fp)
  817044:	e17ffd15 	stw	r5,-12(fp)
  817048:	e1bffe15 	stw	r6,-8(fp)
  81704c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  817050:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  817054:	d0a36b17 	ldw	r2,-29268(gp)
  
  if (alt_ticks_per_second ())
  817058:	10003c26 	beq	r2,zero,81714c <alt_alarm_start+0x118>
  {
    if (alarm)
  81705c:	e0bffc17 	ldw	r2,-16(fp)
  817060:	10003826 	beq	r2,zero,817144 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  817064:	e0bffc17 	ldw	r2,-16(fp)
  817068:	e0fffe17 	ldw	r3,-8(fp)
  81706c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  817070:	e0bffc17 	ldw	r2,-16(fp)
  817074:	e0ffff17 	ldw	r3,-4(fp)
  817078:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81707c:	0005303a 	rdctl	r2,status
  817080:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817084:	e0fff917 	ldw	r3,-28(fp)
  817088:	00bfff84 	movi	r2,-2
  81708c:	1884703a 	and	r2,r3,r2
  817090:	1001703a 	wrctl	status,r2
  
  return context;
  817094:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  817098:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81709c:	d0a36c17 	ldw	r2,-29264(gp)
      
      current_nticks = alt_nticks();
  8170a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8170a4:	e0fffd17 	ldw	r3,-12(fp)
  8170a8:	e0bff617 	ldw	r2,-40(fp)
  8170ac:	1885883a 	add	r2,r3,r2
  8170b0:	10c00044 	addi	r3,r2,1
  8170b4:	e0bffc17 	ldw	r2,-16(fp)
  8170b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8170bc:	e0bffc17 	ldw	r2,-16(fp)
  8170c0:	10c00217 	ldw	r3,8(r2)
  8170c4:	e0bff617 	ldw	r2,-40(fp)
  8170c8:	1880042e 	bgeu	r3,r2,8170dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8170cc:	e0bffc17 	ldw	r2,-16(fp)
  8170d0:	00c00044 	movi	r3,1
  8170d4:	10c00405 	stb	r3,16(r2)
  8170d8:	00000206 	br	8170e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8170dc:	e0bffc17 	ldw	r2,-16(fp)
  8170e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8170e4:	e0bffc17 	ldw	r2,-16(fp)
  8170e8:	d0e00f04 	addi	r3,gp,-32708
  8170ec:	e0fffa15 	stw	r3,-24(fp)
  8170f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8170f4:	e0bffb17 	ldw	r2,-20(fp)
  8170f8:	e0fffa17 	ldw	r3,-24(fp)
  8170fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  817100:	e0bffa17 	ldw	r2,-24(fp)
  817104:	10c00017 	ldw	r3,0(r2)
  817108:	e0bffb17 	ldw	r2,-20(fp)
  81710c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  817110:	e0bffa17 	ldw	r2,-24(fp)
  817114:	10800017 	ldw	r2,0(r2)
  817118:	e0fffb17 	ldw	r3,-20(fp)
  81711c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  817120:	e0bffa17 	ldw	r2,-24(fp)
  817124:	e0fffb17 	ldw	r3,-20(fp)
  817128:	10c00015 	stw	r3,0(r2)
  81712c:	e0bff817 	ldw	r2,-32(fp)
  817130:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817134:	e0bff717 	ldw	r2,-36(fp)
  817138:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81713c:	0005883a 	mov	r2,zero
  817140:	00000306 	br	817150 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  817144:	00bffa84 	movi	r2,-22
  817148:	00000106 	br	817150 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  81714c:	00bfde84 	movi	r2,-134
  }
}
  817150:	e037883a 	mov	sp,fp
  817154:	df000017 	ldw	fp,0(sp)
  817158:	dec00104 	addi	sp,sp,4
  81715c:	f800283a 	ret

00817160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817160:	defffe04 	addi	sp,sp,-8
  817164:	dfc00115 	stw	ra,4(sp)
  817168:	df000015 	stw	fp,0(sp)
  81716c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817170:	d0a00d17 	ldw	r2,-32716(gp)
  817174:	10000326 	beq	r2,zero,817184 <alt_get_errno+0x24>
  817178:	d0a00d17 	ldw	r2,-32716(gp)
  81717c:	103ee83a 	callr	r2
  817180:	00000106 	br	817188 <alt_get_errno+0x28>
  817184:	d0a36704 	addi	r2,gp,-29284
}
  817188:	e037883a 	mov	sp,fp
  81718c:	dfc00117 	ldw	ra,4(sp)
  817190:	df000017 	ldw	fp,0(sp)
  817194:	dec00204 	addi	sp,sp,8
  817198:	f800283a 	ret

0081719c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81719c:	defffb04 	addi	sp,sp,-20
  8171a0:	dfc00415 	stw	ra,16(sp)
  8171a4:	df000315 	stw	fp,12(sp)
  8171a8:	df000304 	addi	fp,sp,12
  8171ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8171b0:	e0bfff17 	ldw	r2,-4(fp)
  8171b4:	10000616 	blt	r2,zero,8171d0 <close+0x34>
  8171b8:	e0bfff17 	ldw	r2,-4(fp)
  8171bc:	10c00324 	muli	r3,r2,12
  8171c0:	008020b4 	movhi	r2,130
  8171c4:	10b20304 	addi	r2,r2,-14324
  8171c8:	1885883a 	add	r2,r3,r2
  8171cc:	00000106 	br	8171d4 <close+0x38>
  8171d0:	0005883a 	mov	r2,zero
  8171d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8171d8:	e0bffd17 	ldw	r2,-12(fp)
  8171dc:	10001926 	beq	r2,zero,817244 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8171e0:	e0bffd17 	ldw	r2,-12(fp)
  8171e4:	10800017 	ldw	r2,0(r2)
  8171e8:	10800417 	ldw	r2,16(r2)
  8171ec:	10000626 	beq	r2,zero,817208 <close+0x6c>
  8171f0:	e0bffd17 	ldw	r2,-12(fp)
  8171f4:	10800017 	ldw	r2,0(r2)
  8171f8:	10800417 	ldw	r2,16(r2)
  8171fc:	e13ffd17 	ldw	r4,-12(fp)
  817200:	103ee83a 	callr	r2
  817204:	00000106 	br	81720c <close+0x70>
  817208:	0005883a 	mov	r2,zero
  81720c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  817210:	e13fff17 	ldw	r4,-4(fp)
  817214:	0817ac40 	call	817ac4 <alt_release_fd>
    if (rval < 0)
  817218:	e0bffe17 	ldw	r2,-8(fp)
  81721c:	1000070e 	bge	r2,zero,81723c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  817220:	08171600 	call	817160 <alt_get_errno>
  817224:	1007883a 	mov	r3,r2
  817228:	e0bffe17 	ldw	r2,-8(fp)
  81722c:	0085c83a 	sub	r2,zero,r2
  817230:	18800015 	stw	r2,0(r3)
      return -1;
  817234:	00bfffc4 	movi	r2,-1
  817238:	00000706 	br	817258 <close+0xbc>
    }
    return 0;
  81723c:	0005883a 	mov	r2,zero
  817240:	00000506 	br	817258 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  817244:	08171600 	call	817160 <alt_get_errno>
  817248:	1007883a 	mov	r3,r2
  81724c:	00801444 	movi	r2,81
  817250:	18800015 	stw	r2,0(r3)
    return -1;
  817254:	00bfffc4 	movi	r2,-1
  }
}
  817258:	e037883a 	mov	sp,fp
  81725c:	dfc00117 	ldw	ra,4(sp)
  817260:	df000017 	ldw	fp,0(sp)
  817264:	dec00204 	addi	sp,sp,8
  817268:	f800283a 	ret

0081726c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81726c:	defffc04 	addi	sp,sp,-16
  817270:	df000315 	stw	fp,12(sp)
  817274:	df000304 	addi	fp,sp,12
  817278:	e13ffd15 	stw	r4,-12(fp)
  81727c:	e17ffe15 	stw	r5,-8(fp)
  817280:	e1bfff15 	stw	r6,-4(fp)
  return len;
  817284:	e0bfff17 	ldw	r2,-4(fp)
}
  817288:	e037883a 	mov	sp,fp
  81728c:	df000017 	ldw	fp,0(sp)
  817290:	dec00104 	addi	sp,sp,4
  817294:	f800283a 	ret

00817298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817298:	defffe04 	addi	sp,sp,-8
  81729c:	dfc00115 	stw	ra,4(sp)
  8172a0:	df000015 	stw	fp,0(sp)
  8172a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8172a8:	d0a00d17 	ldw	r2,-32716(gp)
  8172ac:	10000326 	beq	r2,zero,8172bc <alt_get_errno+0x24>
  8172b0:	d0a00d17 	ldw	r2,-32716(gp)
  8172b4:	103ee83a 	callr	r2
  8172b8:	00000106 	br	8172c0 <alt_get_errno+0x28>
  8172bc:	d0a36704 	addi	r2,gp,-29284
}
  8172c0:	e037883a 	mov	sp,fp
  8172c4:	dfc00117 	ldw	ra,4(sp)
  8172c8:	df000017 	ldw	fp,0(sp)
  8172cc:	dec00204 	addi	sp,sp,8
  8172d0:	f800283a 	ret

008172d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8172d4:	defffb04 	addi	sp,sp,-20
  8172d8:	dfc00415 	stw	ra,16(sp)
  8172dc:	df000315 	stw	fp,12(sp)
  8172e0:	df000304 	addi	fp,sp,12
  8172e4:	e13ffe15 	stw	r4,-8(fp)
  8172e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8172ec:	e0bffe17 	ldw	r2,-8(fp)
  8172f0:	10000616 	blt	r2,zero,81730c <fstat+0x38>
  8172f4:	e0bffe17 	ldw	r2,-8(fp)
  8172f8:	10c00324 	muli	r3,r2,12
  8172fc:	008020b4 	movhi	r2,130
  817300:	10b20304 	addi	r2,r2,-14324
  817304:	1885883a 	add	r2,r3,r2
  817308:	00000106 	br	817310 <fstat+0x3c>
  81730c:	0005883a 	mov	r2,zero
  817310:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  817314:	e0bffd17 	ldw	r2,-12(fp)
  817318:	10001026 	beq	r2,zero,81735c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81731c:	e0bffd17 	ldw	r2,-12(fp)
  817320:	10800017 	ldw	r2,0(r2)
  817324:	10800817 	ldw	r2,32(r2)
  817328:	10000726 	beq	r2,zero,817348 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  81732c:	e0bffd17 	ldw	r2,-12(fp)
  817330:	10800017 	ldw	r2,0(r2)
  817334:	10800817 	ldw	r2,32(r2)
  817338:	e17fff17 	ldw	r5,-4(fp)
  81733c:	e13ffd17 	ldw	r4,-12(fp)
  817340:	103ee83a 	callr	r2
  817344:	00000a06 	br	817370 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  817348:	e0bfff17 	ldw	r2,-4(fp)
  81734c:	00c80004 	movi	r3,8192
  817350:	10c00115 	stw	r3,4(r2)
      return 0;
  817354:	0005883a 	mov	r2,zero
  817358:	00000506 	br	817370 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81735c:	08172980 	call	817298 <alt_get_errno>
  817360:	1007883a 	mov	r3,r2
  817364:	00801444 	movi	r2,81
  817368:	18800015 	stw	r2,0(r3)
    return -1;
  81736c:	00bfffc4 	movi	r2,-1
  }
}
  817370:	e037883a 	mov	sp,fp
  817374:	dfc00117 	ldw	ra,4(sp)
  817378:	df000017 	ldw	fp,0(sp)
  81737c:	dec00204 	addi	sp,sp,8
  817380:	f800283a 	ret

00817384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817384:	defffe04 	addi	sp,sp,-8
  817388:	dfc00115 	stw	ra,4(sp)
  81738c:	df000015 	stw	fp,0(sp)
  817390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817394:	d0a00d17 	ldw	r2,-32716(gp)
  817398:	10000326 	beq	r2,zero,8173a8 <alt_get_errno+0x24>
  81739c:	d0a00d17 	ldw	r2,-32716(gp)
  8173a0:	103ee83a 	callr	r2
  8173a4:	00000106 	br	8173ac <alt_get_errno+0x28>
  8173a8:	d0a36704 	addi	r2,gp,-29284
}
  8173ac:	e037883a 	mov	sp,fp
  8173b0:	dfc00117 	ldw	ra,4(sp)
  8173b4:	df000017 	ldw	fp,0(sp)
  8173b8:	dec00204 	addi	sp,sp,8
  8173bc:	f800283a 	ret

008173c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8173c0:	deffed04 	addi	sp,sp,-76
  8173c4:	dfc01215 	stw	ra,72(sp)
  8173c8:	df001115 	stw	fp,68(sp)
  8173cc:	df001104 	addi	fp,sp,68
  8173d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8173d4:	e0bfff17 	ldw	r2,-4(fp)
  8173d8:	10000616 	blt	r2,zero,8173f4 <isatty+0x34>
  8173dc:	e0bfff17 	ldw	r2,-4(fp)
  8173e0:	10c00324 	muli	r3,r2,12
  8173e4:	008020b4 	movhi	r2,130
  8173e8:	10b20304 	addi	r2,r2,-14324
  8173ec:	1885883a 	add	r2,r3,r2
  8173f0:	00000106 	br	8173f8 <isatty+0x38>
  8173f4:	0005883a 	mov	r2,zero
  8173f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8173fc:	e0bfef17 	ldw	r2,-68(fp)
  817400:	10000e26 	beq	r2,zero,81743c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  817404:	e0bfef17 	ldw	r2,-68(fp)
  817408:	10800017 	ldw	r2,0(r2)
  81740c:	10800817 	ldw	r2,32(r2)
  817410:	1000021e 	bne	r2,zero,81741c <isatty+0x5c>
    {
      return 1;
  817414:	00800044 	movi	r2,1
  817418:	00000d06 	br	817450 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81741c:	e0bff004 	addi	r2,fp,-64
  817420:	100b883a 	mov	r5,r2
  817424:	e13fff17 	ldw	r4,-4(fp)
  817428:	08172d40 	call	8172d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81742c:	e0bff117 	ldw	r2,-60(fp)
  817430:	10880020 	cmpeqi	r2,r2,8192
  817434:	10803fcc 	andi	r2,r2,255
  817438:	00000506 	br	817450 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81743c:	08173840 	call	817384 <alt_get_errno>
  817440:	1007883a 	mov	r3,r2
  817444:	00801444 	movi	r2,81
  817448:	18800015 	stw	r2,0(r3)
    return 0;
  81744c:	0005883a 	mov	r2,zero
  }
}
  817450:	e037883a 	mov	sp,fp
  817454:	dfc00117 	ldw	ra,4(sp)
  817458:	df000017 	ldw	fp,0(sp)
  81745c:	dec00204 	addi	sp,sp,8
  817460:	f800283a 	ret

00817464 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  817464:	defffc04 	addi	sp,sp,-16
  817468:	df000315 	stw	fp,12(sp)
  81746c:	df000304 	addi	fp,sp,12
  817470:	e13ffd15 	stw	r4,-12(fp)
  817474:	e17ffe15 	stw	r5,-8(fp)
  817478:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  81747c:	e0fffe17 	ldw	r3,-8(fp)
  817480:	e0bffd17 	ldw	r2,-12(fp)
  817484:	18800c26 	beq	r3,r2,8174b8 <alt_load_section+0x54>
  {
    while( to != end )
  817488:	00000806 	br	8174ac <alt_load_section+0x48>
    {
      *to++ = *from++;
  81748c:	e0bffe17 	ldw	r2,-8(fp)
  817490:	10c00104 	addi	r3,r2,4
  817494:	e0fffe15 	stw	r3,-8(fp)
  817498:	e0fffd17 	ldw	r3,-12(fp)
  81749c:	19000104 	addi	r4,r3,4
  8174a0:	e13ffd15 	stw	r4,-12(fp)
  8174a4:	18c00017 	ldw	r3,0(r3)
  8174a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8174ac:	e0fffe17 	ldw	r3,-8(fp)
  8174b0:	e0bfff17 	ldw	r2,-4(fp)
  8174b4:	18bff51e 	bne	r3,r2,81748c <__alt_data_end+0xff81748c>
    {
      *to++ = *from++;
    }
  }
}
  8174b8:	0001883a 	nop
  8174bc:	e037883a 	mov	sp,fp
  8174c0:	df000017 	ldw	fp,0(sp)
  8174c4:	dec00104 	addi	sp,sp,4
  8174c8:	f800283a 	ret

008174cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8174cc:	defffe04 	addi	sp,sp,-8
  8174d0:	dfc00115 	stw	ra,4(sp)
  8174d4:	df000015 	stw	fp,0(sp)
  8174d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8174dc:	018020b4 	movhi	r6,130
  8174e0:	31b31304 	addi	r6,r6,-13236
  8174e4:	014020b4 	movhi	r5,130
  8174e8:	296fd004 	addi	r5,r5,-16576
  8174ec:	010020b4 	movhi	r4,130
  8174f0:	21331304 	addi	r4,r4,-13236
  8174f4:	08174640 	call	817464 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8174f8:	01802034 	movhi	r6,128
  8174fc:	31809204 	addi	r6,r6,584
  817500:	01402034 	movhi	r5,128
  817504:	29400804 	addi	r5,r5,32
  817508:	01002034 	movhi	r4,128
  81750c:	21000804 	addi	r4,r4,32
  817510:	08174640 	call	817464 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  817514:	018020b4 	movhi	r6,130
  817518:	31afd004 	addi	r6,r6,-16576
  81751c:	014020b4 	movhi	r5,130
  817520:	296c8704 	addi	r5,r5,-19940
  817524:	010020b4 	movhi	r4,130
  817528:	212c8704 	addi	r4,r4,-19940
  81752c:	08174640 	call	817464 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  817530:	081a2440 	call	81a244 <alt_dcache_flush_all>
  alt_icache_flush_all();
  817534:	081a4bc0 	call	81a4bc <alt_icache_flush_all>
}
  817538:	0001883a 	nop
  81753c:	e037883a 	mov	sp,fp
  817540:	dfc00117 	ldw	ra,4(sp)
  817544:	df000017 	ldw	fp,0(sp)
  817548:	dec00204 	addi	sp,sp,8
  81754c:	f800283a 	ret

00817550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817550:	defffe04 	addi	sp,sp,-8
  817554:	dfc00115 	stw	ra,4(sp)
  817558:	df000015 	stw	fp,0(sp)
  81755c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817560:	d0a00d17 	ldw	r2,-32716(gp)
  817564:	10000326 	beq	r2,zero,817574 <alt_get_errno+0x24>
  817568:	d0a00d17 	ldw	r2,-32716(gp)
  81756c:	103ee83a 	callr	r2
  817570:	00000106 	br	817578 <alt_get_errno+0x28>
  817574:	d0a36704 	addi	r2,gp,-29284
}
  817578:	e037883a 	mov	sp,fp
  81757c:	dfc00117 	ldw	ra,4(sp)
  817580:	df000017 	ldw	fp,0(sp)
  817584:	dec00204 	addi	sp,sp,8
  817588:	f800283a 	ret

0081758c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  81758c:	defff904 	addi	sp,sp,-28
  817590:	dfc00615 	stw	ra,24(sp)
  817594:	df000515 	stw	fp,20(sp)
  817598:	df000504 	addi	fp,sp,20
  81759c:	e13ffd15 	stw	r4,-12(fp)
  8175a0:	e17ffe15 	stw	r5,-8(fp)
  8175a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8175a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8175ac:	e0bffd17 	ldw	r2,-12(fp)
  8175b0:	10000616 	blt	r2,zero,8175cc <lseek+0x40>
  8175b4:	e0bffd17 	ldw	r2,-12(fp)
  8175b8:	10c00324 	muli	r3,r2,12
  8175bc:	008020b4 	movhi	r2,130
  8175c0:	10b20304 	addi	r2,r2,-14324
  8175c4:	1885883a 	add	r2,r3,r2
  8175c8:	00000106 	br	8175d0 <lseek+0x44>
  8175cc:	0005883a 	mov	r2,zero
  8175d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8175d4:	e0bffc17 	ldw	r2,-16(fp)
  8175d8:	10001026 	beq	r2,zero,81761c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8175dc:	e0bffc17 	ldw	r2,-16(fp)
  8175e0:	10800017 	ldw	r2,0(r2)
  8175e4:	10800717 	ldw	r2,28(r2)
  8175e8:	10000926 	beq	r2,zero,817610 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8175ec:	e0bffc17 	ldw	r2,-16(fp)
  8175f0:	10800017 	ldw	r2,0(r2)
  8175f4:	10800717 	ldw	r2,28(r2)
  8175f8:	e1bfff17 	ldw	r6,-4(fp)
  8175fc:	e17ffe17 	ldw	r5,-8(fp)
  817600:	e13ffc17 	ldw	r4,-16(fp)
  817604:	103ee83a 	callr	r2
  817608:	e0bffb15 	stw	r2,-20(fp)
  81760c:	00000506 	br	817624 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  817610:	00bfde84 	movi	r2,-134
  817614:	e0bffb15 	stw	r2,-20(fp)
  817618:	00000206 	br	817624 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81761c:	00bfebc4 	movi	r2,-81
  817620:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  817624:	e0bffb17 	ldw	r2,-20(fp)
  817628:	1000070e 	bge	r2,zero,817648 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81762c:	08175500 	call	817550 <alt_get_errno>
  817630:	1007883a 	mov	r3,r2
  817634:	e0bffb17 	ldw	r2,-20(fp)
  817638:	0085c83a 	sub	r2,zero,r2
  81763c:	18800015 	stw	r2,0(r3)
    rc = -1;
  817640:	00bfffc4 	movi	r2,-1
  817644:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  817648:	e0bffb17 	ldw	r2,-20(fp)
}
  81764c:	e037883a 	mov	sp,fp
  817650:	dfc00117 	ldw	ra,4(sp)
  817654:	df000017 	ldw	fp,0(sp)
  817658:	dec00204 	addi	sp,sp,8
  81765c:	f800283a 	ret

00817660 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  817660:	defffd04 	addi	sp,sp,-12
  817664:	dfc00215 	stw	ra,8(sp)
  817668:	df000115 	stw	fp,4(sp)
  81766c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  817670:	0009883a 	mov	r4,zero
  817674:	0817ee40 	call	817ee4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  817678:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81767c:	0817f1c0 	call	817f1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  817680:	018020b4 	movhi	r6,130
  817684:	31af1504 	addi	r6,r6,-17324
  817688:	014020b4 	movhi	r5,130
  81768c:	296f1504 	addi	r5,r5,-17324
  817690:	010020b4 	movhi	r4,130
  817694:	212f1504 	addi	r4,r4,-17324
  817698:	081a5b40 	call	81a5b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81769c:	081a36c0 	call	81a36c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8176a0:	010020b4 	movhi	r4,130
  8176a4:	2128f304 	addi	r4,r4,-23604
  8176a8:	081ae880 	call	81ae88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8176ac:	d0a36817 	ldw	r2,-29280(gp)
  8176b0:	d0e36917 	ldw	r3,-29276(gp)
  8176b4:	d1236a17 	ldw	r4,-29272(gp)
  8176b8:	200d883a 	mov	r6,r4
  8176bc:	180b883a 	mov	r5,r3
  8176c0:	1009883a 	mov	r4,r2
  8176c4:	08083cc0 	call	8083cc <main>
  8176c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8176cc:	01000044 	movi	r4,1
  8176d0:	081719c0 	call	81719c <close>
  exit (result);
  8176d4:	e13fff17 	ldw	r4,-4(fp)
  8176d8:	081ae9c0 	call	81ae9c <exit>

008176dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8176dc:	defffe04 	addi	sp,sp,-8
  8176e0:	df000115 	stw	fp,4(sp)
  8176e4:	df000104 	addi	fp,sp,4
  8176e8:	e13fff15 	stw	r4,-4(fp)
}
  8176ec:	0001883a 	nop
  8176f0:	e037883a 	mov	sp,fp
  8176f4:	df000017 	ldw	fp,0(sp)
  8176f8:	dec00104 	addi	sp,sp,4
  8176fc:	f800283a 	ret

00817700 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  817700:	defffe04 	addi	sp,sp,-8
  817704:	df000115 	stw	fp,4(sp)
  817708:	df000104 	addi	fp,sp,4
  81770c:	e13fff15 	stw	r4,-4(fp)
}
  817710:	0001883a 	nop
  817714:	e037883a 	mov	sp,fp
  817718:	df000017 	ldw	fp,0(sp)
  81771c:	dec00104 	addi	sp,sp,4
  817720:	f800283a 	ret

00817724 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  817724:	defff204 	addi	sp,sp,-56
  817728:	dfc00a15 	stw	ra,40(sp)
  81772c:	df000915 	stw	fp,36(sp)
  817730:	df000904 	addi	fp,sp,36
  817734:	e13fff15 	stw	r4,-4(fp)
  817738:	e1400215 	stw	r5,8(fp)
  81773c:	e1800315 	stw	r6,12(fp)
  817740:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  817744:	e0800204 	addi	r2,fp,8
  817748:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  81774c:	e0bfff17 	ldw	r2,-4(fp)
  817750:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  817754:	00006f06 	br	817914 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  817758:	e0bff807 	ldb	r2,-32(fp)
  81775c:	10800960 	cmpeqi	r2,r2,37
  817760:	1000041e 	bne	r2,zero,817774 <alt_printf+0x50>
        {
            alt_putchar(c);
  817764:	e0bff807 	ldb	r2,-32(fp)
  817768:	1009883a 	mov	r4,r2
  81776c:	08179500 	call	817950 <alt_putchar>
  817770:	00006806 	br	817914 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  817774:	e0bff717 	ldw	r2,-36(fp)
  817778:	10c00044 	addi	r3,r2,1
  81777c:	e0fff715 	stw	r3,-36(fp)
  817780:	10800003 	ldbu	r2,0(r2)
  817784:	e0bff805 	stb	r2,-32(fp)
  817788:	e0bff807 	ldb	r2,-32(fp)
  81778c:	10006926 	beq	r2,zero,817934 <alt_printf+0x210>
            {
                if (c == '%')
  817790:	e0bff807 	ldb	r2,-32(fp)
  817794:	10800958 	cmpnei	r2,r2,37
  817798:	1000041e 	bne	r2,zero,8177ac <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  81779c:	e0bff807 	ldb	r2,-32(fp)
  8177a0:	1009883a 	mov	r4,r2
  8177a4:	08179500 	call	817950 <alt_putchar>
  8177a8:	00005a06 	br	817914 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  8177ac:	e0bff807 	ldb	r2,-32(fp)
  8177b0:	108018d8 	cmpnei	r2,r2,99
  8177b4:	1000081e 	bne	r2,zero,8177d8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  8177b8:	e0bffe17 	ldw	r2,-8(fp)
  8177bc:	10c00104 	addi	r3,r2,4
  8177c0:	e0fffe15 	stw	r3,-8(fp)
  8177c4:	10800017 	ldw	r2,0(r2)
  8177c8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  8177cc:	e13ffd17 	ldw	r4,-12(fp)
  8177d0:	08179500 	call	817950 <alt_putchar>
  8177d4:	00004f06 	br	817914 <alt_printf+0x1f0>
                }
                else if (c == 'x')
  8177d8:	e0bff807 	ldb	r2,-32(fp)
  8177dc:	10801e18 	cmpnei	r2,r2,120
  8177e0:	1000341e 	bne	r2,zero,8178b4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  8177e4:	e0bffe17 	ldw	r2,-8(fp)
  8177e8:	10c00104 	addi	r3,r2,4
  8177ec:	e0fffe15 	stw	r3,-8(fp)
  8177f0:	10800017 	ldw	r2,0(r2)
  8177f4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  8177f8:	e0bffb17 	ldw	r2,-20(fp)
  8177fc:	1000031e 	bne	r2,zero,81780c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  817800:	01000c04 	movi	r4,48
  817804:	08179500 	call	817950 <alt_putchar>
                        continue;
  817808:	00004206 	br	817914 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  81780c:	00800704 	movi	r2,28
  817810:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  817814:	00000306 	br	817824 <alt_printf+0x100>
                        digit_shift -= 4;
  817818:	e0bff917 	ldw	r2,-28(fp)
  81781c:	10bfff04 	addi	r2,r2,-4
  817820:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  817824:	00c003c4 	movi	r3,15
  817828:	e0bff917 	ldw	r2,-28(fp)
  81782c:	1884983a 	sll	r2,r3,r2
  817830:	1007883a 	mov	r3,r2
  817834:	e0bffb17 	ldw	r2,-20(fp)
  817838:	1884703a 	and	r2,r3,r2
  81783c:	103ff626 	beq	r2,zero,817818 <__alt_data_end+0xff817818>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  817840:	00001906 	br	8178a8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  817844:	00c003c4 	movi	r3,15
  817848:	e0bff917 	ldw	r2,-28(fp)
  81784c:	1884983a 	sll	r2,r3,r2
  817850:	1007883a 	mov	r3,r2
  817854:	e0bffb17 	ldw	r2,-20(fp)
  817858:	1886703a 	and	r3,r3,r2
  81785c:	e0bff917 	ldw	r2,-28(fp)
  817860:	1884d83a 	srl	r2,r3,r2
  817864:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  817868:	e0bffc17 	ldw	r2,-16(fp)
  81786c:	108002a8 	cmpgeui	r2,r2,10
  817870:	1000041e 	bne	r2,zero,817884 <alt_printf+0x160>
                            c = '0' + digit;
  817874:	e0bffc17 	ldw	r2,-16(fp)
  817878:	10800c04 	addi	r2,r2,48
  81787c:	e0bff805 	stb	r2,-32(fp)
  817880:	00000306 	br	817890 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  817884:	e0bffc17 	ldw	r2,-16(fp)
  817888:	108015c4 	addi	r2,r2,87
  81788c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  817890:	e0bff807 	ldb	r2,-32(fp)
  817894:	1009883a 	mov	r4,r2
  817898:	08179500 	call	817950 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  81789c:	e0bff917 	ldw	r2,-28(fp)
  8178a0:	10bfff04 	addi	r2,r2,-4
  8178a4:	e0bff915 	stw	r2,-28(fp)
  8178a8:	e0bff917 	ldw	r2,-28(fp)
  8178ac:	103fe50e 	bge	r2,zero,817844 <__alt_data_end+0xff817844>
  8178b0:	00001806 	br	817914 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  8178b4:	e0bff807 	ldb	r2,-32(fp)
  8178b8:	10801cd8 	cmpnei	r2,r2,115
  8178bc:	1000151e 	bne	r2,zero,817914 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8178c0:	e0bffe17 	ldw	r2,-8(fp)
  8178c4:	10c00104 	addi	r3,r2,4
  8178c8:	e0fffe15 	stw	r3,-8(fp)
  8178cc:	10800017 	ldw	r2,0(r2)
  8178d0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  8178d4:	00000906 	br	8178fc <alt_printf+0x1d8>
                      alt_putchar(*s++);
  8178d8:	e0bffa17 	ldw	r2,-24(fp)
  8178dc:	10c00044 	addi	r3,r2,1
  8178e0:	e0fffa15 	stw	r3,-24(fp)
  8178e4:	10800003 	ldbu	r2,0(r2)
  8178e8:	10803fcc 	andi	r2,r2,255
  8178ec:	1080201c 	xori	r2,r2,128
  8178f0:	10bfe004 	addi	r2,r2,-128
  8178f4:	1009883a 	mov	r4,r2
  8178f8:	08179500 	call	817950 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  8178fc:	e0bffa17 	ldw	r2,-24(fp)
  817900:	10800003 	ldbu	r2,0(r2)
  817904:	10803fcc 	andi	r2,r2,255
  817908:	1080201c 	xori	r2,r2,128
  81790c:	10bfe004 	addi	r2,r2,-128
  817910:	103ff11e 	bne	r2,zero,8178d8 <__alt_data_end+0xff8178d8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  817914:	e0bff717 	ldw	r2,-36(fp)
  817918:	10c00044 	addi	r3,r2,1
  81791c:	e0fff715 	stw	r3,-36(fp)
  817920:	10800003 	ldbu	r2,0(r2)
  817924:	e0bff805 	stb	r2,-32(fp)
  817928:	e0bff807 	ldb	r2,-32(fp)
  81792c:	103f8a1e 	bne	r2,zero,817758 <__alt_data_end+0xff817758>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  817930:	00000106 	br	817938 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  817934:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  817938:	0001883a 	nop
  81793c:	e037883a 	mov	sp,fp
  817940:	dfc00117 	ldw	ra,4(sp)
  817944:	df000017 	ldw	fp,0(sp)
  817948:	dec00504 	addi	sp,sp,20
  81794c:	f800283a 	ret

00817950 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  817950:	defffd04 	addi	sp,sp,-12
  817954:	dfc00215 	stw	ra,8(sp)
  817958:	df000115 	stw	fp,4(sp)
  81795c:	df000104 	addi	fp,sp,4
  817960:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  817964:	d0a00317 	ldw	r2,-32756(gp)
  817968:	10800217 	ldw	r2,8(r2)
  81796c:	100b883a 	mov	r5,r2
  817970:	e13fff17 	ldw	r4,-4(fp)
  817974:	0810e8c0 	call	810e8c <putc>
#endif
#endif
}
  817978:	e037883a 	mov	sp,fp
  81797c:	dfc00117 	ldw	ra,4(sp)
  817980:	df000017 	ldw	fp,0(sp)
  817984:	dec00204 	addi	sp,sp,8
  817988:	f800283a 	ret

0081798c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81798c:	defffe04 	addi	sp,sp,-8
  817990:	dfc00115 	stw	ra,4(sp)
  817994:	df000015 	stw	fp,0(sp)
  817998:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81799c:	d0a00d17 	ldw	r2,-32716(gp)
  8179a0:	10000326 	beq	r2,zero,8179b0 <alt_get_errno+0x24>
  8179a4:	d0a00d17 	ldw	r2,-32716(gp)
  8179a8:	103ee83a 	callr	r2
  8179ac:	00000106 	br	8179b4 <alt_get_errno+0x28>
  8179b0:	d0a36704 	addi	r2,gp,-29284
}
  8179b4:	e037883a 	mov	sp,fp
  8179b8:	dfc00117 	ldw	ra,4(sp)
  8179bc:	df000017 	ldw	fp,0(sp)
  8179c0:	dec00204 	addi	sp,sp,8
  8179c4:	f800283a 	ret

008179c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8179c8:	defff904 	addi	sp,sp,-28
  8179cc:	dfc00615 	stw	ra,24(sp)
  8179d0:	df000515 	stw	fp,20(sp)
  8179d4:	df000504 	addi	fp,sp,20
  8179d8:	e13ffd15 	stw	r4,-12(fp)
  8179dc:	e17ffe15 	stw	r5,-8(fp)
  8179e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8179e4:	e0bffd17 	ldw	r2,-12(fp)
  8179e8:	10000616 	blt	r2,zero,817a04 <read+0x3c>
  8179ec:	e0bffd17 	ldw	r2,-12(fp)
  8179f0:	10c00324 	muli	r3,r2,12
  8179f4:	008020b4 	movhi	r2,130
  8179f8:	10b20304 	addi	r2,r2,-14324
  8179fc:	1885883a 	add	r2,r3,r2
  817a00:	00000106 	br	817a08 <read+0x40>
  817a04:	0005883a 	mov	r2,zero
  817a08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  817a0c:	e0bffb17 	ldw	r2,-20(fp)
  817a10:	10002226 	beq	r2,zero,817a9c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  817a14:	e0bffb17 	ldw	r2,-20(fp)
  817a18:	10800217 	ldw	r2,8(r2)
  817a1c:	108000cc 	andi	r2,r2,3
  817a20:	10800060 	cmpeqi	r2,r2,1
  817a24:	1000181e 	bne	r2,zero,817a88 <read+0xc0>
        (fd->dev->read))
  817a28:	e0bffb17 	ldw	r2,-20(fp)
  817a2c:	10800017 	ldw	r2,0(r2)
  817a30:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  817a34:	10001426 	beq	r2,zero,817a88 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  817a38:	e0bffb17 	ldw	r2,-20(fp)
  817a3c:	10800017 	ldw	r2,0(r2)
  817a40:	10800517 	ldw	r2,20(r2)
  817a44:	e0ffff17 	ldw	r3,-4(fp)
  817a48:	180d883a 	mov	r6,r3
  817a4c:	e17ffe17 	ldw	r5,-8(fp)
  817a50:	e13ffb17 	ldw	r4,-20(fp)
  817a54:	103ee83a 	callr	r2
  817a58:	e0bffc15 	stw	r2,-16(fp)
  817a5c:	e0bffc17 	ldw	r2,-16(fp)
  817a60:	1000070e 	bge	r2,zero,817a80 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  817a64:	081798c0 	call	81798c <alt_get_errno>
  817a68:	1007883a 	mov	r3,r2
  817a6c:	e0bffc17 	ldw	r2,-16(fp)
  817a70:	0085c83a 	sub	r2,zero,r2
  817a74:	18800015 	stw	r2,0(r3)
          return -1;
  817a78:	00bfffc4 	movi	r2,-1
  817a7c:	00000c06 	br	817ab0 <read+0xe8>
        }
        return rval;
  817a80:	e0bffc17 	ldw	r2,-16(fp)
  817a84:	00000a06 	br	817ab0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  817a88:	081798c0 	call	81798c <alt_get_errno>
  817a8c:	1007883a 	mov	r3,r2
  817a90:	00800344 	movi	r2,13
  817a94:	18800015 	stw	r2,0(r3)
  817a98:	00000406 	br	817aac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  817a9c:	081798c0 	call	81798c <alt_get_errno>
  817aa0:	1007883a 	mov	r3,r2
  817aa4:	00801444 	movi	r2,81
  817aa8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  817aac:	00bfffc4 	movi	r2,-1
}
  817ab0:	e037883a 	mov	sp,fp
  817ab4:	dfc00117 	ldw	ra,4(sp)
  817ab8:	df000017 	ldw	fp,0(sp)
  817abc:	dec00204 	addi	sp,sp,8
  817ac0:	f800283a 	ret

00817ac4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  817ac4:	defffe04 	addi	sp,sp,-8
  817ac8:	df000115 	stw	fp,4(sp)
  817acc:	df000104 	addi	fp,sp,4
  817ad0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  817ad4:	e0bfff17 	ldw	r2,-4(fp)
  817ad8:	108000d0 	cmplti	r2,r2,3
  817adc:	10000d1e 	bne	r2,zero,817b14 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  817ae0:	008020b4 	movhi	r2,130
  817ae4:	10b20304 	addi	r2,r2,-14324
  817ae8:	e0ffff17 	ldw	r3,-4(fp)
  817aec:	18c00324 	muli	r3,r3,12
  817af0:	10c5883a 	add	r2,r2,r3
  817af4:	10800204 	addi	r2,r2,8
  817af8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  817afc:	008020b4 	movhi	r2,130
  817b00:	10b20304 	addi	r2,r2,-14324
  817b04:	e0ffff17 	ldw	r3,-4(fp)
  817b08:	18c00324 	muli	r3,r3,12
  817b0c:	10c5883a 	add	r2,r2,r3
  817b10:	10000015 	stw	zero,0(r2)
  }
}
  817b14:	0001883a 	nop
  817b18:	e037883a 	mov	sp,fp
  817b1c:	df000017 	ldw	fp,0(sp)
  817b20:	dec00104 	addi	sp,sp,4
  817b24:	f800283a 	ret

00817b28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  817b28:	defff904 	addi	sp,sp,-28
  817b2c:	df000615 	stw	fp,24(sp)
  817b30:	df000604 	addi	fp,sp,24
  817b34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817b38:	0005303a 	rdctl	r2,status
  817b3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817b40:	e0fffe17 	ldw	r3,-8(fp)
  817b44:	00bfff84 	movi	r2,-2
  817b48:	1884703a 	and	r2,r3,r2
  817b4c:	1001703a 	wrctl	status,r2
  
  return context;
  817b50:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  817b54:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  817b58:	d0a00e17 	ldw	r2,-32712(gp)
  817b5c:	10c000c4 	addi	r3,r2,3
  817b60:	00bfff04 	movi	r2,-4
  817b64:	1884703a 	and	r2,r3,r2
  817b68:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  817b6c:	d0e00e17 	ldw	r3,-32712(gp)
  817b70:	e0bfff17 	ldw	r2,-4(fp)
  817b74:	1887883a 	add	r3,r3,r2
  817b78:	00804034 	movhi	r2,256
  817b7c:	10800004 	addi	r2,r2,0
  817b80:	10c0062e 	bgeu	r2,r3,817b9c <sbrk+0x74>
  817b84:	e0bffb17 	ldw	r2,-20(fp)
  817b88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817b8c:	e0bffa17 	ldw	r2,-24(fp)
  817b90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  817b94:	00bfffc4 	movi	r2,-1
  817b98:	00000b06 	br	817bc8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  817b9c:	d0a00e17 	ldw	r2,-32712(gp)
  817ba0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  817ba4:	d0e00e17 	ldw	r3,-32712(gp)
  817ba8:	e0bfff17 	ldw	r2,-4(fp)
  817bac:	1885883a 	add	r2,r3,r2
  817bb0:	d0a00e15 	stw	r2,-32712(gp)
  817bb4:	e0bffb17 	ldw	r2,-20(fp)
  817bb8:	e0bffc15 	stw	r2,-16(fp)
  817bbc:	e0bffc17 	ldw	r2,-16(fp)
  817bc0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  817bc4:	e0bffd17 	ldw	r2,-12(fp)
} 
  817bc8:	e037883a 	mov	sp,fp
  817bcc:	df000017 	ldw	fp,0(sp)
  817bd0:	dec00104 	addi	sp,sp,4
  817bd4:	f800283a 	ret

00817bd8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  817bd8:	defffa04 	addi	sp,sp,-24
  817bdc:	df000515 	stw	fp,20(sp)
  817be0:	df000504 	addi	fp,sp,20
  817be4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817be8:	0005303a 	rdctl	r2,status
  817bec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817bf0:	e0fffc17 	ldw	r3,-16(fp)
  817bf4:	00bfff84 	movi	r2,-2
  817bf8:	1884703a 	and	r2,r3,r2
  817bfc:	1001703a 	wrctl	status,r2
  
  return context;
  817c00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  817c04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  817c08:	e0bfff17 	ldw	r2,-4(fp)
  817c0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  817c10:	e0bffd17 	ldw	r2,-12(fp)
  817c14:	10800017 	ldw	r2,0(r2)
  817c18:	e0fffd17 	ldw	r3,-12(fp)
  817c1c:	18c00117 	ldw	r3,4(r3)
  817c20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  817c24:	e0bffd17 	ldw	r2,-12(fp)
  817c28:	10800117 	ldw	r2,4(r2)
  817c2c:	e0fffd17 	ldw	r3,-12(fp)
  817c30:	18c00017 	ldw	r3,0(r3)
  817c34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  817c38:	e0bffd17 	ldw	r2,-12(fp)
  817c3c:	e0fffd17 	ldw	r3,-12(fp)
  817c40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  817c44:	e0bffd17 	ldw	r2,-12(fp)
  817c48:	e0fffd17 	ldw	r3,-12(fp)
  817c4c:	10c00015 	stw	r3,0(r2)
  817c50:	e0bffb17 	ldw	r2,-20(fp)
  817c54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817c58:	e0bffe17 	ldw	r2,-8(fp)
  817c5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  817c60:	0001883a 	nop
  817c64:	e037883a 	mov	sp,fp
  817c68:	df000017 	ldw	fp,0(sp)
  817c6c:	dec00104 	addi	sp,sp,4
  817c70:	f800283a 	ret

00817c74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  817c74:	defffb04 	addi	sp,sp,-20
  817c78:	dfc00415 	stw	ra,16(sp)
  817c7c:	df000315 	stw	fp,12(sp)
  817c80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  817c84:	d0a00f17 	ldw	r2,-32708(gp)
  817c88:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  817c8c:	d0a36c17 	ldw	r2,-29264(gp)
  817c90:	10800044 	addi	r2,r2,1
  817c94:	d0a36c15 	stw	r2,-29264(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  817c98:	00002e06 	br	817d54 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  817c9c:	e0bffd17 	ldw	r2,-12(fp)
  817ca0:	10800017 	ldw	r2,0(r2)
  817ca4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  817ca8:	e0bffd17 	ldw	r2,-12(fp)
  817cac:	10800403 	ldbu	r2,16(r2)
  817cb0:	10803fcc 	andi	r2,r2,255
  817cb4:	10000426 	beq	r2,zero,817cc8 <alt_tick+0x54>
  817cb8:	d0a36c17 	ldw	r2,-29264(gp)
  817cbc:	1000021e 	bne	r2,zero,817cc8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  817cc0:	e0bffd17 	ldw	r2,-12(fp)
  817cc4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  817cc8:	e0bffd17 	ldw	r2,-12(fp)
  817ccc:	10800217 	ldw	r2,8(r2)
  817cd0:	d0e36c17 	ldw	r3,-29264(gp)
  817cd4:	18801d36 	bltu	r3,r2,817d4c <alt_tick+0xd8>
  817cd8:	e0bffd17 	ldw	r2,-12(fp)
  817cdc:	10800403 	ldbu	r2,16(r2)
  817ce0:	10803fcc 	andi	r2,r2,255
  817ce4:	1000191e 	bne	r2,zero,817d4c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  817ce8:	e0bffd17 	ldw	r2,-12(fp)
  817cec:	10800317 	ldw	r2,12(r2)
  817cf0:	e0fffd17 	ldw	r3,-12(fp)
  817cf4:	18c00517 	ldw	r3,20(r3)
  817cf8:	1809883a 	mov	r4,r3
  817cfc:	103ee83a 	callr	r2
  817d00:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  817d04:	e0bfff17 	ldw	r2,-4(fp)
  817d08:	1000031e 	bne	r2,zero,817d18 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  817d0c:	e13ffd17 	ldw	r4,-12(fp)
  817d10:	0817bd80 	call	817bd8 <alt_alarm_stop>
  817d14:	00000d06 	br	817d4c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  817d18:	e0bffd17 	ldw	r2,-12(fp)
  817d1c:	10c00217 	ldw	r3,8(r2)
  817d20:	e0bfff17 	ldw	r2,-4(fp)
  817d24:	1887883a 	add	r3,r3,r2
  817d28:	e0bffd17 	ldw	r2,-12(fp)
  817d2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  817d30:	e0bffd17 	ldw	r2,-12(fp)
  817d34:	10c00217 	ldw	r3,8(r2)
  817d38:	d0a36c17 	ldw	r2,-29264(gp)
  817d3c:	1880032e 	bgeu	r3,r2,817d4c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  817d40:	e0bffd17 	ldw	r2,-12(fp)
  817d44:	00c00044 	movi	r3,1
  817d48:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  817d4c:	e0bffe17 	ldw	r2,-8(fp)
  817d50:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  817d54:	e0fffd17 	ldw	r3,-12(fp)
  817d58:	d0a00f04 	addi	r2,gp,-32708
  817d5c:	18bfcf1e 	bne	r3,r2,817c9c <__alt_data_end+0xff817c9c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  817d60:	0001883a 	nop
}
  817d64:	0001883a 	nop
  817d68:	e037883a 	mov	sp,fp
  817d6c:	dfc00117 	ldw	ra,4(sp)
  817d70:	df000017 	ldw	fp,0(sp)
  817d74:	dec00204 	addi	sp,sp,8
  817d78:	f800283a 	ret

00817d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817d7c:	defffe04 	addi	sp,sp,-8
  817d80:	dfc00115 	stw	ra,4(sp)
  817d84:	df000015 	stw	fp,0(sp)
  817d88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817d8c:	d0a00d17 	ldw	r2,-32716(gp)
  817d90:	10000326 	beq	r2,zero,817da0 <alt_get_errno+0x24>
  817d94:	d0a00d17 	ldw	r2,-32716(gp)
  817d98:	103ee83a 	callr	r2
  817d9c:	00000106 	br	817da4 <alt_get_errno+0x28>
  817da0:	d0a36704 	addi	r2,gp,-29284
}
  817da4:	e037883a 	mov	sp,fp
  817da8:	dfc00117 	ldw	ra,4(sp)
  817dac:	df000017 	ldw	fp,0(sp)
  817db0:	dec00204 	addi	sp,sp,8
  817db4:	f800283a 	ret

00817db8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  817db8:	defff904 	addi	sp,sp,-28
  817dbc:	dfc00615 	stw	ra,24(sp)
  817dc0:	df000515 	stw	fp,20(sp)
  817dc4:	df000504 	addi	fp,sp,20
  817dc8:	e13ffd15 	stw	r4,-12(fp)
  817dcc:	e17ffe15 	stw	r5,-8(fp)
  817dd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  817dd4:	e0bffd17 	ldw	r2,-12(fp)
  817dd8:	10000616 	blt	r2,zero,817df4 <write+0x3c>
  817ddc:	e0bffd17 	ldw	r2,-12(fp)
  817de0:	10c00324 	muli	r3,r2,12
  817de4:	008020b4 	movhi	r2,130
  817de8:	10b20304 	addi	r2,r2,-14324
  817dec:	1885883a 	add	r2,r3,r2
  817df0:	00000106 	br	817df8 <write+0x40>
  817df4:	0005883a 	mov	r2,zero
  817df8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  817dfc:	e0bffb17 	ldw	r2,-20(fp)
  817e00:	10002126 	beq	r2,zero,817e88 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  817e04:	e0bffb17 	ldw	r2,-20(fp)
  817e08:	10800217 	ldw	r2,8(r2)
  817e0c:	108000cc 	andi	r2,r2,3
  817e10:	10001826 	beq	r2,zero,817e74 <write+0xbc>
  817e14:	e0bffb17 	ldw	r2,-20(fp)
  817e18:	10800017 	ldw	r2,0(r2)
  817e1c:	10800617 	ldw	r2,24(r2)
  817e20:	10001426 	beq	r2,zero,817e74 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  817e24:	e0bffb17 	ldw	r2,-20(fp)
  817e28:	10800017 	ldw	r2,0(r2)
  817e2c:	10800617 	ldw	r2,24(r2)
  817e30:	e0ffff17 	ldw	r3,-4(fp)
  817e34:	180d883a 	mov	r6,r3
  817e38:	e17ffe17 	ldw	r5,-8(fp)
  817e3c:	e13ffb17 	ldw	r4,-20(fp)
  817e40:	103ee83a 	callr	r2
  817e44:	e0bffc15 	stw	r2,-16(fp)
  817e48:	e0bffc17 	ldw	r2,-16(fp)
  817e4c:	1000070e 	bge	r2,zero,817e6c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  817e50:	0817d7c0 	call	817d7c <alt_get_errno>
  817e54:	1007883a 	mov	r3,r2
  817e58:	e0bffc17 	ldw	r2,-16(fp)
  817e5c:	0085c83a 	sub	r2,zero,r2
  817e60:	18800015 	stw	r2,0(r3)
        return -1;
  817e64:	00bfffc4 	movi	r2,-1
  817e68:	00000c06 	br	817e9c <write+0xe4>
      }
      return rval;
  817e6c:	e0bffc17 	ldw	r2,-16(fp)
  817e70:	00000a06 	br	817e9c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  817e74:	0817d7c0 	call	817d7c <alt_get_errno>
  817e78:	1007883a 	mov	r3,r2
  817e7c:	00800344 	movi	r2,13
  817e80:	18800015 	stw	r2,0(r3)
  817e84:	00000406 	br	817e98 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  817e88:	0817d7c0 	call	817d7c <alt_get_errno>
  817e8c:	1007883a 	mov	r3,r2
  817e90:	00801444 	movi	r2,81
  817e94:	18800015 	stw	r2,0(r3)
  }
  return -1;
  817e98:	00bfffc4 	movi	r2,-1
}
  817e9c:	e037883a 	mov	sp,fp
  817ea0:	dfc00117 	ldw	ra,4(sp)
  817ea4:	df000017 	ldw	fp,0(sp)
  817ea8:	dec00204 	addi	sp,sp,8
  817eac:	f800283a 	ret

00817eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  817eb0:	defffd04 	addi	sp,sp,-12
  817eb4:	dfc00215 	stw	ra,8(sp)
  817eb8:	df000115 	stw	fp,4(sp)
  817ebc:	df000104 	addi	fp,sp,4
  817ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  817ec4:	d1600a04 	addi	r5,gp,-32728
  817ec8:	e13fff17 	ldw	r4,-4(fp)
  817ecc:	081a2c80 	call	81a2c8 <alt_dev_llist_insert>
}
  817ed0:	e037883a 	mov	sp,fp
  817ed4:	dfc00117 	ldw	ra,4(sp)
  817ed8:	df000017 	ldw	fp,0(sp)
  817edc:	dec00204 	addi	sp,sp,8
  817ee0:	f800283a 	ret

00817ee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  817ee4:	defffd04 	addi	sp,sp,-12
  817ee8:	dfc00215 	stw	ra,8(sp)
  817eec:	df000115 	stw	fp,4(sp)
  817ef0:	df000104 	addi	fp,sp,4
  817ef4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  817ef8:	081aa340 	call	81aa34 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  817efc:	00800044 	movi	r2,1
  817f00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  817f04:	0001883a 	nop
  817f08:	e037883a 	mov	sp,fp
  817f0c:	dfc00117 	ldw	ra,4(sp)
  817f10:	df000017 	ldw	fp,0(sp)
  817f14:	dec00204 	addi	sp,sp,8
  817f18:	f800283a 	ret

00817f1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  817f1c:	defffe04 	addi	sp,sp,-8
  817f20:	dfc00115 	stw	ra,4(sp)
  817f24:	df000015 	stw	fp,0(sp)
  817f28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  817f2c:	01c0fa04 	movi	r7,1000
  817f30:	01800104 	movi	r6,4
  817f34:	000b883a 	mov	r5,zero
  817f38:	01004034 	movhi	r4,256
  817f3c:	21041004 	addi	r4,r4,4160
  817f40:	08191540 	call	819154 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  817f44:	010020b4 	movhi	r4,130
  817f48:	21326304 	addi	r4,r4,-13940
  817f4c:	0817eb00 	call	817eb0 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  817f50:	010020b4 	movhi	r4,130
  817f54:	21327804 	addi	r4,r4,-13856
  817f58:	0818f440 	call	818f44 <altera_avalon_lcd_16207_init>
  817f5c:	010020b4 	movhi	r4,130
  817f60:	21326e04 	addi	r4,r4,-13896
  817f64:	0817eb00 	call	817eb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  817f68:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  817f6c:	018000c4 	movi	r6,3
  817f70:	000b883a 	mov	r5,zero
  817f74:	010020b4 	movhi	r4,130
  817f78:	2132c004 	addi	r4,r4,-13568
  817f7c:	08192d80 	call	8192d8 <altera_avalon_uart_init>
  817f80:	010020b4 	movhi	r4,130
  817f84:	2132b604 	addi	r4,r4,-13608
  817f88:	0817eb00 	call	817eb0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  817f8c:	010020b4 	movhi	r4,130
  817f90:	2132e704 	addi	r4,r4,-13412
  817f94:	0817eb00 	call	817eb0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  817f98:	010020b4 	movhi	r4,130
  817f9c:	2132f304 	addi	r4,r4,-13364
  817fa0:	0817eb00 	call	817eb0 <alt_dev_reg>
}
  817fa4:	0001883a 	nop
  817fa8:	e037883a 	mov	sp,fp
  817fac:	dfc00117 	ldw	ra,4(sp)
  817fb0:	df000017 	ldw	fp,0(sp)
  817fb4:	dec00204 	addi	sp,sp,8
  817fb8:	f800283a 	ret

00817fbc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  817fbc:	defffa04 	addi	sp,sp,-24
  817fc0:	dfc00515 	stw	ra,20(sp)
  817fc4:	df000415 	stw	fp,16(sp)
  817fc8:	df000404 	addi	fp,sp,16
  817fcc:	e13ffd15 	stw	r4,-12(fp)
  817fd0:	e17ffe15 	stw	r5,-8(fp)
  817fd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  817fd8:	e0bffd17 	ldw	r2,-12(fp)
  817fdc:	10800017 	ldw	r2,0(r2)
  817fe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  817fe4:	e0bffc17 	ldw	r2,-16(fp)
  817fe8:	10c00a04 	addi	r3,r2,40
  817fec:	e0bffd17 	ldw	r2,-12(fp)
  817ff0:	10800217 	ldw	r2,8(r2)
  817ff4:	100f883a 	mov	r7,r2
  817ff8:	e1bfff17 	ldw	r6,-4(fp)
  817ffc:	e17ffe17 	ldw	r5,-8(fp)
  818000:	1809883a 	mov	r4,r3
  818004:	081807c0 	call	81807c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  818008:	e037883a 	mov	sp,fp
  81800c:	dfc00117 	ldw	ra,4(sp)
  818010:	df000017 	ldw	fp,0(sp)
  818014:	dec00204 	addi	sp,sp,8
  818018:	f800283a 	ret

0081801c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81801c:	defffa04 	addi	sp,sp,-24
  818020:	dfc00515 	stw	ra,20(sp)
  818024:	df000415 	stw	fp,16(sp)
  818028:	df000404 	addi	fp,sp,16
  81802c:	e13ffd15 	stw	r4,-12(fp)
  818030:	e17ffe15 	stw	r5,-8(fp)
  818034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818038:	e0bffd17 	ldw	r2,-12(fp)
  81803c:	10800017 	ldw	r2,0(r2)
  818040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  818044:	e0bffc17 	ldw	r2,-16(fp)
  818048:	10c00a04 	addi	r3,r2,40
  81804c:	e0bffd17 	ldw	r2,-12(fp)
  818050:	10800217 	ldw	r2,8(r2)
  818054:	100f883a 	mov	r7,r2
  818058:	e1bfff17 	ldw	r6,-4(fp)
  81805c:	e17ffe17 	ldw	r5,-8(fp)
  818060:	1809883a 	mov	r4,r3
  818064:	08181680 	call	818168 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  818068:	e037883a 	mov	sp,fp
  81806c:	dfc00117 	ldw	ra,4(sp)
  818070:	df000017 	ldw	fp,0(sp)
  818074:	dec00204 	addi	sp,sp,8
  818078:	f800283a 	ret

0081807c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  81807c:	defff704 	addi	sp,sp,-36
  818080:	df000815 	stw	fp,32(sp)
  818084:	df000804 	addi	fp,sp,32
  818088:	e13ffc15 	stw	r4,-16(fp)
  81808c:	e17ffd15 	stw	r5,-12(fp)
  818090:	e1bffe15 	stw	r6,-8(fp)
  818094:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  818098:	e0bffc17 	ldw	r2,-16(fp)
  81809c:	10800017 	ldw	r2,0(r2)
  8180a0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  8180a4:	e0bffd17 	ldw	r2,-12(fp)
  8180a8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  8180ac:	e0bffe17 	ldw	r2,-8(fp)
  8180b0:	e0fffd17 	ldw	r3,-12(fp)
  8180b4:	1885883a 	add	r2,r3,r2
  8180b8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  8180bc:	00001206 	br	818108 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8180c0:	e0bff917 	ldw	r2,-28(fp)
  8180c4:	10800037 	ldwio	r2,0(r2)
  8180c8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8180cc:	e0bffb17 	ldw	r2,-20(fp)
  8180d0:	10a0000c 	andi	r2,r2,32768
  8180d4:	10000626 	beq	r2,zero,8180f0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8180d8:	e0bff817 	ldw	r2,-32(fp)
  8180dc:	10c00044 	addi	r3,r2,1
  8180e0:	e0fff815 	stw	r3,-32(fp)
  8180e4:	e0fffb17 	ldw	r3,-20(fp)
  8180e8:	10c00005 	stb	r3,0(r2)
  8180ec:	00000606 	br	818108 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
  8180f0:	e0fff817 	ldw	r3,-32(fp)
  8180f4:	e0bffd17 	ldw	r2,-12(fp)
  8180f8:	1880071e 	bne	r3,r2,818118 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
  8180fc:	e0bfff17 	ldw	r2,-4(fp)
  818100:	1090000c 	andi	r2,r2,16384
  818104:	1000061e 	bne	r2,zero,818120 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  818108:	e0fff817 	ldw	r3,-32(fp)
  81810c:	e0bffa17 	ldw	r2,-24(fp)
  818110:	18bfeb36 	bltu	r3,r2,8180c0 <__alt_data_end+0xff8180c0>
  818114:	00000306 	br	818124 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  818118:	0001883a 	nop
  81811c:	00000106 	br	818124 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
  818120:	0001883a 	nop
    
  }

  if (ptr != buffer)
  818124:	e0fff817 	ldw	r3,-32(fp)
  818128:	e0bffd17 	ldw	r2,-12(fp)
  81812c:	18800426 	beq	r3,r2,818140 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
  818130:	e0fff817 	ldw	r3,-32(fp)
  818134:	e0bffd17 	ldw	r2,-12(fp)
  818138:	1885c83a 	sub	r2,r3,r2
  81813c:	00000606 	br	818158 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
  818140:	e0bfff17 	ldw	r2,-4(fp)
  818144:	1090000c 	andi	r2,r2,16384
  818148:	10000226 	beq	r2,zero,818154 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  81814c:	00bffd44 	movi	r2,-11
  818150:	00000106 	br	818158 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
  818154:	00bffec4 	movi	r2,-5
}
  818158:	e037883a 	mov	sp,fp
  81815c:	df000017 	ldw	fp,0(sp)
  818160:	dec00104 	addi	sp,sp,4
  818164:	f800283a 	ret

00818168 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  818168:	defff904 	addi	sp,sp,-28
  81816c:	df000615 	stw	fp,24(sp)
  818170:	df000604 	addi	fp,sp,24
  818174:	e13ffc15 	stw	r4,-16(fp)
  818178:	e17ffd15 	stw	r5,-12(fp)
  81817c:	e1bffe15 	stw	r6,-8(fp)
  818180:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  818184:	e0bffc17 	ldw	r2,-16(fp)
  818188:	10800017 	ldw	r2,0(r2)
  81818c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  818190:	e0bffe17 	ldw	r2,-8(fp)
  818194:	e0fffd17 	ldw	r3,-12(fp)
  818198:	1885883a 	add	r2,r3,r2
  81819c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  8181a0:	00000e06 	br	8181dc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8181a4:	e0bffa17 	ldw	r2,-24(fp)
  8181a8:	10800104 	addi	r2,r2,4
  8181ac:	10800037 	ldwio	r2,0(r2)
  8181b0:	10bfffec 	andhi	r2,r2,65535
  8181b4:	10000926 	beq	r2,zero,8181dc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8181b8:	e0fffa17 	ldw	r3,-24(fp)
  8181bc:	e0bffd17 	ldw	r2,-12(fp)
  8181c0:	11000044 	addi	r4,r2,1
  8181c4:	e13ffd15 	stw	r4,-12(fp)
  8181c8:	10800003 	ldbu	r2,0(r2)
  8181cc:	10803fcc 	andi	r2,r2,255
  8181d0:	1080201c 	xori	r2,r2,128
  8181d4:	10bfe004 	addi	r2,r2,-128
  8181d8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8181dc:	e0fffd17 	ldw	r3,-12(fp)
  8181e0:	e0bffb17 	ldw	r2,-20(fp)
  8181e4:	18bfef36 	bltu	r3,r2,8181a4 <__alt_data_end+0xff8181a4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  8181e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8181ec:	e037883a 	mov	sp,fp
  8181f0:	df000017 	ldw	fp,0(sp)
  8181f4:	dec00104 	addi	sp,sp,4
  8181f8:	f800283a 	ret

008181fc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8181fc:	defffa04 	addi	sp,sp,-24
  818200:	dfc00515 	stw	ra,20(sp)
  818204:	df000415 	stw	fp,16(sp)
  818208:	df000404 	addi	fp,sp,16
  81820c:	e13ffe15 	stw	r4,-8(fp)
  818210:	2805883a 	mov	r2,r5
  818214:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  818218:	e0bffe17 	ldw	r2,-8(fp)
  81821c:	10800017 	ldw	r2,0(r2)
  818220:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  818224:	008003f4 	movhi	r2,15
  818228:	10909004 	addi	r2,r2,16960
  81822c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  818230:	e0bffe17 	ldw	r2,-8(fp)
  818234:	10800803 	ldbu	r2,32(r2)
  818238:	10803fcc 	andi	r2,r2,255
  81823c:	1080201c 	xori	r2,r2,128
  818240:	10bfe004 	addi	r2,r2,-128
  818244:	1000151e 	bne	r2,zero,81829c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  818248:	00000906 	br	818270 <lcd_write_command+0x74>
    if (--i == 0)
  81824c:	e0bffc17 	ldw	r2,-16(fp)
  818250:	10bfffc4 	addi	r2,r2,-1
  818254:	e0bffc15 	stw	r2,-16(fp)
  818258:	e0bffc17 	ldw	r2,-16(fp)
  81825c:	1000041e 	bne	r2,zero,818270 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  818260:	e0bffe17 	ldw	r2,-8(fp)
  818264:	00c00044 	movi	r3,1
  818268:	10c00805 	stb	r3,32(r2)
      return;
  81826c:	00000c06 	br	8182a0 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  818270:	e0bffd17 	ldw	r2,-12(fp)
  818274:	10800104 	addi	r2,r2,4
  818278:	10800037 	ldwio	r2,0(r2)
  81827c:	1080200c 	andi	r2,r2,128
  818280:	103ff21e 	bne	r2,zero,81824c <__alt_data_end+0xff81824c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  818284:	01001904 	movi	r4,100
  818288:	081aa040 	call	81aa04 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  81828c:	e0bffd17 	ldw	r2,-12(fp)
  818290:	e0ffff03 	ldbu	r3,-4(fp)
  818294:	10c00035 	stwio	r3,0(r2)
  818298:	00000106 	br	8182a0 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81829c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8182a0:	e037883a 	mov	sp,fp
  8182a4:	dfc00117 	ldw	ra,4(sp)
  8182a8:	df000017 	ldw	fp,0(sp)
  8182ac:	dec00204 	addi	sp,sp,8
  8182b0:	f800283a 	ret

008182b4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8182b4:	defffa04 	addi	sp,sp,-24
  8182b8:	dfc00515 	stw	ra,20(sp)
  8182bc:	df000415 	stw	fp,16(sp)
  8182c0:	df000404 	addi	fp,sp,16
  8182c4:	e13ffe15 	stw	r4,-8(fp)
  8182c8:	2805883a 	mov	r2,r5
  8182cc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8182d0:	e0bffe17 	ldw	r2,-8(fp)
  8182d4:	10800017 	ldw	r2,0(r2)
  8182d8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8182dc:	008003f4 	movhi	r2,15
  8182e0:	10909004 	addi	r2,r2,16960
  8182e4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8182e8:	e0bffe17 	ldw	r2,-8(fp)
  8182ec:	10800803 	ldbu	r2,32(r2)
  8182f0:	10803fcc 	andi	r2,r2,255
  8182f4:	1080201c 	xori	r2,r2,128
  8182f8:	10bfe004 	addi	r2,r2,-128
  8182fc:	10001d1e 	bne	r2,zero,818374 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  818300:	00000906 	br	818328 <lcd_write_data+0x74>
    if (--i == 0)
  818304:	e0bffc17 	ldw	r2,-16(fp)
  818308:	10bfffc4 	addi	r2,r2,-1
  81830c:	e0bffc15 	stw	r2,-16(fp)
  818310:	e0bffc17 	ldw	r2,-16(fp)
  818314:	1000041e 	bne	r2,zero,818328 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  818318:	e0bffe17 	ldw	r2,-8(fp)
  81831c:	00c00044 	movi	r3,1
  818320:	10c00805 	stb	r3,32(r2)
      return;
  818324:	00001406 	br	818378 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  818328:	e0bffd17 	ldw	r2,-12(fp)
  81832c:	10800104 	addi	r2,r2,4
  818330:	10800037 	ldwio	r2,0(r2)
  818334:	1080200c 	andi	r2,r2,128
  818338:	103ff21e 	bne	r2,zero,818304 <__alt_data_end+0xff818304>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81833c:	01001904 	movi	r4,100
  818340:	081aa040 	call	81aa04 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  818344:	e0bffd17 	ldw	r2,-12(fp)
  818348:	10800204 	addi	r2,r2,8
  81834c:	1007883a 	mov	r3,r2
  818350:	e0bfff03 	ldbu	r2,-4(fp)
  818354:	18800035 	stwio	r2,0(r3)

  sp->address++;
  818358:	e0bffe17 	ldw	r2,-8(fp)
  81835c:	108008c3 	ldbu	r2,35(r2)
  818360:	10800044 	addi	r2,r2,1
  818364:	1007883a 	mov	r3,r2
  818368:	e0bffe17 	ldw	r2,-8(fp)
  81836c:	10c008c5 	stb	r3,35(r2)
  818370:	00000106 	br	818378 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  818374:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  818378:	e037883a 	mov	sp,fp
  81837c:	dfc00117 	ldw	ra,4(sp)
  818380:	df000017 	ldw	fp,0(sp)
  818384:	dec00204 	addi	sp,sp,8
  818388:	f800283a 	ret

0081838c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81838c:	defffc04 	addi	sp,sp,-16
  818390:	dfc00315 	stw	ra,12(sp)
  818394:	df000215 	stw	fp,8(sp)
  818398:	df000204 	addi	fp,sp,8
  81839c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8183a0:	01400044 	movi	r5,1
  8183a4:	e13fff17 	ldw	r4,-4(fp)
  8183a8:	08181fc0 	call	8181fc <lcd_write_command>

  sp->x = 0;
  8183ac:	e0bfff17 	ldw	r2,-4(fp)
  8183b0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8183b4:	e0bfff17 	ldw	r2,-4(fp)
  8183b8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8183bc:	e0bfff17 	ldw	r2,-4(fp)
  8183c0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8183c4:	e03ffe15 	stw	zero,-8(fp)
  8183c8:	00001b06 	br	818438 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8183cc:	e0bffe17 	ldw	r2,-8(fp)
  8183d0:	108018e4 	muli	r2,r2,99
  8183d4:	10801004 	addi	r2,r2,64
  8183d8:	e0ffff17 	ldw	r3,-4(fp)
  8183dc:	1885883a 	add	r2,r3,r2
  8183e0:	01801444 	movi	r6,81
  8183e4:	01400804 	movi	r5,32
  8183e8:	1009883a 	mov	r4,r2
  8183ec:	080a50c0 	call	80a50c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8183f0:	e0bffe17 	ldw	r2,-8(fp)
  8183f4:	108018e4 	muli	r2,r2,99
  8183f8:	10800c04 	addi	r2,r2,48
  8183fc:	e0ffff17 	ldw	r3,-4(fp)
  818400:	1885883a 	add	r2,r3,r2
  818404:	01800404 	movi	r6,16
  818408:	01400804 	movi	r5,32
  81840c:	1009883a 	mov	r4,r2
  818410:	080a50c0 	call	80a50c <memset>
    sp->line[y].width = 0;
  818414:	e0ffff17 	ldw	r3,-4(fp)
  818418:	e0bffe17 	ldw	r2,-8(fp)
  81841c:	108018e4 	muli	r2,r2,99
  818420:	1885883a 	add	r2,r3,r2
  818424:	10802444 	addi	r2,r2,145
  818428:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81842c:	e0bffe17 	ldw	r2,-8(fp)
  818430:	10800044 	addi	r2,r2,1
  818434:	e0bffe15 	stw	r2,-8(fp)
  818438:	e0bffe17 	ldw	r2,-8(fp)
  81843c:	10800090 	cmplti	r2,r2,2
  818440:	103fe21e 	bne	r2,zero,8183cc <__alt_data_end+0xff8183cc>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  818444:	0001883a 	nop
  818448:	e037883a 	mov	sp,fp
  81844c:	dfc00117 	ldw	ra,4(sp)
  818450:	df000017 	ldw	fp,0(sp)
  818454:	dec00204 	addi	sp,sp,8
  818458:	f800283a 	ret

0081845c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  81845c:	defff704 	addi	sp,sp,-36
  818460:	dfc00815 	stw	ra,32(sp)
  818464:	df000715 	stw	fp,28(sp)
  818468:	df000704 	addi	fp,sp,28
  81846c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  818470:	e0bfff17 	ldw	r2,-4(fp)
  818474:	10800943 	ldbu	r2,37(r2)
  818478:	10803fcc 	andi	r2,r2,255
  81847c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  818480:	e03ff915 	stw	zero,-28(fp)
  818484:	00006706 	br	818624 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  818488:	e0ffff17 	ldw	r3,-4(fp)
  81848c:	e0bff917 	ldw	r2,-28(fp)
  818490:	108018e4 	muli	r2,r2,99
  818494:	1885883a 	add	r2,r3,r2
  818498:	10802444 	addi	r2,r2,145
  81849c:	10800003 	ldbu	r2,0(r2)
  8184a0:	10803fcc 	andi	r2,r2,255
  8184a4:	1080201c 	xori	r2,r2,128
  8184a8:	10bfe004 	addi	r2,r2,-128
  8184ac:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8184b0:	e0ffff17 	ldw	r3,-4(fp)
  8184b4:	e0bff917 	ldw	r2,-28(fp)
  8184b8:	108018e4 	muli	r2,r2,99
  8184bc:	1885883a 	add	r2,r3,r2
  8184c0:	10802484 	addi	r2,r2,146
  8184c4:	10800003 	ldbu	r2,0(r2)
  8184c8:	10c03fcc 	andi	r3,r2,255
  8184cc:	e0bffc17 	ldw	r2,-16(fp)
  8184d0:	1885383a 	mul	r2,r3,r2
  8184d4:	1005d23a 	srai	r2,r2,8
  8184d8:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8184dc:	e0fffb17 	ldw	r3,-20(fp)
  8184e0:	e0bffd17 	ldw	r2,-12(fp)
  8184e4:	18800116 	blt	r3,r2,8184ec <lcd_repaint_screen+0x90>
      offset = 0;
  8184e8:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8184ec:	e03ffa15 	stw	zero,-24(fp)
  8184f0:	00004606 	br	81860c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8184f4:	e0fffa17 	ldw	r3,-24(fp)
  8184f8:	e0bffb17 	ldw	r2,-20(fp)
  8184fc:	1885883a 	add	r2,r3,r2
  818500:	e17ffd17 	ldw	r5,-12(fp)
  818504:	1009883a 	mov	r4,r2
  818508:	080a2e40 	call	80a2e4 <__modsi3>
  81850c:	1009883a 	mov	r4,r2
  818510:	e0ffff17 	ldw	r3,-4(fp)
  818514:	e0bff917 	ldw	r2,-28(fp)
  818518:	108018e4 	muli	r2,r2,99
  81851c:	1885883a 	add	r2,r3,r2
  818520:	1105883a 	add	r2,r2,r4
  818524:	10801004 	addi	r2,r2,64
  818528:	10800003 	ldbu	r2,0(r2)
  81852c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  818530:	e0ffff17 	ldw	r3,-4(fp)
  818534:	e0bff917 	ldw	r2,-28(fp)
  818538:	108018e4 	muli	r2,r2,99
  81853c:	1887883a 	add	r3,r3,r2
  818540:	e0bffa17 	ldw	r2,-24(fp)
  818544:	1885883a 	add	r2,r3,r2
  818548:	10800c04 	addi	r2,r2,48
  81854c:	10800003 	ldbu	r2,0(r2)
  818550:	10c03fcc 	andi	r3,r2,255
  818554:	18c0201c 	xori	r3,r3,128
  818558:	18ffe004 	addi	r3,r3,-128
  81855c:	e0bffe07 	ldb	r2,-8(fp)
  818560:	18802726 	beq	r3,r2,818600 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  818564:	e0fff917 	ldw	r3,-28(fp)
  818568:	d0a01104 	addi	r2,gp,-32700
  81856c:	1885883a 	add	r2,r3,r2
  818570:	10800003 	ldbu	r2,0(r2)
  818574:	1007883a 	mov	r3,r2
  818578:	e0bffa17 	ldw	r2,-24(fp)
  81857c:	1885883a 	add	r2,r3,r2
  818580:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  818584:	e0fffe43 	ldbu	r3,-7(fp)
  818588:	e0bfff17 	ldw	r2,-4(fp)
  81858c:	108008c3 	ldbu	r2,35(r2)
  818590:	10803fcc 	andi	r2,r2,255
  818594:	1080201c 	xori	r2,r2,128
  818598:	10bfe004 	addi	r2,r2,-128
  81859c:	18800a26 	beq	r3,r2,8185c8 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8185a0:	e0fffe43 	ldbu	r3,-7(fp)
  8185a4:	00bfe004 	movi	r2,-128
  8185a8:	1884b03a 	or	r2,r3,r2
  8185ac:	10803fcc 	andi	r2,r2,255
  8185b0:	100b883a 	mov	r5,r2
  8185b4:	e13fff17 	ldw	r4,-4(fp)
  8185b8:	08181fc0 	call	8181fc <lcd_write_command>
          sp->address = address;
  8185bc:	e0fffe43 	ldbu	r3,-7(fp)
  8185c0:	e0bfff17 	ldw	r2,-4(fp)
  8185c4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8185c8:	e0bffe03 	ldbu	r2,-8(fp)
  8185cc:	10803fcc 	andi	r2,r2,255
  8185d0:	100b883a 	mov	r5,r2
  8185d4:	e13fff17 	ldw	r4,-4(fp)
  8185d8:	08182b40 	call	8182b4 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8185dc:	e0ffff17 	ldw	r3,-4(fp)
  8185e0:	e0bff917 	ldw	r2,-28(fp)
  8185e4:	108018e4 	muli	r2,r2,99
  8185e8:	1887883a 	add	r3,r3,r2
  8185ec:	e0bffa17 	ldw	r2,-24(fp)
  8185f0:	1885883a 	add	r2,r3,r2
  8185f4:	10800c04 	addi	r2,r2,48
  8185f8:	e0fffe03 	ldbu	r3,-8(fp)
  8185fc:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  818600:	e0bffa17 	ldw	r2,-24(fp)
  818604:	10800044 	addi	r2,r2,1
  818608:	e0bffa15 	stw	r2,-24(fp)
  81860c:	e0bffa17 	ldw	r2,-24(fp)
  818610:	10800410 	cmplti	r2,r2,16
  818614:	103fb71e 	bne	r2,zero,8184f4 <__alt_data_end+0xff8184f4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  818618:	e0bff917 	ldw	r2,-28(fp)
  81861c:	10800044 	addi	r2,r2,1
  818620:	e0bff915 	stw	r2,-28(fp)
  818624:	e0bff917 	ldw	r2,-28(fp)
  818628:	10800090 	cmplti	r2,r2,2
  81862c:	103f961e 	bne	r2,zero,818488 <__alt_data_end+0xff818488>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  818630:	0001883a 	nop
  818634:	e037883a 	mov	sp,fp
  818638:	dfc00117 	ldw	ra,4(sp)
  81863c:	df000017 	ldw	fp,0(sp)
  818640:	dec00204 	addi	sp,sp,8
  818644:	f800283a 	ret

00818648 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  818648:	defffc04 	addi	sp,sp,-16
  81864c:	dfc00315 	stw	ra,12(sp)
  818650:	df000215 	stw	fp,8(sp)
  818654:	df000204 	addi	fp,sp,8
  818658:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81865c:	e03ffe15 	stw	zero,-8(fp)
  818660:	00001d06 	br	8186d8 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  818664:	e0bffe17 	ldw	r2,-8(fp)
  818668:	00800f16 	blt	zero,r2,8186a8 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  81866c:	e0bffe17 	ldw	r2,-8(fp)
  818670:	108018e4 	muli	r2,r2,99
  818674:	10801004 	addi	r2,r2,64
  818678:	e0ffff17 	ldw	r3,-4(fp)
  81867c:	1889883a 	add	r4,r3,r2
  818680:	e0bffe17 	ldw	r2,-8(fp)
  818684:	10800044 	addi	r2,r2,1
  818688:	108018e4 	muli	r2,r2,99
  81868c:	10801004 	addi	r2,r2,64
  818690:	e0ffff17 	ldw	r3,-4(fp)
  818694:	1885883a 	add	r2,r3,r2
  818698:	01801404 	movi	r6,80
  81869c:	100b883a 	mov	r5,r2
  8186a0:	080fca80 	call	80fca8 <memcpy>
  8186a4:	00000906 	br	8186cc <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8186a8:	e0bffe17 	ldw	r2,-8(fp)
  8186ac:	108018e4 	muli	r2,r2,99
  8186b0:	10801004 	addi	r2,r2,64
  8186b4:	e0ffff17 	ldw	r3,-4(fp)
  8186b8:	1885883a 	add	r2,r3,r2
  8186bc:	01801404 	movi	r6,80
  8186c0:	01400804 	movi	r5,32
  8186c4:	1009883a 	mov	r4,r2
  8186c8:	080a50c0 	call	80a50c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8186cc:	e0bffe17 	ldw	r2,-8(fp)
  8186d0:	10800044 	addi	r2,r2,1
  8186d4:	e0bffe15 	stw	r2,-8(fp)
  8186d8:	e0bffe17 	ldw	r2,-8(fp)
  8186dc:	10800090 	cmplti	r2,r2,2
  8186e0:	103fe01e 	bne	r2,zero,818664 <__alt_data_end+0xff818664>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8186e4:	e0bfff17 	ldw	r2,-4(fp)
  8186e8:	10800883 	ldbu	r2,34(r2)
  8186ec:	10bfffc4 	addi	r2,r2,-1
  8186f0:	1007883a 	mov	r3,r2
  8186f4:	e0bfff17 	ldw	r2,-4(fp)
  8186f8:	10c00885 	stb	r3,34(r2)
}
  8186fc:	0001883a 	nop
  818700:	e037883a 	mov	sp,fp
  818704:	dfc00117 	ldw	ra,4(sp)
  818708:	df000017 	ldw	fp,0(sp)
  81870c:	dec00204 	addi	sp,sp,8
  818710:	f800283a 	ret

00818714 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  818714:	defff904 	addi	sp,sp,-28
  818718:	dfc00615 	stw	ra,24(sp)
  81871c:	df000515 	stw	fp,20(sp)
  818720:	df000504 	addi	fp,sp,20
  818724:	e13ffe15 	stw	r4,-8(fp)
  818728:	2805883a 	mov	r2,r5
  81872c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  818730:	e03ffb15 	stw	zero,-20(fp)
  818734:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  818738:	e0bffe17 	ldw	r2,-8(fp)
  81873c:	10800a03 	ldbu	r2,40(r2)
  818740:	10803fcc 	andi	r2,r2,255
  818744:	1080201c 	xori	r2,r2,128
  818748:	10bfe004 	addi	r2,r2,-128
  81874c:	108016d8 	cmpnei	r2,r2,91
  818750:	1000411e 	bne	r2,zero,818858 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  818754:	e0bffe17 	ldw	r2,-8(fp)
  818758:	10800a04 	addi	r2,r2,40
  81875c:	10800044 	addi	r2,r2,1
  818760:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  818764:	00000c06 	br	818798 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  818768:	e0bffb17 	ldw	r2,-20(fp)
  81876c:	10c002a4 	muli	r3,r2,10
  818770:	e0bffd17 	ldw	r2,-12(fp)
  818774:	11000044 	addi	r4,r2,1
  818778:	e13ffd15 	stw	r4,-12(fp)
  81877c:	10800003 	ldbu	r2,0(r2)
  818780:	10803fcc 	andi	r2,r2,255
  818784:	1080201c 	xori	r2,r2,128
  818788:	10bfe004 	addi	r2,r2,-128
  81878c:	10bff404 	addi	r2,r2,-48
  818790:	1885883a 	add	r2,r3,r2
  818794:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  818798:	d0e01317 	ldw	r3,-32692(gp)
  81879c:	e0bffd17 	ldw	r2,-12(fp)
  8187a0:	10800003 	ldbu	r2,0(r2)
  8187a4:	10803fcc 	andi	r2,r2,255
  8187a8:	1080201c 	xori	r2,r2,128
  8187ac:	10bfe004 	addi	r2,r2,-128
  8187b0:	10800044 	addi	r2,r2,1
  8187b4:	1885883a 	add	r2,r3,r2
  8187b8:	10800003 	ldbu	r2,0(r2)
  8187bc:	10803fcc 	andi	r2,r2,255
  8187c0:	1080010c 	andi	r2,r2,4
  8187c4:	103fe81e 	bne	r2,zero,818768 <__alt_data_end+0xff818768>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8187c8:	e0bffd17 	ldw	r2,-12(fp)
  8187cc:	10800003 	ldbu	r2,0(r2)
  8187d0:	10803fcc 	andi	r2,r2,255
  8187d4:	1080201c 	xori	r2,r2,128
  8187d8:	10bfe004 	addi	r2,r2,-128
  8187dc:	10800ed8 	cmpnei	r2,r2,59
  8187e0:	10001f1e 	bne	r2,zero,818860 <lcd_handle_escape+0x14c>
    {
      ptr++;
  8187e4:	e0bffd17 	ldw	r2,-12(fp)
  8187e8:	10800044 	addi	r2,r2,1
  8187ec:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8187f0:	00000c06 	br	818824 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8187f4:	e0bffc17 	ldw	r2,-16(fp)
  8187f8:	10c002a4 	muli	r3,r2,10
  8187fc:	e0bffd17 	ldw	r2,-12(fp)
  818800:	11000044 	addi	r4,r2,1
  818804:	e13ffd15 	stw	r4,-12(fp)
  818808:	10800003 	ldbu	r2,0(r2)
  81880c:	10803fcc 	andi	r2,r2,255
  818810:	1080201c 	xori	r2,r2,128
  818814:	10bfe004 	addi	r2,r2,-128
  818818:	10bff404 	addi	r2,r2,-48
  81881c:	1885883a 	add	r2,r3,r2
  818820:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  818824:	d0e01317 	ldw	r3,-32692(gp)
  818828:	e0bffd17 	ldw	r2,-12(fp)
  81882c:	10800003 	ldbu	r2,0(r2)
  818830:	10803fcc 	andi	r2,r2,255
  818834:	1080201c 	xori	r2,r2,128
  818838:	10bfe004 	addi	r2,r2,-128
  81883c:	10800044 	addi	r2,r2,1
  818840:	1885883a 	add	r2,r3,r2
  818844:	10800003 	ldbu	r2,0(r2)
  818848:	10803fcc 	andi	r2,r2,255
  81884c:	1080010c 	andi	r2,r2,4
  818850:	103fe81e 	bne	r2,zero,8187f4 <__alt_data_end+0xff8187f4>
  818854:	00000206 	br	818860 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  818858:	00bfffc4 	movi	r2,-1
  81885c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  818860:	e0bfff07 	ldb	r2,-4(fp)
  818864:	10c012a0 	cmpeqi	r3,r2,74
  818868:	1800291e 	bne	r3,zero,818910 <lcd_handle_escape+0x1fc>
  81886c:	10c012c8 	cmpgei	r3,r2,75
  818870:	1800031e 	bne	r3,zero,818880 <lcd_handle_escape+0x16c>
  818874:	10801220 	cmpeqi	r2,r2,72
  818878:	1000061e 	bne	r2,zero,818894 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  81887c:	00004a06 	br	8189a8 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  818880:	10c012e0 	cmpeqi	r3,r2,75
  818884:	1800281e 	bne	r3,zero,818928 <lcd_handle_escape+0x214>
  818888:	108019a0 	cmpeqi	r2,r2,102
  81888c:	1000011e 	bne	r2,zero,818894 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  818890:	00004506 	br	8189a8 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  818894:	e0bffc17 	ldw	r2,-16(fp)
  818898:	0080050e 	bge	zero,r2,8188b0 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  81889c:	e0bffc17 	ldw	r2,-16(fp)
  8188a0:	10bfffc4 	addi	r2,r2,-1
  8188a4:	1007883a 	mov	r3,r2
  8188a8:	e0bffe17 	ldw	r2,-8(fp)
  8188ac:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8188b0:	e0bffb17 	ldw	r2,-20(fp)
  8188b4:	0080370e 	bge	zero,r2,818994 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  8188b8:	e0bffb17 	ldw	r2,-20(fp)
  8188bc:	10bfffc4 	addi	r2,r2,-1
  8188c0:	1007883a 	mov	r3,r2
  8188c4:	e0bffe17 	ldw	r2,-8(fp)
  8188c8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8188cc:	e0bffe17 	ldw	r2,-8(fp)
  8188d0:	10800883 	ldbu	r2,34(r2)
  8188d4:	10803fcc 	andi	r2,r2,255
  8188d8:	10800170 	cmpltui	r2,r2,5
  8188dc:	1000061e 	bne	r2,zero,8188f8 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  8188e0:	e0bffe17 	ldw	r2,-8(fp)
  8188e4:	00c00104 	movi	r3,4
  8188e8:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8188ec:	00000206 	br	8188f8 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  8188f0:	e13ffe17 	ldw	r4,-8(fp)
  8188f4:	08186480 	call	818648 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8188f8:	e0bffe17 	ldw	r2,-8(fp)
  8188fc:	10800883 	ldbu	r2,34(r2)
  818900:	10803fcc 	andi	r2,r2,255
  818904:	108000e8 	cmpgeui	r2,r2,3
  818908:	103ff91e 	bne	r2,zero,8188f0 <__alt_data_end+0xff8188f0>
        lcd_scroll_up(sp);
    }
    break;
  81890c:	00002106 	br	818994 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  818910:	e0bffb17 	ldw	r2,-20(fp)
  818914:	10800098 	cmpnei	r2,r2,2
  818918:	1000201e 	bne	r2,zero,81899c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  81891c:	e13ffe17 	ldw	r4,-8(fp)
  818920:	081838c0 	call	81838c <lcd_clear_screen>
    break;
  818924:	00001d06 	br	81899c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  818928:	e0bffb17 	ldw	r2,-20(fp)
  81892c:	00801d16 	blt	zero,r2,8189a4 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  818930:	e0bffe17 	ldw	r2,-8(fp)
  818934:	10800843 	ldbu	r2,33(r2)
  818938:	10803fcc 	andi	r2,r2,255
  81893c:	10801428 	cmpgeui	r2,r2,80
  818940:	1000181e 	bne	r2,zero,8189a4 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  818944:	e0bffe17 	ldw	r2,-8(fp)
  818948:	10800883 	ldbu	r2,34(r2)
  81894c:	10803fcc 	andi	r2,r2,255
  818950:	108018e4 	muli	r2,r2,99
  818954:	10801004 	addi	r2,r2,64
  818958:	e0fffe17 	ldw	r3,-8(fp)
  81895c:	1887883a 	add	r3,r3,r2
  818960:	e0bffe17 	ldw	r2,-8(fp)
  818964:	10800843 	ldbu	r2,33(r2)
  818968:	10803fcc 	andi	r2,r2,255
  81896c:	1889883a 	add	r4,r3,r2
  818970:	e0bffe17 	ldw	r2,-8(fp)
  818974:	10800843 	ldbu	r2,33(r2)
  818978:	10803fcc 	andi	r2,r2,255
  81897c:	00c01404 	movi	r3,80
  818980:	1885c83a 	sub	r2,r3,r2
  818984:	100d883a 	mov	r6,r2
  818988:	01400804 	movi	r5,32
  81898c:	080a50c0 	call	80a50c <memset>
    }
    break;
  818990:	00000406 	br	8189a4 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  818994:	0001883a 	nop
  818998:	00000306 	br	8189a8 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  81899c:	0001883a 	nop
  8189a0:	00000106 	br	8189a8 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  8189a4:	0001883a 	nop
  }
}
  8189a8:	0001883a 	nop
  8189ac:	e037883a 	mov	sp,fp
  8189b0:	dfc00117 	ldw	ra,4(sp)
  8189b4:	df000017 	ldw	fp,0(sp)
  8189b8:	dec00204 	addi	sp,sp,8
  8189bc:	f800283a 	ret

008189c0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8189c0:	defff304 	addi	sp,sp,-52
  8189c4:	dfc00c15 	stw	ra,48(sp)
  8189c8:	df000b15 	stw	fp,44(sp)
  8189cc:	df000b04 	addi	fp,sp,44
  8189d0:	e13ffc15 	stw	r4,-16(fp)
  8189d4:	e17ffd15 	stw	r5,-12(fp)
  8189d8:	e1bffe15 	stw	r6,-8(fp)
  8189dc:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8189e0:	e0bffe17 	ldw	r2,-8(fp)
  8189e4:	e0fffd17 	ldw	r3,-12(fp)
  8189e8:	1885883a 	add	r2,r3,r2
  8189ec:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8189f0:	e0bffc17 	ldw	r2,-16(fp)
  8189f4:	00c00044 	movi	r3,1
  8189f8:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8189fc:	00009906 	br	818c64 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  818a00:	e0bffd17 	ldw	r2,-12(fp)
  818a04:	10800003 	ldbu	r2,0(r2)
  818a08:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  818a0c:	e0bffc17 	ldw	r2,-16(fp)
  818a10:	10800903 	ldbu	r2,36(r2)
  818a14:	10803fcc 	andi	r2,r2,255
  818a18:	1080201c 	xori	r2,r2,128
  818a1c:	10bfe004 	addi	r2,r2,-128
  818a20:	10003716 	blt	r2,zero,818b00 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  818a24:	e0bffc17 	ldw	r2,-16(fp)
  818a28:	10800903 	ldbu	r2,36(r2)
  818a2c:	10803fcc 	andi	r2,r2,255
  818a30:	1080201c 	xori	r2,r2,128
  818a34:	10bfe004 	addi	r2,r2,-128
  818a38:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  818a3c:	e0bffa17 	ldw	r2,-24(fp)
  818a40:	1000031e 	bne	r2,zero,818a50 <altera_avalon_lcd_16207_write+0x90>
  818a44:	e0bff907 	ldb	r2,-28(fp)
  818a48:	108016d8 	cmpnei	r2,r2,91
  818a4c:	10000d1e 	bne	r2,zero,818a84 <altera_avalon_lcd_16207_write+0xc4>
  818a50:	e0bffa17 	ldw	r2,-24(fp)
  818a54:	10001826 	beq	r2,zero,818ab8 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  818a58:	d0e01317 	ldw	r3,-32692(gp)
  818a5c:	e0bff907 	ldb	r2,-28(fp)
  818a60:	10800044 	addi	r2,r2,1
  818a64:	1885883a 	add	r2,r3,r2
  818a68:	10800003 	ldbu	r2,0(r2)
  818a6c:	10803fcc 	andi	r2,r2,255
  818a70:	1080010c 	andi	r2,r2,4
  818a74:	1000101e 	bne	r2,zero,818ab8 <altera_avalon_lcd_16207_write+0xf8>
  818a78:	e0bff907 	ldb	r2,-28(fp)
  818a7c:	10800ee0 	cmpeqi	r2,r2,59
  818a80:	10000d1e 	bne	r2,zero,818ab8 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  818a84:	e0fffc17 	ldw	r3,-16(fp)
  818a88:	e0bffa17 	ldw	r2,-24(fp)
  818a8c:	1885883a 	add	r2,r3,r2
  818a90:	10800a04 	addi	r2,r2,40
  818a94:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  818a98:	e0bff907 	ldb	r2,-28(fp)
  818a9c:	100b883a 	mov	r5,r2
  818aa0:	e13ffc17 	ldw	r4,-16(fp)
  818aa4:	08187140 	call	818714 <lcd_handle_escape>

        sp->esccount = -1;
  818aa8:	e0bffc17 	ldw	r2,-16(fp)
  818aac:	00ffffc4 	movi	r3,-1
  818ab0:	10c00905 	stb	r3,36(r2)
  818ab4:	00006806 	br	818c58 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  818ab8:	e0bffc17 	ldw	r2,-16(fp)
  818abc:	10800903 	ldbu	r2,36(r2)
  818ac0:	10803fcc 	andi	r2,r2,255
  818ac4:	108001e8 	cmpgeui	r2,r2,7
  818ac8:	1000631e 	bne	r2,zero,818c58 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  818acc:	e0fffc17 	ldw	r3,-16(fp)
  818ad0:	e0bffa17 	ldw	r2,-24(fp)
  818ad4:	1885883a 	add	r2,r3,r2
  818ad8:	10800a04 	addi	r2,r2,40
  818adc:	e0fff903 	ldbu	r3,-28(fp)
  818ae0:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  818ae4:	e0bffc17 	ldw	r2,-16(fp)
  818ae8:	10800903 	ldbu	r2,36(r2)
  818aec:	10800044 	addi	r2,r2,1
  818af0:	1007883a 	mov	r3,r2
  818af4:	e0bffc17 	ldw	r2,-16(fp)
  818af8:	10c00905 	stb	r3,36(r2)
  818afc:	00005606 	br	818c58 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  818b00:	e0bff907 	ldb	r2,-28(fp)
  818b04:	108006d8 	cmpnei	r2,r2,27
  818b08:	1000031e 	bne	r2,zero,818b18 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  818b0c:	e0bffc17 	ldw	r2,-16(fp)
  818b10:	10000905 	stb	zero,36(r2)
  818b14:	00005006 	br	818c58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  818b18:	e0bff907 	ldb	r2,-28(fp)
  818b1c:	10800358 	cmpnei	r2,r2,13
  818b20:	1000031e 	bne	r2,zero,818b30 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  818b24:	e0bffc17 	ldw	r2,-16(fp)
  818b28:	10000845 	stb	zero,33(r2)
  818b2c:	00004a06 	br	818c58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  818b30:	e0bff907 	ldb	r2,-28(fp)
  818b34:	10800298 	cmpnei	r2,r2,10
  818b38:	1000101e 	bne	r2,zero,818b7c <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  818b3c:	e0bffc17 	ldw	r2,-16(fp)
  818b40:	10000845 	stb	zero,33(r2)
      sp->y++;
  818b44:	e0bffc17 	ldw	r2,-16(fp)
  818b48:	10800883 	ldbu	r2,34(r2)
  818b4c:	10800044 	addi	r2,r2,1
  818b50:	1007883a 	mov	r3,r2
  818b54:	e0bffc17 	ldw	r2,-16(fp)
  818b58:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  818b5c:	e0bffc17 	ldw	r2,-16(fp)
  818b60:	10800883 	ldbu	r2,34(r2)
  818b64:	10803fcc 	andi	r2,r2,255
  818b68:	108000f0 	cmpltui	r2,r2,3
  818b6c:	10003a1e 	bne	r2,zero,818c58 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  818b70:	e13ffc17 	ldw	r4,-16(fp)
  818b74:	08186480 	call	818648 <lcd_scroll_up>
  818b78:	00003706 	br	818c58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  818b7c:	e0bff907 	ldb	r2,-28(fp)
  818b80:	10800218 	cmpnei	r2,r2,8
  818b84:	10000b1e 	bne	r2,zero,818bb4 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  818b88:	e0bffc17 	ldw	r2,-16(fp)
  818b8c:	10800843 	ldbu	r2,33(r2)
  818b90:	10803fcc 	andi	r2,r2,255
  818b94:	10003026 	beq	r2,zero,818c58 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  818b98:	e0bffc17 	ldw	r2,-16(fp)
  818b9c:	10800843 	ldbu	r2,33(r2)
  818ba0:	10bfffc4 	addi	r2,r2,-1
  818ba4:	1007883a 	mov	r3,r2
  818ba8:	e0bffc17 	ldw	r2,-16(fp)
  818bac:	10c00845 	stb	r3,33(r2)
  818bb0:	00002906 	br	818c58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  818bb4:	d0e01317 	ldw	r3,-32692(gp)
  818bb8:	e0bff907 	ldb	r2,-28(fp)
  818bbc:	10800044 	addi	r2,r2,1
  818bc0:	1885883a 	add	r2,r3,r2
  818bc4:	10800003 	ldbu	r2,0(r2)
  818bc8:	10803fcc 	andi	r2,r2,255
  818bcc:	1080201c 	xori	r2,r2,128
  818bd0:	10bfe004 	addi	r2,r2,-128
  818bd4:	108025cc 	andi	r2,r2,151
  818bd8:	10001f26 	beq	r2,zero,818c58 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  818bdc:	e0bffc17 	ldw	r2,-16(fp)
  818be0:	10800883 	ldbu	r2,34(r2)
  818be4:	10803fcc 	andi	r2,r2,255
  818be8:	108000b0 	cmpltui	r2,r2,2
  818bec:	1000021e 	bne	r2,zero,818bf8 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  818bf0:	e13ffc17 	ldw	r4,-16(fp)
  818bf4:	08186480 	call	818648 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  818bf8:	e0bffc17 	ldw	r2,-16(fp)
  818bfc:	10800843 	ldbu	r2,33(r2)
  818c00:	10803fcc 	andi	r2,r2,255
  818c04:	10801428 	cmpgeui	r2,r2,80
  818c08:	10000d1e 	bne	r2,zero,818c40 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  818c0c:	e0bffc17 	ldw	r2,-16(fp)
  818c10:	10800883 	ldbu	r2,34(r2)
  818c14:	10c03fcc 	andi	r3,r2,255
  818c18:	e0bffc17 	ldw	r2,-16(fp)
  818c1c:	10800843 	ldbu	r2,33(r2)
  818c20:	10803fcc 	andi	r2,r2,255
  818c24:	e13ffc17 	ldw	r4,-16(fp)
  818c28:	18c018e4 	muli	r3,r3,99
  818c2c:	20c7883a 	add	r3,r4,r3
  818c30:	1885883a 	add	r2,r3,r2
  818c34:	10801004 	addi	r2,r2,64
  818c38:	e0fff903 	ldbu	r3,-28(fp)
  818c3c:	10c00005 	stb	r3,0(r2)

      sp->x++;
  818c40:	e0bffc17 	ldw	r2,-16(fp)
  818c44:	10800843 	ldbu	r2,33(r2)
  818c48:	10800044 	addi	r2,r2,1
  818c4c:	1007883a 	mov	r3,r2
  818c50:	e0bffc17 	ldw	r2,-16(fp)
  818c54:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  818c58:	e0bffd17 	ldw	r2,-12(fp)
  818c5c:	10800044 	addi	r2,r2,1
  818c60:	e0bffd15 	stw	r2,-12(fp)
  818c64:	e0fffd17 	ldw	r3,-12(fp)
  818c68:	e0bff817 	ldw	r2,-32(fp)
  818c6c:	18bf6436 	bltu	r3,r2,818a00 <__alt_data_end+0xff818a00>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  818c70:	00800404 	movi	r2,16
  818c74:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  818c78:	e03ff515 	stw	zero,-44(fp)
  818c7c:	00003706 	br	818d5c <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  818c80:	00801404 	movi	r2,80
  818c84:	e0bff715 	stw	r2,-36(fp)
  818c88:	00001106 	br	818cd0 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  818c8c:	e0bff717 	ldw	r2,-36(fp)
  818c90:	10bfffc4 	addi	r2,r2,-1
  818c94:	e13ffc17 	ldw	r4,-16(fp)
  818c98:	e0fff517 	ldw	r3,-44(fp)
  818c9c:	18c018e4 	muli	r3,r3,99
  818ca0:	20c7883a 	add	r3,r4,r3
  818ca4:	1885883a 	add	r2,r3,r2
  818ca8:	10801004 	addi	r2,r2,64
  818cac:	10800003 	ldbu	r2,0(r2)
  818cb0:	10803fcc 	andi	r2,r2,255
  818cb4:	1080201c 	xori	r2,r2,128
  818cb8:	10bfe004 	addi	r2,r2,-128
  818cbc:	10800820 	cmpeqi	r2,r2,32
  818cc0:	10000626 	beq	r2,zero,818cdc <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  818cc4:	e0bff717 	ldw	r2,-36(fp)
  818cc8:	10bfffc4 	addi	r2,r2,-1
  818ccc:	e0bff715 	stw	r2,-36(fp)
  818cd0:	e0bff717 	ldw	r2,-36(fp)
  818cd4:	00bfed16 	blt	zero,r2,818c8c <__alt_data_end+0xff818c8c>
  818cd8:	00000106 	br	818ce0 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  818cdc:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  818ce0:	e0bff717 	ldw	r2,-36(fp)
  818ce4:	10800448 	cmpgei	r2,r2,17
  818ce8:	1000031e 	bne	r2,zero,818cf8 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  818cec:	00800404 	movi	r2,16
  818cf0:	e0bff715 	stw	r2,-36(fp)
  818cf4:	00000306 	br	818d04 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  818cf8:	e0bff717 	ldw	r2,-36(fp)
  818cfc:	10800044 	addi	r2,r2,1
  818d00:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  818d04:	e0bff717 	ldw	r2,-36(fp)
  818d08:	1009883a 	mov	r4,r2
  818d0c:	e0fffc17 	ldw	r3,-16(fp)
  818d10:	e0bff517 	ldw	r2,-44(fp)
  818d14:	108018e4 	muli	r2,r2,99
  818d18:	1885883a 	add	r2,r3,r2
  818d1c:	10802444 	addi	r2,r2,145
  818d20:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  818d24:	e0fff617 	ldw	r3,-40(fp)
  818d28:	e0bff717 	ldw	r2,-36(fp)
  818d2c:	1880020e 	bge	r3,r2,818d38 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  818d30:	e0bff717 	ldw	r2,-36(fp)
  818d34:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  818d38:	e0fffc17 	ldw	r3,-16(fp)
  818d3c:	e0bff517 	ldw	r2,-44(fp)
  818d40:	108018e4 	muli	r2,r2,99
  818d44:	1885883a 	add	r2,r3,r2
  818d48:	10802484 	addi	r2,r2,146
  818d4c:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  818d50:	e0bff517 	ldw	r2,-44(fp)
  818d54:	10800044 	addi	r2,r2,1
  818d58:	e0bff515 	stw	r2,-44(fp)
  818d5c:	e0bff517 	ldw	r2,-44(fp)
  818d60:	10800090 	cmplti	r2,r2,2
  818d64:	103fc61e 	bne	r2,zero,818c80 <__alt_data_end+0xff818c80>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  818d68:	e0bff617 	ldw	r2,-40(fp)
  818d6c:	10800448 	cmpgei	r2,r2,17
  818d70:	1000031e 	bne	r2,zero,818d80 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  818d74:	e0bffc17 	ldw	r2,-16(fp)
  818d78:	10000985 	stb	zero,38(r2)
  818d7c:	00002e06 	br	818e38 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  818d80:	e0bff617 	ldw	r2,-40(fp)
  818d84:	1085883a 	add	r2,r2,r2
  818d88:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  818d8c:	e0bff617 	ldw	r2,-40(fp)
  818d90:	1007883a 	mov	r3,r2
  818d94:	e0bffc17 	ldw	r2,-16(fp)
  818d98:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  818d9c:	e03ff515 	stw	zero,-44(fp)
  818da0:	00002206 	br	818e2c <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  818da4:	e0fffc17 	ldw	r3,-16(fp)
  818da8:	e0bff517 	ldw	r2,-44(fp)
  818dac:	108018e4 	muli	r2,r2,99
  818db0:	1885883a 	add	r2,r3,r2
  818db4:	10802444 	addi	r2,r2,145
  818db8:	10800003 	ldbu	r2,0(r2)
  818dbc:	10803fcc 	andi	r2,r2,255
  818dc0:	1080201c 	xori	r2,r2,128
  818dc4:	10bfe004 	addi	r2,r2,-128
  818dc8:	10800450 	cmplti	r2,r2,17
  818dcc:	1000141e 	bne	r2,zero,818e20 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  818dd0:	e0fffc17 	ldw	r3,-16(fp)
  818dd4:	e0bff517 	ldw	r2,-44(fp)
  818dd8:	108018e4 	muli	r2,r2,99
  818ddc:	1885883a 	add	r2,r3,r2
  818de0:	10802444 	addi	r2,r2,145
  818de4:	10800003 	ldbu	r2,0(r2)
  818de8:	10803fcc 	andi	r2,r2,255
  818dec:	1080201c 	xori	r2,r2,128
  818df0:	10bfe004 	addi	r2,r2,-128
  818df4:	1004923a 	slli	r2,r2,8
  818df8:	e17ff617 	ldw	r5,-40(fp)
  818dfc:	1009883a 	mov	r4,r2
  818e00:	080a2600 	call	80a260 <__divsi3>
  818e04:	1009883a 	mov	r4,r2
  818e08:	e0fffc17 	ldw	r3,-16(fp)
  818e0c:	e0bff517 	ldw	r2,-44(fp)
  818e10:	108018e4 	muli	r2,r2,99
  818e14:	1885883a 	add	r2,r3,r2
  818e18:	10802484 	addi	r2,r2,146
  818e1c:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  818e20:	e0bff517 	ldw	r2,-44(fp)
  818e24:	10800044 	addi	r2,r2,1
  818e28:	e0bff515 	stw	r2,-44(fp)
  818e2c:	e0bff517 	ldw	r2,-44(fp)
  818e30:	10800090 	cmplti	r2,r2,2
  818e34:	103fdb1e 	bne	r2,zero,818da4 <__alt_data_end+0xff818da4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  818e38:	e0bffc17 	ldw	r2,-16(fp)
  818e3c:	10800943 	ldbu	r2,37(r2)
  818e40:	10803fcc 	andi	r2,r2,255
  818e44:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  818e48:	e13ffc17 	ldw	r4,-16(fp)
  818e4c:	081845c0 	call	81845c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  818e50:	e0bffc17 	ldw	r2,-16(fp)
  818e54:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  818e58:	e0bffc17 	ldw	r2,-16(fp)
  818e5c:	10800943 	ldbu	r2,37(r2)
  818e60:	10c03fcc 	andi	r3,r2,255
  818e64:	e0bffb17 	ldw	r2,-20(fp)
  818e68:	18800426 	beq	r3,r2,818e7c <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  818e6c:	e0bffc17 	ldw	r2,-16(fp)
  818e70:	00c00044 	movi	r3,1
  818e74:	10c009c5 	stb	r3,39(r2)
  }
  818e78:	003fef06 	br	818e38 <__alt_data_end+0xff818e38>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  818e7c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  818e80:	e0bffe17 	ldw	r2,-8(fp)
}
  818e84:	e037883a 	mov	sp,fp
  818e88:	dfc00117 	ldw	ra,4(sp)
  818e8c:	df000017 	ldw	fp,0(sp)
  818e90:	dec00204 	addi	sp,sp,8
  818e94:	f800283a 	ret

00818e98 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  818e98:	defffc04 	addi	sp,sp,-16
  818e9c:	dfc00315 	stw	ra,12(sp)
  818ea0:	df000215 	stw	fp,8(sp)
  818ea4:	df000204 	addi	fp,sp,8
  818ea8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  818eac:	e0bfff17 	ldw	r2,-4(fp)
  818eb0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  818eb4:	e0bffe17 	ldw	r2,-8(fp)
  818eb8:	10800943 	ldbu	r2,37(r2)
  818ebc:	10803fcc 	andi	r2,r2,255
  818ec0:	10c00044 	addi	r3,r2,1
  818ec4:	e0bffe17 	ldw	r2,-8(fp)
  818ec8:	10800983 	ldbu	r2,38(r2)
  818ecc:	10803fcc 	andi	r2,r2,255
  818ed0:	18800316 	blt	r3,r2,818ee0 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  818ed4:	e0bffe17 	ldw	r2,-8(fp)
  818ed8:	10000945 	stb	zero,37(r2)
  818edc:	00000606 	br	818ef8 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  818ee0:	e0bffe17 	ldw	r2,-8(fp)
  818ee4:	10800943 	ldbu	r2,37(r2)
  818ee8:	10800044 	addi	r2,r2,1
  818eec:	1007883a 	mov	r3,r2
  818ef0:	e0bffe17 	ldw	r2,-8(fp)
  818ef4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  818ef8:	e0bffe17 	ldw	r2,-8(fp)
  818efc:	10800983 	ldbu	r2,38(r2)
  818f00:	10803fcc 	andi	r2,r2,255
  818f04:	10000826 	beq	r2,zero,818f28 <alt_lcd_16207_timeout+0x90>
  818f08:	e0bffe17 	ldw	r2,-8(fp)
  818f0c:	108009c3 	ldbu	r2,39(r2)
  818f10:	10803fcc 	andi	r2,r2,255
  818f14:	1080201c 	xori	r2,r2,128
  818f18:	10bfe004 	addi	r2,r2,-128
  818f1c:	1000021e 	bne	r2,zero,818f28 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  818f20:	e13ffe17 	ldw	r4,-8(fp)
  818f24:	081845c0 	call	81845c <lcd_repaint_screen>

  return sp->period;
  818f28:	e0bffe17 	ldw	r2,-8(fp)
  818f2c:	10800717 	ldw	r2,28(r2)
}
  818f30:	e037883a 	mov	sp,fp
  818f34:	dfc00117 	ldw	ra,4(sp)
  818f38:	df000017 	ldw	fp,0(sp)
  818f3c:	dec00204 	addi	sp,sp,8
  818f40:	f800283a 	ret

00818f44 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  818f44:	defffc04 	addi	sp,sp,-16
  818f48:	dfc00315 	stw	ra,12(sp)
  818f4c:	df000215 	stw	fp,8(sp)
  818f50:	df000204 	addi	fp,sp,8
  818f54:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  818f58:	e0bfff17 	ldw	r2,-4(fp)
  818f5c:	10800017 	ldw	r2,0(r2)
  818f60:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  818f64:	e0bfff17 	ldw	r2,-4(fp)
  818f68:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  818f6c:	010ea604 	movi	r4,15000
  818f70:	081aa040 	call	81aa04 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  818f74:	e0bffe17 	ldw	r2,-8(fp)
  818f78:	00c00c04 	movi	r3,48
  818f7c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  818f80:	01040104 	movi	r4,4100
  818f84:	081aa040 	call	81aa04 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  818f88:	e0bffe17 	ldw	r2,-8(fp)
  818f8c:	00c00c04 	movi	r3,48
  818f90:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  818f94:	0100fa04 	movi	r4,1000
  818f98:	081aa040 	call	81aa04 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  818f9c:	e0bffe17 	ldw	r2,-8(fp)
  818fa0:	00c00c04 	movi	r3,48
  818fa4:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  818fa8:	01400e04 	movi	r5,56
  818fac:	e13fff17 	ldw	r4,-4(fp)
  818fb0:	08181fc0 	call	8181fc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  818fb4:	01400204 	movi	r5,8
  818fb8:	e13fff17 	ldw	r4,-4(fp)
  818fbc:	08181fc0 	call	8181fc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  818fc0:	e13fff17 	ldw	r4,-4(fp)
  818fc4:	081838c0 	call	81838c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  818fc8:	01400184 	movi	r5,6
  818fcc:	e13fff17 	ldw	r4,-4(fp)
  818fd0:	08181fc0 	call	8181fc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  818fd4:	01400304 	movi	r5,12
  818fd8:	e13fff17 	ldw	r4,-4(fp)
  818fdc:	08181fc0 	call	8181fc <lcd_write_command>

  sp->esccount = -1;
  818fe0:	e0bfff17 	ldw	r2,-4(fp)
  818fe4:	00ffffc4 	movi	r3,-1
  818fe8:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  818fec:	e0bfff17 	ldw	r2,-4(fp)
  818ff0:	10800a04 	addi	r2,r2,40
  818ff4:	01800204 	movi	r6,8
  818ff8:	000b883a 	mov	r5,zero
  818ffc:	1009883a 	mov	r4,r2
  819000:	080a50c0 	call	80a50c <memset>

  sp->scrollpos = 0;
  819004:	e0bfff17 	ldw	r2,-4(fp)
  819008:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  81900c:	e0bfff17 	ldw	r2,-4(fp)
  819010:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  819014:	e0bfff17 	ldw	r2,-4(fp)
  819018:	100009c5 	stb	zero,39(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81901c:	d0a36b17 	ldw	r2,-29268(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  819020:	01400284 	movi	r5,10
  819024:	1009883a 	mov	r4,r2
  819028:	080a3580 	call	80a358 <__udivsi3>
  81902c:	1007883a 	mov	r3,r2
  819030:	e0bfff17 	ldw	r2,-4(fp)
  819034:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  819038:	e0bfff17 	ldw	r2,-4(fp)
  81903c:	10c00104 	addi	r3,r2,4
  819040:	e0bfff17 	ldw	r2,-4(fp)
  819044:	10800717 	ldw	r2,28(r2)
  819048:	e1ffff17 	ldw	r7,-4(fp)
  81904c:	018020b4 	movhi	r6,130
  819050:	31a3a604 	addi	r6,r6,-29032
  819054:	100b883a 	mov	r5,r2
  819058:	1809883a 	mov	r4,r3
  81905c:	08170340 	call	817034 <alt_alarm_start>
}
  819060:	0001883a 	nop
  819064:	e037883a 	mov	sp,fp
  819068:	dfc00117 	ldw	ra,4(sp)
  81906c:	df000017 	ldw	fp,0(sp)
  819070:	dec00204 	addi	sp,sp,8
  819074:	f800283a 	ret

00819078 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  819078:	defffa04 	addi	sp,sp,-24
  81907c:	dfc00515 	stw	ra,20(sp)
  819080:	df000415 	stw	fp,16(sp)
  819084:	df000404 	addi	fp,sp,16
  819088:	e13ffd15 	stw	r4,-12(fp)
  81908c:	e17ffe15 	stw	r5,-8(fp)
  819090:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  819094:	e0bffd17 	ldw	r2,-12(fp)
  819098:	10800017 	ldw	r2,0(r2)
  81909c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8190a0:	e0bffc17 	ldw	r2,-16(fp)
  8190a4:	10c00a04 	addi	r3,r2,40
  8190a8:	e0bffd17 	ldw	r2,-12(fp)
  8190ac:	10800217 	ldw	r2,8(r2)
  8190b0:	100f883a 	mov	r7,r2
  8190b4:	e1bfff17 	ldw	r6,-4(fp)
  8190b8:	e17ffe17 	ldw	r5,-8(fp)
  8190bc:	1809883a 	mov	r4,r3
  8190c0:	08189c00 	call	8189c0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8190c4:	e037883a 	mov	sp,fp
  8190c8:	dfc00117 	ldw	ra,4(sp)
  8190cc:	df000017 	ldw	fp,0(sp)
  8190d0:	dec00204 	addi	sp,sp,8
  8190d4:	f800283a 	ret

008190d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8190d8:	defff904 	addi	sp,sp,-28
  8190dc:	dfc00615 	stw	ra,24(sp)
  8190e0:	df000515 	stw	fp,20(sp)
  8190e4:	df000504 	addi	fp,sp,20
  8190e8:	e13ffe15 	stw	r4,-8(fp)
  8190ec:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8190f0:	0007883a 	mov	r3,zero
  8190f4:	e0bffe17 	ldw	r2,-8(fp)
  8190f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8190fc:	e0bffe17 	ldw	r2,-8(fp)
  819100:	10800104 	addi	r2,r2,4
  819104:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819108:	0005303a 	rdctl	r2,status
  81910c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819110:	e0fffc17 	ldw	r3,-16(fp)
  819114:	00bfff84 	movi	r2,-2
  819118:	1884703a 	and	r2,r3,r2
  81911c:	1001703a 	wrctl	status,r2
  
  return context;
  819120:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  819124:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  819128:	0817c740 	call	817c74 <alt_tick>
  81912c:	e0bffb17 	ldw	r2,-20(fp)
  819130:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819134:	e0bffd17 	ldw	r2,-12(fp)
  819138:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81913c:	0001883a 	nop
  819140:	e037883a 	mov	sp,fp
  819144:	dfc00117 	ldw	ra,4(sp)
  819148:	df000017 	ldw	fp,0(sp)
  81914c:	dec00204 	addi	sp,sp,8
  819150:	f800283a 	ret

00819154 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  819154:	defff904 	addi	sp,sp,-28
  819158:	dfc00615 	stw	ra,24(sp)
  81915c:	df000515 	stw	fp,20(sp)
  819160:	df000504 	addi	fp,sp,20
  819164:	e13ffc15 	stw	r4,-16(fp)
  819168:	e17ffd15 	stw	r5,-12(fp)
  81916c:	e1bffe15 	stw	r6,-8(fp)
  819170:	e1ffff15 	stw	r7,-4(fp)
  819174:	e0bfff17 	ldw	r2,-4(fp)
  819178:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81917c:	d0a36b17 	ldw	r2,-29268(gp)
  819180:	1000021e 	bne	r2,zero,81918c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  819184:	e0bffb17 	ldw	r2,-20(fp)
  819188:	d0a36b15 	stw	r2,-29268(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81918c:	e0bffc17 	ldw	r2,-16(fp)
  819190:	10800104 	addi	r2,r2,4
  819194:	00c001c4 	movi	r3,7
  819198:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81919c:	018020b4 	movhi	r6,130
  8191a0:	31a43604 	addi	r6,r6,-28456
  8191a4:	e17ffc17 	ldw	r5,-16(fp)
  8191a8:	e13ffe17 	ldw	r4,-8(fp)
  8191ac:	081a6300 	call	81a630 <alt_irq_register>
#endif  
}
  8191b0:	0001883a 	nop
  8191b4:	e037883a 	mov	sp,fp
  8191b8:	dfc00117 	ldw	ra,4(sp)
  8191bc:	df000017 	ldw	fp,0(sp)
  8191c0:	dec00204 	addi	sp,sp,8
  8191c4:	f800283a 	ret

008191c8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8191c8:	defffa04 	addi	sp,sp,-24
  8191cc:	dfc00515 	stw	ra,20(sp)
  8191d0:	df000415 	stw	fp,16(sp)
  8191d4:	df000404 	addi	fp,sp,16
  8191d8:	e13ffd15 	stw	r4,-12(fp)
  8191dc:	e17ffe15 	stw	r5,-8(fp)
  8191e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8191e4:	e0bffd17 	ldw	r2,-12(fp)
  8191e8:	10800017 	ldw	r2,0(r2)
  8191ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8191f0:	e0bffc17 	ldw	r2,-16(fp)
  8191f4:	10c00a04 	addi	r3,r2,40
  8191f8:	e0bffd17 	ldw	r2,-12(fp)
  8191fc:	10800217 	ldw	r2,8(r2)
  819200:	100f883a 	mov	r7,r2
  819204:	e1bfff17 	ldw	r6,-4(fp)
  819208:	e17ffe17 	ldw	r5,-8(fp)
  81920c:	1809883a 	mov	r4,r3
  819210:	08196d80 	call	8196d8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  819214:	e037883a 	mov	sp,fp
  819218:	dfc00117 	ldw	ra,4(sp)
  81921c:	df000017 	ldw	fp,0(sp)
  819220:	dec00204 	addi	sp,sp,8
  819224:	f800283a 	ret

00819228 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  819228:	defffa04 	addi	sp,sp,-24
  81922c:	dfc00515 	stw	ra,20(sp)
  819230:	df000415 	stw	fp,16(sp)
  819234:	df000404 	addi	fp,sp,16
  819238:	e13ffd15 	stw	r4,-12(fp)
  81923c:	e17ffe15 	stw	r5,-8(fp)
  819240:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  819244:	e0bffd17 	ldw	r2,-12(fp)
  819248:	10800017 	ldw	r2,0(r2)
  81924c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  819250:	e0bffc17 	ldw	r2,-16(fp)
  819254:	10c00a04 	addi	r3,r2,40
  819258:	e0bffd17 	ldw	r2,-12(fp)
  81925c:	10800217 	ldw	r2,8(r2)
  819260:	100f883a 	mov	r7,r2
  819264:	e1bfff17 	ldw	r6,-4(fp)
  819268:	e17ffe17 	ldw	r5,-8(fp)
  81926c:	1809883a 	mov	r4,r3
  819270:	08198f00 	call	8198f0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  819274:	e037883a 	mov	sp,fp
  819278:	dfc00117 	ldw	ra,4(sp)
  81927c:	df000017 	ldw	fp,0(sp)
  819280:	dec00204 	addi	sp,sp,8
  819284:	f800283a 	ret

00819288 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  819288:	defffc04 	addi	sp,sp,-16
  81928c:	dfc00315 	stw	ra,12(sp)
  819290:	df000215 	stw	fp,8(sp)
  819294:	df000204 	addi	fp,sp,8
  819298:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81929c:	e0bfff17 	ldw	r2,-4(fp)
  8192a0:	10800017 	ldw	r2,0(r2)
  8192a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8192a8:	e0bffe17 	ldw	r2,-8(fp)
  8192ac:	10c00a04 	addi	r3,r2,40
  8192b0:	e0bfff17 	ldw	r2,-4(fp)
  8192b4:	10800217 	ldw	r2,8(r2)
  8192b8:	100b883a 	mov	r5,r2
  8192bc:	1809883a 	mov	r4,r3
  8192c0:	08196480 	call	819648 <altera_avalon_uart_close>
}
  8192c4:	e037883a 	mov	sp,fp
  8192c8:	dfc00117 	ldw	ra,4(sp)
  8192cc:	df000017 	ldw	fp,0(sp)
  8192d0:	dec00204 	addi	sp,sp,8
  8192d4:	f800283a 	ret

008192d8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8192d8:	defff904 	addi	sp,sp,-28
  8192dc:	dfc00615 	stw	ra,24(sp)
  8192e0:	df000515 	stw	fp,20(sp)
  8192e4:	df000504 	addi	fp,sp,20
  8192e8:	e13ffd15 	stw	r4,-12(fp)
  8192ec:	e17ffe15 	stw	r5,-8(fp)
  8192f0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8192f4:	e0bffd17 	ldw	r2,-12(fp)
  8192f8:	10800017 	ldw	r2,0(r2)
  8192fc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  819300:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  819304:	1000041e 	bne	r2,zero,819318 <altera_avalon_uart_init+0x40>
  819308:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81930c:	1000021e 	bne	r2,zero,819318 <altera_avalon_uart_init+0x40>
  819310:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  819314:	10000226 	beq	r2,zero,819320 <altera_avalon_uart_init+0x48>
  819318:	00800044 	movi	r2,1
  81931c:	00000106 	br	819324 <altera_avalon_uart_init+0x4c>
  819320:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  819324:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  819328:	e0bffc17 	ldw	r2,-16(fp)
  81932c:	10000d1e 	bne	r2,zero,819364 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  819330:	e0bffd17 	ldw	r2,-12(fp)
  819334:	00c32004 	movi	r3,3200
  819338:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81933c:	e0bffb17 	ldw	r2,-20(fp)
  819340:	10800304 	addi	r2,r2,12
  819344:	e0fffd17 	ldw	r3,-12(fp)
  819348:	18c00117 	ldw	r3,4(r3)
  81934c:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  819350:	018020b4 	movhi	r6,130
  819354:	31a4df04 	addi	r6,r6,-27780
  819358:	e17ffd17 	ldw	r5,-12(fp)
  81935c:	e13fff17 	ldw	r4,-4(fp)
  819360:	081a6300 	call	81a630 <alt_irq_register>
#endif  
  }
}
  819364:	0001883a 	nop
  819368:	e037883a 	mov	sp,fp
  81936c:	dfc00117 	ldw	ra,4(sp)
  819370:	df000017 	ldw	fp,0(sp)
  819374:	dec00204 	addi	sp,sp,8
  819378:	f800283a 	ret

0081937c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81937c:	defff904 	addi	sp,sp,-28
  819380:	dfc00615 	stw	ra,24(sp)
  819384:	df000515 	stw	fp,20(sp)
  819388:	df000504 	addi	fp,sp,20
  81938c:	e13ffe15 	stw	r4,-8(fp)
  819390:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  819394:	e0bffe17 	ldw	r2,-8(fp)
  819398:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  81939c:	e0bffb17 	ldw	r2,-20(fp)
  8193a0:	10800017 	ldw	r2,0(r2)
  8193a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8193a8:	e0bffc17 	ldw	r2,-16(fp)
  8193ac:	10800204 	addi	r2,r2,8
  8193b0:	10800037 	ldwio	r2,0(r2)
  8193b4:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8193b8:	e0bffc17 	ldw	r2,-16(fp)
  8193bc:	10800204 	addi	r2,r2,8
  8193c0:	0007883a 	mov	r3,zero
  8193c4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8193c8:	e0bffc17 	ldw	r2,-16(fp)
  8193cc:	10800204 	addi	r2,r2,8
  8193d0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8193d4:	e0bffd17 	ldw	r2,-12(fp)
  8193d8:	1080200c 	andi	r2,r2,128
  8193dc:	10000326 	beq	r2,zero,8193ec <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  8193e0:	e17ffd17 	ldw	r5,-12(fp)
  8193e4:	e13ffb17 	ldw	r4,-20(fp)
  8193e8:	081941c0 	call	81941c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8193ec:	e0bffd17 	ldw	r2,-12(fp)
  8193f0:	1081100c 	andi	r2,r2,1088
  8193f4:	10000326 	beq	r2,zero,819404 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8193f8:	e17ffd17 	ldw	r5,-12(fp)
  8193fc:	e13ffb17 	ldw	r4,-20(fp)
  819400:	08195000 	call	819500 <altera_avalon_uart_txirq>
  }
  

}
  819404:	0001883a 	nop
  819408:	e037883a 	mov	sp,fp
  81940c:	dfc00117 	ldw	ra,4(sp)
  819410:	df000017 	ldw	fp,0(sp)
  819414:	dec00204 	addi	sp,sp,8
  819418:	f800283a 	ret

0081941c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81941c:	defffc04 	addi	sp,sp,-16
  819420:	df000315 	stw	fp,12(sp)
  819424:	df000304 	addi	fp,sp,12
  819428:	e13ffe15 	stw	r4,-8(fp)
  81942c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  819430:	e0bfff17 	ldw	r2,-4(fp)
  819434:	108000cc 	andi	r2,r2,3
  819438:	10002c1e 	bne	r2,zero,8194ec <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81943c:	e0bffe17 	ldw	r2,-8(fp)
  819440:	10800317 	ldw	r2,12(r2)
  819444:	e0bffe17 	ldw	r2,-8(fp)
  819448:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81944c:	e0bffe17 	ldw	r2,-8(fp)
  819450:	10800317 	ldw	r2,12(r2)
  819454:	10800044 	addi	r2,r2,1
  819458:	10800fcc 	andi	r2,r2,63
  81945c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  819460:	e0bffe17 	ldw	r2,-8(fp)
  819464:	10800317 	ldw	r2,12(r2)
  819468:	e0fffe17 	ldw	r3,-8(fp)
  81946c:	18c00017 	ldw	r3,0(r3)
  819470:	18c00037 	ldwio	r3,0(r3)
  819474:	1809883a 	mov	r4,r3
  819478:	e0fffe17 	ldw	r3,-8(fp)
  81947c:	1885883a 	add	r2,r3,r2
  819480:	10800704 	addi	r2,r2,28
  819484:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  819488:	e0bffe17 	ldw	r2,-8(fp)
  81948c:	e0fffd17 	ldw	r3,-12(fp)
  819490:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  819494:	e0bffe17 	ldw	r2,-8(fp)
  819498:	10800317 	ldw	r2,12(r2)
  81949c:	10800044 	addi	r2,r2,1
  8194a0:	10800fcc 	andi	r2,r2,63
  8194a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8194a8:	e0bffe17 	ldw	r2,-8(fp)
  8194ac:	10c00217 	ldw	r3,8(r2)
  8194b0:	e0bffd17 	ldw	r2,-12(fp)
  8194b4:	18800e1e 	bne	r3,r2,8194f0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8194b8:	e0bffe17 	ldw	r2,-8(fp)
  8194bc:	10c00117 	ldw	r3,4(r2)
  8194c0:	00bfdfc4 	movi	r2,-129
  8194c4:	1886703a 	and	r3,r3,r2
  8194c8:	e0bffe17 	ldw	r2,-8(fp)
  8194cc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8194d0:	e0bffe17 	ldw	r2,-8(fp)
  8194d4:	10800017 	ldw	r2,0(r2)
  8194d8:	10800304 	addi	r2,r2,12
  8194dc:	e0fffe17 	ldw	r3,-8(fp)
  8194e0:	18c00117 	ldw	r3,4(r3)
  8194e4:	10c00035 	stwio	r3,0(r2)
  8194e8:	00000106 	br	8194f0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8194ec:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8194f0:	e037883a 	mov	sp,fp
  8194f4:	df000017 	ldw	fp,0(sp)
  8194f8:	dec00104 	addi	sp,sp,4
  8194fc:	f800283a 	ret

00819500 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  819500:	defffb04 	addi	sp,sp,-20
  819504:	df000415 	stw	fp,16(sp)
  819508:	df000404 	addi	fp,sp,16
  81950c:	e13ffc15 	stw	r4,-16(fp)
  819510:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  819514:	e0bffc17 	ldw	r2,-16(fp)
  819518:	10c00417 	ldw	r3,16(r2)
  81951c:	e0bffc17 	ldw	r2,-16(fp)
  819520:	10800517 	ldw	r2,20(r2)
  819524:	18803226 	beq	r3,r2,8195f0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  819528:	e0bffc17 	ldw	r2,-16(fp)
  81952c:	10800617 	ldw	r2,24(r2)
  819530:	1080008c 	andi	r2,r2,2
  819534:	10000326 	beq	r2,zero,819544 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  819538:	e0bffd17 	ldw	r2,-12(fp)
  81953c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  819540:	10001d26 	beq	r2,zero,8195b8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  819544:	e0bffc17 	ldw	r2,-16(fp)
  819548:	10800417 	ldw	r2,16(r2)
  81954c:	e0bffc17 	ldw	r2,-16(fp)
  819550:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  819554:	e0bffc17 	ldw	r2,-16(fp)
  819558:	10800017 	ldw	r2,0(r2)
  81955c:	10800104 	addi	r2,r2,4
  819560:	e0fffc17 	ldw	r3,-16(fp)
  819564:	18c00417 	ldw	r3,16(r3)
  819568:	e13ffc17 	ldw	r4,-16(fp)
  81956c:	20c7883a 	add	r3,r4,r3
  819570:	18c01704 	addi	r3,r3,92
  819574:	18c00003 	ldbu	r3,0(r3)
  819578:	18c03fcc 	andi	r3,r3,255
  81957c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  819580:	e0bffc17 	ldw	r2,-16(fp)
  819584:	10800417 	ldw	r2,16(r2)
  819588:	10800044 	addi	r2,r2,1
  81958c:	e0fffc17 	ldw	r3,-16(fp)
  819590:	18800415 	stw	r2,16(r3)
  819594:	10c00fcc 	andi	r3,r2,63
  819598:	e0bffc17 	ldw	r2,-16(fp)
  81959c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8195a0:	e0bffc17 	ldw	r2,-16(fp)
  8195a4:	10800117 	ldw	r2,4(r2)
  8195a8:	10c01014 	ori	r3,r2,64
  8195ac:	e0bffc17 	ldw	r2,-16(fp)
  8195b0:	10c00115 	stw	r3,4(r2)
  8195b4:	00000e06 	br	8195f0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8195b8:	e0bffc17 	ldw	r2,-16(fp)
  8195bc:	10800017 	ldw	r2,0(r2)
  8195c0:	10800204 	addi	r2,r2,8
  8195c4:	10800037 	ldwio	r2,0(r2)
  8195c8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8195cc:	e0bffd17 	ldw	r2,-12(fp)
  8195d0:	1082000c 	andi	r2,r2,2048
  8195d4:	1000061e 	bne	r2,zero,8195f0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8195d8:	e0bffc17 	ldw	r2,-16(fp)
  8195dc:	10c00117 	ldw	r3,4(r2)
  8195e0:	00bfefc4 	movi	r2,-65
  8195e4:	1886703a 	and	r3,r3,r2
  8195e8:	e0bffc17 	ldw	r2,-16(fp)
  8195ec:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8195f0:	e0bffc17 	ldw	r2,-16(fp)
  8195f4:	10c00417 	ldw	r3,16(r2)
  8195f8:	e0bffc17 	ldw	r2,-16(fp)
  8195fc:	10800517 	ldw	r2,20(r2)
  819600:	1880061e 	bne	r3,r2,81961c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  819604:	e0bffc17 	ldw	r2,-16(fp)
  819608:	10c00117 	ldw	r3,4(r2)
  81960c:	00beefc4 	movi	r2,-1089
  819610:	1886703a 	and	r3,r3,r2
  819614:	e0bffc17 	ldw	r2,-16(fp)
  819618:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81961c:	e0bffc17 	ldw	r2,-16(fp)
  819620:	10800017 	ldw	r2,0(r2)
  819624:	10800304 	addi	r2,r2,12
  819628:	e0fffc17 	ldw	r3,-16(fp)
  81962c:	18c00117 	ldw	r3,4(r3)
  819630:	10c00035 	stwio	r3,0(r2)
}
  819634:	0001883a 	nop
  819638:	e037883a 	mov	sp,fp
  81963c:	df000017 	ldw	fp,0(sp)
  819640:	dec00104 	addi	sp,sp,4
  819644:	f800283a 	ret

00819648 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  819648:	defffd04 	addi	sp,sp,-12
  81964c:	df000215 	stw	fp,8(sp)
  819650:	df000204 	addi	fp,sp,8
  819654:	e13ffe15 	stw	r4,-8(fp)
  819658:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81965c:	00000506 	br	819674 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  819660:	e0bfff17 	ldw	r2,-4(fp)
  819664:	1090000c 	andi	r2,r2,16384
  819668:	10000226 	beq	r2,zero,819674 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81966c:	00bffd44 	movi	r2,-11
  819670:	00000606 	br	81968c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  819674:	e0bffe17 	ldw	r2,-8(fp)
  819678:	10c00417 	ldw	r3,16(r2)
  81967c:	e0bffe17 	ldw	r2,-8(fp)
  819680:	10800517 	ldw	r2,20(r2)
  819684:	18bff61e 	bne	r3,r2,819660 <__alt_data_end+0xff819660>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  819688:	0005883a 	mov	r2,zero
}
  81968c:	e037883a 	mov	sp,fp
  819690:	df000017 	ldw	fp,0(sp)
  819694:	dec00104 	addi	sp,sp,4
  819698:	f800283a 	ret

0081969c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81969c:	defffe04 	addi	sp,sp,-8
  8196a0:	dfc00115 	stw	ra,4(sp)
  8196a4:	df000015 	stw	fp,0(sp)
  8196a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8196ac:	d0a00d17 	ldw	r2,-32716(gp)
  8196b0:	10000326 	beq	r2,zero,8196c0 <alt_get_errno+0x24>
  8196b4:	d0a00d17 	ldw	r2,-32716(gp)
  8196b8:	103ee83a 	callr	r2
  8196bc:	00000106 	br	8196c4 <alt_get_errno+0x28>
  8196c0:	d0a36704 	addi	r2,gp,-29284
}
  8196c4:	e037883a 	mov	sp,fp
  8196c8:	dfc00117 	ldw	ra,4(sp)
  8196cc:	df000017 	ldw	fp,0(sp)
  8196d0:	dec00204 	addi	sp,sp,8
  8196d4:	f800283a 	ret

008196d8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8196d8:	defff204 	addi	sp,sp,-56
  8196dc:	dfc00d15 	stw	ra,52(sp)
  8196e0:	df000c15 	stw	fp,48(sp)
  8196e4:	df000c04 	addi	fp,sp,48
  8196e8:	e13ffc15 	stw	r4,-16(fp)
  8196ec:	e17ffd15 	stw	r5,-12(fp)
  8196f0:	e1bffe15 	stw	r6,-8(fp)
  8196f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8196f8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8196fc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  819700:	e0bfff17 	ldw	r2,-4(fp)
  819704:	1090000c 	andi	r2,r2,16384
  819708:	1005003a 	cmpeq	r2,r2,zero
  81970c:	10803fcc 	andi	r2,r2,255
  819710:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  819714:	00001306 	br	819764 <altera_avalon_uart_read+0x8c>
    {
      count++;
  819718:	e0bff517 	ldw	r2,-44(fp)
  81971c:	10800044 	addi	r2,r2,1
  819720:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  819724:	e0bffd17 	ldw	r2,-12(fp)
  819728:	10c00044 	addi	r3,r2,1
  81972c:	e0fffd15 	stw	r3,-12(fp)
  819730:	e0fffc17 	ldw	r3,-16(fp)
  819734:	18c00217 	ldw	r3,8(r3)
  819738:	e13ffc17 	ldw	r4,-16(fp)
  81973c:	20c7883a 	add	r3,r4,r3
  819740:	18c00704 	addi	r3,r3,28
  819744:	18c00003 	ldbu	r3,0(r3)
  819748:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  81974c:	e0bffc17 	ldw	r2,-16(fp)
  819750:	10800217 	ldw	r2,8(r2)
  819754:	10800044 	addi	r2,r2,1
  819758:	10c00fcc 	andi	r3,r2,63
  81975c:	e0bffc17 	ldw	r2,-16(fp)
  819760:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  819764:	e0fff517 	ldw	r3,-44(fp)
  819768:	e0bffe17 	ldw	r2,-8(fp)
  81976c:	1880050e 	bge	r3,r2,819784 <altera_avalon_uart_read+0xac>
  819770:	e0bffc17 	ldw	r2,-16(fp)
  819774:	10c00217 	ldw	r3,8(r2)
  819778:	e0bffc17 	ldw	r2,-16(fp)
  81977c:	10800317 	ldw	r2,12(r2)
  819780:	18bfe51e 	bne	r3,r2,819718 <__alt_data_end+0xff819718>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  819784:	e0bff517 	ldw	r2,-44(fp)
  819788:	1000251e 	bne	r2,zero,819820 <altera_avalon_uart_read+0x148>
  81978c:	e0bffc17 	ldw	r2,-16(fp)
  819790:	10c00217 	ldw	r3,8(r2)
  819794:	e0bffc17 	ldw	r2,-16(fp)
  819798:	10800317 	ldw	r2,12(r2)
  81979c:	1880201e 	bne	r3,r2,819820 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8197a0:	e0bff617 	ldw	r2,-40(fp)
  8197a4:	1000071e 	bne	r2,zero,8197c4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8197a8:	081969c0 	call	81969c <alt_get_errno>
  8197ac:	1007883a 	mov	r3,r2
  8197b0:	008002c4 	movi	r2,11
  8197b4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8197b8:	00800044 	movi	r2,1
  8197bc:	e0bff405 	stb	r2,-48(fp)
        break;
  8197c0:	00001b06 	br	819830 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8197c4:	0005303a 	rdctl	r2,status
  8197c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8197cc:	e0fff917 	ldw	r3,-28(fp)
  8197d0:	00bfff84 	movi	r2,-2
  8197d4:	1884703a 	and	r2,r3,r2
  8197d8:	1001703a 	wrctl	status,r2
  
  return context;
  8197dc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8197e0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8197e4:	e0bffc17 	ldw	r2,-16(fp)
  8197e8:	10800117 	ldw	r2,4(r2)
  8197ec:	10c02014 	ori	r3,r2,128
  8197f0:	e0bffc17 	ldw	r2,-16(fp)
  8197f4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8197f8:	e0bffc17 	ldw	r2,-16(fp)
  8197fc:	10800017 	ldw	r2,0(r2)
  819800:	10800304 	addi	r2,r2,12
  819804:	e0fffc17 	ldw	r3,-16(fp)
  819808:	18c00117 	ldw	r3,4(r3)
  81980c:	10c00035 	stwio	r3,0(r2)
  819810:	e0bff817 	ldw	r2,-32(fp)
  819814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819818:	e0bffa17 	ldw	r2,-24(fp)
  81981c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  819820:	e0bff517 	ldw	r2,-44(fp)
  819824:	1000021e 	bne	r2,zero,819830 <altera_avalon_uart_read+0x158>
  819828:	e0bffe17 	ldw	r2,-8(fp)
  81982c:	103fcd1e 	bne	r2,zero,819764 <__alt_data_end+0xff819764>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819830:	0005303a 	rdctl	r2,status
  819834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819838:	e0fffb17 	ldw	r3,-20(fp)
  81983c:	00bfff84 	movi	r2,-2
  819840:	1884703a 	and	r2,r3,r2
  819844:	1001703a 	wrctl	status,r2
  
  return context;
  819848:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  81984c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  819850:	e0bffc17 	ldw	r2,-16(fp)
  819854:	10800117 	ldw	r2,4(r2)
  819858:	10c02014 	ori	r3,r2,128
  81985c:	e0bffc17 	ldw	r2,-16(fp)
  819860:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819864:	e0bffc17 	ldw	r2,-16(fp)
  819868:	10800017 	ldw	r2,0(r2)
  81986c:	10800304 	addi	r2,r2,12
  819870:	e0fffc17 	ldw	r3,-16(fp)
  819874:	18c00117 	ldw	r3,4(r3)
  819878:	10c00035 	stwio	r3,0(r2)
  81987c:	e0bff817 	ldw	r2,-32(fp)
  819880:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819884:	e0bff717 	ldw	r2,-36(fp)
  819888:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  81988c:	e0bff403 	ldbu	r2,-48(fp)
  819890:	10000226 	beq	r2,zero,81989c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  819894:	00bffd44 	movi	r2,-11
  819898:	00000106 	br	8198a0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  81989c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  8198a0:	e037883a 	mov	sp,fp
  8198a4:	dfc00117 	ldw	ra,4(sp)
  8198a8:	df000017 	ldw	fp,0(sp)
  8198ac:	dec00204 	addi	sp,sp,8
  8198b0:	f800283a 	ret

008198b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8198b4:	defffe04 	addi	sp,sp,-8
  8198b8:	dfc00115 	stw	ra,4(sp)
  8198bc:	df000015 	stw	fp,0(sp)
  8198c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8198c4:	d0a00d17 	ldw	r2,-32716(gp)
  8198c8:	10000326 	beq	r2,zero,8198d8 <alt_get_errno+0x24>
  8198cc:	d0a00d17 	ldw	r2,-32716(gp)
  8198d0:	103ee83a 	callr	r2
  8198d4:	00000106 	br	8198dc <alt_get_errno+0x28>
  8198d8:	d0a36704 	addi	r2,gp,-29284
}
  8198dc:	e037883a 	mov	sp,fp
  8198e0:	dfc00117 	ldw	ra,4(sp)
  8198e4:	df000017 	ldw	fp,0(sp)
  8198e8:	dec00204 	addi	sp,sp,8
  8198ec:	f800283a 	ret

008198f0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8198f0:	defff204 	addi	sp,sp,-56
  8198f4:	dfc00d15 	stw	ra,52(sp)
  8198f8:	df000c15 	stw	fp,48(sp)
  8198fc:	df000c04 	addi	fp,sp,48
  819900:	e13ffc15 	stw	r4,-16(fp)
  819904:	e17ffd15 	stw	r5,-12(fp)
  819908:	e1bffe15 	stw	r6,-8(fp)
  81990c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  819910:	e0bffe17 	ldw	r2,-8(fp)
  819914:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  819918:	e0bfff17 	ldw	r2,-4(fp)
  81991c:	1090000c 	andi	r2,r2,16384
  819920:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  819924:	00003c06 	br	819a18 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  819928:	e0bffc17 	ldw	r2,-16(fp)
  81992c:	10800517 	ldw	r2,20(r2)
  819930:	10800044 	addi	r2,r2,1
  819934:	10800fcc 	andi	r2,r2,63
  819938:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  81993c:	e0bffc17 	ldw	r2,-16(fp)
  819940:	10c00417 	ldw	r3,16(r2)
  819944:	e0bff717 	ldw	r2,-36(fp)
  819948:	1880221e 	bne	r3,r2,8199d4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  81994c:	e0bff517 	ldw	r2,-44(fp)
  819950:	10000526 	beq	r2,zero,819968 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  819954:	08198b40 	call	8198b4 <alt_get_errno>
  819958:	1007883a 	mov	r3,r2
  81995c:	008002c4 	movi	r2,11
  819960:	18800015 	stw	r2,0(r3)
        break;
  819964:	00002e06 	br	819a20 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819968:	0005303a 	rdctl	r2,status
  81996c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819970:	e0fff917 	ldw	r3,-28(fp)
  819974:	00bfff84 	movi	r2,-2
  819978:	1884703a 	and	r2,r3,r2
  81997c:	1001703a 	wrctl	status,r2
  
  return context;
  819980:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  819984:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  819988:	e0bffc17 	ldw	r2,-16(fp)
  81998c:	10800117 	ldw	r2,4(r2)
  819990:	10c11014 	ori	r3,r2,1088
  819994:	e0bffc17 	ldw	r2,-16(fp)
  819998:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81999c:	e0bffc17 	ldw	r2,-16(fp)
  8199a0:	10800017 	ldw	r2,0(r2)
  8199a4:	10800304 	addi	r2,r2,12
  8199a8:	e0fffc17 	ldw	r3,-16(fp)
  8199ac:	18c00117 	ldw	r3,4(r3)
  8199b0:	10c00035 	stwio	r3,0(r2)
  8199b4:	e0bff817 	ldw	r2,-32(fp)
  8199b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8199bc:	e0bff617 	ldw	r2,-40(fp)
  8199c0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8199c4:	e0bffc17 	ldw	r2,-16(fp)
  8199c8:	10c00417 	ldw	r3,16(r2)
  8199cc:	e0bff717 	ldw	r2,-36(fp)
  8199d0:	18bffc26 	beq	r3,r2,8199c4 <__alt_data_end+0xff8199c4>
      }
    }

    count--;
  8199d4:	e0bff417 	ldw	r2,-48(fp)
  8199d8:	10bfffc4 	addi	r2,r2,-1
  8199dc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8199e0:	e0bffc17 	ldw	r2,-16(fp)
  8199e4:	10c00517 	ldw	r3,20(r2)
  8199e8:	e0bffd17 	ldw	r2,-12(fp)
  8199ec:	11000044 	addi	r4,r2,1
  8199f0:	e13ffd15 	stw	r4,-12(fp)
  8199f4:	10800003 	ldbu	r2,0(r2)
  8199f8:	1009883a 	mov	r4,r2
  8199fc:	e0bffc17 	ldw	r2,-16(fp)
  819a00:	10c5883a 	add	r2,r2,r3
  819a04:	10801704 	addi	r2,r2,92
  819a08:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  819a0c:	e0bffc17 	ldw	r2,-16(fp)
  819a10:	e0fff717 	ldw	r3,-36(fp)
  819a14:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  819a18:	e0bff417 	ldw	r2,-48(fp)
  819a1c:	103fc21e 	bne	r2,zero,819928 <__alt_data_end+0xff819928>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819a20:	0005303a 	rdctl	r2,status
  819a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819a28:	e0fffb17 	ldw	r3,-20(fp)
  819a2c:	00bfff84 	movi	r2,-2
  819a30:	1884703a 	and	r2,r3,r2
  819a34:	1001703a 	wrctl	status,r2
  
  return context;
  819a38:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  819a3c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  819a40:	e0bffc17 	ldw	r2,-16(fp)
  819a44:	10800117 	ldw	r2,4(r2)
  819a48:	10c11014 	ori	r3,r2,1088
  819a4c:	e0bffc17 	ldw	r2,-16(fp)
  819a50:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  819a54:	e0bffc17 	ldw	r2,-16(fp)
  819a58:	10800017 	ldw	r2,0(r2)
  819a5c:	10800304 	addi	r2,r2,12
  819a60:	e0fffc17 	ldw	r3,-16(fp)
  819a64:	18c00117 	ldw	r3,4(r3)
  819a68:	10c00035 	stwio	r3,0(r2)
  819a6c:	e0bff817 	ldw	r2,-32(fp)
  819a70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819a74:	e0bffa17 	ldw	r2,-24(fp)
  819a78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  819a7c:	e0fffe17 	ldw	r3,-8(fp)
  819a80:	e0bff417 	ldw	r2,-48(fp)
  819a84:	1885c83a 	sub	r2,r3,r2
}
  819a88:	e037883a 	mov	sp,fp
  819a8c:	dfc00117 	ldw	ra,4(sp)
  819a90:	df000017 	ldw	fp,0(sp)
  819a94:	dec00204 	addi	sp,sp,8
  819a98:	f800283a 	ret

00819a9c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  819a9c:	defffc04 	addi	sp,sp,-16
  819aa0:	dfc00315 	stw	ra,12(sp)
  819aa4:	df000215 	stw	fp,8(sp)
  819aa8:	df000204 	addi	fp,sp,8
  819aac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  819ab0:	d1600a04 	addi	r5,gp,-32728
  819ab4:	e13fff17 	ldw	r4,-4(fp)
  819ab8:	081a42c0 	call	81a42c <alt_find_dev>
  819abc:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  819ac0:	e0bffe17 	ldw	r2,-8(fp)
}
  819ac4:	e037883a 	mov	sp,fp
  819ac8:	dfc00117 	ldw	ra,4(sp)
  819acc:	df000017 	ldw	fp,0(sp)
  819ad0:	dec00204 	addi	sp,sp,8
  819ad4:	f800283a 	ret

00819ad8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  819ad8:	defffd04 	addi	sp,sp,-12
  819adc:	df000215 	stw	fp,8(sp)
  819ae0:	df000204 	addi	fp,sp,8
  819ae4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819ae8:	e0bfff17 	ldw	r2,-4(fp)
  819aec:	10800a17 	ldw	r2,40(r2)
  819af0:	10800037 	ldwio	r2,0(r2)
  819af4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  819af8:	e0bffe17 	ldw	r2,-8(fp)
  819afc:	10800054 	ori	r2,r2,1
  819b00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  819b04:	e0bfff17 	ldw	r2,-4(fp)
  819b08:	10800a17 	ldw	r2,40(r2)
  819b0c:	1007883a 	mov	r3,r2
  819b10:	e0bffe17 	ldw	r2,-8(fp)
  819b14:	18800035 	stwio	r2,0(r3)
}
  819b18:	0001883a 	nop
  819b1c:	e037883a 	mov	sp,fp
  819b20:	df000017 	ldw	fp,0(sp)
  819b24:	dec00104 	addi	sp,sp,4
  819b28:	f800283a 	ret

00819b2c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  819b2c:	defffd04 	addi	sp,sp,-12
  819b30:	df000215 	stw	fp,8(sp)
  819b34:	df000204 	addi	fp,sp,8
  819b38:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819b3c:	e0bfff17 	ldw	r2,-4(fp)
  819b40:	10800a17 	ldw	r2,40(r2)
  819b44:	10800037 	ldwio	r2,0(r2)
  819b48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  819b4c:	e0fffe17 	ldw	r3,-8(fp)
  819b50:	00bfff84 	movi	r2,-2
  819b54:	1884703a 	and	r2,r3,r2
  819b58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  819b5c:	e0bfff17 	ldw	r2,-4(fp)
  819b60:	10800a17 	ldw	r2,40(r2)
  819b64:	1007883a 	mov	r3,r2
  819b68:	e0bffe17 	ldw	r2,-8(fp)
  819b6c:	18800035 	stwio	r2,0(r3)
}
  819b70:	0001883a 	nop
  819b74:	e037883a 	mov	sp,fp
  819b78:	df000017 	ldw	fp,0(sp)
  819b7c:	dec00104 	addi	sp,sp,4
  819b80:	f800283a 	ret

00819b84 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  819b84:	defffd04 	addi	sp,sp,-12
  819b88:	df000215 	stw	fp,8(sp)
  819b8c:	df000204 	addi	fp,sp,8
  819b90:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819b94:	e0bfff17 	ldw	r2,-4(fp)
  819b98:	10800a17 	ldw	r2,40(r2)
  819b9c:	10800037 	ldwio	r2,0(r2)
  819ba0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  819ba4:	e0bffe17 	ldw	r2,-8(fp)
  819ba8:	10800094 	ori	r2,r2,2
  819bac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  819bb0:	e0bfff17 	ldw	r2,-4(fp)
  819bb4:	10800a17 	ldw	r2,40(r2)
  819bb8:	1007883a 	mov	r3,r2
  819bbc:	e0bffe17 	ldw	r2,-8(fp)
  819bc0:	18800035 	stwio	r2,0(r3)
}
  819bc4:	0001883a 	nop
  819bc8:	e037883a 	mov	sp,fp
  819bcc:	df000017 	ldw	fp,0(sp)
  819bd0:	dec00104 	addi	sp,sp,4
  819bd4:	f800283a 	ret

00819bd8 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  819bd8:	defffd04 	addi	sp,sp,-12
  819bdc:	df000215 	stw	fp,8(sp)
  819be0:	df000204 	addi	fp,sp,8
  819be4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819be8:	e0bfff17 	ldw	r2,-4(fp)
  819bec:	10800a17 	ldw	r2,40(r2)
  819bf0:	10800037 	ldwio	r2,0(r2)
  819bf4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  819bf8:	e0fffe17 	ldw	r3,-8(fp)
  819bfc:	00bfff44 	movi	r2,-3
  819c00:	1884703a 	and	r2,r3,r2
  819c04:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  819c08:	e0bfff17 	ldw	r2,-4(fp)
  819c0c:	10800a17 	ldw	r2,40(r2)
  819c10:	1007883a 	mov	r3,r2
  819c14:	e0bffe17 	ldw	r2,-8(fp)
  819c18:	18800035 	stwio	r2,0(r3)
}
  819c1c:	0001883a 	nop
  819c20:	e037883a 	mov	sp,fp
  819c24:	df000017 	ldw	fp,0(sp)
  819c28:	dec00104 	addi	sp,sp,4
  819c2c:	f800283a 	ret

00819c30 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  819c30:	defffd04 	addi	sp,sp,-12
  819c34:	df000215 	stw	fp,8(sp)
  819c38:	df000204 	addi	fp,sp,8
  819c3c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819c40:	e0bfff17 	ldw	r2,-4(fp)
  819c44:	10800a17 	ldw	r2,40(r2)
  819c48:	10800037 	ldwio	r2,0(r2)
  819c4c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  819c50:	e0bffe17 	ldw	r2,-8(fp)
  819c54:	1080400c 	andi	r2,r2,256
  819c58:	1004c03a 	cmpne	r2,r2,zero
  819c5c:	10803fcc 	andi	r2,r2,255
}
  819c60:	e037883a 	mov	sp,fp
  819c64:	df000017 	ldw	fp,0(sp)
  819c68:	dec00104 	addi	sp,sp,4
  819c6c:	f800283a 	ret

00819c70 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  819c70:	defffd04 	addi	sp,sp,-12
  819c74:	df000215 	stw	fp,8(sp)
  819c78:	df000204 	addi	fp,sp,8
  819c7c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819c80:	e0bfff17 	ldw	r2,-4(fp)
  819c84:	10800a17 	ldw	r2,40(r2)
  819c88:	10800037 	ldwio	r2,0(r2)
  819c8c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  819c90:	e0bffe17 	ldw	r2,-8(fp)
  819c94:	1080800c 	andi	r2,r2,512
  819c98:	1004c03a 	cmpne	r2,r2,zero
  819c9c:	10803fcc 	andi	r2,r2,255
}
  819ca0:	e037883a 	mov	sp,fp
  819ca4:	df000017 	ldw	fp,0(sp)
  819ca8:	dec00104 	addi	sp,sp,4
  819cac:	f800283a 	ret

00819cb0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  819cb0:	defffd04 	addi	sp,sp,-12
  819cb4:	df000215 	stw	fp,8(sp)
  819cb8:	df000204 	addi	fp,sp,8
  819cbc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  819cc0:	e0bfff17 	ldw	r2,-4(fp)
  819cc4:	10800a17 	ldw	r2,40(r2)
  819cc8:	10800037 	ldwio	r2,0(r2)
  819ccc:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  819cd0:	e0bffe17 	ldw	r2,-8(fp)
  819cd4:	10800114 	ori	r2,r2,4
  819cd8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  819cdc:	e0bffe17 	ldw	r2,-8(fp)
  819ce0:	10800214 	ori	r2,r2,8
  819ce4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  819ce8:	e0bfff17 	ldw	r2,-4(fp)
  819cec:	10800a17 	ldw	r2,40(r2)
  819cf0:	1007883a 	mov	r3,r2
  819cf4:	e0bffe17 	ldw	r2,-8(fp)
  819cf8:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  819cfc:	e0fffe17 	ldw	r3,-8(fp)
  819d00:	00bffec4 	movi	r2,-5
  819d04:	1884703a 	and	r2,r3,r2
  819d08:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  819d0c:	e0fffe17 	ldw	r3,-8(fp)
  819d10:	00bffdc4 	movi	r2,-9
  819d14:	1884703a 	and	r2,r3,r2
  819d18:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  819d1c:	e0bfff17 	ldw	r2,-4(fp)
  819d20:	10800a17 	ldw	r2,40(r2)
  819d24:	1007883a 	mov	r3,r2
  819d28:	e0bffe17 	ldw	r2,-8(fp)
  819d2c:	18800035 	stwio	r2,0(r3)
}
  819d30:	0001883a 	nop
  819d34:	e037883a 	mov	sp,fp
  819d38:	df000017 	ldw	fp,0(sp)
  819d3c:	dec00104 	addi	sp,sp,4
  819d40:	f800283a 	ret

00819d44 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  819d44:	defffc04 	addi	sp,sp,-16
  819d48:	df000315 	stw	fp,12(sp)
  819d4c:	df000304 	addi	fp,sp,12
  819d50:	e13ffe15 	stw	r4,-8(fp)
  819d54:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  819d58:	e0bffe17 	ldw	r2,-8(fp)
  819d5c:	10800a17 	ldw	r2,40(r2)
  819d60:	10800104 	addi	r2,r2,4
  819d64:	10800037 	ldwio	r2,0(r2)
  819d68:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  819d6c:	e0bfff17 	ldw	r2,-4(fp)
  819d70:	1000041e 	bne	r2,zero,819d84 <alt_up_audio_read_fifo_avail+0x40>
  819d74:	e0bffd17 	ldw	r2,-12(fp)
  819d78:	10bfc00c 	andi	r2,r2,65280
  819d7c:	1004d23a 	srli	r2,r2,8
  819d80:	00000206 	br	819d8c <alt_up_audio_read_fifo_avail+0x48>
  819d84:	e0bffd17 	ldw	r2,-12(fp)
  819d88:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  819d8c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  819d90:	e0bffd17 	ldw	r2,-12(fp)
}
  819d94:	e037883a 	mov	sp,fp
  819d98:	df000017 	ldw	fp,0(sp)
  819d9c:	dec00104 	addi	sp,sp,4
  819da0:	f800283a 	ret

00819da4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  819da4:	defffa04 	addi	sp,sp,-24
  819da8:	dfc00515 	stw	ra,20(sp)
  819dac:	df000415 	stw	fp,16(sp)
  819db0:	df000404 	addi	fp,sp,16
  819db4:	e13ffd15 	stw	r4,-12(fp)
  819db8:	e17ffe15 	stw	r5,-8(fp)
  819dbc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  819dc0:	01400044 	movi	r5,1
  819dc4:	e13ffd17 	ldw	r4,-12(fp)
  819dc8:	0819d440 	call	819d44 <alt_up_audio_read_fifo_avail>
  819dcc:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  819dd0:	e0bffc17 	ldw	r2,-16(fp)
  819dd4:	10801868 	cmpgeui	r2,r2,97
  819dd8:	1000021e 	bne	r2,zero,819de4 <alt_up_audio_record_r+0x40>
		return 0;
  819ddc:	0005883a 	mov	r2,zero
  819de0:	00000506 	br	819df8 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  819de4:	01c00044 	movi	r7,1
  819de8:	e1bfff17 	ldw	r6,-4(fp)
  819dec:	e17ffe17 	ldw	r5,-8(fp)
  819df0:	e13ffd17 	ldw	r4,-12(fp)
  819df4:	0819fa40 	call	819fa4 <alt_up_audio_read_fifo>
}
  819df8:	e037883a 	mov	sp,fp
  819dfc:	dfc00117 	ldw	ra,4(sp)
  819e00:	df000017 	ldw	fp,0(sp)
  819e04:	dec00204 	addi	sp,sp,8
  819e08:	f800283a 	ret

00819e0c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  819e0c:	defffa04 	addi	sp,sp,-24
  819e10:	dfc00515 	stw	ra,20(sp)
  819e14:	df000415 	stw	fp,16(sp)
  819e18:	df000404 	addi	fp,sp,16
  819e1c:	e13ffd15 	stw	r4,-12(fp)
  819e20:	e17ffe15 	stw	r5,-8(fp)
  819e24:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  819e28:	000b883a 	mov	r5,zero
  819e2c:	e13ffd17 	ldw	r4,-12(fp)
  819e30:	0819d440 	call	819d44 <alt_up_audio_read_fifo_avail>
  819e34:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  819e38:	e0bffc17 	ldw	r2,-16(fp)
  819e3c:	10801868 	cmpgeui	r2,r2,97
  819e40:	1000021e 	bne	r2,zero,819e4c <alt_up_audio_record_l+0x40>
		return 0;
  819e44:	0005883a 	mov	r2,zero
  819e48:	00000506 	br	819e60 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  819e4c:	000f883a 	mov	r7,zero
  819e50:	e1bfff17 	ldw	r6,-4(fp)
  819e54:	e17ffe17 	ldw	r5,-8(fp)
  819e58:	e13ffd17 	ldw	r4,-12(fp)
  819e5c:	0819fa40 	call	819fa4 <alt_up_audio_read_fifo>
}
  819e60:	e037883a 	mov	sp,fp
  819e64:	dfc00117 	ldw	ra,4(sp)
  819e68:	df000017 	ldw	fp,0(sp)
  819e6c:	dec00204 	addi	sp,sp,8
  819e70:	f800283a 	ret

00819e74 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  819e74:	defffc04 	addi	sp,sp,-16
  819e78:	df000315 	stw	fp,12(sp)
  819e7c:	df000304 	addi	fp,sp,12
  819e80:	e13ffe15 	stw	r4,-8(fp)
  819e84:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  819e88:	e0bffe17 	ldw	r2,-8(fp)
  819e8c:	10800a17 	ldw	r2,40(r2)
  819e90:	10800104 	addi	r2,r2,4
  819e94:	10800037 	ldwio	r2,0(r2)
  819e98:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  819e9c:	e0bfff17 	ldw	r2,-4(fp)
  819ea0:	1000031e 	bne	r2,zero,819eb0 <alt_up_audio_write_fifo_space+0x3c>
  819ea4:	e0bffd17 	ldw	r2,-12(fp)
  819ea8:	1004d63a 	srli	r2,r2,24
  819eac:	00000306 	br	819ebc <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  819eb0:	e0bffd17 	ldw	r2,-12(fp)
  819eb4:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  819eb8:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  819ebc:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  819ec0:	e0bffd17 	ldw	r2,-12(fp)
}
  819ec4:	e037883a 	mov	sp,fp
  819ec8:	df000017 	ldw	fp,0(sp)
  819ecc:	dec00104 	addi	sp,sp,4
  819ed0:	f800283a 	ret

00819ed4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  819ed4:	defffa04 	addi	sp,sp,-24
  819ed8:	dfc00515 	stw	ra,20(sp)
  819edc:	df000415 	stw	fp,16(sp)
  819ee0:	df000404 	addi	fp,sp,16
  819ee4:	e13ffd15 	stw	r4,-12(fp)
  819ee8:	e17ffe15 	stw	r5,-8(fp)
  819eec:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  819ef0:	01400044 	movi	r5,1
  819ef4:	e13ffd17 	ldw	r4,-12(fp)
  819ef8:	0819e740 	call	819e74 <alt_up_audio_write_fifo_space>
  819efc:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  819f00:	e0bffc17 	ldw	r2,-16(fp)
  819f04:	10801868 	cmpgeui	r2,r2,97
  819f08:	1000021e 	bne	r2,zero,819f14 <alt_up_audio_play_r+0x40>
		return 0;
  819f0c:	0005883a 	mov	r2,zero
  819f10:	00000506 	br	819f28 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  819f14:	01c00044 	movi	r7,1
  819f18:	e1bfff17 	ldw	r6,-4(fp)
  819f1c:	e17ffe17 	ldw	r5,-8(fp)
  819f20:	e13ffd17 	ldw	r4,-12(fp)
  819f24:	081a0840 	call	81a084 <alt_up_audio_write_fifo>
}
  819f28:	e037883a 	mov	sp,fp
  819f2c:	dfc00117 	ldw	ra,4(sp)
  819f30:	df000017 	ldw	fp,0(sp)
  819f34:	dec00204 	addi	sp,sp,8
  819f38:	f800283a 	ret

00819f3c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  819f3c:	defffa04 	addi	sp,sp,-24
  819f40:	dfc00515 	stw	ra,20(sp)
  819f44:	df000415 	stw	fp,16(sp)
  819f48:	df000404 	addi	fp,sp,16
  819f4c:	e13ffd15 	stw	r4,-12(fp)
  819f50:	e17ffe15 	stw	r5,-8(fp)
  819f54:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  819f58:	000b883a 	mov	r5,zero
  819f5c:	e13ffd17 	ldw	r4,-12(fp)
  819f60:	0819e740 	call	819e74 <alt_up_audio_write_fifo_space>
  819f64:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  819f68:	e0bffc17 	ldw	r2,-16(fp)
  819f6c:	10801868 	cmpgeui	r2,r2,97
  819f70:	1000021e 	bne	r2,zero,819f7c <alt_up_audio_play_l+0x40>
		return 0;
  819f74:	0005883a 	mov	r2,zero
  819f78:	00000506 	br	819f90 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  819f7c:	000f883a 	mov	r7,zero
  819f80:	e1bfff17 	ldw	r6,-4(fp)
  819f84:	e17ffe17 	ldw	r5,-8(fp)
  819f88:	e13ffd17 	ldw	r4,-12(fp)
  819f8c:	081a0840 	call	81a084 <alt_up_audio_write_fifo>
}
  819f90:	e037883a 	mov	sp,fp
  819f94:	dfc00117 	ldw	ra,4(sp)
  819f98:	df000017 	ldw	fp,0(sp)
  819f9c:	dec00204 	addi	sp,sp,8
  819fa0:	f800283a 	ret

00819fa4 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  819fa4:	defff904 	addi	sp,sp,-28
  819fa8:	df000615 	stw	fp,24(sp)
  819fac:	df000604 	addi	fp,sp,24
  819fb0:	e13ffc15 	stw	r4,-16(fp)
  819fb4:	e17ffd15 	stw	r5,-12(fp)
  819fb8:	e1bffe15 	stw	r6,-8(fp)
  819fbc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  819fc0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  819fc4:	00002506 	br	81a05c <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  819fc8:	e0bffc17 	ldw	r2,-16(fp)
  819fcc:	10800a17 	ldw	r2,40(r2)
  819fd0:	10800104 	addi	r2,r2,4
  819fd4:	10800037 	ldwio	r2,0(r2)
  819fd8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  819fdc:	e0bfff17 	ldw	r2,-4(fp)
  819fe0:	1000041e 	bne	r2,zero,819ff4 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  819fe4:	e0bffb17 	ldw	r2,-20(fp)
  819fe8:	10bfc00c 	andi	r2,r2,65280
			:
  819fec:	1004d23a 	srli	r2,r2,8
  819ff0:	00000206 	br	819ffc <alt_up_audio_read_fifo+0x58>
  819ff4:	e0bffb17 	ldw	r2,-20(fp)
  819ff8:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  819ffc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  81a000:	e0bffb17 	ldw	r2,-20(fp)
  81a004:	10001926 	beq	r2,zero,81a06c <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  81a008:	e0bffa17 	ldw	r2,-24(fp)
  81a00c:	1085883a 	add	r2,r2,r2
  81a010:	1085883a 	add	r2,r2,r2
  81a014:	1007883a 	mov	r3,r2
  81a018:	e0bffd17 	ldw	r2,-12(fp)
  81a01c:	10c5883a 	add	r2,r2,r3
  81a020:	e0ffff17 	ldw	r3,-4(fp)
  81a024:	1800051e 	bne	r3,zero,81a03c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  81a028:	e0fffc17 	ldw	r3,-16(fp)
  81a02c:	18c00a17 	ldw	r3,40(r3)
  81a030:	18c00204 	addi	r3,r3,8
  81a034:	18c00037 	ldwio	r3,0(r3)
  81a038:	00000406 	br	81a04c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  81a03c:	e0fffc17 	ldw	r3,-16(fp)
  81a040:	18c00a17 	ldw	r3,40(r3)
  81a044:	18c00304 	addi	r3,r3,12
  81a048:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  81a04c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  81a050:	e0bffa17 	ldw	r2,-24(fp)
  81a054:	10800044 	addi	r2,r2,1
  81a058:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81a05c:	e0fffa17 	ldw	r3,-24(fp)
  81a060:	e0bffe17 	ldw	r2,-8(fp)
  81a064:	18bfd816 	blt	r3,r2,819fc8 <__alt_data_end+0xff819fc8>
  81a068:	00000106 	br	81a070 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
  81a06c:	0001883a 	nop
		}
	}
	return count;
  81a070:	e0bffa17 	ldw	r2,-24(fp)
}
  81a074:	e037883a 	mov	sp,fp
  81a078:	df000017 	ldw	fp,0(sp)
  81a07c:	dec00104 	addi	sp,sp,4
  81a080:	f800283a 	ret

0081a084 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81a084:	defff904 	addi	sp,sp,-28
  81a088:	df000615 	stw	fp,24(sp)
  81a08c:	df000604 	addi	fp,sp,24
  81a090:	e13ffc15 	stw	r4,-16(fp)
  81a094:	e17ffd15 	stw	r5,-12(fp)
  81a098:	e1bffe15 	stw	r6,-8(fp)
  81a09c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  81a0a0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  81a0a4:	00002f06 	br	81a164 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81a0a8:	e0bffc17 	ldw	r2,-16(fp)
  81a0ac:	10800a17 	ldw	r2,40(r2)
  81a0b0:	10800104 	addi	r2,r2,4
  81a0b4:	10800037 	ldwio	r2,0(r2)
  81a0b8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  81a0bc:	e0bfff17 	ldw	r2,-4(fp)
  81a0c0:	1000031e 	bne	r2,zero,81a0d0 <alt_up_audio_write_fifo+0x4c>
  81a0c4:	e0bffb17 	ldw	r2,-20(fp)
  81a0c8:	1004d63a 	srli	r2,r2,24
  81a0cc:	00000306 	br	81a0dc <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  81a0d0:	e0bffb17 	ldw	r2,-20(fp)
  81a0d4:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  81a0d8:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81a0dc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  81a0e0:	e0bffb17 	ldw	r2,-20(fp)
  81a0e4:	10002326 	beq	r2,zero,81a174 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  81a0e8:	e0bfff17 	ldw	r2,-4(fp)
  81a0ec:	10000f1e 	bne	r2,zero,81a12c <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  81a0f0:	e0bffc17 	ldw	r2,-16(fp)
  81a0f4:	10800a17 	ldw	r2,40(r2)
  81a0f8:	10800204 	addi	r2,r2,8
  81a0fc:	1009883a 	mov	r4,r2
  81a100:	e0bffa17 	ldw	r2,-24(fp)
  81a104:	10c00044 	addi	r3,r2,1
  81a108:	e0fffa15 	stw	r3,-24(fp)
  81a10c:	1085883a 	add	r2,r2,r2
  81a110:	1085883a 	add	r2,r2,r2
  81a114:	1007883a 	mov	r3,r2
  81a118:	e0bffd17 	ldw	r2,-12(fp)
  81a11c:	10c5883a 	add	r2,r2,r3
  81a120:	10800017 	ldw	r2,0(r2)
  81a124:	20800035 	stwio	r2,0(r4)
  81a128:	00000e06 	br	81a164 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  81a12c:	e0bffc17 	ldw	r2,-16(fp)
  81a130:	10800a17 	ldw	r2,40(r2)
  81a134:	10800304 	addi	r2,r2,12
  81a138:	1009883a 	mov	r4,r2
  81a13c:	e0bffa17 	ldw	r2,-24(fp)
  81a140:	10c00044 	addi	r3,r2,1
  81a144:	e0fffa15 	stw	r3,-24(fp)
  81a148:	1085883a 	add	r2,r2,r2
  81a14c:	1085883a 	add	r2,r2,r2
  81a150:	1007883a 	mov	r3,r2
  81a154:	e0bffd17 	ldw	r2,-12(fp)
  81a158:	10c5883a 	add	r2,r2,r3
  81a15c:	10800017 	ldw	r2,0(r2)
  81a160:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81a164:	e0fffa17 	ldw	r3,-24(fp)
  81a168:	e0bffe17 	ldw	r2,-8(fp)
  81a16c:	18bfce16 	blt	r3,r2,81a0a8 <__alt_data_end+0xff81a0a8>
  81a170:	00000106 	br	81a178 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
  81a174:	0001883a 	nop
		}
	}
	return count;
  81a178:	e0bffa17 	ldw	r2,-24(fp)
}
  81a17c:	e037883a 	mov	sp,fp
  81a180:	df000017 	ldw	fp,0(sp)
  81a184:	dec00104 	addi	sp,sp,4
  81a188:	f800283a 	ret

0081a18c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  81a18c:	defffd04 	addi	sp,sp,-12
  81a190:	df000215 	stw	fp,8(sp)
  81a194:	df000204 	addi	fp,sp,8
  81a198:	e13ffe15 	stw	r4,-8(fp)
  81a19c:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  81a1a0:	e0bfff17 	ldw	r2,-4(fp)
  81a1a4:	1000051e 	bne	r2,zero,81a1bc <alt_up_audio_read_fifo_head+0x30>
  81a1a8:	e0bffe17 	ldw	r2,-8(fp)
  81a1ac:	10800a17 	ldw	r2,40(r2)
  81a1b0:	10800204 	addi	r2,r2,8
  81a1b4:	10800037 	ldwio	r2,0(r2)
  81a1b8:	00000406 	br	81a1cc <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  81a1bc:	e0bffe17 	ldw	r2,-8(fp)
  81a1c0:	10800a17 	ldw	r2,40(r2)
  81a1c4:	10800304 	addi	r2,r2,12
  81a1c8:	10800037 	ldwio	r2,0(r2)
}
  81a1cc:	e037883a 	mov	sp,fp
  81a1d0:	df000017 	ldw	fp,0(sp)
  81a1d4:	dec00104 	addi	sp,sp,4
  81a1d8:	f800283a 	ret

0081a1dc <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  81a1dc:	defffc04 	addi	sp,sp,-16
  81a1e0:	df000315 	stw	fp,12(sp)
  81a1e4:	df000304 	addi	fp,sp,12
  81a1e8:	e13ffd15 	stw	r4,-12(fp)
  81a1ec:	e17ffe15 	stw	r5,-8(fp)
  81a1f0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  81a1f4:	e0bfff17 	ldw	r2,-4(fp)
  81a1f8:	1000071e 	bne	r2,zero,81a218 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  81a1fc:	e0bffd17 	ldw	r2,-12(fp)
  81a200:	10800a17 	ldw	r2,40(r2)
  81a204:	10800204 	addi	r2,r2,8
  81a208:	1007883a 	mov	r3,r2
  81a20c:	e0bffe17 	ldw	r2,-8(fp)
  81a210:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
  81a214:	00000606 	br	81a230 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  81a218:	e0bffd17 	ldw	r2,-12(fp)
  81a21c:	10800a17 	ldw	r2,40(r2)
  81a220:	10800304 	addi	r2,r2,12
  81a224:	1007883a 	mov	r3,r2
  81a228:	e0bffe17 	ldw	r2,-8(fp)
  81a22c:	18800035 	stwio	r2,0(r3)
}
  81a230:	0001883a 	nop
  81a234:	e037883a 	mov	sp,fp
  81a238:	df000017 	ldw	fp,0(sp)
  81a23c:	dec00104 	addi	sp,sp,4
  81a240:	f800283a 	ret

0081a244 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81a244:	defffe04 	addi	sp,sp,-8
  81a248:	df000115 	stw	fp,4(sp)
  81a24c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81a250:	e03fff15 	stw	zero,-4(fp)
  81a254:	00000506 	br	81a26c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81a258:	e0bfff17 	ldw	r2,-4(fp)
  81a25c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81a260:	e0bfff17 	ldw	r2,-4(fp)
  81a264:	10800804 	addi	r2,r2,32
  81a268:	e0bfff15 	stw	r2,-4(fp)
  81a26c:	e0bfff17 	ldw	r2,-4(fp)
  81a270:	10820030 	cmpltui	r2,r2,2048
  81a274:	103ff81e 	bne	r2,zero,81a258 <__alt_data_end+0xff81a258>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81a278:	0001883a 	nop
  81a27c:	e037883a 	mov	sp,fp
  81a280:	df000017 	ldw	fp,0(sp)
  81a284:	dec00104 	addi	sp,sp,4
  81a288:	f800283a 	ret

0081a28c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a28c:	defffe04 	addi	sp,sp,-8
  81a290:	dfc00115 	stw	ra,4(sp)
  81a294:	df000015 	stw	fp,0(sp)
  81a298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a29c:	d0a00d17 	ldw	r2,-32716(gp)
  81a2a0:	10000326 	beq	r2,zero,81a2b0 <alt_get_errno+0x24>
  81a2a4:	d0a00d17 	ldw	r2,-32716(gp)
  81a2a8:	103ee83a 	callr	r2
  81a2ac:	00000106 	br	81a2b4 <alt_get_errno+0x28>
  81a2b0:	d0a36704 	addi	r2,gp,-29284
}
  81a2b4:	e037883a 	mov	sp,fp
  81a2b8:	dfc00117 	ldw	ra,4(sp)
  81a2bc:	df000017 	ldw	fp,0(sp)
  81a2c0:	dec00204 	addi	sp,sp,8
  81a2c4:	f800283a 	ret

0081a2c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81a2c8:	defffa04 	addi	sp,sp,-24
  81a2cc:	dfc00515 	stw	ra,20(sp)
  81a2d0:	df000415 	stw	fp,16(sp)
  81a2d4:	df000404 	addi	fp,sp,16
  81a2d8:	e13ffe15 	stw	r4,-8(fp)
  81a2dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81a2e0:	e0bffe17 	ldw	r2,-8(fp)
  81a2e4:	10000326 	beq	r2,zero,81a2f4 <alt_dev_llist_insert+0x2c>
  81a2e8:	e0bffe17 	ldw	r2,-8(fp)
  81a2ec:	10800217 	ldw	r2,8(r2)
  81a2f0:	1000061e 	bne	r2,zero,81a30c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  81a2f4:	081a28c0 	call	81a28c <alt_get_errno>
  81a2f8:	1007883a 	mov	r3,r2
  81a2fc:	00800584 	movi	r2,22
  81a300:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81a304:	00bffa84 	movi	r2,-22
  81a308:	00001306 	br	81a358 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81a30c:	e0bffe17 	ldw	r2,-8(fp)
  81a310:	e0ffff17 	ldw	r3,-4(fp)
  81a314:	e0fffc15 	stw	r3,-16(fp)
  81a318:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a31c:	e0bffd17 	ldw	r2,-12(fp)
  81a320:	e0fffc17 	ldw	r3,-16(fp)
  81a324:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81a328:	e0bffc17 	ldw	r2,-16(fp)
  81a32c:	10c00017 	ldw	r3,0(r2)
  81a330:	e0bffd17 	ldw	r2,-12(fp)
  81a334:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a338:	e0bffc17 	ldw	r2,-16(fp)
  81a33c:	10800017 	ldw	r2,0(r2)
  81a340:	e0fffd17 	ldw	r3,-12(fp)
  81a344:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81a348:	e0bffc17 	ldw	r2,-16(fp)
  81a34c:	e0fffd17 	ldw	r3,-12(fp)
  81a350:	10c00015 	stw	r3,0(r2)

  return 0;  
  81a354:	0005883a 	mov	r2,zero
}
  81a358:	e037883a 	mov	sp,fp
  81a35c:	dfc00117 	ldw	ra,4(sp)
  81a360:	df000017 	ldw	fp,0(sp)
  81a364:	dec00204 	addi	sp,sp,8
  81a368:	f800283a 	ret

0081a36c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81a36c:	defffd04 	addi	sp,sp,-12
  81a370:	dfc00215 	stw	ra,8(sp)
  81a374:	df000115 	stw	fp,4(sp)
  81a378:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a37c:	008020b4 	movhi	r2,130
  81a380:	10ac8604 	addi	r2,r2,-19944
  81a384:	e0bfff15 	stw	r2,-4(fp)
  81a388:	00000606 	br	81a3a4 <_do_ctors+0x38>
        (*ctor) (); 
  81a38c:	e0bfff17 	ldw	r2,-4(fp)
  81a390:	10800017 	ldw	r2,0(r2)
  81a394:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a398:	e0bfff17 	ldw	r2,-4(fp)
  81a39c:	10bfff04 	addi	r2,r2,-4
  81a3a0:	e0bfff15 	stw	r2,-4(fp)
  81a3a4:	e0ffff17 	ldw	r3,-4(fp)
  81a3a8:	008020b4 	movhi	r2,130
  81a3ac:	10ac8704 	addi	r2,r2,-19940
  81a3b0:	18bff62e 	bgeu	r3,r2,81a38c <__alt_data_end+0xff81a38c>
        (*ctor) (); 
}
  81a3b4:	0001883a 	nop
  81a3b8:	e037883a 	mov	sp,fp
  81a3bc:	dfc00117 	ldw	ra,4(sp)
  81a3c0:	df000017 	ldw	fp,0(sp)
  81a3c4:	dec00204 	addi	sp,sp,8
  81a3c8:	f800283a 	ret

0081a3cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81a3cc:	defffd04 	addi	sp,sp,-12
  81a3d0:	dfc00215 	stw	ra,8(sp)
  81a3d4:	df000115 	stw	fp,4(sp)
  81a3d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a3dc:	008020b4 	movhi	r2,130
  81a3e0:	10ac8604 	addi	r2,r2,-19944
  81a3e4:	e0bfff15 	stw	r2,-4(fp)
  81a3e8:	00000606 	br	81a404 <_do_dtors+0x38>
        (*dtor) (); 
  81a3ec:	e0bfff17 	ldw	r2,-4(fp)
  81a3f0:	10800017 	ldw	r2,0(r2)
  81a3f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a3f8:	e0bfff17 	ldw	r2,-4(fp)
  81a3fc:	10bfff04 	addi	r2,r2,-4
  81a400:	e0bfff15 	stw	r2,-4(fp)
  81a404:	e0ffff17 	ldw	r3,-4(fp)
  81a408:	008020b4 	movhi	r2,130
  81a40c:	10ac8704 	addi	r2,r2,-19940
  81a410:	18bff62e 	bgeu	r3,r2,81a3ec <__alt_data_end+0xff81a3ec>
        (*dtor) (); 
}
  81a414:	0001883a 	nop
  81a418:	e037883a 	mov	sp,fp
  81a41c:	dfc00117 	ldw	ra,4(sp)
  81a420:	df000017 	ldw	fp,0(sp)
  81a424:	dec00204 	addi	sp,sp,8
  81a428:	f800283a 	ret

0081a42c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81a42c:	defffa04 	addi	sp,sp,-24
  81a430:	dfc00515 	stw	ra,20(sp)
  81a434:	df000415 	stw	fp,16(sp)
  81a438:	df000404 	addi	fp,sp,16
  81a43c:	e13ffe15 	stw	r4,-8(fp)
  81a440:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81a444:	e0bfff17 	ldw	r2,-4(fp)
  81a448:	10800017 	ldw	r2,0(r2)
  81a44c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81a450:	e13ffe17 	ldw	r4,-8(fp)
  81a454:	080a7d80 	call	80a7d8 <strlen>
  81a458:	10800044 	addi	r2,r2,1
  81a45c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81a460:	00000d06 	br	81a498 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81a464:	e0bffc17 	ldw	r2,-16(fp)
  81a468:	10800217 	ldw	r2,8(r2)
  81a46c:	e0fffd17 	ldw	r3,-12(fp)
  81a470:	180d883a 	mov	r6,r3
  81a474:	e17ffe17 	ldw	r5,-8(fp)
  81a478:	1009883a 	mov	r4,r2
  81a47c:	081aed40 	call	81aed4 <memcmp>
  81a480:	1000021e 	bne	r2,zero,81a48c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81a484:	e0bffc17 	ldw	r2,-16(fp)
  81a488:	00000706 	br	81a4a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81a48c:	e0bffc17 	ldw	r2,-16(fp)
  81a490:	10800017 	ldw	r2,0(r2)
  81a494:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81a498:	e0fffc17 	ldw	r3,-16(fp)
  81a49c:	e0bfff17 	ldw	r2,-4(fp)
  81a4a0:	18bff01e 	bne	r3,r2,81a464 <__alt_data_end+0xff81a464>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81a4a4:	0005883a 	mov	r2,zero
}
  81a4a8:	e037883a 	mov	sp,fp
  81a4ac:	dfc00117 	ldw	ra,4(sp)
  81a4b0:	df000017 	ldw	fp,0(sp)
  81a4b4:	dec00204 	addi	sp,sp,8
  81a4b8:	f800283a 	ret

0081a4bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81a4bc:	defffe04 	addi	sp,sp,-8
  81a4c0:	dfc00115 	stw	ra,4(sp)
  81a4c4:	df000015 	stw	fp,0(sp)
  81a4c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81a4cc:	01440004 	movi	r5,4096
  81a4d0:	0009883a 	mov	r4,zero
  81a4d4:	081ad5c0 	call	81ad5c <alt_icache_flush>
#endif
}
  81a4d8:	0001883a 	nop
  81a4dc:	e037883a 	mov	sp,fp
  81a4e0:	dfc00117 	ldw	ra,4(sp)
  81a4e4:	df000017 	ldw	fp,0(sp)
  81a4e8:	dec00204 	addi	sp,sp,8
  81a4ec:	f800283a 	ret

0081a4f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81a4f0:	defff904 	addi	sp,sp,-28
  81a4f4:	dfc00615 	stw	ra,24(sp)
  81a4f8:	df000515 	stw	fp,20(sp)
  81a4fc:	df000504 	addi	fp,sp,20
  81a500:	e13ffc15 	stw	r4,-16(fp)
  81a504:	e17ffd15 	stw	r5,-12(fp)
  81a508:	e1bffe15 	stw	r6,-8(fp)
  81a50c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81a510:	e1bfff17 	ldw	r6,-4(fp)
  81a514:	e17ffe17 	ldw	r5,-8(fp)
  81a518:	e13ffd17 	ldw	r4,-12(fp)
  81a51c:	081a8b00 	call	81a8b0 <open>
  81a520:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81a524:	e0bffb17 	ldw	r2,-20(fp)
  81a528:	10001c16 	blt	r2,zero,81a59c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  81a52c:	008020b4 	movhi	r2,130
  81a530:	10b20304 	addi	r2,r2,-14324
  81a534:	e0fffb17 	ldw	r3,-20(fp)
  81a538:	18c00324 	muli	r3,r3,12
  81a53c:	10c5883a 	add	r2,r2,r3
  81a540:	10c00017 	ldw	r3,0(r2)
  81a544:	e0bffc17 	ldw	r2,-16(fp)
  81a548:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81a54c:	008020b4 	movhi	r2,130
  81a550:	10b20304 	addi	r2,r2,-14324
  81a554:	e0fffb17 	ldw	r3,-20(fp)
  81a558:	18c00324 	muli	r3,r3,12
  81a55c:	10c5883a 	add	r2,r2,r3
  81a560:	10800104 	addi	r2,r2,4
  81a564:	10c00017 	ldw	r3,0(r2)
  81a568:	e0bffc17 	ldw	r2,-16(fp)
  81a56c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81a570:	008020b4 	movhi	r2,130
  81a574:	10b20304 	addi	r2,r2,-14324
  81a578:	e0fffb17 	ldw	r3,-20(fp)
  81a57c:	18c00324 	muli	r3,r3,12
  81a580:	10c5883a 	add	r2,r2,r3
  81a584:	10800204 	addi	r2,r2,8
  81a588:	10c00017 	ldw	r3,0(r2)
  81a58c:	e0bffc17 	ldw	r2,-16(fp)
  81a590:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81a594:	e13ffb17 	ldw	r4,-20(fp)
  81a598:	0817ac40 	call	817ac4 <alt_release_fd>
  }
} 
  81a59c:	0001883a 	nop
  81a5a0:	e037883a 	mov	sp,fp
  81a5a4:	dfc00117 	ldw	ra,4(sp)
  81a5a8:	df000017 	ldw	fp,0(sp)
  81a5ac:	dec00204 	addi	sp,sp,8
  81a5b0:	f800283a 	ret

0081a5b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81a5b4:	defffb04 	addi	sp,sp,-20
  81a5b8:	dfc00415 	stw	ra,16(sp)
  81a5bc:	df000315 	stw	fp,12(sp)
  81a5c0:	df000304 	addi	fp,sp,12
  81a5c4:	e13ffd15 	stw	r4,-12(fp)
  81a5c8:	e17ffe15 	stw	r5,-8(fp)
  81a5cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81a5d0:	01c07fc4 	movi	r7,511
  81a5d4:	01800044 	movi	r6,1
  81a5d8:	e17ffd17 	ldw	r5,-12(fp)
  81a5dc:	010020b4 	movhi	r4,130
  81a5e0:	21320604 	addi	r4,r4,-14312
  81a5e4:	081a4f00 	call	81a4f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81a5e8:	01c07fc4 	movi	r7,511
  81a5ec:	000d883a 	mov	r6,zero
  81a5f0:	e17ffe17 	ldw	r5,-8(fp)
  81a5f4:	010020b4 	movhi	r4,130
  81a5f8:	21320304 	addi	r4,r4,-14324
  81a5fc:	081a4f00 	call	81a4f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81a600:	01c07fc4 	movi	r7,511
  81a604:	01800044 	movi	r6,1
  81a608:	e17fff17 	ldw	r5,-4(fp)
  81a60c:	010020b4 	movhi	r4,130
  81a610:	21320904 	addi	r4,r4,-14300
  81a614:	081a4f00 	call	81a4f0 <alt_open_fd>
}  
  81a618:	0001883a 	nop
  81a61c:	e037883a 	mov	sp,fp
  81a620:	dfc00117 	ldw	ra,4(sp)
  81a624:	df000017 	ldw	fp,0(sp)
  81a628:	dec00204 	addi	sp,sp,8
  81a62c:	f800283a 	ret

0081a630 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81a630:	defff004 	addi	sp,sp,-64
  81a634:	df000f15 	stw	fp,60(sp)
  81a638:	df000f04 	addi	fp,sp,60
  81a63c:	e13ffd15 	stw	r4,-12(fp)
  81a640:	e17ffe15 	stw	r5,-8(fp)
  81a644:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  81a648:	00bffa84 	movi	r2,-22
  81a64c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81a650:	e0bffd17 	ldw	r2,-12(fp)
  81a654:	10800828 	cmpgeui	r2,r2,32
  81a658:	1000501e 	bne	r2,zero,81a79c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a65c:	0005303a 	rdctl	r2,status
  81a660:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a664:	e0fff617 	ldw	r3,-40(fp)
  81a668:	00bfff84 	movi	r2,-2
  81a66c:	1884703a 	and	r2,r3,r2
  81a670:	1001703a 	wrctl	status,r2
  
  return context;
  81a674:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81a678:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  81a67c:	008020b4 	movhi	r2,130
  81a680:	10b8e904 	addi	r2,r2,-7260
  81a684:	e0fffd17 	ldw	r3,-12(fp)
  81a688:	180690fa 	slli	r3,r3,3
  81a68c:	10c5883a 	add	r2,r2,r3
  81a690:	e0ffff17 	ldw	r3,-4(fp)
  81a694:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  81a698:	008020b4 	movhi	r2,130
  81a69c:	10b8e904 	addi	r2,r2,-7260
  81a6a0:	e0fffd17 	ldw	r3,-12(fp)
  81a6a4:	180690fa 	slli	r3,r3,3
  81a6a8:	10c5883a 	add	r2,r2,r3
  81a6ac:	10800104 	addi	r2,r2,4
  81a6b0:	e0fffe17 	ldw	r3,-8(fp)
  81a6b4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81a6b8:	e0bfff17 	ldw	r2,-4(fp)
  81a6bc:	10001926 	beq	r2,zero,81a724 <alt_irq_register+0xf4>
  81a6c0:	e0bffd17 	ldw	r2,-12(fp)
  81a6c4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a6c8:	0005303a 	rdctl	r2,status
  81a6cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a6d0:	e0fff717 	ldw	r3,-36(fp)
  81a6d4:	00bfff84 	movi	r2,-2
  81a6d8:	1884703a 	and	r2,r3,r2
  81a6dc:	1001703a 	wrctl	status,r2
  
  return context;
  81a6e0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81a6e4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81a6e8:	00c00044 	movi	r3,1
  81a6ec:	e0bff217 	ldw	r2,-56(fp)
  81a6f0:	1884983a 	sll	r2,r3,r2
  81a6f4:	1007883a 	mov	r3,r2
  81a6f8:	d0a36d17 	ldw	r2,-29260(gp)
  81a6fc:	1884b03a 	or	r2,r3,r2
  81a700:	d0a36d15 	stw	r2,-29260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81a704:	d0a36d17 	ldw	r2,-29260(gp)
  81a708:	100170fa 	wrctl	ienable,r2
  81a70c:	e0bff817 	ldw	r2,-32(fp)
  81a710:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a714:	e0bff917 	ldw	r2,-28(fp)
  81a718:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81a71c:	0005883a 	mov	r2,zero
  81a720:	00001906 	br	81a788 <alt_irq_register+0x158>
  81a724:	e0bffd17 	ldw	r2,-12(fp)
  81a728:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a72c:	0005303a 	rdctl	r2,status
  81a730:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a734:	e0fffa17 	ldw	r3,-24(fp)
  81a738:	00bfff84 	movi	r2,-2
  81a73c:	1884703a 	and	r2,r3,r2
  81a740:	1001703a 	wrctl	status,r2
  
  return context;
  81a744:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81a748:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  81a74c:	00c00044 	movi	r3,1
  81a750:	e0bff417 	ldw	r2,-48(fp)
  81a754:	1884983a 	sll	r2,r3,r2
  81a758:	0084303a 	nor	r2,zero,r2
  81a75c:	1007883a 	mov	r3,r2
  81a760:	d0a36d17 	ldw	r2,-29260(gp)
  81a764:	1884703a 	and	r2,r3,r2
  81a768:	d0a36d15 	stw	r2,-29260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81a76c:	d0a36d17 	ldw	r2,-29260(gp)
  81a770:	100170fa 	wrctl	ienable,r2
  81a774:	e0bffb17 	ldw	r2,-20(fp)
  81a778:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a77c:	e0bffc17 	ldw	r2,-16(fp)
  81a780:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81a784:	0005883a 	mov	r2,zero
  81a788:	e0bff115 	stw	r2,-60(fp)
  81a78c:	e0bff317 	ldw	r2,-52(fp)
  81a790:	e0bff515 	stw	r2,-44(fp)
  81a794:	e0bff517 	ldw	r2,-44(fp)
  81a798:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81a79c:	e0bff117 	ldw	r2,-60(fp)
}
  81a7a0:	e037883a 	mov	sp,fp
  81a7a4:	df000017 	ldw	fp,0(sp)
  81a7a8:	dec00104 	addi	sp,sp,4
  81a7ac:	f800283a 	ret

0081a7b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a7b0:	defffe04 	addi	sp,sp,-8
  81a7b4:	dfc00115 	stw	ra,4(sp)
  81a7b8:	df000015 	stw	fp,0(sp)
  81a7bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81a7c0:	d0a00d17 	ldw	r2,-32716(gp)
  81a7c4:	10000326 	beq	r2,zero,81a7d4 <alt_get_errno+0x24>
  81a7c8:	d0a00d17 	ldw	r2,-32716(gp)
  81a7cc:	103ee83a 	callr	r2
  81a7d0:	00000106 	br	81a7d8 <alt_get_errno+0x28>
  81a7d4:	d0a36704 	addi	r2,gp,-29284
}
  81a7d8:	e037883a 	mov	sp,fp
  81a7dc:	dfc00117 	ldw	ra,4(sp)
  81a7e0:	df000017 	ldw	fp,0(sp)
  81a7e4:	dec00204 	addi	sp,sp,8
  81a7e8:	f800283a 	ret

0081a7ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81a7ec:	defffd04 	addi	sp,sp,-12
  81a7f0:	df000215 	stw	fp,8(sp)
  81a7f4:	df000204 	addi	fp,sp,8
  81a7f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81a7fc:	e0bfff17 	ldw	r2,-4(fp)
  81a800:	10800217 	ldw	r2,8(r2)
  81a804:	10d00034 	orhi	r3,r2,16384
  81a808:	e0bfff17 	ldw	r2,-4(fp)
  81a80c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81a810:	e03ffe15 	stw	zero,-8(fp)
  81a814:	00001d06 	br	81a88c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81a818:	008020b4 	movhi	r2,130
  81a81c:	10b20304 	addi	r2,r2,-14324
  81a820:	e0fffe17 	ldw	r3,-8(fp)
  81a824:	18c00324 	muli	r3,r3,12
  81a828:	10c5883a 	add	r2,r2,r3
  81a82c:	10c00017 	ldw	r3,0(r2)
  81a830:	e0bfff17 	ldw	r2,-4(fp)
  81a834:	10800017 	ldw	r2,0(r2)
  81a838:	1880111e 	bne	r3,r2,81a880 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81a83c:	008020b4 	movhi	r2,130
  81a840:	10b20304 	addi	r2,r2,-14324
  81a844:	e0fffe17 	ldw	r3,-8(fp)
  81a848:	18c00324 	muli	r3,r3,12
  81a84c:	10c5883a 	add	r2,r2,r3
  81a850:	10800204 	addi	r2,r2,8
  81a854:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81a858:	1000090e 	bge	r2,zero,81a880 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81a85c:	e0bffe17 	ldw	r2,-8(fp)
  81a860:	10c00324 	muli	r3,r2,12
  81a864:	008020b4 	movhi	r2,130
  81a868:	10b20304 	addi	r2,r2,-14324
  81a86c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81a870:	e0bfff17 	ldw	r2,-4(fp)
  81a874:	18800226 	beq	r3,r2,81a880 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81a878:	00bffcc4 	movi	r2,-13
  81a87c:	00000806 	br	81a8a0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81a880:	e0bffe17 	ldw	r2,-8(fp)
  81a884:	10800044 	addi	r2,r2,1
  81a888:	e0bffe15 	stw	r2,-8(fp)
  81a88c:	d0a00c17 	ldw	r2,-32720(gp)
  81a890:	1007883a 	mov	r3,r2
  81a894:	e0bffe17 	ldw	r2,-8(fp)
  81a898:	18bfdf2e 	bgeu	r3,r2,81a818 <__alt_data_end+0xff81a818>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81a89c:	0005883a 	mov	r2,zero
}
  81a8a0:	e037883a 	mov	sp,fp
  81a8a4:	df000017 	ldw	fp,0(sp)
  81a8a8:	dec00104 	addi	sp,sp,4
  81a8ac:	f800283a 	ret

0081a8b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81a8b0:	defff604 	addi	sp,sp,-40
  81a8b4:	dfc00915 	stw	ra,36(sp)
  81a8b8:	df000815 	stw	fp,32(sp)
  81a8bc:	df000804 	addi	fp,sp,32
  81a8c0:	e13ffd15 	stw	r4,-12(fp)
  81a8c4:	e17ffe15 	stw	r5,-8(fp)
  81a8c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81a8cc:	00bfffc4 	movi	r2,-1
  81a8d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  81a8d4:	00bffb44 	movi	r2,-19
  81a8d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81a8dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81a8e0:	d1600a04 	addi	r5,gp,-32728
  81a8e4:	e13ffd17 	ldw	r4,-12(fp)
  81a8e8:	081a42c0 	call	81a42c <alt_find_dev>
  81a8ec:	e0bff815 	stw	r2,-32(fp)
  81a8f0:	e0bff817 	ldw	r2,-32(fp)
  81a8f4:	1000051e 	bne	r2,zero,81a90c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81a8f8:	e13ffd17 	ldw	r4,-12(fp)
  81a8fc:	081abb00 	call	81abb0 <alt_find_file>
  81a900:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  81a904:	00800044 	movi	r2,1
  81a908:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81a90c:	e0bff817 	ldw	r2,-32(fp)
  81a910:	10002926 	beq	r2,zero,81a9b8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81a914:	e13ff817 	ldw	r4,-32(fp)
  81a918:	081acb80 	call	81acb8 <alt_get_fd>
  81a91c:	e0bff915 	stw	r2,-28(fp)
  81a920:	e0bff917 	ldw	r2,-28(fp)
  81a924:	1000030e 	bge	r2,zero,81a934 <open+0x84>
    {
      status = index;
  81a928:	e0bff917 	ldw	r2,-28(fp)
  81a92c:	e0bffa15 	stw	r2,-24(fp)
  81a930:	00002306 	br	81a9c0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  81a934:	e0bff917 	ldw	r2,-28(fp)
  81a938:	10c00324 	muli	r3,r2,12
  81a93c:	008020b4 	movhi	r2,130
  81a940:	10b20304 	addi	r2,r2,-14324
  81a944:	1885883a 	add	r2,r3,r2
  81a948:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81a94c:	e0fffe17 	ldw	r3,-8(fp)
  81a950:	00900034 	movhi	r2,16384
  81a954:	10bfffc4 	addi	r2,r2,-1
  81a958:	1886703a 	and	r3,r3,r2
  81a95c:	e0bffc17 	ldw	r2,-16(fp)
  81a960:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81a964:	e0bffb17 	ldw	r2,-20(fp)
  81a968:	1000051e 	bne	r2,zero,81a980 <open+0xd0>
  81a96c:	e13ffc17 	ldw	r4,-16(fp)
  81a970:	081a7ec0 	call	81a7ec <alt_file_locked>
  81a974:	e0bffa15 	stw	r2,-24(fp)
  81a978:	e0bffa17 	ldw	r2,-24(fp)
  81a97c:	10001016 	blt	r2,zero,81a9c0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81a980:	e0bff817 	ldw	r2,-32(fp)
  81a984:	10800317 	ldw	r2,12(r2)
  81a988:	10000826 	beq	r2,zero,81a9ac <open+0xfc>
  81a98c:	e0bff817 	ldw	r2,-32(fp)
  81a990:	10800317 	ldw	r2,12(r2)
  81a994:	e1ffff17 	ldw	r7,-4(fp)
  81a998:	e1bffe17 	ldw	r6,-8(fp)
  81a99c:	e17ffd17 	ldw	r5,-12(fp)
  81a9a0:	e13ffc17 	ldw	r4,-16(fp)
  81a9a4:	103ee83a 	callr	r2
  81a9a8:	00000106 	br	81a9b0 <open+0x100>
  81a9ac:	0005883a 	mov	r2,zero
  81a9b0:	e0bffa15 	stw	r2,-24(fp)
  81a9b4:	00000206 	br	81a9c0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81a9b8:	00bffb44 	movi	r2,-19
  81a9bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81a9c0:	e0bffa17 	ldw	r2,-24(fp)
  81a9c4:	1000090e 	bge	r2,zero,81a9ec <open+0x13c>
  {
    alt_release_fd (index);  
  81a9c8:	e13ff917 	ldw	r4,-28(fp)
  81a9cc:	0817ac40 	call	817ac4 <alt_release_fd>
    ALT_ERRNO = -status;
  81a9d0:	081a7b00 	call	81a7b0 <alt_get_errno>
  81a9d4:	1007883a 	mov	r3,r2
  81a9d8:	e0bffa17 	ldw	r2,-24(fp)
  81a9dc:	0085c83a 	sub	r2,zero,r2
  81a9e0:	18800015 	stw	r2,0(r3)
    return -1;
  81a9e4:	00bfffc4 	movi	r2,-1
  81a9e8:	00000106 	br	81a9f0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  81a9ec:	e0bff917 	ldw	r2,-28(fp)
}
  81a9f0:	e037883a 	mov	sp,fp
  81a9f4:	dfc00117 	ldw	ra,4(sp)
  81a9f8:	df000017 	ldw	fp,0(sp)
  81a9fc:	dec00204 	addi	sp,sp,8
  81aa00:	f800283a 	ret

0081aa04 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81aa04:	defffd04 	addi	sp,sp,-12
  81aa08:	dfc00215 	stw	ra,8(sp)
  81aa0c:	df000115 	stw	fp,4(sp)
  81aa10:	df000104 	addi	fp,sp,4
  81aa14:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81aa18:	e13fff17 	ldw	r4,-4(fp)
  81aa1c:	081aa580 	call	81aa58 <alt_busy_sleep>
}
  81aa20:	e037883a 	mov	sp,fp
  81aa24:	dfc00117 	ldw	ra,4(sp)
  81aa28:	df000017 	ldw	fp,0(sp)
  81aa2c:	dec00204 	addi	sp,sp,8
  81aa30:	f800283a 	ret

0081aa34 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  81aa34:	deffff04 	addi	sp,sp,-4
  81aa38:	df000015 	stw	fp,0(sp)
  81aa3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81aa40:	000170fa 	wrctl	ienable,zero
}
  81aa44:	0001883a 	nop
  81aa48:	e037883a 	mov	sp,fp
  81aa4c:	df000017 	ldw	fp,0(sp)
  81aa50:	dec00104 	addi	sp,sp,4
  81aa54:	f800283a 	ret

0081aa58 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81aa58:	defffa04 	addi	sp,sp,-24
  81aa5c:	dfc00515 	stw	ra,20(sp)
  81aa60:	df000415 	stw	fp,16(sp)
  81aa64:	df000404 	addi	fp,sp,16
  81aa68:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81aa6c:	008000c4 	movi	r2,3
  81aa70:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  81aa74:	e0fffd17 	ldw	r3,-12(fp)
  81aa78:	008003f4 	movhi	r2,15
  81aa7c:	10909004 	addi	r2,r2,16960
  81aa80:	1885383a 	mul	r2,r3,r2
  81aa84:	100b883a 	mov	r5,r2
  81aa88:	0100bef4 	movhi	r4,763
  81aa8c:	213c2004 	addi	r4,r4,-3968
  81aa90:	080a3580 	call	80a358 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  81aa94:	100b883a 	mov	r5,r2
  81aa98:	01200034 	movhi	r4,32768
  81aa9c:	213fffc4 	addi	r4,r4,-1
  81aaa0:	080a3580 	call	80a358 <__udivsi3>
  81aaa4:	100b883a 	mov	r5,r2
  81aaa8:	e13fff17 	ldw	r4,-4(fp)
  81aaac:	080a3580 	call	80a358 <__udivsi3>
  81aab0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81aab4:	e0bffe17 	ldw	r2,-8(fp)
  81aab8:	10002a26 	beq	r2,zero,81ab64 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  81aabc:	e03ffc15 	stw	zero,-16(fp)
  81aac0:	00001706 	br	81ab20 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81aac4:	00a00034 	movhi	r2,32768
  81aac8:	10bfffc4 	addi	r2,r2,-1
  81aacc:	10bfffc4 	addi	r2,r2,-1
  81aad0:	103ffe1e 	bne	r2,zero,81aacc <__alt_data_end+0xff81aacc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  81aad4:	e0fffd17 	ldw	r3,-12(fp)
  81aad8:	008003f4 	movhi	r2,15
  81aadc:	10909004 	addi	r2,r2,16960
  81aae0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81aae4:	100b883a 	mov	r5,r2
  81aae8:	0100bef4 	movhi	r4,763
  81aaec:	213c2004 	addi	r4,r4,-3968
  81aaf0:	080a3580 	call	80a358 <__udivsi3>
  81aaf4:	100b883a 	mov	r5,r2
  81aaf8:	01200034 	movhi	r4,32768
  81aafc:	213fffc4 	addi	r4,r4,-1
  81ab00:	080a3580 	call	80a358 <__udivsi3>
  81ab04:	1007883a 	mov	r3,r2
  81ab08:	e0bfff17 	ldw	r2,-4(fp)
  81ab0c:	10c5c83a 	sub	r2,r2,r3
  81ab10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81ab14:	e0bffc17 	ldw	r2,-16(fp)
  81ab18:	10800044 	addi	r2,r2,1
  81ab1c:	e0bffc15 	stw	r2,-16(fp)
  81ab20:	e0fffc17 	ldw	r3,-16(fp)
  81ab24:	e0bffe17 	ldw	r2,-8(fp)
  81ab28:	18bfe616 	blt	r3,r2,81aac4 <__alt_data_end+0xff81aac4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81ab2c:	e0fffd17 	ldw	r3,-12(fp)
  81ab30:	008003f4 	movhi	r2,15
  81ab34:	10909004 	addi	r2,r2,16960
  81ab38:	1885383a 	mul	r2,r3,r2
  81ab3c:	100b883a 	mov	r5,r2
  81ab40:	0100bef4 	movhi	r4,763
  81ab44:	213c2004 	addi	r4,r4,-3968
  81ab48:	080a3580 	call	80a358 <__udivsi3>
  81ab4c:	1007883a 	mov	r3,r2
  81ab50:	e0bfff17 	ldw	r2,-4(fp)
  81ab54:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81ab58:	10bfffc4 	addi	r2,r2,-1
  81ab5c:	103ffe1e 	bne	r2,zero,81ab58 <__alt_data_end+0xff81ab58>
  81ab60:	00000d06 	br	81ab98 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81ab64:	e0fffd17 	ldw	r3,-12(fp)
  81ab68:	008003f4 	movhi	r2,15
  81ab6c:	10909004 	addi	r2,r2,16960
  81ab70:	1885383a 	mul	r2,r3,r2
  81ab74:	100b883a 	mov	r5,r2
  81ab78:	0100bef4 	movhi	r4,763
  81ab7c:	213c2004 	addi	r4,r4,-3968
  81ab80:	080a3580 	call	80a358 <__udivsi3>
  81ab84:	1007883a 	mov	r3,r2
  81ab88:	e0bfff17 	ldw	r2,-4(fp)
  81ab8c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81ab90:	10bfffc4 	addi	r2,r2,-1
  81ab94:	00bffe16 	blt	zero,r2,81ab90 <__alt_data_end+0xff81ab90>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81ab98:	0005883a 	mov	r2,zero
}
  81ab9c:	e037883a 	mov	sp,fp
  81aba0:	dfc00117 	ldw	ra,4(sp)
  81aba4:	df000017 	ldw	fp,0(sp)
  81aba8:	dec00204 	addi	sp,sp,8
  81abac:	f800283a 	ret

0081abb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81abb0:	defffb04 	addi	sp,sp,-20
  81abb4:	dfc00415 	stw	ra,16(sp)
  81abb8:	df000315 	stw	fp,12(sp)
  81abbc:	df000304 	addi	fp,sp,12
  81abc0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81abc4:	d0a00817 	ldw	r2,-32736(gp)
  81abc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81abcc:	00003106 	br	81ac94 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  81abd0:	e0bffd17 	ldw	r2,-12(fp)
  81abd4:	10800217 	ldw	r2,8(r2)
  81abd8:	1009883a 	mov	r4,r2
  81abdc:	080a7d80 	call	80a7d8 <strlen>
  81abe0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81abe4:	e0bffd17 	ldw	r2,-12(fp)
  81abe8:	10c00217 	ldw	r3,8(r2)
  81abec:	e0bffe17 	ldw	r2,-8(fp)
  81abf0:	10bfffc4 	addi	r2,r2,-1
  81abf4:	1885883a 	add	r2,r3,r2
  81abf8:	10800003 	ldbu	r2,0(r2)
  81abfc:	10803fcc 	andi	r2,r2,255
  81ac00:	1080201c 	xori	r2,r2,128
  81ac04:	10bfe004 	addi	r2,r2,-128
  81ac08:	10800bd8 	cmpnei	r2,r2,47
  81ac0c:	1000031e 	bne	r2,zero,81ac1c <alt_find_file+0x6c>
    {
      len -= 1;
  81ac10:	e0bffe17 	ldw	r2,-8(fp)
  81ac14:	10bfffc4 	addi	r2,r2,-1
  81ac18:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81ac1c:	e0bffe17 	ldw	r2,-8(fp)
  81ac20:	e0ffff17 	ldw	r3,-4(fp)
  81ac24:	1885883a 	add	r2,r3,r2
  81ac28:	10800003 	ldbu	r2,0(r2)
  81ac2c:	10803fcc 	andi	r2,r2,255
  81ac30:	1080201c 	xori	r2,r2,128
  81ac34:	10bfe004 	addi	r2,r2,-128
  81ac38:	10800be0 	cmpeqi	r2,r2,47
  81ac3c:	1000081e 	bne	r2,zero,81ac60 <alt_find_file+0xb0>
  81ac40:	e0bffe17 	ldw	r2,-8(fp)
  81ac44:	e0ffff17 	ldw	r3,-4(fp)
  81ac48:	1885883a 	add	r2,r3,r2
  81ac4c:	10800003 	ldbu	r2,0(r2)
  81ac50:	10803fcc 	andi	r2,r2,255
  81ac54:	1080201c 	xori	r2,r2,128
  81ac58:	10bfe004 	addi	r2,r2,-128
  81ac5c:	10000a1e 	bne	r2,zero,81ac88 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  81ac60:	e0bffd17 	ldw	r2,-12(fp)
  81ac64:	10800217 	ldw	r2,8(r2)
  81ac68:	e0fffe17 	ldw	r3,-8(fp)
  81ac6c:	180d883a 	mov	r6,r3
  81ac70:	e17fff17 	ldw	r5,-4(fp)
  81ac74:	1009883a 	mov	r4,r2
  81ac78:	081aed40 	call	81aed4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81ac7c:	1000021e 	bne	r2,zero,81ac88 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81ac80:	e0bffd17 	ldw	r2,-12(fp)
  81ac84:	00000706 	br	81aca4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81ac88:	e0bffd17 	ldw	r2,-12(fp)
  81ac8c:	10800017 	ldw	r2,0(r2)
  81ac90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81ac94:	e0fffd17 	ldw	r3,-12(fp)
  81ac98:	d0a00804 	addi	r2,gp,-32736
  81ac9c:	18bfcc1e 	bne	r3,r2,81abd0 <__alt_data_end+0xff81abd0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81aca0:	0005883a 	mov	r2,zero
}
  81aca4:	e037883a 	mov	sp,fp
  81aca8:	dfc00117 	ldw	ra,4(sp)
  81acac:	df000017 	ldw	fp,0(sp)
  81acb0:	dec00204 	addi	sp,sp,8
  81acb4:	f800283a 	ret

0081acb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81acb8:	defffc04 	addi	sp,sp,-16
  81acbc:	df000315 	stw	fp,12(sp)
  81acc0:	df000304 	addi	fp,sp,12
  81acc4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81acc8:	00bffa04 	movi	r2,-24
  81accc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81acd0:	e03ffd15 	stw	zero,-12(fp)
  81acd4:	00001906 	br	81ad3c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  81acd8:	008020b4 	movhi	r2,130
  81acdc:	10b20304 	addi	r2,r2,-14324
  81ace0:	e0fffd17 	ldw	r3,-12(fp)
  81ace4:	18c00324 	muli	r3,r3,12
  81ace8:	10c5883a 	add	r2,r2,r3
  81acec:	10800017 	ldw	r2,0(r2)
  81acf0:	10000f1e 	bne	r2,zero,81ad30 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81acf4:	008020b4 	movhi	r2,130
  81acf8:	10b20304 	addi	r2,r2,-14324
  81acfc:	e0fffd17 	ldw	r3,-12(fp)
  81ad00:	18c00324 	muli	r3,r3,12
  81ad04:	10c5883a 	add	r2,r2,r3
  81ad08:	e0ffff17 	ldw	r3,-4(fp)
  81ad0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  81ad10:	d0e00c17 	ldw	r3,-32720(gp)
  81ad14:	e0bffd17 	ldw	r2,-12(fp)
  81ad18:	1880020e 	bge	r3,r2,81ad24 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  81ad1c:	e0bffd17 	ldw	r2,-12(fp)
  81ad20:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
  81ad24:	e0bffd17 	ldw	r2,-12(fp)
  81ad28:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  81ad2c:	00000606 	br	81ad48 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81ad30:	e0bffd17 	ldw	r2,-12(fp)
  81ad34:	10800044 	addi	r2,r2,1
  81ad38:	e0bffd15 	stw	r2,-12(fp)
  81ad3c:	e0bffd17 	ldw	r2,-12(fp)
  81ad40:	10800810 	cmplti	r2,r2,32
  81ad44:	103fe41e 	bne	r2,zero,81acd8 <__alt_data_end+0xff81acd8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81ad48:	e0bffe17 	ldw	r2,-8(fp)
}
  81ad4c:	e037883a 	mov	sp,fp
  81ad50:	df000017 	ldw	fp,0(sp)
  81ad54:	dec00104 	addi	sp,sp,4
  81ad58:	f800283a 	ret

0081ad5c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81ad5c:	defffb04 	addi	sp,sp,-20
  81ad60:	df000415 	stw	fp,16(sp)
  81ad64:	df000404 	addi	fp,sp,16
  81ad68:	e13ffe15 	stw	r4,-8(fp)
  81ad6c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81ad70:	e0bfff17 	ldw	r2,-4(fp)
  81ad74:	10840070 	cmpltui	r2,r2,4097
  81ad78:	1000021e 	bne	r2,zero,81ad84 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81ad7c:	00840004 	movi	r2,4096
  81ad80:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81ad84:	e0fffe17 	ldw	r3,-8(fp)
  81ad88:	e0bfff17 	ldw	r2,-4(fp)
  81ad8c:	1885883a 	add	r2,r3,r2
  81ad90:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81ad94:	e0bffe17 	ldw	r2,-8(fp)
  81ad98:	e0bffc15 	stw	r2,-16(fp)
  81ad9c:	00000506 	br	81adb4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81ada0:	e0bffc17 	ldw	r2,-16(fp)
  81ada4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81ada8:	e0bffc17 	ldw	r2,-16(fp)
  81adac:	10800804 	addi	r2,r2,32
  81adb0:	e0bffc15 	stw	r2,-16(fp)
  81adb4:	e0fffc17 	ldw	r3,-16(fp)
  81adb8:	e0bffd17 	ldw	r2,-12(fp)
  81adbc:	18bff836 	bltu	r3,r2,81ada0 <__alt_data_end+0xff81ada0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81adc0:	e0bffe17 	ldw	r2,-8(fp)
  81adc4:	108007cc 	andi	r2,r2,31
  81adc8:	10000226 	beq	r2,zero,81add4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81adcc:	e0bffc17 	ldw	r2,-16(fp)
  81add0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81add4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81add8:	0001883a 	nop
  81addc:	e037883a 	mov	sp,fp
  81ade0:	df000017 	ldw	fp,0(sp)
  81ade4:	dec00104 	addi	sp,sp,4
  81ade8:	f800283a 	ret

0081adec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81adec:	defffe04 	addi	sp,sp,-8
  81adf0:	df000115 	stw	fp,4(sp)
  81adf4:	df000104 	addi	fp,sp,4
  81adf8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81adfc:	e0bfff17 	ldw	r2,-4(fp)
  81ae00:	10bffe84 	addi	r2,r2,-6
  81ae04:	10c00428 	cmpgeui	r3,r2,16
  81ae08:	18001a1e 	bne	r3,zero,81ae74 <alt_exception_cause_generated_bad_addr+0x88>
  81ae0c:	100690ba 	slli	r3,r2,2
  81ae10:	008020b4 	movhi	r2,130
  81ae14:	10ab8904 	addi	r2,r2,-20956
  81ae18:	1885883a 	add	r2,r3,r2
  81ae1c:	10800017 	ldw	r2,0(r2)
  81ae20:	1000683a 	jmp	r2
  81ae24:	0081ae64 	muli	r2,zero,1721
  81ae28:	0081ae64 	muli	r2,zero,1721
  81ae2c:	0081ae74 	movhi	r2,1721
  81ae30:	0081ae74 	movhi	r2,1721
  81ae34:	0081ae74 	movhi	r2,1721
  81ae38:	0081ae64 	muli	r2,zero,1721
  81ae3c:	0081ae6c 	andhi	r2,zero,1721
  81ae40:	0081ae74 	movhi	r2,1721
  81ae44:	0081ae64 	muli	r2,zero,1721
  81ae48:	0081ae64 	muli	r2,zero,1721
  81ae4c:	0081ae74 	movhi	r2,1721
  81ae50:	0081ae64 	muli	r2,zero,1721
  81ae54:	0081ae6c 	andhi	r2,zero,1721
  81ae58:	0081ae74 	movhi	r2,1721
  81ae5c:	0081ae74 	movhi	r2,1721
  81ae60:	0081ae64 	muli	r2,zero,1721
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81ae64:	00800044 	movi	r2,1
  81ae68:	00000306 	br	81ae78 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81ae6c:	0005883a 	mov	r2,zero
  81ae70:	00000106 	br	81ae78 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81ae74:	0005883a 	mov	r2,zero
  }
}
  81ae78:	e037883a 	mov	sp,fp
  81ae7c:	df000017 	ldw	fp,0(sp)
  81ae80:	dec00104 	addi	sp,sp,4
  81ae84:	f800283a 	ret

0081ae88 <atexit>:
  81ae88:	200b883a 	mov	r5,r4
  81ae8c:	000f883a 	mov	r7,zero
  81ae90:	000d883a 	mov	r6,zero
  81ae94:	0009883a 	mov	r4,zero
  81ae98:	081af501 	jmpi	81af50 <__register_exitproc>

0081ae9c <exit>:
  81ae9c:	defffe04 	addi	sp,sp,-8
  81aea0:	000b883a 	mov	r5,zero
  81aea4:	dc000015 	stw	r16,0(sp)
  81aea8:	dfc00115 	stw	ra,4(sp)
  81aeac:	2021883a 	mov	r16,r4
  81aeb0:	081b0680 	call	81b068 <__call_exitprocs>
  81aeb4:	008020b4 	movhi	r2,130
  81aeb8:	10b30104 	addi	r2,r2,-13308
  81aebc:	11000017 	ldw	r4,0(r2)
  81aec0:	20800f17 	ldw	r2,60(r4)
  81aec4:	10000126 	beq	r2,zero,81aecc <exit+0x30>
  81aec8:	103ee83a 	callr	r2
  81aecc:	8009883a 	mov	r4,r16
  81aed0:	081b1e80 	call	81b1e8 <_exit>

0081aed4 <memcmp>:
  81aed4:	01c000c4 	movi	r7,3
  81aed8:	3980192e 	bgeu	r7,r6,81af40 <memcmp+0x6c>
  81aedc:	2144b03a 	or	r2,r4,r5
  81aee0:	11c4703a 	and	r2,r2,r7
  81aee4:	10000f26 	beq	r2,zero,81af24 <memcmp+0x50>
  81aee8:	20800003 	ldbu	r2,0(r4)
  81aeec:	28c00003 	ldbu	r3,0(r5)
  81aef0:	10c0151e 	bne	r2,r3,81af48 <memcmp+0x74>
  81aef4:	31bfff84 	addi	r6,r6,-2
  81aef8:	01ffffc4 	movi	r7,-1
  81aefc:	00000406 	br	81af10 <memcmp+0x3c>
  81af00:	20800003 	ldbu	r2,0(r4)
  81af04:	28c00003 	ldbu	r3,0(r5)
  81af08:	31bfffc4 	addi	r6,r6,-1
  81af0c:	10c00e1e 	bne	r2,r3,81af48 <memcmp+0x74>
  81af10:	21000044 	addi	r4,r4,1
  81af14:	29400044 	addi	r5,r5,1
  81af18:	31fff91e 	bne	r6,r7,81af00 <__alt_data_end+0xff81af00>
  81af1c:	0005883a 	mov	r2,zero
  81af20:	f800283a 	ret
  81af24:	20c00017 	ldw	r3,0(r4)
  81af28:	28800017 	ldw	r2,0(r5)
  81af2c:	18bfee1e 	bne	r3,r2,81aee8 <__alt_data_end+0xff81aee8>
  81af30:	31bfff04 	addi	r6,r6,-4
  81af34:	21000104 	addi	r4,r4,4
  81af38:	29400104 	addi	r5,r5,4
  81af3c:	39bff936 	bltu	r7,r6,81af24 <__alt_data_end+0xff81af24>
  81af40:	303fe91e 	bne	r6,zero,81aee8 <__alt_data_end+0xff81aee8>
  81af44:	003ff506 	br	81af1c <__alt_data_end+0xff81af1c>
  81af48:	10c5c83a 	sub	r2,r2,r3
  81af4c:	f800283a 	ret

0081af50 <__register_exitproc>:
  81af50:	defffa04 	addi	sp,sp,-24
  81af54:	dc000315 	stw	r16,12(sp)
  81af58:	040020b4 	movhi	r16,130
  81af5c:	84330104 	addi	r16,r16,-13308
  81af60:	80c00017 	ldw	r3,0(r16)
  81af64:	dc400415 	stw	r17,16(sp)
  81af68:	dfc00515 	stw	ra,20(sp)
  81af6c:	18805217 	ldw	r2,328(r3)
  81af70:	2023883a 	mov	r17,r4
  81af74:	10003726 	beq	r2,zero,81b054 <__register_exitproc+0x104>
  81af78:	10c00117 	ldw	r3,4(r2)
  81af7c:	010007c4 	movi	r4,31
  81af80:	20c00e16 	blt	r4,r3,81afbc <__register_exitproc+0x6c>
  81af84:	1a000044 	addi	r8,r3,1
  81af88:	8800221e 	bne	r17,zero,81b014 <__register_exitproc+0xc4>
  81af8c:	18c00084 	addi	r3,r3,2
  81af90:	18c7883a 	add	r3,r3,r3
  81af94:	18c7883a 	add	r3,r3,r3
  81af98:	12000115 	stw	r8,4(r2)
  81af9c:	10c7883a 	add	r3,r2,r3
  81afa0:	19400015 	stw	r5,0(r3)
  81afa4:	0005883a 	mov	r2,zero
  81afa8:	dfc00517 	ldw	ra,20(sp)
  81afac:	dc400417 	ldw	r17,16(sp)
  81afb0:	dc000317 	ldw	r16,12(sp)
  81afb4:	dec00604 	addi	sp,sp,24
  81afb8:	f800283a 	ret
  81afbc:	00800034 	movhi	r2,0
  81afc0:	10800004 	addi	r2,r2,0
  81afc4:	10002626 	beq	r2,zero,81b060 <__register_exitproc+0x110>
  81afc8:	01006404 	movi	r4,400
  81afcc:	d9400015 	stw	r5,0(sp)
  81afd0:	d9800115 	stw	r6,4(sp)
  81afd4:	d9c00215 	stw	r7,8(sp)
  81afd8:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  81afdc:	d9400017 	ldw	r5,0(sp)
  81afe0:	d9800117 	ldw	r6,4(sp)
  81afe4:	d9c00217 	ldw	r7,8(sp)
  81afe8:	10001d26 	beq	r2,zero,81b060 <__register_exitproc+0x110>
  81afec:	81000017 	ldw	r4,0(r16)
  81aff0:	10000115 	stw	zero,4(r2)
  81aff4:	02000044 	movi	r8,1
  81aff8:	22405217 	ldw	r9,328(r4)
  81affc:	0007883a 	mov	r3,zero
  81b000:	12400015 	stw	r9,0(r2)
  81b004:	20805215 	stw	r2,328(r4)
  81b008:	10006215 	stw	zero,392(r2)
  81b00c:	10006315 	stw	zero,396(r2)
  81b010:	883fde26 	beq	r17,zero,81af8c <__alt_data_end+0xff81af8c>
  81b014:	18c9883a 	add	r4,r3,r3
  81b018:	2109883a 	add	r4,r4,r4
  81b01c:	1109883a 	add	r4,r2,r4
  81b020:	21802215 	stw	r6,136(r4)
  81b024:	01800044 	movi	r6,1
  81b028:	12406217 	ldw	r9,392(r2)
  81b02c:	30cc983a 	sll	r6,r6,r3
  81b030:	4992b03a 	or	r9,r9,r6
  81b034:	12406215 	stw	r9,392(r2)
  81b038:	21c04215 	stw	r7,264(r4)
  81b03c:	01000084 	movi	r4,2
  81b040:	893fd21e 	bne	r17,r4,81af8c <__alt_data_end+0xff81af8c>
  81b044:	11006317 	ldw	r4,396(r2)
  81b048:	218cb03a 	or	r6,r4,r6
  81b04c:	11806315 	stw	r6,396(r2)
  81b050:	003fce06 	br	81af8c <__alt_data_end+0xff81af8c>
  81b054:	18805304 	addi	r2,r3,332
  81b058:	18805215 	stw	r2,328(r3)
  81b05c:	003fc606 	br	81af78 <__alt_data_end+0xff81af78>
  81b060:	00bfffc4 	movi	r2,-1
  81b064:	003fd006 	br	81afa8 <__alt_data_end+0xff81afa8>

0081b068 <__call_exitprocs>:
  81b068:	defff504 	addi	sp,sp,-44
  81b06c:	df000915 	stw	fp,36(sp)
  81b070:	dd400615 	stw	r21,24(sp)
  81b074:	dc800315 	stw	r18,12(sp)
  81b078:	dfc00a15 	stw	ra,40(sp)
  81b07c:	ddc00815 	stw	r23,32(sp)
  81b080:	dd800715 	stw	r22,28(sp)
  81b084:	dd000515 	stw	r20,20(sp)
  81b088:	dcc00415 	stw	r19,16(sp)
  81b08c:	dc400215 	stw	r17,8(sp)
  81b090:	dc000115 	stw	r16,4(sp)
  81b094:	d9000015 	stw	r4,0(sp)
  81b098:	2839883a 	mov	fp,r5
  81b09c:	04800044 	movi	r18,1
  81b0a0:	057fffc4 	movi	r21,-1
  81b0a4:	008020b4 	movhi	r2,130
  81b0a8:	10b30104 	addi	r2,r2,-13308
  81b0ac:	12000017 	ldw	r8,0(r2)
  81b0b0:	45005217 	ldw	r20,328(r8)
  81b0b4:	44c05204 	addi	r19,r8,328
  81b0b8:	a0001c26 	beq	r20,zero,81b12c <__call_exitprocs+0xc4>
  81b0bc:	a0800117 	ldw	r2,4(r20)
  81b0c0:	15ffffc4 	addi	r23,r2,-1
  81b0c4:	b8000d16 	blt	r23,zero,81b0fc <__call_exitprocs+0x94>
  81b0c8:	14000044 	addi	r16,r2,1
  81b0cc:	8421883a 	add	r16,r16,r16
  81b0d0:	8421883a 	add	r16,r16,r16
  81b0d4:	84402004 	addi	r17,r16,128
  81b0d8:	a463883a 	add	r17,r20,r17
  81b0dc:	a421883a 	add	r16,r20,r16
  81b0e0:	e0001e26 	beq	fp,zero,81b15c <__call_exitprocs+0xf4>
  81b0e4:	80804017 	ldw	r2,256(r16)
  81b0e8:	e0801c26 	beq	fp,r2,81b15c <__call_exitprocs+0xf4>
  81b0ec:	bdffffc4 	addi	r23,r23,-1
  81b0f0:	843fff04 	addi	r16,r16,-4
  81b0f4:	8c7fff04 	addi	r17,r17,-4
  81b0f8:	bd7ff91e 	bne	r23,r21,81b0e0 <__alt_data_end+0xff81b0e0>
  81b0fc:	00800034 	movhi	r2,0
  81b100:	10800004 	addi	r2,r2,0
  81b104:	10000926 	beq	r2,zero,81b12c <__call_exitprocs+0xc4>
  81b108:	a0800117 	ldw	r2,4(r20)
  81b10c:	1000301e 	bne	r2,zero,81b1d0 <__call_exitprocs+0x168>
  81b110:	a0800017 	ldw	r2,0(r20)
  81b114:	10003226 	beq	r2,zero,81b1e0 <__call_exitprocs+0x178>
  81b118:	a009883a 	mov	r4,r20
  81b11c:	98800015 	stw	r2,0(r19)
  81b120:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  81b124:	9d000017 	ldw	r20,0(r19)
  81b128:	a03fe41e 	bne	r20,zero,81b0bc <__alt_data_end+0xff81b0bc>
  81b12c:	dfc00a17 	ldw	ra,40(sp)
  81b130:	df000917 	ldw	fp,36(sp)
  81b134:	ddc00817 	ldw	r23,32(sp)
  81b138:	dd800717 	ldw	r22,28(sp)
  81b13c:	dd400617 	ldw	r21,24(sp)
  81b140:	dd000517 	ldw	r20,20(sp)
  81b144:	dcc00417 	ldw	r19,16(sp)
  81b148:	dc800317 	ldw	r18,12(sp)
  81b14c:	dc400217 	ldw	r17,8(sp)
  81b150:	dc000117 	ldw	r16,4(sp)
  81b154:	dec00b04 	addi	sp,sp,44
  81b158:	f800283a 	ret
  81b15c:	a0800117 	ldw	r2,4(r20)
  81b160:	80c00017 	ldw	r3,0(r16)
  81b164:	10bfffc4 	addi	r2,r2,-1
  81b168:	15c01426 	beq	r2,r23,81b1bc <__call_exitprocs+0x154>
  81b16c:	80000015 	stw	zero,0(r16)
  81b170:	183fde26 	beq	r3,zero,81b0ec <__alt_data_end+0xff81b0ec>
  81b174:	95c8983a 	sll	r4,r18,r23
  81b178:	a0806217 	ldw	r2,392(r20)
  81b17c:	a5800117 	ldw	r22,4(r20)
  81b180:	2084703a 	and	r2,r4,r2
  81b184:	10000b26 	beq	r2,zero,81b1b4 <__call_exitprocs+0x14c>
  81b188:	a0806317 	ldw	r2,396(r20)
  81b18c:	2088703a 	and	r4,r4,r2
  81b190:	20000c1e 	bne	r4,zero,81b1c4 <__call_exitprocs+0x15c>
  81b194:	89400017 	ldw	r5,0(r17)
  81b198:	d9000017 	ldw	r4,0(sp)
  81b19c:	183ee83a 	callr	r3
  81b1a0:	a0800117 	ldw	r2,4(r20)
  81b1a4:	15bfbf1e 	bne	r2,r22,81b0a4 <__alt_data_end+0xff81b0a4>
  81b1a8:	98800017 	ldw	r2,0(r19)
  81b1ac:	153fcf26 	beq	r2,r20,81b0ec <__alt_data_end+0xff81b0ec>
  81b1b0:	003fbc06 	br	81b0a4 <__alt_data_end+0xff81b0a4>
  81b1b4:	183ee83a 	callr	r3
  81b1b8:	003ff906 	br	81b1a0 <__alt_data_end+0xff81b1a0>
  81b1bc:	a5c00115 	stw	r23,4(r20)
  81b1c0:	003feb06 	br	81b170 <__alt_data_end+0xff81b170>
  81b1c4:	89000017 	ldw	r4,0(r17)
  81b1c8:	183ee83a 	callr	r3
  81b1cc:	003ff406 	br	81b1a0 <__alt_data_end+0xff81b1a0>
  81b1d0:	a0800017 	ldw	r2,0(r20)
  81b1d4:	a027883a 	mov	r19,r20
  81b1d8:	1029883a 	mov	r20,r2
  81b1dc:	003fb606 	br	81b0b8 <__alt_data_end+0xff81b0b8>
  81b1e0:	0005883a 	mov	r2,zero
  81b1e4:	003ffb06 	br	81b1d4 <__alt_data_end+0xff81b1d4>

0081b1e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81b1e8:	defffd04 	addi	sp,sp,-12
  81b1ec:	df000215 	stw	fp,8(sp)
  81b1f0:	df000204 	addi	fp,sp,8
  81b1f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81b1f8:	0001883a 	nop
  81b1fc:	e0bfff17 	ldw	r2,-4(fp)
  81b200:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81b204:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81b208:	10000226 	beq	r2,zero,81b214 <_exit+0x2c>
    ALT_SIM_FAIL();
  81b20c:	002af070 	cmpltui	zero,zero,43969
  81b210:	00000106 	br	81b218 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81b214:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81b218:	003fff06 	br	81b218 <__alt_data_end+0xff81b218>
