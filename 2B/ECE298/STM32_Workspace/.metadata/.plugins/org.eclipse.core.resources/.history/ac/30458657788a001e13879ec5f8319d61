/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
static void ADC_Select_CH(int CH);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B) {
	uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
	int Abit0 = (DIGITA_VAL) & 1;  	// extract Abit0 of the 4-bit value
	int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
	int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
	int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value

	uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
	int Bbit0 = (DIGITB_VAL) & 1;  	// extract Bbit0 of the 4-bit value
	int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
	int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
	int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value

	if (Abit0 == (0)) {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);

	}
	if (Abit1 == (0)) {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A1_Pin, GPIO_PIN_SET);

	}
	if (Abit2 == (0)) {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);

	}
	if (Abit3 == (0)) {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A3_Pin, GPIO_PIN_SET);

	}

	if (Bbit0 == (0)) {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);

	}
	if (Bbit1 == (0)) {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);

	}
	if (Bbit2 == (0)) {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);

	}
	if (Bbit3 == (0)) {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B3_Pin, GPIO_PIN_SET);

	}
}
void ADC_Select_CH(int CH) {
	ADC_ChannelConfTypeDef sConfig = { 0 };
	switch (CH) {
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 8:
		sConfig.Channel = ADC_CHANNEL_8;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 9:
		sConfig.Channel = ADC_CHANNEL_9;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 10:
		sConfig.Channel = ADC_CHANNEL_10;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 11:
		sConfig.Channel = ADC_CHANNEL_11;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 12:
		sConfig.Channel = ADC_CHANNEL_12;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 13:
		sConfig.Channel = ADC_CHANNEL_13;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 14:
		sConfig.Channel = ADC_CHANNEL_14;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	case 15:
		sConfig.Channel = ADC_CHANNEL_15;
		sConfig.Rank = 1;
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
			Error_Handler();
		}
		break;
	}
}
volatile uint8_t hcsr04_Rx_flag = 0;
volatile uint8_t first_edge = 0;
volatile uint16_t time_edge1 = 0;
volatile uint16_t time_edge2 = 0;
volatile uint16_t rpm_tick_count = 0;
volatile uint8_t clock_secs = 0;
volatile int trig = 0;
int8_t MotorInputs[4];
int8_t WallClkInputs[9];

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint8_t txd_msg_buffer[128] = { 0 };
	uint8_t rxd_msg_buffer[128] = { 0 };
	uint16_t time_diff = 0;
	uint16_t distance = 0;


	void HCSR04_TRIG_PULSE(void) {
			HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
			for (int j = 0; j != 15; j=j+1) {};
			HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
		}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_USART6_UART_Init();
  MX_TIM5_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim3);
	HAL_TIM_Base_Init(&htim2);
	HAL_TIM_Base_Start(&htim2);
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);

	// start up TIMER 5 for one second interrupts

	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	int TIM1_Ch2_DCVAL = 500;
	int TIM1_CH2_STEP = 20;

	HAL_TIM_Base_Start(&htim1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	TIM1->PSC = 16 - 1;
	TIM1->ARR = 20000 - 1;
	TIM1->CCR1 = TIM1_Ch2_DCVAL;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int counter = 0;
	//HCSR04_TRIG_PULSE();

	// SETUP MODE //

	TIM3->CCR1 = 0;
	TIM3->CCR3 = 0;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

	sprintf((char*) txd_msg_buffer, "\r\nSETUP MODE\r\n");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);

	//Motor Inputs
	sprintf((char*) txd_msg_buffer, "INTLET MOTOR SPEED PWM (option 0-3):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	MotorInputs[0] = *rxd_msg_buffer - '0';

	sprintf((char*) txd_msg_buffer, "ZONE 1 MOTOR SPEED PWM (option 0-3):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	MotorInputs[1] = *rxd_msg_buffer - '0';

	sprintf((char*) txd_msg_buffer, "ZONE 2 MOTOR SPEED PWM (option 0-3):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	MotorInputs[2] = *rxd_msg_buffer - '0';

	sprintf((char*) txd_msg_buffer, "ZONE 3 MOTOR SPEED PWM (option 0-3):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	MotorInputs[3] = *rxd_msg_buffer - '0';

	int recvd;
	//Wall Clock Inputs
	sprintf((char*) txd_msg_buffer, "CURRENT WALL CLOCK TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[0] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "INLET WALL CLOCK START TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[1] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "INLET WALL CLOCK STOP TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[2] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "ZONE 1 WALL CLOCK START TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[3] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "ZONE 1 WALL CLOCK STOP TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[4] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "ZONE 2 WALL CLOCK START TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[5] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "ZONE 2 WALL CLOCK STOP TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[6] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "ZONE 3 WALL CLOCK START TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[7] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');
	sprintf((char*) txd_msg_buffer, "ZONE 3 WALL CLOCK STOP TIME (0-23):");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
		if (recvd >= 0 && recvd <= 23)
			break;
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);
	WallClkInputs[8] = (rxd_msg_buffer[0] - '0') * 10
			+ (rxd_msg_buffer[1] - '0');

	while (HAL_GPIO_ReadPin(GPIOC, B1_Pin)) {
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
		HAL_Delay(250);
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
		HAL_Delay(250);
	}

	// RUN MODE //

	HAL_TIM_Base_Start_IT(&htim5);

	// Calculate the time elapsed for each
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	int w_clk_mins = WallClkInputs[0] / 10;
	int w_clk_secs = ((WallClkInputs[0] % 10) * 60) / 10;
	int time_1 = (WallClkInputs[2] - WallClkInputs[1]) / 10;
	int time_2 = (WallClkInputs[4] - WallClkInputs[3]) / 10;
	int time_3 = (WallClkInputs[6] - WallClkInputs[5]) / 10;
	int time_4 = (WallClkInputs[8] - WallClkInputs[7]) / 10;
	int wall_clock = WallClkInputs[0];
	int res_percent = 0;
	uint8_t tens = 0; // Mask to keep only 4 bits
	uint8_t ones = 0; // Mask to keep only 4 bits
	int print_once = 0;
	int rotations = 0;
	int percentDist = 0;
	uint16_t rpm = 0;
	int Inlet = 0;
	int Z1 = 0;
	int Z2 = 0;
	int Z3 = 0;

	char zone[6];
	strcpy(zone, "N/A");
	char mode[7];
	strcpy(mode, "N/A");

	sprintf((char*) txd_msg_buffer,
			"Wall Clock Time    Zone/Inlet    Motor Speed PWM    Motor RPM    Water Reservoir Depth\r\n");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
			100);

	while (1) {
		HAL_Delay(50);
		ADC_Select_CH(9);
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, 1000);
		uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
		HAL_ADC_Stop(&hadc1);

			hcsr04_Rx_flag = 0;
			first_edge = 0;
			time_edge1 = 0;
			time_edge2 = 0;
			time_diff = 0;
			distance = 0;
			HCSR04_TRIG_PULSE();
			while (hcsr04_Rx_flag == 0) {
			};
			distance = (time_edge2 - time_edge1) / 58;
		percentDist =
		tens = (percentDist / 10) & 0x0F; // Mask to keep only 4 bits
		ones = (percentDist % 10) & 0x0F; // Mask to keep only 4 bits
		DIGITS_Display(tens, ones);
		if (percentDist == 0){
			TIM3->CCR1 = 0;
			TIM->CCR3 = 0;
			sprintf((char*) txd_msg_buffer, "RESERVOIR IS EMPTY!");
						HAL_UART_Transmit(&huart6, txd_msg_buffer,
								strlen((char*) txd_msg_buffer), 100);
						break;
		}
		if (WallClkInputs[1] == wall_clock || Inlet) {
			Inlet = 1;
			strcpy(zone, "INLET");
			TIM1->CCR2 = 500;
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
			if (MotorInputs[0] == 0) {
				strcpy(mode, "MANUAL");
				TIM3->CCR1 = 1200 + (ADC_CH9 * 3);
			} else if (MotorInputs[0] == 1) {
				strcpy(mode, "60");
				TIM3->CCR1 = 1200;
			} else if (MotorInputs[0] == 2) {
				strcpy(mode, "80");
				TIM3->CCR1 = 1600;
			} else if (MotorInputs[0] == 3) {
				strcpy(mode, "99");
				TIM3->CCR1 = 1980;
			}
		} else if (WallClkInputs[3] == wall_clock || Z1) {
			Z1 = 1;
			TIM1->CCR2 = 2000;
			strcpy(zone, "1");
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
			if (MotorInputs[1] == 0) {
				strcpy(mode, "MANUAL");
				TIM3->CCR3 = 1200 + (ADC_CH9 * 3);
			} else if (MotorInputs[1] == 1) {
				strcpy(mode, "60");
				TIM3->CCR3 = 1200;
			} else if (MotorInputs[1] == 2) {
				strcpy(mode, "80");
				TIM3->CCR3 = 1600;
			} else if (MotorInputs[1] == 3) {
				strcpy(mode, "99");
				TIM3->CCR3 = 1980;
			}
		} else if (WallClkInputs[5] == wall_clock || Z2) {
			Z2 = 1;
			TIM1->CCR2 = 1500;
			strcpy(zone, "2");
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
			if (MotorInputs[2] == 0) {
				strcpy(mode, "MANUAL");
				TIM3->CCR3 = 1200 + (ADC_CH9 * 3);
			} else if (MotorInputs[2] == 1) {
				strcpy(mode, "60");
				TIM3->CCR3 = 1200;
			} else if (MotorInputs[2] == 2) {
				strcpy(mode, "80");
				TIM3->CCR3 = 1600;
			} else if (MotorInputs[2] == 3) {
				strcpy(mode, "99");
				TIM3->CCR3 = 1980;
			}
		} else if (WallClkInputs[7] == wall_clock || Z3) {
			Z3 = 1;
			TIM1->CCR2 = 1000;
			strcpy(zone, "3");
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
			if (MotorInputs[3] == 0) {
				strcpy(mode, "MANUAL");
				TIM3->CCR3 = 1200 + (ADC_CH9 * 3);
			} else if (MotorInputs[3] == 1) {
				strcpy(mode, "60");
				TIM3->CCR3 = 1200;
			} else if (MotorInputs[3] == 2) {
				strcpy(mode, "80");
				TIM3->CCR3 = 1600;
			} else if (MotorInputs[3] == 3) {
				strcpy(mode, "99");
				TIM3->CCR3 = 1980;
			}
		} else {
			TIM1->CCR2 = 2500;
			TIM3->CCR1 = 0;
			TIM3->CCR3 = 0;
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
			rpm_tick_count = 0;
			strcpy(zone, "N/A");
			strcpy(mode, "N/A");
		}
		if (WallClkInputs[2] == wall_clock)
			Inlet = 0;
		if (WallClkInputs[4] == wall_clock)
			Z1 = 0;
		if (WallClkInputs[6] == wall_clock)
			Z2 = 0;
		if (WallClkInputs[8] == wall_clock)
			Z3 = 0;
		if (clock_secs % 6 == 0 && clock_secs != 0 && print_once != 1) {
			rpm = rpm_tick_count * 0.5;
			sprintf((char*) txd_msg_buffer, "	%d:%d		%s		%s		%d		%d\r\n",
					w_clk_mins, w_clk_secs, zone, mode, rpm, distance);
			HAL_UART_Transmit(&huart6, txd_msg_buffer,
					strlen((char*) txd_msg_buffer), 100);
			wall_clock++;
			if (wall_clock == 24)
				wall_clock = 0;
			if (wall_clock == WallClkInputs[0])
				break;
			w_clk_mins = wall_clock / 10;
			w_clk_secs = ((wall_clock % 10) * 60) / 10;
			rpm_tick_count = 0;
			TIM3->CCR1 = 0;
			TIM3->CCR3 = 0;
			print_once = 1;
		}
		if (clock_secs % 6 != 0) {
			print_once = 0;
		}

	}
	HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);

//	  hcsr04_Rx_flag = 0;
//	  first_edge = 0;
//	  time_edge1 = 0;
//	  time_edge2 = 0;
//	  time_diff = 0;
//	  distance = 0;
//
//	  HCSR04_TRIG_PULSE();
//	  while (hcsr04_Rx_flag == 0) {};
//
//	  time_diff = time_edge2 - time_edge1;
//	  sprintf((char*)txd_msg_buffer, "ECHO Pulse Width (usec): %d\r\n", time_diff);
//	  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 100);
//
//	  // calc distance
//	  distance = time_diff / 58;
//	  sprintf((char*)txd_msg_buffer, "DISTANCE TO OBJECT: %d\r\n", distance);
//	  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 100);

//	  counter = 1200;
//	  while (counter <= 2000) {
//		  TIM3 -> CCR3 = 0;
//		  printf("Vals: %d\n", TIM3 -> CCR1 );
//		  sprintf((char*)txd_msg_buffer, "RPM tick count: %d\r\n", rpm_tick_count);
//		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 100);
//		  TIM3 -> CCR1 = counter;
//		  counter += 200;
//		  HAL_Delay(5000);
//	  }
//	  counter = 1200;
//	  while (counter <= 2000) {
//			  TIM3 -> CCR1 = 0;
//			  printf("Vals: %d\n", TIM3 -> CCR3);
//			  sprintf((char*)txd_msg_buffer, "RPM tick count: %d\r\n", rpm_tick_count);
//			  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 100);
//			  TIM3 -> CCR3 = counter;
//			  counter += 200;
//			  HAL_Delay(5000);
//		}

//	 for (counter = 0; counter <= 99; counter++) {
//		 	 uint8_t tens = counter / 10;
//		 	uint8_t ones = counter % 10;
//
//	        // Convert the binary values to decimal values
//	        uint8_t decimalTens = tens & 0x0F; // Mask to keep only 4 bits
//	        uint8_t decimalOnes = ones & 0x0F; // Mask to keep only 4 bits
//
//	        // Print the results
//
//		int hours = clock_secs / 3600;
//		int mins = clock_secs / 60;
//		int secs = clock_secs;
//		sprintf((char*) txd_msg_buffer,
//				"Clock Time (Real) \r\nHours  Mins  Secs\r\n %d  :  %d  :  %d\r\n",
//				hours, mins, secs);
//		HAL_UART_Transmit(&huart6, txd_msg_buffer,
//				strlen((char*) txd_msg_buffer), 100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 16-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 20000-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 16-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65536-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 16-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2000-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1200-1;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.Pulse = 0;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 16000-1;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1000-1;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 9600;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin|LD2_Pin|LED_BLUE_Pin|LED_GREEN_Pin
                          |LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin|DIGIT_A0_Pin|HCSR04_TRIG_Pin|DIGIT_A2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DIGIT_A3_Pin LD2_Pin LED_BLUE_Pin LED_GREEN_Pin
                           LED_RED_Pin */
  GPIO_InitStruct.Pin = DIGIT_A3_Pin|LD2_Pin|LED_BLUE_Pin|LED_GREEN_Pin
                          |LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DIGIT_A1_Pin DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin */
  GPIO_InitStruct.Pin = DIGIT_A1_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|DIGIT_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : DIGIT_B3_Pin DIGIT_A0_Pin HCSR04_TRIG_Pin DIGIT_A2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B3_Pin|DIGIT_A0_Pin|HCSR04_TRIG_Pin|DIGIT_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == RPM_TICK_Pin) {
		rpm_tick_count += 1;
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM2) {

		if (htim->Channel == 1) {
			if (first_edge == 0) {
				time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
				first_edge = 1;
			} else {
				time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
				__HAL_TIM_SET_COUNTER(htim, 0);
				hcsr04_Rx_flag = 1;
				//first_edge = 0;
			}
		}
	}
}
/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
//void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM5) {
		clock_secs += 1; // this could be a variable for seconds etc.
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
