
Embedded_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000808c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008524  08008524  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800852c  0800852c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000005c  08008590  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008590  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb09  00000000  00000000  00020112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe8  00000000  00000000  0002ec1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abd  00000000  00000000  000319a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016de9  00000000  00000000  0003245d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001030f  00000000  00000000  00049246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000977bb  00000000  00000000  00059555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fe4  00000000  00000000  000f0d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f4cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008214 	.word	0x08008214

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08008214 	.word	0x08008214

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <DIGITS_Display>:
static void ADC_Select_CH(int CH);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DIGITS_Display(uint8_t DIGIT_A, uint8_t DIGIT_B) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
	uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int Abit0 = (DIGITA_VAL) & 1;  	// extract Abit0 of the 4-bit value
 8000dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 8000ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
	int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 8000dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
	int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 8000df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]

	uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	76fb      	strb	r3, [r7, #27]
	int Bbit0 = (DIGITB_VAL) & 1;  	// extract Bbit0 of the 4-bit value
 8000e0e:	7efb      	ldrb	r3, [r7, #27]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
	int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 8000e16:	7efb      	ldrb	r3, [r7, #27]
 8000e18:	085b      	lsrs	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
	int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 8000e22:	7efb      	ldrb	r3, [r7, #27]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
	int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 8000e2e:	7efb      	ldrb	r3, [r7, #27]
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]

	if (Abit0 == (0)) {
 8000e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d105      	bne.n	8000e4c <DIGITS_Display+0x94>
		HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	483c      	ldr	r0, [pc, #240]	; (8000f38 <DIGITS_Display+0x180>)
 8000e46:	f003 fbf3 	bl	8004630 <HAL_GPIO_WritePin>
 8000e4a:	e004      	b.n	8000e56 <DIGITS_Display+0x9e>
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	4839      	ldr	r0, [pc, #228]	; (8000f38 <DIGITS_Display+0x180>)
 8000e52:	f003 fbed 	bl	8004630 <HAL_GPIO_WritePin>

	}
	if (Abit1 == (0)) {
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d106      	bne.n	8000e6a <DIGITS_Display+0xb2>
		HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e62:	4836      	ldr	r0, [pc, #216]	; (8000f3c <DIGITS_Display+0x184>)
 8000e64:	f003 fbe4 	bl	8004630 <HAL_GPIO_WritePin>
 8000e68:	e005      	b.n	8000e76 <DIGITS_Display+0xbe>
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_A1_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	4832      	ldr	r0, [pc, #200]	; (8000f3c <DIGITS_Display+0x184>)
 8000e72:	f003 fbdd 	bl	8004630 <HAL_GPIO_WritePin>

	}
	if (Abit2 == (0)) {
 8000e76:	6a3b      	ldr	r3, [r7, #32]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <DIGITS_Display+0xd2>
		HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e82:	482d      	ldr	r0, [pc, #180]	; (8000f38 <DIGITS_Display+0x180>)
 8000e84:	f003 fbd4 	bl	8004630 <HAL_GPIO_WritePin>
 8000e88:	e005      	b.n	8000e96 <DIGITS_Display+0xde>
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_A2_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	4829      	ldr	r0, [pc, #164]	; (8000f38 <DIGITS_Display+0x180>)
 8000e92:	f003 fbcd 	bl	8004630 <HAL_GPIO_WritePin>

	}
	if (Abit3 == (0)) {
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <DIGITS_Display+0xf0>
		HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4827      	ldr	r0, [pc, #156]	; (8000f40 <DIGITS_Display+0x188>)
 8000ea2:	f003 fbc5 	bl	8004630 <HAL_GPIO_WritePin>
 8000ea6:	e004      	b.n	8000eb2 <DIGITS_Display+0xfa>
	} else {
		HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4824      	ldr	r0, [pc, #144]	; (8000f40 <DIGITS_Display+0x188>)
 8000eae:	f003 fbbf 	bl	8004630 <HAL_GPIO_WritePin>

	}

	if (Bbit0 == (0)) {
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d106      	bne.n	8000ec6 <DIGITS_Display+0x10e>
		HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	481f      	ldr	r0, [pc, #124]	; (8000f3c <DIGITS_Display+0x184>)
 8000ec0:	f003 fbb6 	bl	8004630 <HAL_GPIO_WritePin>
 8000ec4:	e005      	b.n	8000ed2 <DIGITS_Display+0x11a>
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B0_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	481b      	ldr	r0, [pc, #108]	; (8000f3c <DIGITS_Display+0x184>)
 8000ece:	f003 fbaf 	bl	8004630 <HAL_GPIO_WritePin>

	}
	if (Bbit1 == (0)) {
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <DIGITS_Display+0x12e>
		HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <DIGITS_Display+0x184>)
 8000ee0:	f003 fba6 	bl	8004630 <HAL_GPIO_WritePin>
 8000ee4:	e005      	b.n	8000ef2 <DIGITS_Display+0x13a>
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B1_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <DIGITS_Display+0x184>)
 8000eee:	f003 fb9f 	bl	8004630 <HAL_GPIO_WritePin>

	}
	if (Bbit2 == (0)) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d106      	bne.n	8000f06 <DIGITS_Display+0x14e>
		HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efe:	480f      	ldr	r0, [pc, #60]	; (8000f3c <DIGITS_Display+0x184>)
 8000f00:	f003 fb96 	bl	8004630 <HAL_GPIO_WritePin>
 8000f04:	e005      	b.n	8000f12 <DIGITS_Display+0x15a>
	} else {
		HAL_GPIO_WritePin(GPIOC, DIGIT_B2_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <DIGITS_Display+0x184>)
 8000f0e:	f003 fb8f 	bl	8004630 <HAL_GPIO_WritePin>

	}
	if (Bbit3 == (0)) {
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <DIGITS_Display+0x16c>
		HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <DIGITS_Display+0x180>)
 8000f1e:	f003 fb87 	bl	8004630 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);

	}
}
 8000f22:	e004      	b.n	8000f2e <DIGITS_Display+0x176>
		HAL_GPIO_WritePin(GPIOB, DIGIT_B3_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2120      	movs	r1, #32
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <DIGITS_Display+0x180>)
 8000f2a:	f003 fb81 	bl	8004630 <HAL_GPIO_WritePin>
}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020000 	.word	0x40020000

08000f44 <ADC_Select_CH>:
void ADC_Select_CH(int CH) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
	switch (CH) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	f200 814b 	bhi.w	80011f8 <ADC_Select_CH+0x2b4>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <ADC_Select_CH+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000fa9 	.word	0x08000fa9
 8000f6c:	08000fcb 	.word	0x08000fcb
 8000f70:	08000fed 	.word	0x08000fed
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	08001031 	.word	0x08001031
 8000f7c:	08001053 	.word	0x08001053
 8000f80:	08001075 	.word	0x08001075
 8000f84:	08001097 	.word	0x08001097
 8000f88:	080010b9 	.word	0x080010b9
 8000f8c:	080010db 	.word	0x080010db
 8000f90:	080010fb 	.word	0x080010fb
 8000f94:	0800111b 	.word	0x0800111b
 8000f98:	0800113b 	.word	0x0800113b
 8000f9c:	0800115b 	.word	0x0800115b
 8000fa0:	0800117b 	.word	0x0800117b
 8000fa4:	0800119b 	.word	0x0800119b
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4892      	ldr	r0, [pc, #584]	; (8001200 <ADC_Select_CH+0x2bc>)
 8000fb8:	f002 fddc 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80fb 	beq.w	80011ba <ADC_Select_CH+0x276>
			Error_Handler();
 8000fc4:	f002 f8b4 	bl	8003130 <Error_Handler>
		}
		break;
 8000fc8:	e0f7      	b.n	80011ba <ADC_Select_CH+0x276>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4889      	ldr	r0, [pc, #548]	; (8001200 <ADC_Select_CH+0x2bc>)
 8000fda:	f002 fdcb 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80ec 	beq.w	80011be <ADC_Select_CH+0x27a>
			Error_Handler();
 8000fe6:	f002 f8a3 	bl	8003130 <Error_Handler>
		}
		break;
 8000fea:	e0e8      	b.n	80011be <ADC_Select_CH+0x27a>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4881      	ldr	r0, [pc, #516]	; (8001200 <ADC_Select_CH+0x2bc>)
 8000ffc:	f002 fdba 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80dd 	beq.w	80011c2 <ADC_Select_CH+0x27e>
			Error_Handler();
 8001008:	f002 f892 	bl	8003130 <Error_Handler>
		}
		break;
 800100c:	e0d9      	b.n	80011c2 <ADC_Select_CH+0x27e>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 800100e:	2303      	movs	r3, #3
 8001010:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	4878      	ldr	r0, [pc, #480]	; (8001200 <ADC_Select_CH+0x2bc>)
 800101e:	f002 fda9 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80ce 	beq.w	80011c6 <ADC_Select_CH+0x282>
			Error_Handler();
 800102a:	f002 f881 	bl	8003130 <Error_Handler>
		}
		break;
 800102e:	e0ca      	b.n	80011c6 <ADC_Select_CH+0x282>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 8001030:	2304      	movs	r3, #4
 8001032:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4619      	mov	r1, r3
 800103e:	4870      	ldr	r0, [pc, #448]	; (8001200 <ADC_Select_CH+0x2bc>)
 8001040:	f002 fd98 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80bf 	beq.w	80011ca <ADC_Select_CH+0x286>
			Error_Handler();
 800104c:	f002 f870 	bl	8003130 <Error_Handler>
		}
		break;
 8001050:	e0bb      	b.n	80011ca <ADC_Select_CH+0x286>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 8001052:	2305      	movs	r3, #5
 8001054:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	4867      	ldr	r0, [pc, #412]	; (8001200 <ADC_Select_CH+0x2bc>)
 8001062:	f002 fd87 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b0 	beq.w	80011ce <ADC_Select_CH+0x28a>
			Error_Handler();
 800106e:	f002 f85f 	bl	8003130 <Error_Handler>
		}
		break;
 8001072:	e0ac      	b.n	80011ce <ADC_Select_CH+0x28a>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 8001074:	2306      	movs	r3, #6
 8001076:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4619      	mov	r1, r3
 8001082:	485f      	ldr	r0, [pc, #380]	; (8001200 <ADC_Select_CH+0x2bc>)
 8001084:	f002 fd76 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80a1 	beq.w	80011d2 <ADC_Select_CH+0x28e>
			Error_Handler();
 8001090:	f002 f84e 	bl	8003130 <Error_Handler>
		}
		break;
 8001094:	e09d      	b.n	80011d2 <ADC_Select_CH+0x28e>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 8001096:	2307      	movs	r3, #7
 8001098:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	4856      	ldr	r0, [pc, #344]	; (8001200 <ADC_Select_CH+0x2bc>)
 80010a6:	f002 fd65 	bl	8003b74 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8092 	beq.w	80011d6 <ADC_Select_CH+0x292>
			Error_Handler();
 80010b2:	f002 f83d 	bl	8003130 <Error_Handler>
		}
		break;
 80010b6:	e08e      	b.n	80011d6 <ADC_Select_CH+0x292>
	case 8:
		sConfig.Channel = ADC_CHANNEL_8;
 80010b8:	2308      	movs	r3, #8
 80010ba:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4619      	mov	r1, r3
 80010c6:	484e      	ldr	r0, [pc, #312]	; (8001200 <ADC_Select_CH+0x2bc>)
 80010c8:	f002 fd54 	bl	8003b74 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8083 	beq.w	80011da <ADC_Select_CH+0x296>
			Error_Handler();
 80010d4:	f002 f82c 	bl	8003130 <Error_Handler>
		}
		break;
 80010d8:	e07f      	b.n	80011da <ADC_Select_CH+0x296>
	case 9:
		sConfig.Channel = ADC_CHANNEL_9;
 80010da:	2309      	movs	r3, #9
 80010dc:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4845      	ldr	r0, [pc, #276]	; (8001200 <ADC_Select_CH+0x2bc>)
 80010ea:	f002 fd43 	bl	8003b74 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d074      	beq.n	80011de <ADC_Select_CH+0x29a>
			Error_Handler();
 80010f4:	f002 f81c 	bl	8003130 <Error_Handler>
		}
		break;
 80010f8:	e071      	b.n	80011de <ADC_Select_CH+0x29a>
	case 10:
		sConfig.Channel = ADC_CHANNEL_10;
 80010fa:	230a      	movs	r3, #10
 80010fc:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4619      	mov	r1, r3
 8001108:	483d      	ldr	r0, [pc, #244]	; (8001200 <ADC_Select_CH+0x2bc>)
 800110a:	f002 fd33 	bl	8003b74 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d066      	beq.n	80011e2 <ADC_Select_CH+0x29e>
			Error_Handler();
 8001114:	f002 f80c 	bl	8003130 <Error_Handler>
		}
		break;
 8001118:	e063      	b.n	80011e2 <ADC_Select_CH+0x29e>
	case 11:
		sConfig.Channel = ADC_CHANNEL_11;
 800111a:	230b      	movs	r3, #11
 800111c:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	4835      	ldr	r0, [pc, #212]	; (8001200 <ADC_Select_CH+0x2bc>)
 800112a:	f002 fd23 	bl	8003b74 <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d058      	beq.n	80011e6 <ADC_Select_CH+0x2a2>
			Error_Handler();
 8001134:	f001 fffc 	bl	8003130 <Error_Handler>
		}
		break;
 8001138:	e055      	b.n	80011e6 <ADC_Select_CH+0x2a2>
	case 12:
		sConfig.Channel = ADC_CHANNEL_12;
 800113a:	230c      	movs	r3, #12
 800113c:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4619      	mov	r1, r3
 8001148:	482d      	ldr	r0, [pc, #180]	; (8001200 <ADC_Select_CH+0x2bc>)
 800114a:	f002 fd13 	bl	8003b74 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d04a      	beq.n	80011ea <ADC_Select_CH+0x2a6>
			Error_Handler();
 8001154:	f001 ffec 	bl	8003130 <Error_Handler>
		}
		break;
 8001158:	e047      	b.n	80011ea <ADC_Select_CH+0x2a6>
	case 13:
		sConfig.Channel = ADC_CHANNEL_13;
 800115a:	230d      	movs	r3, #13
 800115c:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	4825      	ldr	r0, [pc, #148]	; (8001200 <ADC_Select_CH+0x2bc>)
 800116a:	f002 fd03 	bl	8003b74 <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d03c      	beq.n	80011ee <ADC_Select_CH+0x2aa>
			Error_Handler();
 8001174:	f001 ffdc 	bl	8003130 <Error_Handler>
		}
		break;
 8001178:	e039      	b.n	80011ee <ADC_Select_CH+0x2aa>
	case 14:
		sConfig.Channel = ADC_CHANNEL_14;
 800117a:	230e      	movs	r3, #14
 800117c:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <ADC_Select_CH+0x2bc>)
 800118a:	f002 fcf3 	bl	8003b74 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d02e      	beq.n	80011f2 <ADC_Select_CH+0x2ae>
			Error_Handler();
 8001194:	f001 ffcc 	bl	8003130 <Error_Handler>
		}
		break;
 8001198:	e02b      	b.n	80011f2 <ADC_Select_CH+0x2ae>
	case 15:
		sConfig.Channel = ADC_CHANNEL_15;
 800119a:	230f      	movs	r3, #15
 800119c:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	4815      	ldr	r0, [pc, #84]	; (8001200 <ADC_Select_CH+0x2bc>)
 80011aa:	f002 fce3 	bl	8003b74 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <ADC_Select_CH+0x2b2>
			Error_Handler();
 80011b4:	f001 ffbc 	bl	8003130 <Error_Handler>
		}
		break;
 80011b8:	e01d      	b.n	80011f6 <ADC_Select_CH+0x2b2>
		break;
 80011ba:	bf00      	nop
 80011bc:	e01c      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011be:	bf00      	nop
 80011c0:	e01a      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011c2:	bf00      	nop
 80011c4:	e018      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011c6:	bf00      	nop
 80011c8:	e016      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011ca:	bf00      	nop
 80011cc:	e014      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011ce:	bf00      	nop
 80011d0:	e012      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011d2:	bf00      	nop
 80011d4:	e010      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011d6:	bf00      	nop
 80011d8:	e00e      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011da:	bf00      	nop
 80011dc:	e00c      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011de:	bf00      	nop
 80011e0:	e00a      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011e2:	bf00      	nop
 80011e4:	e008      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011e6:	bf00      	nop
 80011e8:	e006      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011ea:	bf00      	nop
 80011ec:	e004      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011ee:	bf00      	nop
 80011f0:	e002      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011f2:	bf00      	nop
 80011f4:	e000      	b.n	80011f8 <ADC_Select_CH+0x2b4>
		break;
 80011f6:	bf00      	nop
	}
}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000078 	.word	0x20000078

08001204 <HCSR04_TRIG_PULSE.0>:
	uint8_t txd_msg_buffer[128] = { 0 };
	uint8_t rxd_msg_buffer[128] = { 0 };
	uint16_t time_diff = 0;
	uint16_t distance = 0;

	void HCSR04_TRIG_PULSE(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <HCSR04_TRIG_PULSE.0+0x3c>)
 8001216:	f003 fa0b 	bl	8004630 <HAL_GPIO_WritePin>
		for (int j = 0; j != 15; j = j + 1) {
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e002      	b.n	8001226 <HCSR04_TRIG_PULSE.0+0x22>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3301      	adds	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d1f9      	bne.n	8001220 <HCSR04_TRIG_PULSE.0+0x1c>
		};
		HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin,
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <HCSR04_TRIG_PULSE.0+0x3c>)
 8001234:	f003 f9fc 	bl	8004630 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
	}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020400 	.word	0x40020400

08001244 <main>:
int main(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b0e8      	sub	sp, #416	; 0x1a0
 8001248:	af04      	add	r7, sp, #16
 800124a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800124e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	uint8_t txd_msg_buffer[128] = { 0 };
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001258:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800125c:	227c      	movs	r2, #124	; 0x7c
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fb53 	bl	800790c <memset>
	uint8_t rxd_msg_buffer[128] = { 0 };
 8001266:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800126a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	3304      	adds	r3, #4
 8001274:	227c      	movs	r2, #124	; 0x7c
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fb47 	bl	800790c <memset>
	uint16_t time_diff = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
	uint16_t distance = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800128a:	f002 fa19 	bl	80036c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800128e:	f001 fb5d 	bl	800294c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001292:	f001 fe27 	bl	8002ee4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001296:	f001 fdd1 	bl	8002e3c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800129a:	f001 fbb7 	bl	8002a0c <MX_ADC1_Init>
	MX_TIM2_Init();
 800129e:	f001 fc8b 	bl	8002bb8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80012a2:	f001 fcf9 	bl	8002c98 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80012a6:	f001 fdf3 	bl	8002e90 <MX_USART6_UART_Init>
	MX_TIM5_Init();
 80012aa:	f001 fd79 	bl	8002da0 <MX_TIM5_Init>
	MX_TIM1_Init();
 80012ae:	f001 fbff 	bl	8002ab0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim3);
 80012b2:	48a4      	ldr	r0, [pc, #656]	; (8001544 <main+0x300>)
 80012b4:	f003 fe86 	bl	8004fc4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 80012b8:	48a3      	ldr	r0, [pc, #652]	; (8001548 <main+0x304>)
 80012ba:	f003 fe83 	bl	8004fc4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 80012be:	48a2      	ldr	r0, [pc, #648]	; (8001548 <main+0x304>)
 80012c0:	f003 fed0 	bl	8005064 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80012c4:	2100      	movs	r1, #0
 80012c6:	48a0      	ldr	r0, [pc, #640]	; (8001548 <main+0x304>)
 80012c8:	f004 f8e2 	bl	8005490 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	489d      	ldr	r0, [pc, #628]	; (8001544 <main+0x300>)
 80012d0:	f003 ffd4 	bl	800527c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012d4:	2108      	movs	r1, #8
 80012d6:	489b      	ldr	r0, [pc, #620]	; (8001544 <main+0x300>)
 80012d8:	f003 ffd0 	bl	800527c <HAL_TIM_PWM_Start>

	// start up TIMER 5 for one second interrupts

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	4b98      	ldr	r3, [pc, #608]	; (800154c <main+0x308>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a97      	ldr	r2, [pc, #604]	; (800154c <main+0x308>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b95      	ldr	r3, [pc, #596]	; (800154c <main+0x308>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0204 	and.w	r2, r3, #4
 80012fc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001300:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800130a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800130e:	681b      	ldr	r3, [r3, #0]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001310:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001314:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	4b8b      	ldr	r3, [pc, #556]	; (800154c <main+0x308>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a8a      	ldr	r2, [pc, #552]	; (800154c <main+0x308>)
 8001322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b88      	ldr	r3, [pc, #544]	; (800154c <main+0x308>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001330:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001334:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800133e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001342:	681b      	ldr	r3, [r3, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001348:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	4b7e      	ldr	r3, [pc, #504]	; (800154c <main+0x308>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4a7d      	ldr	r2, [pc, #500]	; (800154c <main+0x308>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <main+0x308>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	f003 0202 	and.w	r2, r3, #2
 8001364:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001368:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001372:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001376:	681b      	ldr	r3, [r3, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800137c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <main+0x308>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a70      	ldr	r2, [pc, #448]	; (800154c <main+0x308>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b6e      	ldr	r3, [pc, #440]	; (800154c <main+0x308>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800139c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013aa:	681b      	ldr	r3, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013ac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013b0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013b4:	2220      	movs	r2, #32
 80013b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013bc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013c0:	2201      	movs	r2, #1
 80013c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013c8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4619      	mov	r1, r3
 80013d6:	485e      	ldr	r0, [pc, #376]	; (8001550 <main+0x30c>)
 80013d8:	f002 ff8e 	bl	80042f8 <HAL_GPIO_Init>

	int TIM1_Ch2_DCVAL = 500;
 80013dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	int TIM1_CH2_STEP = 20;
 80013e4:	2314      	movs	r3, #20
 80013e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	HAL_TIM_Base_Start(&htim1);
 80013ea:	485a      	ldr	r0, [pc, #360]	; (8001554 <main+0x310>)
 80013ec:	f003 fe3a 	bl	8005064 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013f0:	2104      	movs	r1, #4
 80013f2:	4858      	ldr	r0, [pc, #352]	; (8001554 <main+0x310>)
 80013f4:	f003 ff42 	bl	800527c <HAL_TIM_PWM_Start>
	TIM1->PSC = 16 - 1;
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <main+0x314>)
 80013fa:	220f      	movs	r2, #15
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 20000 - 1;
 80013fe:	4b56      	ldr	r3, [pc, #344]	; (8001558 <main+0x314>)
 8001400:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = TIM1_Ch2_DCVAL;
 8001406:	4a54      	ldr	r2, [pc, #336]	; (8001558 <main+0x314>)
 8001408:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800140c:	6353      	str	r3, [r2, #52]	; 0x34
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int counter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	//HCSR04_TRIG_PULSE();

	// SETUP MODE //

	TIM3->CCR1 = 0;
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <main+0x318>)
 8001416:	2200      	movs	r2, #0
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR3 = 0;
 800141a:	4b50      	ldr	r3, [pc, #320]	; (800155c <main+0x318>)
 800141c:	2200      	movs	r2, #0
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2120      	movs	r1, #32
 8001424:	484a      	ldr	r0, [pc, #296]	; (8001550 <main+0x30c>)
 8001426:	f003 f903 	bl	8004630 <HAL_GPIO_WritePin>

	sprintf((char*) txd_msg_buffer, "\r\nSETUP MODE\r\n");
 800142a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800142e:	494c      	ldr	r1, [pc, #304]	; (8001560 <main+0x31c>)
 8001430:	4618      	mov	r0, r3
 8001432:	f006 fa4b 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001436:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fed0 	bl	80001e0 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	b29a      	uxth	r2, r3
 8001444:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001448:	2364      	movs	r3, #100	; 0x64
 800144a:	4846      	ldr	r0, [pc, #280]	; (8001564 <main+0x320>)
 800144c:	f005 f9d5 	bl	80067fa <HAL_UART_Transmit>
			100);

	//Motor Inputs
	sprintf((char*) txd_msg_buffer, "INTLET MOTOR SPEED PWM (option 0-3):");
 8001450:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001454:	4944      	ldr	r1, [pc, #272]	; (8001568 <main+0x324>)
 8001456:	4618      	mov	r0, r3
 8001458:	f006 fa38 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 800145c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe febd 	bl	80001e0 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	483c      	ldr	r0, [pc, #240]	; (8001564 <main+0x320>)
 8001472:	f005 f9c2 	bl	80067fa <HAL_UART_Transmit>
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 8001476:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	2201      	movs	r2, #1
 8001480:	4838      	ldr	r0, [pc, #224]	; (8001564 <main+0x320>)
 8001482:	f005 fa4c 	bl	800691e <HAL_UART_Receive>
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
 8001486:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800148a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b2f      	cmp	r3, #47	; 0x2f
 8001492:	d9f0      	bls.n	8001476 <main+0x232>
 8001494:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001498:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b33      	cmp	r3, #51	; 0x33
 80014a0:	d900      	bls.n	80014a4 <main+0x260>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 80014a2:	e7e8      	b.n	8001476 <main+0x232>
			break;
 80014a4:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
 80014a6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80014b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014b8:	492c      	ldr	r1, [pc, #176]	; (800156c <main+0x328>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 fa06 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80014c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe8b 	bl	80001e0 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	4823      	ldr	r0, [pc, #140]	; (8001564 <main+0x320>)
 80014d6:	f005 f990 	bl	80067fa <HAL_UART_Transmit>
			100);
	MotorInputs[0] = *rxd_msg_buffer - '0';
 80014da:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014de:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3b30      	subs	r3, #48	; 0x30
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <main+0x32c>)
 80014ec:	701a      	strb	r2, [r3, #0]

	sprintf((char*) txd_msg_buffer, "ZONE 1 MOTOR SPEED PWM (option 0-3):");
 80014ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014f2:	4920      	ldr	r1, [pc, #128]	; (8001574 <main+0x330>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f006 f9e9 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80014fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe6e 	bl	80001e0 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	4815      	ldr	r0, [pc, #84]	; (8001564 <main+0x320>)
 8001510:	f005 f973 	bl	80067fa <HAL_UART_Transmit>
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 8001514:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	2201      	movs	r2, #1
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <main+0x320>)
 8001520:	f005 f9fd 	bl	800691e <HAL_UART_Receive>
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
 8001524:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001528:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b2f      	cmp	r3, #47	; 0x2f
 8001530:	d9f0      	bls.n	8001514 <main+0x2d0>
 8001532:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001536:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b33      	cmp	r3, #51	; 0x33
 800153e:	d91b      	bls.n	8001578 <main+0x334>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 8001540:	e7e8      	b.n	8001514 <main+0x2d0>
 8001542:	bf00      	nop
 8001544:	20000150 	.word	0x20000150
 8001548:	20000108 	.word	0x20000108
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000
 8001554:	200000c0 	.word	0x200000c0
 8001558:	40010000 	.word	0x40010000
 800155c:	40000400 	.word	0x40000400
 8001560:	0800822c 	.word	0x0800822c
 8001564:	20000224 	.word	0x20000224
 8001568:	0800823c 	.word	0x0800823c
 800156c:	08008264 	.word	0x08008264
 8001570:	20000274 	.word	0x20000274
 8001574:	0800826c 	.word	0x0800826c
			break;
 8001578:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
 800157a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800157e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001588:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800158c:	49b4      	ldr	r1, [pc, #720]	; (8001860 <main+0x61c>)
 800158e:	4618      	mov	r0, r3
 8001590:	f006 f99c 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001594:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe21 	bl	80001e0 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80015a6:	2364      	movs	r3, #100	; 0x64
 80015a8:	48ae      	ldr	r0, [pc, #696]	; (8001864 <main+0x620>)
 80015aa:	f005 f926 	bl	80067fa <HAL_UART_Transmit>
			100);
	MotorInputs[1] = *rxd_msg_buffer - '0';
 80015ae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015b2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3b30      	subs	r3, #48	; 0x30
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	4baa      	ldr	r3, [pc, #680]	; (8001868 <main+0x624>)
 80015c0:	705a      	strb	r2, [r3, #1]

	sprintf((char*) txd_msg_buffer, "ZONE 2 MOTOR SPEED PWM (option 0-3):");
 80015c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015c6:	49a9      	ldr	r1, [pc, #676]	; (800186c <main+0x628>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 f97f 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80015ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fe04 	bl	80001e0 <strlen>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	48a0      	ldr	r0, [pc, #640]	; (8001864 <main+0x620>)
 80015e4:	f005 f909 	bl	80067fa <HAL_UART_Transmit>
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 80015e8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	2201      	movs	r2, #1
 80015f2:	489c      	ldr	r0, [pc, #624]	; (8001864 <main+0x620>)
 80015f4:	f005 f993 	bl	800691e <HAL_UART_Receive>
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
 80015f8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b2f      	cmp	r3, #47	; 0x2f
 8001604:	d9f0      	bls.n	80015e8 <main+0x3a4>
 8001606:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800160a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b33      	cmp	r3, #51	; 0x33
 8001612:	d900      	bls.n	8001616 <main+0x3d2>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 8001614:	e7e8      	b.n	80015e8 <main+0x3a4>
			break;
 8001616:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
 8001618:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800161c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001626:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800162a:	498d      	ldr	r1, [pc, #564]	; (8001860 <main+0x61c>)
 800162c:	4618      	mov	r0, r3
 800162e:	f006 f94d 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001632:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdd2 	bl	80001e0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	4887      	ldr	r0, [pc, #540]	; (8001864 <main+0x620>)
 8001648:	f005 f8d7 	bl	80067fa <HAL_UART_Transmit>
			100);
	MotorInputs[2] = *rxd_msg_buffer - '0';
 800164c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001650:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b30      	subs	r3, #48	; 0x30
 8001658:	b2db      	uxtb	r3, r3
 800165a:	b25a      	sxtb	r2, r3
 800165c:	4b82      	ldr	r3, [pc, #520]	; (8001868 <main+0x624>)
 800165e:	709a      	strb	r2, [r3, #2]

	sprintf((char*) txd_msg_buffer, "ZONE 3 MOTOR SPEED PWM (option 0-3):");
 8001660:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001664:	4982      	ldr	r1, [pc, #520]	; (8001870 <main+0x62c>)
 8001666:	4618      	mov	r0, r3
 8001668:	f006 f930 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 800166c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fdb5 	bl	80001e0 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	4878      	ldr	r0, [pc, #480]	; (8001864 <main+0x620>)
 8001682:	f005 f8ba 	bl	80067fa <HAL_UART_Transmit>
			100);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 8001686:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	2201      	movs	r2, #1
 8001690:	4874      	ldr	r0, [pc, #464]	; (8001864 <main+0x620>)
 8001692:	f005 f944 	bl	800691e <HAL_UART_Receive>
		if (*rxd_msg_buffer - '0' >= 0 && *rxd_msg_buffer - '0' <= 3)
 8001696:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800169a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b2f      	cmp	r3, #47	; 0x2f
 80016a2:	d9f0      	bls.n	8001686 <main+0x442>
 80016a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80016a8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b33      	cmp	r3, #51	; 0x33
 80016b0:	d900      	bls.n	80016b4 <main+0x470>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 1, HAL_MAX_DELAY);
 80016b2:	e7e8      	b.n	8001686 <main+0x442>
			break;
 80016b4:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n", *rxd_msg_buffer - '0');
 80016b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80016ba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80016c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016c8:	4965      	ldr	r1, [pc, #404]	; (8001860 <main+0x61c>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 f8fe 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80016d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fd83 	bl	80001e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	485f      	ldr	r0, [pc, #380]	; (8001864 <main+0x620>)
 80016e6:	f005 f888 	bl	80067fa <HAL_UART_Transmit>
			100);
	MotorInputs[3] = *rxd_msg_buffer - '0';
 80016ea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80016ee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b30      	subs	r3, #48	; 0x30
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <main+0x624>)
 80016fc:	70da      	strb	r2, [r3, #3]

	int recvd;
	//Wall Clock Inputs
	sprintf((char*) txd_msg_buffer, "CURRENT WALL CLOCK TIME (0-23):");
 80016fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001702:	495c      	ldr	r1, [pc, #368]	; (8001874 <main+0x630>)
 8001704:	4618      	mov	r0, r3
 8001706:	f006 f8e1 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 800170a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd66 	bl	80001e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	4851      	ldr	r0, [pc, #324]	; (8001864 <main+0x620>)
 8001720:	f005 f86b 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001724:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2202      	movs	r2, #2
 800172e:	484d      	ldr	r0, [pc, #308]	; (8001864 <main+0x620>)
 8001730:	f005 f8f5 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001734:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001738:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	461a      	mov	r2, r3
 800174c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001750:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001754:	785b      	ldrb	r3, [r3, #1]
 8001756:	3b30      	subs	r3, #48	; 0x30
 8001758:	4413      	add	r3, r2
 800175a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 800175e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001762:	2b00      	cmp	r3, #0
 8001764:	dbde      	blt.n	8001724 <main+0x4e0>
 8001766:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800176a:	2b17      	cmp	r3, #23
 800176c:	dd00      	ble.n	8001770 <main+0x52c>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 800176e:	e7d9      	b.n	8001724 <main+0x4e0>
			break;
 8001770:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001772:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001776:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	461a      	mov	r2, r3
 800178a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800178e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001796:	441a      	add	r2, r3
 8001798:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800179c:	4930      	ldr	r1, [pc, #192]	; (8001860 <main+0x61c>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f006 f894 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80017a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fd19 	bl	80001e0 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	482a      	ldr	r0, [pc, #168]	; (8001864 <main+0x620>)
 80017ba:	f005 f81e 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[0] = (rxd_msg_buffer[0] - '0') * 10
 80017be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80017de:	785b      	ldrb	r3, [r3, #1]
 80017e0:	4413      	add	r3, r2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3b30      	subs	r3, #48	; 0x30
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	b25a      	sxtb	r2, r3
	WallClkInputs[0] = (rxd_msg_buffer[0] - '0') * 10
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <main+0x634>)
 80017ec:	701a      	strb	r2, [r3, #0]
	sprintf((char*) txd_msg_buffer, "INLET WALL CLOCK START TIME (0-23):");
 80017ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017f2:	4922      	ldr	r1, [pc, #136]	; (800187c <main+0x638>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 f869 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80017fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fcee 	bl	80001e0 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800180c:	2364      	movs	r3, #100	; 0x64
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <main+0x620>)
 8001810:	f004 fff3 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001814:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	2202      	movs	r2, #2
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <main+0x620>)
 8001820:	f005 f87d 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001824:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001828:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	461a      	mov	r2, r3
 800183c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001840:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001844:	785b      	ldrb	r3, [r3, #1]
 8001846:	3b30      	subs	r3, #48	; 0x30
 8001848:	4413      	add	r3, r2
 800184a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 800184e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001852:	2b00      	cmp	r3, #0
 8001854:	dbde      	blt.n	8001814 <main+0x5d0>
 8001856:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800185a:	2b17      	cmp	r3, #23
 800185c:	dd10      	ble.n	8001880 <main+0x63c>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 800185e:	e7d9      	b.n	8001814 <main+0x5d0>
 8001860:	08008264 	.word	0x08008264
 8001864:	20000224 	.word	0x20000224
 8001868:	20000274 	.word	0x20000274
 800186c:	08008294 	.word	0x08008294
 8001870:	080082bc 	.word	0x080082bc
 8001874:	080082e4 	.word	0x080082e4
 8001878:	20000278 	.word	0x20000278
 800187c:	08008304 	.word	0x08008304
			break;
 8001880:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001882:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001886:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	461a      	mov	r2, r3
 800189a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800189e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 80018a6:	441a      	add	r2, r3
 80018a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018ac:	49a8      	ldr	r1, [pc, #672]	; (8001b50 <main+0x90c>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f006 f80c 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80018b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fc91 	bl	80001e0 <strlen>
 80018be:	4603      	mov	r3, r0
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	48a2      	ldr	r0, [pc, #648]	; (8001b54 <main+0x910>)
 80018ca:	f004 ff96 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[1] = (rxd_msg_buffer[0] - '0') * 10
 80018ce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018d2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018ea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	4413      	add	r3, r2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3b30      	subs	r3, #48	; 0x30
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	b25a      	sxtb	r2, r3
	WallClkInputs[1] = (rxd_msg_buffer[0] - '0') * 10
 80018fa:	4b97      	ldr	r3, [pc, #604]	; (8001b58 <main+0x914>)
 80018fc:	705a      	strb	r2, [r3, #1]
	sprintf((char*) txd_msg_buffer, "INLET WALL CLOCK STOP TIME (0-23):");
 80018fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001902:	4996      	ldr	r1, [pc, #600]	; (8001b5c <main+0x918>)
 8001904:	4618      	mov	r0, r3
 8001906:	f005 ffe1 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 800190a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc66 	bl	80001e0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800191c:	2364      	movs	r3, #100	; 0x64
 800191e:	488d      	ldr	r0, [pc, #564]	; (8001b54 <main+0x910>)
 8001920:	f004 ff6b 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001924:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	2202      	movs	r2, #2
 800192e:	4889      	ldr	r0, [pc, #548]	; (8001b54 <main+0x910>)
 8001930:	f004 fff5 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001934:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001938:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	461a      	mov	r2, r3
 800194c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001950:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	3b30      	subs	r3, #48	; 0x30
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 800195e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001962:	2b00      	cmp	r3, #0
 8001964:	dbde      	blt.n	8001924 <main+0x6e0>
 8001966:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800196a:	2b17      	cmp	r3, #23
 800196c:	dd00      	ble.n	8001970 <main+0x72c>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 800196e:	e7d9      	b.n	8001924 <main+0x6e0>
			break;
 8001970:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001972:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001976:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	461a      	mov	r2, r3
 800198a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800198e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001996:	441a      	add	r2, r3
 8001998:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800199c:	496c      	ldr	r1, [pc, #432]	; (8001b50 <main+0x90c>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 ff94 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80019a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fc19 	bl	80001e0 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	4866      	ldr	r0, [pc, #408]	; (8001b54 <main+0x910>)
 80019ba:	f004 ff1e 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[2] = (rxd_msg_buffer[0] - '0') * 10
 80019be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80019c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80019da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3b30      	subs	r3, #48	; 0x30
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	b25a      	sxtb	r2, r3
	WallClkInputs[2] = (rxd_msg_buffer[0] - '0') * 10
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <main+0x914>)
 80019ec:	709a      	strb	r2, [r3, #2]
	sprintf((char*) txd_msg_buffer, "ZONE 1 WALL CLOCK START TIME (0-23):");
 80019ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019f2:	495b      	ldr	r1, [pc, #364]	; (8001b60 <main+0x91c>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 ff69 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 80019fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fbee 	bl	80001e0 <strlen>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	4851      	ldr	r0, [pc, #324]	; (8001b54 <main+0x910>)
 8001a10:	f004 fef3 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001a14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	484d      	ldr	r0, [pc, #308]	; (8001b54 <main+0x910>)
 8001a20:	f004 ff7d 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001a24:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001a28:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001a40:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	3b30      	subs	r3, #48	; 0x30
 8001a48:	4413      	add	r3, r2
 8001a4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 8001a4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dbde      	blt.n	8001a14 <main+0x7d0>
 8001a56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a5a:	2b17      	cmp	r3, #23
 8001a5c:	dd00      	ble.n	8001a60 <main+0x81c>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001a5e:	e7d9      	b.n	8001a14 <main+0x7d0>
			break;
 8001a60:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001a62:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001a66:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001a7e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001a86:	441a      	add	r2, r3
 8001a88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a8c:	4930      	ldr	r1, [pc, #192]	; (8001b50 <main+0x90c>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 ff1c 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001a94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fba1 	bl	80001e0 <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	482a      	ldr	r0, [pc, #168]	; (8001b54 <main+0x910>)
 8001aaa:	f004 fea6 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[3] = (rxd_msg_buffer[0] - '0') * 10
 8001aae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ab2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001aca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3b30      	subs	r3, #48	; 0x30
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	b25a      	sxtb	r2, r3
	WallClkInputs[3] = (rxd_msg_buffer[0] - '0') * 10
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <main+0x914>)
 8001adc:	70da      	strb	r2, [r3, #3]
	sprintf((char*) txd_msg_buffer, "ZONE 1 WALL CLOCK STOP TIME (0-23):");
 8001ade:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ae2:	4920      	ldr	r1, [pc, #128]	; (8001b64 <main+0x920>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 fef1 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001aea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb76 	bl	80001e0 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	4815      	ldr	r0, [pc, #84]	; (8001b54 <main+0x910>)
 8001b00:	f004 fe7b 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001b04:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4811      	ldr	r0, [pc, #68]	; (8001b54 <main+0x910>)
 8001b10:	f004 ff05 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001b14:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b18:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b30:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	3b30      	subs	r3, #48	; 0x30
 8001b38:	4413      	add	r3, r2
 8001b3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 8001b3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dbde      	blt.n	8001b04 <main+0x8c0>
 8001b46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b4a:	2b17      	cmp	r3, #23
 8001b4c:	dd0c      	ble.n	8001b68 <main+0x924>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001b4e:	e7d9      	b.n	8001b04 <main+0x8c0>
 8001b50:	08008264 	.word	0x08008264
 8001b54:	20000224 	.word	0x20000224
 8001b58:	20000278 	.word	0x20000278
 8001b5c:	08008328 	.word	0x08008328
 8001b60:	0800834c 	.word	0x0800834c
 8001b64:	08008374 	.word	0x08008374
			break;
 8001b68:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001b6a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b6e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	461a      	mov	r2, r3
 8001b82:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b86:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001b8e:	441a      	add	r2, r3
 8001b90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b94:	49a8      	ldr	r1, [pc, #672]	; (8001e38 <main+0xbf4>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 fe98 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001b9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fb1d 	bl	80001e0 <strlen>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	48a2      	ldr	r0, [pc, #648]	; (8001e3c <main+0xbf8>)
 8001bb2:	f004 fe22 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[4] = (rxd_msg_buffer[0] - '0') * 10
 8001bb6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bd2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	4413      	add	r3, r2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3b30      	subs	r3, #48	; 0x30
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	b25a      	sxtb	r2, r3
	WallClkInputs[4] = (rxd_msg_buffer[0] - '0') * 10
 8001be2:	4b97      	ldr	r3, [pc, #604]	; (8001e40 <main+0xbfc>)
 8001be4:	711a      	strb	r2, [r3, #4]
	sprintf((char*) txd_msg_buffer, "ZONE 2 WALL CLOCK START TIME (0-23):");
 8001be6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bea:	4996      	ldr	r1, [pc, #600]	; (8001e44 <main+0xc00>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 fe6d 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001bf2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe faf2 	bl	80001e0 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	488d      	ldr	r0, [pc, #564]	; (8001e3c <main+0xbf8>)
 8001c08:	f004 fdf7 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001c0c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	2202      	movs	r2, #2
 8001c16:	4889      	ldr	r0, [pc, #548]	; (8001e3c <main+0xbf8>)
 8001c18:	f004 fe81 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001c1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c20:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	461a      	mov	r2, r3
 8001c34:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c38:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	3b30      	subs	r3, #48	; 0x30
 8001c40:	4413      	add	r3, r2
 8001c42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 8001c46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dbde      	blt.n	8001c0c <main+0x9c8>
 8001c4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c52:	2b17      	cmp	r3, #23
 8001c54:	dd00      	ble.n	8001c58 <main+0xa14>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001c56:	e7d9      	b.n	8001c0c <main+0x9c8>
			break;
 8001c58:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001c5a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c5e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	461a      	mov	r2, r3
 8001c72:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c76:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001c7e:	441a      	add	r2, r3
 8001c80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c84:	496c      	ldr	r1, [pc, #432]	; (8001e38 <main+0xbf4>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 fe20 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001c8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe faa5 	bl	80001e0 <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	4866      	ldr	r0, [pc, #408]	; (8001e3c <main+0xbf8>)
 8001ca2:	f004 fdaa 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[5] = (rxd_msg_buffer[0] - '0') * 10
 8001ca6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001caa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cc2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3b30      	subs	r3, #48	; 0x30
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	b25a      	sxtb	r2, r3
	WallClkInputs[5] = (rxd_msg_buffer[0] - '0') * 10
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <main+0xbfc>)
 8001cd4:	715a      	strb	r2, [r3, #5]
	sprintf((char*) txd_msg_buffer, "ZONE 2 WALL CLOCK STOP TIME (0-23):");
 8001cd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cda:	495b      	ldr	r1, [pc, #364]	; (8001e48 <main+0xc04>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fdf5 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001ce2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fa7a 	bl	80001e0 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	4851      	ldr	r0, [pc, #324]	; (8001e3c <main+0xbf8>)
 8001cf8:	f004 fd7f 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001cfc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	2202      	movs	r2, #2
 8001d06:	484d      	ldr	r0, [pc, #308]	; (8001e3c <main+0xbf8>)
 8001d08:	f004 fe09 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001d0c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d10:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	461a      	mov	r2, r3
 8001d24:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d28:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	3b30      	subs	r3, #48	; 0x30
 8001d30:	4413      	add	r3, r2
 8001d32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 8001d36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dbde      	blt.n	8001cfc <main+0xab8>
 8001d3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d42:	2b17      	cmp	r3, #23
 8001d44:	dd00      	ble.n	8001d48 <main+0xb04>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001d46:	e7d9      	b.n	8001cfc <main+0xab8>
			break;
 8001d48:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001d4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d4e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	461a      	mov	r2, r3
 8001d62:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d66:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001d6e:	441a      	add	r2, r3
 8001d70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d74:	4930      	ldr	r1, [pc, #192]	; (8001e38 <main+0xbf4>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 fda8 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001d7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa2d 	bl	80001e0 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	482a      	ldr	r0, [pc, #168]	; (8001e3c <main+0xbf8>)
 8001d92:	f004 fd32 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[6] = (rxd_msg_buffer[0] - '0') * 10
 8001d96:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d9a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001db2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	4413      	add	r3, r2
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	3b30      	subs	r3, #48	; 0x30
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	b25a      	sxtb	r2, r3
	WallClkInputs[6] = (rxd_msg_buffer[0] - '0') * 10
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <main+0xbfc>)
 8001dc4:	719a      	strb	r2, [r3, #6]
	sprintf((char*) txd_msg_buffer, "ZONE 3 WALL CLOCK START TIME (0-23):");
 8001dc6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dca:	4920      	ldr	r1, [pc, #128]	; (8001e4c <main+0xc08>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 fd7d 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001dd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fa02 	bl	80001e0 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001de4:	2364      	movs	r3, #100	; 0x64
 8001de6:	4815      	ldr	r0, [pc, #84]	; (8001e3c <main+0xbf8>)
 8001de8:	f004 fd07 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001dec:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	2202      	movs	r2, #2
 8001df6:	4811      	ldr	r0, [pc, #68]	; (8001e3c <main+0xbf8>)
 8001df8:	f004 fd91 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001dfc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e00:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	461a      	mov	r2, r3
 8001e14:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e18:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	3b30      	subs	r3, #48	; 0x30
 8001e20:	4413      	add	r3, r2
 8001e22:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 8001e26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dbde      	blt.n	8001dec <main+0xba8>
 8001e2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e32:	2b17      	cmp	r3, #23
 8001e34:	dd0c      	ble.n	8001e50 <main+0xc0c>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001e36:	e7d9      	b.n	8001dec <main+0xba8>
 8001e38:	08008264 	.word	0x08008264
 8001e3c:	20000224 	.word	0x20000224
 8001e40:	20000278 	.word	0x20000278
 8001e44:	08008398 	.word	0x08008398
 8001e48:	080083c0 	.word	0x080083c0
 8001e4c:	080083e4 	.word	0x080083e4
			break;
 8001e50:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001e52:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e6e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001e76:	441a      	add	r2, r3
 8001e78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e7c:	4950      	ldr	r1, [pc, #320]	; (8001fc0 <main+0xd7c>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f005 fd24 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001e84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe f9a9 	bl	80001e0 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001e96:	2364      	movs	r3, #100	; 0x64
 8001e98:	484a      	ldr	r0, [pc, #296]	; (8001fc4 <main+0xd80>)
 8001e9a:	f004 fcae 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[7] = (rxd_msg_buffer[0] - '0') * 10
 8001e9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ea2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001eba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ebe:	785b      	ldrb	r3, [r3, #1]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3b30      	subs	r3, #48	; 0x30
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	b25a      	sxtb	r2, r3
	WallClkInputs[7] = (rxd_msg_buffer[0] - '0') * 10
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <main+0xd84>)
 8001ecc:	71da      	strb	r2, [r3, #7]
	sprintf((char*) txd_msg_buffer, "ZONE 3 WALL CLOCK STOP TIME (0-23):");
 8001ece:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ed2:	493e      	ldr	r1, [pc, #248]	; (8001fcc <main+0xd88>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 fcf9 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001eda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f97e 	bl	80001e0 <strlen>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <main+0xd80>)
 8001ef0:	f004 fc83 	bl	80067fa <HAL_UART_Transmit>
			100);
	//while (HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY) != HAL_OK);
	while (1) {
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001ef4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8001efc:	2202      	movs	r2, #2
 8001efe:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <main+0xd80>)
 8001f00:	f004 fd0d 	bl	800691e <HAL_UART_Receive>
		recvd = (rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0');
 8001f04:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f08:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f20:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	3b30      	subs	r3, #48	; 0x30
 8001f28:	4413      	add	r3, r2
 8001f2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		if (recvd >= 0 && recvd <= 23)
 8001f2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	dbde      	blt.n	8001ef4 <main+0xcb0>
 8001f36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f3a:	2b17      	cmp	r3, #23
 8001f3c:	dd00      	ble.n	8001f40 <main+0xcfc>
		HAL_UART_Receive(&huart6, rxd_msg_buffer, 2, HAL_MAX_DELAY);
 8001f3e:	e7d9      	b.n	8001ef4 <main+0xcb0>
			break;
 8001f40:	bf00      	nop
	}
	sprintf((char*) txd_msg_buffer, "%d\r\n",
			(rxd_msg_buffer[0] - '0') * 10 + (rxd_msg_buffer[1] - '0'));
 8001f42:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f46:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f5e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f62:	785b      	ldrb	r3, [r3, #1]
 8001f64:	3b30      	subs	r3, #48	; 0x30
	sprintf((char*) txd_msg_buffer, "%d\r\n",
 8001f66:	441a      	add	r2, r3
 8001f68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f6c:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <main+0xd7c>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f005 fcac 	bl	80078cc <siprintf>
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 8001f74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe f931 	bl	80001e0 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001f86:	2364      	movs	r3, #100	; 0x64
 8001f88:	480e      	ldr	r0, [pc, #56]	; (8001fc4 <main+0xd80>)
 8001f8a:	f004 fc36 	bl	80067fa <HAL_UART_Transmit>
			100);
	WallClkInputs[8] = (rxd_msg_buffer[0] - '0') * 10
 8001f8e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f92:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3b30      	subs	r3, #48	; 0x30
			+ (rxd_msg_buffer[1] - '0');
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	0092      	lsls	r2, r2, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001faa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3b30      	subs	r3, #48	; 0x30
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	b25a      	sxtb	r2, r3
	WallClkInputs[8] = (rxd_msg_buffer[0] - '0') * 10
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <main+0xd84>)
 8001fbc:	721a      	strb	r2, [r3, #8]

	while (HAL_GPIO_ReadPin(GPIOC, B1_Pin)) {
 8001fbe:	e017      	b.n	8001ff0 <main+0xdac>
 8001fc0:	08008264 	.word	0x08008264
 8001fc4:	20000224 	.word	0x20000224
 8001fc8:	20000278 	.word	0x20000278
 8001fcc:	0800840c 	.word	0x0800840c
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	48b7      	ldr	r0, [pc, #732]	; (80022b4 <main+0x1070>)
 8001fd6:	f002 fb2b 	bl	8004630 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8001fda:	20fa      	movs	r0, #250	; 0xfa
 8001fdc:	f001 fbe2 	bl	80037a4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2120      	movs	r1, #32
 8001fe4:	48b3      	ldr	r0, [pc, #716]	; (80022b4 <main+0x1070>)
 8001fe6:	f002 fb23 	bl	8004630 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8001fea:	20fa      	movs	r0, #250	; 0xfa
 8001fec:	f001 fbda 	bl	80037a4 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, B1_Pin)) {
 8001ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff4:	48b0      	ldr	r0, [pc, #704]	; (80022b8 <main+0x1074>)
 8001ff6:	f002 fb03 	bl	8004600 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e7      	bne.n	8001fd0 <main+0xd8c>
	}

	// RUN MODE //

	HAL_TIM_Base_Start_IT(&htim5);
 8002000:	48ae      	ldr	r0, [pc, #696]	; (80022bc <main+0x1078>)
 8002002:	f003 f889 	bl	8005118 <HAL_TIM_Base_Start_IT>

	// Calculate the time elapsed for each
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	2120      	movs	r1, #32
 800200a:	48aa      	ldr	r0, [pc, #680]	; (80022b4 <main+0x1070>)
 800200c:	f002 fb10 	bl	8004630 <HAL_GPIO_WritePin>
	int w_clk_mins = WallClkInputs[0] / 10;
 8002010:	4bab      	ldr	r3, [pc, #684]	; (80022c0 <main+0x107c>)
 8002012:	f993 3000 	ldrsb.w	r3, [r3]
 8002016:	4aab      	ldr	r2, [pc, #684]	; (80022c4 <main+0x1080>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1092      	asrs	r2, r2, #2
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	b25b      	sxtb	r3, r3
 8002024:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int w_clk_secs = ((WallClkInputs[0] % 10) * 60) / 10;
 8002028:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <main+0x107c>)
 800202a:	f993 2000 	ldrsb.w	r2, [r3]
 800202e:	4ba5      	ldr	r3, [pc, #660]	; (80022c4 <main+0x1080>)
 8002030:	fb83 1302 	smull	r1, r3, r3, r2
 8002034:	1099      	asrs	r1, r3, #2
 8002036:	17d3      	asrs	r3, r2, #31
 8002038:	1ac9      	subs	r1, r1, r3
 800203a:	460b      	mov	r3, r1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b25b      	sxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	int time_1 = (WallClkInputs[2] - WallClkInputs[1]) / 10;
 8002054:	4b9a      	ldr	r3, [pc, #616]	; (80022c0 <main+0x107c>)
 8002056:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800205a:	461a      	mov	r2, r3
 800205c:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <main+0x107c>)
 800205e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a97      	ldr	r2, [pc, #604]	; (80022c4 <main+0x1080>)
 8002066:	fb82 1203 	smull	r1, r2, r2, r3
 800206a:	1092      	asrs	r2, r2, #2
 800206c:	17db      	asrs	r3, r3, #31
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	int time_2 = (WallClkInputs[4] - WallClkInputs[3]) / 10;
 8002074:	4b92      	ldr	r3, [pc, #584]	; (80022c0 <main+0x107c>)
 8002076:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800207a:	461a      	mov	r2, r3
 800207c:	4b90      	ldr	r3, [pc, #576]	; (80022c0 <main+0x107c>)
 800207e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	4a8f      	ldr	r2, [pc, #572]	; (80022c4 <main+0x1080>)
 8002086:	fb82 1203 	smull	r1, r2, r2, r3
 800208a:	1092      	asrs	r2, r2, #2
 800208c:	17db      	asrs	r3, r3, #31
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	int time_3 = (WallClkInputs[6] - WallClkInputs[5]) / 10;
 8002094:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <main+0x107c>)
 8002096:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800209a:	461a      	mov	r2, r3
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <main+0x107c>)
 800209e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	4a87      	ldr	r2, [pc, #540]	; (80022c4 <main+0x1080>)
 80020a6:	fb82 1203 	smull	r1, r2, r2, r3
 80020aa:	1092      	asrs	r2, r2, #2
 80020ac:	17db      	asrs	r3, r3, #31
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	int time_4 = (WallClkInputs[8] - WallClkInputs[7]) / 10;
 80020b4:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <main+0x107c>)
 80020b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b80      	ldr	r3, [pc, #512]	; (80022c0 <main+0x107c>)
 80020be:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a7f      	ldr	r2, [pc, #508]	; (80022c4 <main+0x1080>)
 80020c6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ca:	1092      	asrs	r2, r2, #2
 80020cc:	17db      	asrs	r3, r3, #31
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	int wall_clock = WallClkInputs[0];
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <main+0x107c>)
 80020d6:	f993 3000 	ldrsb.w	r3, [r3]
 80020da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int res_percent = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint8_t tens = 0; // Mask to keep only 4 bits
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
	uint8_t ones = 0; // Mask to keep only 4 bits
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
	int print_once = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	int rotations = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	int percentDist = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	uint16_t rpm = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
	int Inlet = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	int Z1 = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	int Z2 = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	int Z3 = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	char zone[6];
	strcpy(zone, "N/A");
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <main+0x1084>)
 8002126:	601a      	str	r2, [r3, #0]
	char mode[7];
	strcpy(mode, "N/A");
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <main+0x1084>)
 800212e:	601a      	str	r2, [r3, #0]

	sprintf((char*) txd_msg_buffer,
 8002130:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002134:	4965      	ldr	r1, [pc, #404]	; (80022cc <main+0x1088>)
 8002136:	4618      	mov	r0, r3
 8002138:	f005 fbc8 	bl	80078cc <siprintf>
			"Wall Clock Time    Zone/Inlet    Motor Speed PWM    Motor RPM    Water Reservoir Depth\r\n");
	HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*) txd_msg_buffer),
 800213c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f84d 	bl	80001e0 <strlen>
 8002146:	4603      	mov	r3, r0
 8002148:	b29a      	uxth	r2, r3
 800214a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800214e:	2364      	movs	r3, #100	; 0x64
 8002150:	485f      	ldr	r0, [pc, #380]	; (80022d0 <main+0x108c>)
 8002152:	f004 fb52 	bl	80067fa <HAL_UART_Transmit>
			100);

	while (1) {
		HAL_Delay(50);
 8002156:	2032      	movs	r0, #50	; 0x32
 8002158:	f001 fb24 	bl	80037a4 <HAL_Delay>
		ADC_Select_CH(9);
 800215c:	2009      	movs	r0, #9
 800215e:	f7fe fef1 	bl	8000f44 <ADC_Select_CH>
		HAL_ADC_Start(&hadc1);
 8002162:	485c      	ldr	r0, [pc, #368]	; (80022d4 <main+0x1090>)
 8002164:	f001 fb86 	bl	8003874 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8002168:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800216c:	4859      	ldr	r0, [pc, #356]	; (80022d4 <main+0x1090>)
 800216e:	f001 fc68 	bl	8003a42 <HAL_ADC_PollForConversion>
		uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 8002172:	4858      	ldr	r0, [pc, #352]	; (80022d4 <main+0x1090>)
 8002174:	f001 fcf0 	bl	8003b58 <HAL_ADC_GetValue>
 8002178:	4603      	mov	r3, r0
 800217a:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139
		HAL_ADC_Stop(&hadc1);
 800217e:	4855      	ldr	r0, [pc, #340]	; (80022d4 <main+0x1090>)
 8002180:	f001 fc2c 	bl	80039dc <HAL_ADC_Stop>

		hcsr04_Rx_flag = 0;
 8002184:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <main+0x1094>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
		first_edge = 0;
 800218a:	4b54      	ldr	r3, [pc, #336]	; (80022dc <main+0x1098>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
		time_edge1 = 0;
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <main+0x109c>)
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
		time_edge2 = 0;
 8002196:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <main+0x10a0>)
 8002198:	2200      	movs	r2, #0
 800219a:	801a      	strh	r2, [r3, #0]
		time_diff = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
		distance = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
		HCSR04_TRIG_PULSE();
 80021a8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80021ac:	469c      	mov	ip, r3
 80021ae:	f7ff f829 	bl	8001204 <HCSR04_TRIG_PULSE.0>
		while (hcsr04_Rx_flag == 0) {
 80021b2:	bf00      	nop
 80021b4:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <main+0x1094>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0fa      	beq.n	80021b4 <main+0xf70>
		};
		distance = (time_edge2 - time_edge1) / 58;
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <main+0x10a0>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <main+0x109c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a46      	ldr	r2, [pc, #280]	; (80022e8 <main+0x10a4>)
 80021d0:	fb82 1203 	smull	r1, r2, r2, r3
 80021d4:	441a      	add	r2, r3
 80021d6:	1152      	asrs	r2, r2, #5
 80021d8:	17db      	asrs	r3, r3, #31
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
		percentDist = ((double)(distance - 3)*(double)100)/16;
 80021e0:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80021e4:	3b03      	subs	r3, #3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9a4 	bl	8000534 <__aeabi_i2d>
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <main+0x10a8>)
 80021f2:	f7fe fa09 	bl	8000608 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <main+0x10ac>)
 8002204:	f7fe fb2a 	bl	800085c <__aeabi_ddiv>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f7fe fc0c 	bl	8000a2c <__aeabi_d2iz>
 8002214:	4603      	mov	r3, r0
 8002216:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		if (distance >= 16) percentDist = 99;
 800221a:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 800221e:	2b0f      	cmp	r3, #15
 8002220:	d902      	bls.n	8002228 <main+0xfe4>
 8002222:	2363      	movs	r3, #99	; 0x63
 8002224:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		tens = (percentDist / 10) & 0x0F; // Mask to keep only 4 bits
 8002228:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <main+0x1080>)
 800222e:	fb82 1203 	smull	r1, r2, r2, r3
 8002232:	1092      	asrs	r2, r2, #2
 8002234:	17db      	asrs	r3, r3, #31
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
		ones = (percentDist % 10) & 0x0F; // Mask to keep only 4 bits
 8002242:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <main+0x1080>)
 8002248:	fb83 1302 	smull	r1, r3, r3, r2
 800224c:	1099      	asrs	r1, r3, #2
 800224e:	17d3      	asrs	r3, r2, #31
 8002250:	1ac9      	subs	r1, r1, r3
 8002252:	460b      	mov	r3, r1
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	1ad1      	subs	r1, r2, r3
 800225c:	b2cb      	uxtb	r3, r1
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
		DIGITS_Display(tens, ones);
 8002266:	f897 2142 	ldrb.w	r2, [r7, #322]	; 0x142
 800226a:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fda1 	bl	8000db8 <DIGITS_Display>
		if (percentDist == 0) {
 8002276:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d13e      	bne.n	80022fc <main+0x10b8>
			TIM3->CCR1 = 0;
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <main+0x10b0>)
 8002280:	2200      	movs	r2, #0
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR3 = 0;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <main+0x10b0>)
 8002286:	2200      	movs	r2, #0
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c
			sprintf((char*) txd_msg_buffer, "RESERVOIR IS EMPTY!");
 800228a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800228e:	491a      	ldr	r1, [pc, #104]	; (80022f8 <main+0x10b4>)
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fb1b 	bl	80078cc <siprintf>
			HAL_UART_Transmit(&huart6, txd_msg_buffer,
					strlen((char*) txd_msg_buffer), 100);
 8002296:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800229a:	4618      	mov	r0, r3
 800229c:	f7fd ffa0 	bl	80001e0 <strlen>
 80022a0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, txd_msg_buffer,
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80022a8:	2364      	movs	r3, #100	; 0x64
 80022aa:	4809      	ldr	r0, [pc, #36]	; (80022d0 <main+0x108c>)
 80022ac:	f004 faa5 	bl	80067fa <HAL_UART_Transmit>
			break;
 80022b0:	e32d      	b.n	800290e <main+0x16ca>
 80022b2:	bf00      	nop
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020800 	.word	0x40020800
 80022bc:	20000198 	.word	0x20000198
 80022c0:	20000278 	.word	0x20000278
 80022c4:	66666667 	.word	0x66666667
 80022c8:	00412f4e 	.word	0x00412f4e
 80022cc:	08008430 	.word	0x08008430
 80022d0:	20000224 	.word	0x20000224
 80022d4:	20000078 	.word	0x20000078
 80022d8:	20000268 	.word	0x20000268
 80022dc:	20000269 	.word	0x20000269
 80022e0:	2000026a 	.word	0x2000026a
 80022e4:	2000026c 	.word	0x2000026c
 80022e8:	8d3dcb09 	.word	0x8d3dcb09
 80022ec:	40590000 	.word	0x40590000
 80022f0:	40300000 	.word	0x40300000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	0800848c 	.word	0x0800848c
		}
		if (WallClkInputs[1] == wall_clock || Inlet) {
 80022fc:	4bb2      	ldr	r3, [pc, #712]	; (80025c8 <main+0x1384>)
 80022fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002302:	461a      	mov	r2, r3
 8002304:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <main+0x10d0>
 800230c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002310:	2b00      	cmp	r3, #0
 8002312:	d072      	beq.n	80023fa <main+0x11b6>
			Inlet = 1;
 8002314:	2301      	movs	r3, #1
 8002316:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			strcpy(zone, "INLET");
 800231a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800231e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002322:	4aaa      	ldr	r2, [pc, #680]	; (80025cc <main+0x1388>)
 8002324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002328:	6018      	str	r0, [r3, #0]
 800232a:	3304      	adds	r3, #4
 800232c:	8019      	strh	r1, [r3, #0]
			TIM1->CCR2 = 500;
 800232e:	4ba8      	ldr	r3, [pc, #672]	; (80025d0 <main+0x138c>)
 8002330:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233c:	48a5      	ldr	r0, [pc, #660]	; (80025d4 <main+0x1390>)
 800233e:	f002 f977 	bl	8004630 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	48a2      	ldr	r0, [pc, #648]	; (80025d4 <main+0x1390>)
 800234a:	f002 f971 	bl	8004630 <HAL_GPIO_WritePin>
			if (MotorInputs[0] == 0) {
 800234e:	4ba2      	ldr	r3, [pc, #648]	; (80025d8 <main+0x1394>)
 8002350:	f993 3000 	ldrsb.w	r3, [r3]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d116      	bne.n	8002386 <main+0x1142>
				strcpy(mode, "MANUAL");
 8002358:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800235c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002360:	4a9e      	ldr	r2, [pc, #632]	; (80025dc <main+0x1398>)
 8002362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002366:	6018      	str	r0, [r3, #0]
 8002368:	3304      	adds	r3, #4
 800236a:	8019      	strh	r1, [r3, #0]
 800236c:	3302      	adds	r3, #2
 800236e:	0c0a      	lsrs	r2, r1, #16
 8002370:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 1200 + (ADC_CH9 * 3);
 8002372:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8002380:	4b97      	ldr	r3, [pc, #604]	; (80025e0 <main+0x139c>)
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
			if (MotorInputs[0] == 0) {
 8002384:	e1ce      	b.n	8002724 <main+0x14e0>
			} else if (MotorInputs[0] == 1) {
 8002386:	4b94      	ldr	r3, [pc, #592]	; (80025d8 <main+0x1394>)
 8002388:	f993 3000 	ldrsb.w	r3, [r3]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10d      	bne.n	80023ac <main+0x1168>
				strcpy(mode, "60");
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4a93      	ldr	r2, [pc, #588]	; (80025e4 <main+0x13a0>)
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	4611      	mov	r1, r2
 800239a:	8019      	strh	r1, [r3, #0]
 800239c:	3302      	adds	r3, #2
 800239e:	0c12      	lsrs	r2, r2, #16
 80023a0:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 1200;
 80023a2:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <main+0x139c>)
 80023a4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34
			if (MotorInputs[0] == 0) {
 80023aa:	e1bb      	b.n	8002724 <main+0x14e0>
			} else if (MotorInputs[0] == 2) {
 80023ac:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <main+0x1394>)
 80023ae:	f993 3000 	ldrsb.w	r3, [r3]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d10d      	bne.n	80023d2 <main+0x118e>
				strcpy(mode, "80");
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4a8b      	ldr	r2, [pc, #556]	; (80025e8 <main+0x13a4>)
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4611      	mov	r1, r2
 80023c0:	8019      	strh	r1, [r3, #0]
 80023c2:	3302      	adds	r3, #2
 80023c4:	0c12      	lsrs	r2, r2, #16
 80023c6:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 1600;
 80023c8:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <main+0x139c>)
 80023ca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34
			if (MotorInputs[0] == 0) {
 80023d0:	e1a8      	b.n	8002724 <main+0x14e0>
			} else if (MotorInputs[0] == 3) {
 80023d2:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <main+0x1394>)
 80023d4:	f993 3000 	ldrsb.w	r3, [r3]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	f040 81a3 	bne.w	8002724 <main+0x14e0>
				strcpy(mode, "99");
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	4a82      	ldr	r2, [pc, #520]	; (80025ec <main+0x13a8>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	8019      	strh	r1, [r3, #0]
 80023ea:	3302      	adds	r3, #2
 80023ec:	0c12      	lsrs	r2, r2, #16
 80023ee:	701a      	strb	r2, [r3, #0]
				TIM3->CCR1 = 1980;
 80023f0:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <main+0x139c>)
 80023f2:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
			if (MotorInputs[0] == 0) {
 80023f8:	e194      	b.n	8002724 <main+0x14e0>
			}
		} else if (WallClkInputs[3] == wall_clock || Z1) {
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <main+0x1384>)
 80023fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002400:	461a      	mov	r2, r3
 8002402:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <main+0x11ce>
 800240a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800240e:	2b00      	cmp	r3, #0
 8002410:	d066      	beq.n	80024e0 <main+0x129c>
			Z1 = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			TIM1->CCR2 = 2000;
 8002418:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <main+0x138c>)
 800241a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800241e:	639a      	str	r2, [r3, #56]	; 0x38
			strcpy(zone, "1");
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	2231      	movs	r2, #49	; 0x31
 8002426:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8002428:	2201      	movs	r2, #1
 800242a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242e:	4869      	ldr	r0, [pc, #420]	; (80025d4 <main+0x1390>)
 8002430:	f002 f8fe 	bl	8004630 <HAL_GPIO_WritePin>
			if (MotorInputs[1] == 0) {
 8002434:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <main+0x1394>)
 8002436:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <main+0x1228>
				strcpy(mode, "MANUAL");
 800243e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002442:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002446:	4a65      	ldr	r2, [pc, #404]	; (80025dc <main+0x1398>)
 8002448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800244c:	6018      	str	r0, [r3, #0]
 800244e:	3304      	adds	r3, #4
 8002450:	8019      	strh	r1, [r3, #0]
 8002452:	3302      	adds	r3, #2
 8002454:	0c0a      	lsrs	r2, r1, #16
 8002456:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1200 + (ADC_CH9 * 3);
 8002458:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8002466:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <main+0x139c>)
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[1] == 0) {
 800246a:	e15d      	b.n	8002728 <main+0x14e4>
			} else if (MotorInputs[1] == 1) {
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <main+0x1394>)
 800246e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10d      	bne.n	8002492 <main+0x124e>
				strcpy(mode, "60");
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4a5a      	ldr	r2, [pc, #360]	; (80025e4 <main+0x13a0>)
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4611      	mov	r1, r2
 8002480:	8019      	strh	r1, [r3, #0]
 8002482:	3302      	adds	r3, #2
 8002484:	0c12      	lsrs	r2, r2, #16
 8002486:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1200;
 8002488:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <main+0x139c>)
 800248a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[1] == 0) {
 8002490:	e14a      	b.n	8002728 <main+0x14e4>
			} else if (MotorInputs[1] == 2) {
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <main+0x1394>)
 8002494:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d10d      	bne.n	80024b8 <main+0x1274>
				strcpy(mode, "80");
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4a51      	ldr	r2, [pc, #324]	; (80025e8 <main+0x13a4>)
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4611      	mov	r1, r2
 80024a6:	8019      	strh	r1, [r3, #0]
 80024a8:	3302      	adds	r3, #2
 80024aa:	0c12      	lsrs	r2, r2, #16
 80024ac:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1600;
 80024ae:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <main+0x139c>)
 80024b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[1] == 0) {
 80024b6:	e137      	b.n	8002728 <main+0x14e4>
			} else if (MotorInputs[1] == 3) {
 80024b8:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <main+0x1394>)
 80024ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	f040 8132 	bne.w	8002728 <main+0x14e4>
				strcpy(mode, "99");
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4a48      	ldr	r2, [pc, #288]	; (80025ec <main+0x13a8>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4611      	mov	r1, r2
 80024ce:	8019      	strh	r1, [r3, #0]
 80024d0:	3302      	adds	r3, #2
 80024d2:	0c12      	lsrs	r2, r2, #16
 80024d4:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1980;
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <main+0x139c>)
 80024d8:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80024dc:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[1] == 0) {
 80024de:	e123      	b.n	8002728 <main+0x14e4>
			}
		} else if (WallClkInputs[5] == wall_clock || Z2) {
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <main+0x1384>)
 80024e2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d003      	beq.n	80024f8 <main+0x12b4>
 80024f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07b      	beq.n	80025f0 <main+0x13ac>
			Z2 = 1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			TIM1->CCR2 = 1500;
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <main+0x138c>)
 8002500:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
			strcpy(zone, "2");
 8002506:	f107 0318 	add.w	r3, r7, #24
 800250a:	2232      	movs	r2, #50	; 0x32
 800250c:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002514:	482f      	ldr	r0, [pc, #188]	; (80025d4 <main+0x1390>)
 8002516:	f002 f88b 	bl	8004630 <HAL_GPIO_WritePin>
			if (MotorInputs[2] == 0) {
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <main+0x1394>)
 800251c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d116      	bne.n	8002552 <main+0x130e>
				strcpy(mode, "MANUAL");
 8002524:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002528:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800252c:	4a2b      	ldr	r2, [pc, #172]	; (80025dc <main+0x1398>)
 800252e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002532:	6018      	str	r0, [r3, #0]
 8002534:	3304      	adds	r3, #4
 8002536:	8019      	strh	r1, [r3, #0]
 8002538:	3302      	adds	r3, #2
 800253a:	0c0a      	lsrs	r2, r1, #16
 800253c:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1200 + (ADC_CH9 * 3);
 800253e:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <main+0x139c>)
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[2] == 0) {
 8002550:	e0ec      	b.n	800272c <main+0x14e8>
			} else if (MotorInputs[2] == 1) {
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <main+0x1394>)
 8002554:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10d      	bne.n	8002578 <main+0x1334>
				strcpy(mode, "60");
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <main+0x13a0>)
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4611      	mov	r1, r2
 8002566:	8019      	strh	r1, [r3, #0]
 8002568:	3302      	adds	r3, #2
 800256a:	0c12      	lsrs	r2, r2, #16
 800256c:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1200;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <main+0x139c>)
 8002570:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[2] == 0) {
 8002576:	e0d9      	b.n	800272c <main+0x14e8>
			} else if (MotorInputs[2] == 2) {
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <main+0x1394>)
 800257a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d10d      	bne.n	800259e <main+0x135a>
				strcpy(mode, "80");
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <main+0x13a4>)
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	4611      	mov	r1, r2
 800258c:	8019      	strh	r1, [r3, #0]
 800258e:	3302      	adds	r3, #2
 8002590:	0c12      	lsrs	r2, r2, #16
 8002592:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1600;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <main+0x139c>)
 8002596:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[2] == 0) {
 800259c:	e0c6      	b.n	800272c <main+0x14e8>
			} else if (MotorInputs[2] == 3) {
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <main+0x1394>)
 80025a0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	f040 80c1 	bne.w	800272c <main+0x14e8>
				strcpy(mode, "99");
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <main+0x13a8>)
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4611      	mov	r1, r2
 80025b4:	8019      	strh	r1, [r3, #0]
 80025b6:	3302      	adds	r3, #2
 80025b8:	0c12      	lsrs	r2, r2, #16
 80025ba:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1980;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <main+0x139c>)
 80025be:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[2] == 0) {
 80025c4:	e0b2      	b.n	800272c <main+0x14e8>
 80025c6:	bf00      	nop
 80025c8:	20000278 	.word	0x20000278
 80025cc:	080084a0 	.word	0x080084a0
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40020000 	.word	0x40020000
 80025d8:	20000274 	.word	0x20000274
 80025dc:	080084a8 	.word	0x080084a8
 80025e0:	40000400 	.word	0x40000400
 80025e4:	080084b0 	.word	0x080084b0
 80025e8:	080084b4 	.word	0x080084b4
 80025ec:	080084b8 	.word	0x080084b8
			}
		} else if (WallClkInputs[7] == wall_clock || Z3) {
 80025f0:	4bb5      	ldr	r3, [pc, #724]	; (80028c8 <main+0x1684>)
 80025f2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <main+0x13c4>
 8002600:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d065      	beq.n	80026d4 <main+0x1490>
			Z3 = 1;
 8002608:	2301      	movs	r3, #1
 800260a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			TIM1->CCR2 = 1000;
 800260e:	4baf      	ldr	r3, [pc, #700]	; (80028cc <main+0x1688>)
 8002610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
			strcpy(zone, "3");
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	2233      	movs	r2, #51	; 0x33
 800261c:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002624:	48aa      	ldr	r0, [pc, #680]	; (80028d0 <main+0x168c>)
 8002626:	f002 f803 	bl	8004630 <HAL_GPIO_WritePin>
			if (MotorInputs[3] == 0) {
 800262a:	4baa      	ldr	r3, [pc, #680]	; (80028d4 <main+0x1690>)
 800262c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <main+0x141e>
				strcpy(mode, "MANUAL");
 8002634:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002638:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800263c:	4aa6      	ldr	r2, [pc, #664]	; (80028d8 <main+0x1694>)
 800263e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002642:	6018      	str	r0, [r3, #0]
 8002644:	3304      	adds	r3, #4
 8002646:	8019      	strh	r1, [r3, #0]
 8002648:	3302      	adds	r3, #2
 800264a:	0c0a      	lsrs	r2, r1, #16
 800264c:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1200 + (ADC_CH9 * 3);
 800264e:	f897 2139 	ldrb.w	r2, [r7, #313]	; 0x139
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800265c:	4b9f      	ldr	r3, [pc, #636]	; (80028dc <main+0x1698>)
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[3] == 0) {
 8002660:	e066      	b.n	8002730 <main+0x14ec>
			} else if (MotorInputs[3] == 1) {
 8002662:	4b9c      	ldr	r3, [pc, #624]	; (80028d4 <main+0x1690>)
 8002664:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10d      	bne.n	8002688 <main+0x1444>
				strcpy(mode, "60");
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	4a9b      	ldr	r2, [pc, #620]	; (80028e0 <main+0x169c>)
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4611      	mov	r1, r2
 8002676:	8019      	strh	r1, [r3, #0]
 8002678:	3302      	adds	r3, #2
 800267a:	0c12      	lsrs	r2, r2, #16
 800267c:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1200;
 800267e:	4b97      	ldr	r3, [pc, #604]	; (80028dc <main+0x1698>)
 8002680:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[3] == 0) {
 8002686:	e053      	b.n	8002730 <main+0x14ec>
			} else if (MotorInputs[3] == 2) {
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <main+0x1690>)
 800268a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d10d      	bne.n	80026ae <main+0x146a>
				strcpy(mode, "80");
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4a93      	ldr	r2, [pc, #588]	; (80028e4 <main+0x16a0>)
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4611      	mov	r1, r2
 800269c:	8019      	strh	r1, [r3, #0]
 800269e:	3302      	adds	r3, #2
 80026a0:	0c12      	lsrs	r2, r2, #16
 80026a2:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1600;
 80026a4:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <main+0x1698>)
 80026a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[3] == 0) {
 80026ac:	e040      	b.n	8002730 <main+0x14ec>
			} else if (MotorInputs[3] == 3) {
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <main+0x1690>)
 80026b0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d13b      	bne.n	8002730 <main+0x14ec>
				strcpy(mode, "99");
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4a8a      	ldr	r2, [pc, #552]	; (80028e8 <main+0x16a4>)
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4611      	mov	r1, r2
 80026c2:	8019      	strh	r1, [r3, #0]
 80026c4:	3302      	adds	r3, #2
 80026c6:	0c12      	lsrs	r2, r2, #16
 80026c8:	701a      	strb	r2, [r3, #0]
				TIM3->CCR3 = 1980;
 80026ca:	4b84      	ldr	r3, [pc, #528]	; (80028dc <main+0x1698>)
 80026cc:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c
			if (MotorInputs[3] == 0) {
 80026d2:	e02d      	b.n	8002730 <main+0x14ec>
			}
		} else {
			TIM1->CCR2 = 2500;
 80026d4:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <main+0x1688>)
 80026d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = 0;
 80026dc:	4b7f      	ldr	r3, [pc, #508]	; (80028dc <main+0x1698>)
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR3 = 0;
 80026e2:	4b7e      	ldr	r3, [pc, #504]	; (80028dc <main+0x1698>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ee:	4878      	ldr	r0, [pc, #480]	; (80028d0 <main+0x168c>)
 80026f0:	f001 ff9e 	bl	8004630 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026fa:	4875      	ldr	r0, [pc, #468]	; (80028d0 <main+0x168c>)
 80026fc:	f001 ff98 	bl	8004630 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002706:	4872      	ldr	r0, [pc, #456]	; (80028d0 <main+0x168c>)
 8002708:	f001 ff92 	bl	8004630 <HAL_GPIO_WritePin>
			rpm_tick_count = 0;
 800270c:	4b77      	ldr	r3, [pc, #476]	; (80028ec <main+0x16a8>)
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]
			strcpy(zone, "N/A");
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	4a76      	ldr	r2, [pc, #472]	; (80028f0 <main+0x16ac>)
 8002718:	601a      	str	r2, [r3, #0]
			strcpy(mode, "N/A");
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4a74      	ldr	r2, [pc, #464]	; (80028f0 <main+0x16ac>)
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e006      	b.n	8002732 <main+0x14ee>
			if (MotorInputs[0] == 0) {
 8002724:	bf00      	nop
 8002726:	e004      	b.n	8002732 <main+0x14ee>
			if (MotorInputs[1] == 0) {
 8002728:	bf00      	nop
 800272a:	e002      	b.n	8002732 <main+0x14ee>
			if (MotorInputs[2] == 0) {
 800272c:	bf00      	nop
 800272e:	e000      	b.n	8002732 <main+0x14ee>
			if (MotorInputs[3] == 0) {
 8002730:	bf00      	nop
		}
		if (WallClkInputs[2] == wall_clock)
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <main+0x1684>)
 8002734:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002738:	461a      	mov	r2, r3
 800273a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800273e:	4293      	cmp	r3, r2
 8002740:	d102      	bne.n	8002748 <main+0x1504>
			Inlet = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		if (WallClkInputs[4] == wall_clock)
 8002748:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <main+0x1684>)
 800274a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800274e:	461a      	mov	r2, r3
 8002750:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002754:	4293      	cmp	r3, r2
 8002756:	d102      	bne.n	800275e <main+0x151a>
			Z1 = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		if (WallClkInputs[6] == wall_clock)
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <main+0x1684>)
 8002760:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002764:	461a      	mov	r2, r3
 8002766:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800276a:	4293      	cmp	r3, r2
 800276c:	d102      	bne.n	8002774 <main+0x1530>
			Z2 = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		if (WallClkInputs[8] == wall_clock)
 8002774:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <main+0x1684>)
 8002776:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800277a:	461a      	mov	r2, r3
 800277c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <main+0x1546>
			Z3 = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		if (clock_secs % 6 == 0 && clock_secs != 0 && print_once != 1) {
 800278a:	4b5a      	ldr	r3, [pc, #360]	; (80028f4 <main+0x16b0>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <main+0x16b4>)
 8002792:	fba3 1302 	umull	r1, r3, r3, r2
 8002796:	0899      	lsrs	r1, r3, #2
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d17b      	bne.n	80028a0 <main+0x165c>
 80027a8:	4b52      	ldr	r3, [pc, #328]	; (80028f4 <main+0x16b0>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d076      	beq.n	80028a0 <main+0x165c>
 80027b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d072      	beq.n	80028a0 <main+0x165c>
			rpm = rpm_tick_count * 0.5;
 80027ba:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <main+0x16a8>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd feb7 	bl	8000534 <__aeabi_i2d>
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <main+0x16b8>)
 80027cc:	f7fd ff1c 	bl	8000608 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe f950 	bl	8000a7c <__aeabi_d2uiz>
 80027dc:	4603      	mov	r3, r0
 80027de:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
			sprintf((char*) txd_msg_buffer, "	%d:%d		%s		%s		%d		%d\r\n",
 80027e2:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80027e6:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 80027ea:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80027ee:	9203      	str	r2, [sp, #12]
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	f107 0318 	add.w	r3, r7, #24
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002802:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002806:	493e      	ldr	r1, [pc, #248]	; (8002900 <main+0x16bc>)
 8002808:	f005 f860 	bl	80078cc <siprintf>
					w_clk_mins, w_clk_secs, zone, mode, rpm, distance);
			HAL_UART_Transmit(&huart6, txd_msg_buffer,
					strlen((char*) txd_msg_buffer), 100);
 800280c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fce5 	bl	80001e0 <strlen>
 8002816:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart6, txd_msg_buffer,
 8002818:	b29a      	uxth	r2, r3
 800281a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800281e:	2364      	movs	r3, #100	; 0x64
 8002820:	4838      	ldr	r0, [pc, #224]	; (8002904 <main+0x16c0>)
 8002822:	f003 ffea 	bl	80067fa <HAL_UART_Transmit>
			wall_clock++;
 8002826:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800282a:	3301      	adds	r3, #1
 800282c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
			if (wall_clock == 24)
 8002830:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002834:	2b18      	cmp	r3, #24
 8002836:	d102      	bne.n	800283e <main+0x15fa>
				wall_clock = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
			if (wall_clock == WallClkInputs[0])
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <main+0x1684>)
 8002840:	f993 3000 	ldrsb.w	r3, [r3]
 8002844:	461a      	mov	r2, r3
 8002846:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800284a:	4293      	cmp	r3, r2
 800284c:	d05e      	beq.n	800290c <main+0x16c8>
				break;
			w_clk_mins = wall_clock / 10;
 800284e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002852:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <main+0x16c4>)
 8002854:	fb82 1203 	smull	r1, r2, r2, r3
 8002858:	1092      	asrs	r2, r2, #2
 800285a:	17db      	asrs	r3, r3, #31
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
			w_clk_secs = ((wall_clock % 10) * 60) / 10;
 8002862:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <main+0x16c4>)
 8002868:	fb83 2301 	smull	r2, r3, r3, r1
 800286c:	109a      	asrs	r2, r3, #2
 800286e:	17cb      	asrs	r3, r1, #31
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	1aca      	subs	r2, r1, r3
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
			rpm_tick_count = 0;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <main+0x16a8>)
 800288a:	2200      	movs	r2, #0
 800288c:	801a      	strh	r2, [r3, #0]
			TIM3->CCR1 = 0;
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <main+0x1698>)
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR3 = 0;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <main+0x1698>)
 8002896:	2200      	movs	r2, #0
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c
			print_once = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		}
		if (clock_secs % 6 != 0) {
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <main+0x16b0>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <main+0x16b4>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	0899      	lsrs	r1, r3, #2
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f43f ac4b 	beq.w	8002156 <main+0xf12>
			print_once = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	while (1) {
 80028c6:	e446      	b.n	8002156 <main+0xf12>
 80028c8:	20000278 	.word	0x20000278
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40020000 	.word	0x40020000
 80028d4:	20000274 	.word	0x20000274
 80028d8:	080084a8 	.word	0x080084a8
 80028dc:	40000400 	.word	0x40000400
 80028e0:	080084b0 	.word	0x080084b0
 80028e4:	080084b4 	.word	0x080084b4
 80028e8:	080084b8 	.word	0x080084b8
 80028ec:	2000026e 	.word	0x2000026e
 80028f0:	00412f4e 	.word	0x00412f4e
 80028f4:	20000270 	.word	0x20000270
 80028f8:	aaaaaaab 	.word	0xaaaaaaab
 80028fc:	3fe00000 	.word	0x3fe00000
 8002900:	080084bc 	.word	0x080084bc
 8002904:	20000224 	.word	0x20000224
 8002908:	66666667 	.word	0x66666667
				break;
 800290c:	bf00      	nop
		}

	}
	HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
 800290e:	2201      	movs	r2, #1
 8002910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <main+0x1704>)
 8002916:	f001 fe8b 	bl	8004630 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002920:	4809      	ldr	r0, [pc, #36]	; (8002948 <main+0x1704>)
 8002922:	f001 fe85 	bl	8004630 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <main+0x1704>)
 800292e:	f001 fe7f 	bl	8004630 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	2120      	movs	r1, #32
 8002936:	4804      	ldr	r0, [pc, #16]	; (8002948 <main+0x1704>)
 8002938:	f001 fe7a 	bl	8004630 <HAL_GPIO_WritePin>
 800293c:	2300      	movs	r3, #0
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 800293e:	4618      	mov	r0, r3
 8002940:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020000 	.word	0x40020000

0800294c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002952:	f107 0320 	add.w	r3, r7, #32
 8002956:	2230      	movs	r2, #48	; 0x30
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f004 ffd6 	bl	800790c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <SystemClock_Config+0xb8>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <SystemClock_Config+0xb8>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <SystemClock_Config+0xb8>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <SystemClock_Config+0xbc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <SystemClock_Config+0xbc>)
 800299a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <SystemClock_Config+0xbc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029ac:	2302      	movs	r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b0:	2301      	movs	r3, #1
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b4:	2310      	movs	r3, #16
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029bc:	f107 0320 	add.w	r3, r7, #32
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fe67 	bl	8004694 <HAL_RCC_OscConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <SystemClock_Config+0x84>
		Error_Handler();
 80029cc:	f000 fbb0 	bl	8003130 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80029d0:	230f      	movs	r3, #15
 80029d2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 f8ca 	bl	8004b84 <HAL_RCC_ClockConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <SystemClock_Config+0xae>
		Error_Handler();
 80029f6:	f000 fb9b 	bl	8003130 <Error_Handler>
	}
}
 80029fa:	bf00      	nop
 80029fc:	3750      	adds	r7, #80	; 0x50
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40007000 	.word	0x40007000

08002a0c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002a12:	463b      	mov	r3, r7
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a20:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <MX_ADC1_Init+0x9c>)
 8002a22:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <MX_ADC1_Init+0xa0>)
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002a6a:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a6c:	f000 febe 	bl	80037ec <HAL_ADC_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8002a76:	f000 fb5b 	bl	8003130 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8002a7a:	2309      	movs	r3, #9
 8002a7c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a86:	463b      	mov	r3, r7
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <MX_ADC1_Init+0x98>)
 8002a8c:	f001 f872 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_ADC1_Init+0x8e>
		Error_Handler();
 8002a96:	f000 fb4b 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000078 	.word	0x20000078
 8002aa8:	40012000 	.word	0x40012000
 8002aac:	0f000001 	.word	0x0f000001

08002ab0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b092      	sub	sp, #72	; 0x48
 8002ab4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 ff16 	bl	800790c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002ae0:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002ae2:	4a34      	ldr	r2, [pc, #208]	; (8002bb4 <MX_TIM1_Init+0x104>)
 8002ae4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16 - 1;
 8002ae6:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002ae8:	220f      	movs	r2, #15
 8002aea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 20000 - 1;
 8002af2:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002af4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002af8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002b0c:	4828      	ldr	r0, [pc, #160]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002b0e:	f002 fb65 	bl	80051dc <HAL_TIM_PWM_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8002b18:	f000 fb0a 	bl	8003130 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4821      	ldr	r0, [pc, #132]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002b2c:	f003 fd44 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002b36:	f000 fafb 	bl	8003130 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3a:	2360      	movs	r3, #96	; 0x60
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 500 - 1;
 8002b3e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002b62:	f002 ff53 	bl	8005a0c <HAL_TIM_PWM_ConfigChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8002b6c:	f000 fae0 	bl	8003130 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b88:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4807      	ldr	r0, [pc, #28]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002b94:	f003 fd7e 	bl	8006694 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 8002b9e:	f000 fac7 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002ba2:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <MX_TIM1_Init+0x100>)
 8002ba4:	f000 fbda 	bl	800335c <HAL_TIM_MspPostInit>

}
 8002ba8:	bf00      	nop
 8002baa:	3748      	adds	r7, #72	; 0x48
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200000c0 	.word	0x200000c0
 8002bb4:	40010000 	.word	0x40010000

08002bb8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002bbe:	f107 0318 	add.w	r3, r7, #24
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16 - 1;
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002bec:	220f      	movs	r2, #15
 8002bee:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65536 - 1;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bfc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002c0a:	4822      	ldr	r0, [pc, #136]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c0c:	f002 f9da 	bl	8004fc4 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM2_Init+0x62>
		Error_Handler();
 8002c16:	f000 fa8b 	bl	8003130 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002c20:	f107 0318 	add.w	r3, r7, #24
 8002c24:	4619      	mov	r1, r3
 8002c26:	481b      	ldr	r0, [pc, #108]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c28:	f002 ffb2 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002c32:	f000 fa7d 	bl	8003130 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8002c36:	4817      	ldr	r0, [pc, #92]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c38:	f002 fbd0 	bl	80053dc <HAL_TIM_IC_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM2_Init+0x8e>
		Error_Handler();
 8002c42:	f000 fa75 	bl	8003130 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002c4e:	f107 0310 	add.w	r3, r7, #16
 8002c52:	4619      	mov	r1, r3
 8002c54:	480f      	ldr	r0, [pc, #60]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c56:	f003 fcaf 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8002c60:	f000 fa66 	bl	8003130 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002c64:	230a      	movs	r3, #10
 8002c66:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002c74:	463b      	mov	r3, r7
 8002c76:	2200      	movs	r2, #0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4806      	ldr	r0, [pc, #24]	; (8002c94 <MX_TIM2_Init+0xdc>)
 8002c7c:	f002 fe2a 	bl	80058d4 <HAL_TIM_IC_ConfigChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM2_Init+0xd2>
		Error_Handler();
 8002c86:	f000 fa53 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	; 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000108 	.word	0x20000108

08002c98 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002cac:	f107 0320 	add.w	r3, r7, #32
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
 8002cc4:	615a      	str	r2, [r3, #20]
 8002cc6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002cc8:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <MX_TIM3_Init+0x104>)
 8002ccc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16 - 1;
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2000 - 1;
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002cdc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002ce0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002cee:	482a      	ldr	r0, [pc, #168]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002cf0:	f002 f968 	bl	8004fc4 <HAL_TIM_Base_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM3_Init+0x66>
		Error_Handler();
 8002cfa:	f000 fa19 	bl	8003130 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4823      	ldr	r0, [pc, #140]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002d0c:	f002 ff40 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM3_Init+0x82>
		Error_Handler();
 8002d16:	f000 fa0b 	bl	8003130 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002d1a:	481f      	ldr	r0, [pc, #124]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002d1c:	f002 fa5e 	bl	80051dc <HAL_TIM_PWM_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM3_Init+0x92>
		Error_Handler();
 8002d26:	f000 fa03 	bl	8003130 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002d32:	f107 0320 	add.w	r3, r7, #32
 8002d36:	4619      	mov	r1, r3
 8002d38:	4817      	ldr	r0, [pc, #92]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002d3a:	f003 fc3d 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002d44:	f000 f9f4 	bl	8003130 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d48:	2360      	movs	r3, #96	; 0x60
 8002d4a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1200 - 1;
 8002d4c:	f240 43af 	movw	r3, #1199	; 0x4af
 8002d50:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4619      	mov	r1, r3
 8002d60:	480d      	ldr	r0, [pc, #52]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002d62:	f002 fe53 	bl	8005a0c <HAL_TIM_PWM_ConfigChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8002d6c:	f000 f9e0 	bl	8003130 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	2208      	movs	r2, #8
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4807      	ldr	r0, [pc, #28]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002d7c:	f002 fe46 	bl	8005a0c <HAL_TIM_PWM_ConfigChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM3_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 8002d86:	f000 f9d3 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002d8a:	4803      	ldr	r0, [pc, #12]	; (8002d98 <MX_TIM3_Init+0x100>)
 8002d8c:	f000 fae6 	bl	800335c <HAL_TIM_MspPostInit>

}
 8002d90:	bf00      	nop
 8002d92:	3738      	adds	r7, #56	; 0x38
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000150 	.word	0x20000150
 8002d9c:	40000400 	.word	0x40000400

08002da0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002db4:	463b      	mov	r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <MX_TIM5_Init+0x98>)
 8002dc0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 16000 - 1;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002dc4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002dc8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 1000 - 1;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002dd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dd6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002de4:	4813      	ldr	r0, [pc, #76]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002de6:	f002 f8ed 	bl	8004fc4 <HAL_TIM_Base_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM5_Init+0x54>
		Error_Handler();
 8002df0:	f000 f99e 	bl	8003130 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480c      	ldr	r0, [pc, #48]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002e02:	f002 fec5 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM5_Init+0x70>
		Error_Handler();
 8002e0c:	f000 f990 	bl	8003130 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002e18:	463b      	mov	r3, r7
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4805      	ldr	r0, [pc, #20]	; (8002e34 <MX_TIM5_Init+0x94>)
 8002e1e:	f003 fbcb 	bl	80065b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002e28:	f000 f982 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000198 	.word	0x20000198
 8002e38:	40000c00 	.word	0x40000c00

08002e3c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <MX_USART2_UART_Init+0x50>)
 8002e44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e62:	220c      	movs	r2, #12
 8002e64:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_USART2_UART_Init+0x4c>)
 8002e74:	f003 fc74 	bl	8006760 <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002e7e:	f000 f957 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200001e0 	.word	0x200001e0
 8002e8c:	40004400 	.word	0x40004400

08002e90 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <MX_USART6_UART_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ea0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_USART6_UART_Init+0x4c>)
 8002ec8:	f003 fc4a 	bl	8006760 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8002ed2:	f000 f92d 	bl	8003130 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000224 	.word	0x20000224
 8002ee0:	40011400 	.word	0x40011400

08002ee4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b52      	ldr	r3, [pc, #328]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a51      	ldr	r2, [pc, #324]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b4b      	ldr	r3, [pc, #300]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a4a      	ldr	r2, [pc, #296]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b48      	ldr	r3, [pc, #288]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b44      	ldr	r3, [pc, #272]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a43      	ldr	r2, [pc, #268]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <MX_GPIO_Init+0x164>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f641 1130 	movw	r1, #6448	; 0x1930
 8002f70:	4836      	ldr	r0, [pc, #216]	; (800304c <MX_GPIO_Init+0x168>)
 8002f72:	f001 fb5d 	bl	8004630 <HAL_GPIO_WritePin>
			DIGIT_A3_Pin | LD2_Pin | LED_BLUE_Pin | LED_GREEN_Pin | LED_RED_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002f7c:	4834      	ldr	r0, [pc, #208]	; (8003050 <MX_GPIO_Init+0x16c>)
 8002f7e:	f001 fb57 	bl	8004630 <HAL_GPIO_WritePin>
			DIGIT_A1_Pin | DIGIT_B0_Pin | DIGIT_B1_Pin | DIGIT_B2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002f82:	2200      	movs	r2, #0
 8002f84:	f44f 7158 	mov.w	r1, #864	; 0x360
 8002f88:	4832      	ldr	r0, [pc, #200]	; (8003054 <MX_GPIO_Init+0x170>)
 8002f8a:	f001 fb51 	bl	8004630 <HAL_GPIO_WritePin>
			DIGIT_B3_Pin | DIGIT_A0_Pin | HCSR04_TRIG_Pin | DIGIT_A2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	482a      	ldr	r0, [pc, #168]	; (8003050 <MX_GPIO_Init+0x16c>)
 8002fa6:	f001 f9a7 	bl	80042f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIGIT_A3_Pin LD2_Pin LED_BLUE_Pin LED_GREEN_Pin
	 LED_RED_Pin */
	GPIO_InitStruct.Pin = DIGIT_A3_Pin | LD2_Pin | LED_BLUE_Pin | LED_GREEN_Pin
 8002faa:	f641 1330 	movw	r3, #6448	; 0x1930
 8002fae:	617b      	str	r3, [r7, #20]
			| LED_RED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4822      	ldr	r0, [pc, #136]	; (800304c <MX_GPIO_Init+0x168>)
 8002fc4:	f001 f998 	bl	80042f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RPM_TICK_Pin */
	GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8002fc8:	2304      	movs	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	481d      	ldr	r0, [pc, #116]	; (8003054 <MX_GPIO_Init+0x170>)
 8002fde:	f001 f98b 	bl	80042f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIGIT_A1_Pin DIGIT_B0_Pin DIGIT_B1_Pin DIGIT_B2_Pin */
	GPIO_InitStruct.Pin = DIGIT_A1_Pin | DIGIT_B0_Pin | DIGIT_B1_Pin
 8002fe2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002fe6:	617b      	str	r3, [r7, #20]
			| DIGIT_B2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4815      	ldr	r0, [pc, #84]	; (8003050 <MX_GPIO_Init+0x16c>)
 8002ffc:	f001 f97c 	bl	80042f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIGIT_B3_Pin DIGIT_A0_Pin HCSR04_TRIG_Pin DIGIT_A2_Pin */
	GPIO_InitStruct.Pin = DIGIT_B3_Pin | DIGIT_A0_Pin | HCSR04_TRIG_Pin
 8003000:	f44f 7358 	mov.w	r3, #864	; 0x360
 8003004:	617b      	str	r3, [r7, #20]
			| DIGIT_A2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003006:	2301      	movs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	480e      	ldr	r0, [pc, #56]	; (8003054 <MX_GPIO_Init+0x170>)
 800301a:	f001 f96d 	bl	80042f8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2100      	movs	r1, #0
 8003022:	2008      	movs	r0, #8
 8003024:	f001 f89f 	bl	8004166 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003028:	2008      	movs	r0, #8
 800302a:	f001 f8b8 	bl	800419e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	2028      	movs	r0, #40	; 0x28
 8003034:	f001 f897 	bl	8004166 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003038:	2028      	movs	r0, #40	; 0x28
 800303a:	f001 f8b0 	bl	800419e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020800 	.word	0x40020800
 8003054:	40020400 	.word	0x40020400

08003058 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RPM_TICK_Pin) {
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d106      	bne.n	8003076 <HAL_GPIO_EXTI_Callback+0x1e>
		rpm_tick_count += 1;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_GPIO_EXTI_Callback+0x2c>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	3301      	adds	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003074:	801a      	strh	r2, [r3, #0]
	}
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	2000026e 	.word	0x2000026e

08003088 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d123      	bne.n	80030e2 <HAL_TIM_IC_CaptureCallback+0x5a>

		if (htim->Channel == 1) {
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7f1b      	ldrb	r3, [r3, #28]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d11f      	bne.n	80030e2 <HAL_TIM_IC_CaptureCallback+0x5a>
			if (first_edge == 0) {
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_TIM_IC_CaptureCallback+0x3c>
				time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80030ac:	2100      	movs	r1, #0
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f002 fe36 	bl	8005d20 <HAL_TIM_ReadCapturedValue>
 80030b4:	4603      	mov	r3, r0
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_TIM_IC_CaptureCallback+0x68>)
 80030ba:	801a      	strh	r2, [r3, #0]
				first_edge = 1;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
				hcsr04_Rx_flag = 1;
				//first_edge = 0;
			}
		}
	}
}
 80030c2:	e00e      	b.n	80030e2 <HAL_TIM_IC_CaptureCallback+0x5a>
				time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80030c4:	2100      	movs	r1, #0
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f002 fe2a 	bl	8005d20 <HAL_TIM_ReadCapturedValue>
 80030cc:	4603      	mov	r3, r0
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80030d2:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
				hcsr04_Rx_flag = 1;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000269 	.word	0x20000269
 80030f0:	2000026a 	.word	0x2000026a
 80030f4:	2000026c 	.word	0x2000026c
 80030f8:	20000268 	.word	0x20000268

080030fc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
//void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d106      	bne.n	800311c <HAL_TIM_PeriodElapsedCallback+0x20>
		clock_secs += 1; // this could be a variable for seconds etc.
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3301      	adds	r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800311a:	701a      	strb	r2, [r3, #0]
	}
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40000c00 	.word	0x40000c00
 800312c:	20000270 	.word	0x20000270

08003130 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003138:	e7fe      	b.n	8003138 <Error_Handler+0x8>
	...

0800313c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_MspInit+0x4c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HAL_MspInit+0x4c>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_MspInit+0x4c>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_MspInit+0x4c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_MspInit+0x4c>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_MspInit+0x4c>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800317a:	2007      	movs	r0, #7
 800317c:	f000 ffe8 	bl	8004150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_ADC_MspInit+0x7c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d127      	bne.n	80031fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_ADC_MspInit+0x80>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a15      	ldr	r2, [pc, #84]	; (800320c <HAL_ADC_MspInit+0x80>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_ADC_MspInit+0x80>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <HAL_ADC_MspInit+0x80>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a0e      	ldr	r2, [pc, #56]	; (800320c <HAL_ADC_MspInit+0x80>)
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_ADC_MspInit+0x80>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031e6:	2302      	movs	r3, #2
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ea:	2303      	movs	r3, #3
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4805      	ldr	r0, [pc, #20]	; (8003210 <HAL_ADC_MspInit+0x84>)
 80031fa:	f001 f87d 	bl	80042f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40012000 	.word	0x40012000
 800320c:	40023800 	.word	0x40023800
 8003210:	40020400 	.word	0x40020400

08003214 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <HAL_TIM_PWM_MspInit+0x3c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10d      	bne.n	8003242 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_TIM_PWM_MspInit+0x40>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_TIM_PWM_MspInit+0x40>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <HAL_TIM_PWM_MspInit+0x40>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40010000 	.word	0x40010000
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d134      	bne.n	80032e4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	4b33      	ldr	r3, [pc, #204]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a32      	ldr	r2, [pc, #200]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a2b      	ldr	r2, [pc, #172]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2300      	movs	r3, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032c2:	2301      	movs	r3, #1
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4619      	mov	r1, r3
 80032cc:	4820      	ldr	r0, [pc, #128]	; (8003350 <HAL_TIM_Base_MspInit+0xf8>)
 80032ce:	f001 f813 	bl	80042f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	201c      	movs	r0, #28
 80032d8:	f000 ff45 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032dc:	201c      	movs	r0, #28
 80032de:	f000 ff5e 	bl	800419e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032e2:	e02e      	b.n	8003342 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <HAL_TIM_Base_MspInit+0xfc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
}
 800330a:	e01a      	b.n	8003342 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <HAL_TIM_Base_MspInit+0x100>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d115      	bne.n	8003342 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_TIM_Base_MspInit+0xf4>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	2032      	movs	r0, #50	; 0x32
 8003338:	f000 ff15 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800333c:	2032      	movs	r0, #50	; 0x32
 800333e:	f000 ff2e 	bl	800419e <HAL_NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000
 8003354:	40000400 	.word	0x40000400
 8003358:	40000c00 	.word	0x40000c00

0800335c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_TIM_MspPostInit+0xb0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d11f      	bne.n	80033be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_TIM_MspPostInit+0xb4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a22      	ldr	r2, [pc, #136]	; (8003410 <HAL_TIM_MspPostInit+0xb4>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_TIM_MspPostInit+0xb4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800339a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	4817      	ldr	r0, [pc, #92]	; (8003414 <HAL_TIM_MspPostInit+0xb8>)
 80033b8:	f000 ff9e 	bl	80042f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033bc:	e022      	b.n	8003404 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_TIM_MspPostInit+0xbc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d11d      	bne.n	8003404 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_TIM_MspPostInit+0xb4>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_TIM_MspPostInit+0xb4>)
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	6313      	str	r3, [r2, #48]	; 0x30
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_TIM_MspPostInit+0xb4>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80033e4:	2311      	movs	r3, #17
 80033e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033f4:	2302      	movs	r3, #2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	4807      	ldr	r0, [pc, #28]	; (800341c <HAL_TIM_MspPostInit+0xc0>)
 8003400:	f000 ff7a 	bl	80042f8 <HAL_GPIO_Init>
}
 8003404:	bf00      	nop
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40010000 	.word	0x40010000
 8003410:	40023800 	.word	0x40023800
 8003414:	40020000 	.word	0x40020000
 8003418:	40000400 	.word	0x40000400
 800341c:	40020400 	.word	0x40020400

08003420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a36      	ldr	r2, [pc, #216]	; (8003518 <HAL_UART_MspInit+0xf8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d12c      	bne.n	800349c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <HAL_UART_MspInit+0xfc>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a34      	ldr	r2, [pc, #208]	; (800351c <HAL_UART_MspInit+0xfc>)
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_UART_MspInit+0xfc>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_UART_MspInit+0xfc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a2d      	ldr	r2, [pc, #180]	; (800351c <HAL_UART_MspInit+0xfc>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_UART_MspInit+0xfc>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800347a:	230c      	movs	r3, #12
 800347c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800348a:	2307      	movs	r3, #7
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348e:	f107 031c 	add.w	r3, r7, #28
 8003492:	4619      	mov	r1, r3
 8003494:	4822      	ldr	r0, [pc, #136]	; (8003520 <HAL_UART_MspInit+0x100>)
 8003496:	f000 ff2f 	bl	80042f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800349a:	e038      	b.n	800350e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <HAL_UART_MspInit+0x104>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d133      	bne.n	800350e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_UART_MspInit+0xfc>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_UART_MspInit+0xfc>)
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6453      	str	r3, [r2, #68]	; 0x44
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_UART_MspInit+0xfc>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_UART_MspInit+0xfc>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_UART_MspInit+0xfc>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_UART_MspInit+0xfc>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034de:	23c0      	movs	r3, #192	; 0xc0
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034ee:	2308      	movs	r3, #8
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f2:	f107 031c 	add.w	r3, r7, #28
 80034f6:	4619      	mov	r1, r3
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <HAL_UART_MspInit+0x108>)
 80034fa:	f000 fefd 	bl	80042f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2047      	movs	r0, #71	; 0x47
 8003504:	f000 fe2f 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003508:	2047      	movs	r0, #71	; 0x47
 800350a:	f000 fe48 	bl	800419e <HAL_NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3730      	adds	r7, #48	; 0x30
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40004400 	.word	0x40004400
 800351c:	40023800 	.word	0x40023800
 8003520:	40020000 	.word	0x40020000
 8003524:	40011400 	.word	0x40011400
 8003528:	40020800 	.word	0x40020800

0800352c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003530:	e7fe      	b.n	8003530 <NMI_Handler+0x4>

08003532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003536:	e7fe      	b.n	8003536 <HardFault_Handler+0x4>

08003538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800353c:	e7fe      	b.n	800353c <MemManage_Handler+0x4>

0800353e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <BusFault_Handler+0x4>

08003544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <UsageFault_Handler+0x4>

0800354a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003578:	f000 f8f4 	bl	8003764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 8003584:	2004      	movs	r0, #4
 8003586:	f001 f86d 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <TIM2_IRQHandler+0x10>)
 8003596:	f002 f895 	bl	80056c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000108 	.word	0x20000108

080035a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80035a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035ac:	f001 f85a 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <TIM5_IRQHandler+0x10>)
 80035ba:	f002 f883 	bl	80056c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000198 	.word	0x20000198

080035c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <USART6_IRQHandler+0x10>)
 80035ce:	f003 fa49 	bl	8006a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000224 	.word	0x20000224

080035dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <_sbrk+0x5c>)
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <_sbrk+0x60>)
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <_sbrk+0x64>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <_sbrk+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800360c:	f004 f986 	bl	800791c <__errno>
 8003610:	4603      	mov	r3, r0
 8003612:	220c      	movs	r2, #12
 8003614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e009      	b.n	8003630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <_sbrk+0x64>)
 800362c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20018000 	.word	0x20018000
 800363c:	00000400 	.word	0x00000400
 8003640:	20000284 	.word	0x20000284
 8003644:	200003d8 	.word	0x200003d8

08003648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <SystemInit+0x20>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <SystemInit+0x20>)
 8003654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 800366c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003672:	490e      	ldr	r1, [pc, #56]	; (80036ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003674:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003688:	4c0b      	ldr	r4, [pc, #44]	; (80036b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003696:	f7ff ffd7 	bl	8003648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800369a:	f004 f945 	bl	8007928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369e:	f7fd fdd1 	bl	8001244 <main>
  bx  lr    
 80036a2:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 80036a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80036a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80036b0:	08008534 	.word	0x08008534
  ldr r2, =_sbss
 80036b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80036b8:	200003d4 	.word	0x200003d4

080036bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036bc:	e7fe      	b.n	80036bc <ADC_IRQHandler>
	...

080036c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_Init+0x40>)
 80036ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_Init+0x40>)
 80036d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_Init+0x40>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f000 fd31 	bl	8004150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f000 f808 	bl	8003704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f4:	f7ff fd22 	bl	800313c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00

08003704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_InitTick+0x54>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_InitTick+0x58>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371a:	fbb3 f3f1 	udiv	r3, r3, r1
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fd49 	bl	80041ba <HAL_SYSTICK_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e00e      	b.n	8003750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d80a      	bhi.n	800374e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003738:	2200      	movs	r2, #0
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f000 fd11 	bl	8004166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <HAL_InitTick+0x5c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000000 	.word	0x20000000
 800375c:	20000008 	.word	0x20000008
 8003760:	20000004 	.word	0x20000004

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000008 	.word	0x20000008
 8003788:	20000288 	.word	0x20000288

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000288 	.word	0x20000288

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d005      	beq.n	80037ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_Delay+0x44>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ca:	bf00      	nop
 80037cc:	f7ff ffde 	bl	800378c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <HAL_Delay+0x28>
  {
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000008 	.word	0x20000008

080037ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e033      	b.n	800386a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fcbe 	bl	800318c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003832:	f023 0302 	bic.w	r3, r3, #2
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 faba 	bl	8003db8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
 800385a:	e001      	b.n	8003860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_ADC_Start+0x1a>
 800388a:	2302      	movs	r3, #2
 800388c:	e097      	b.n	80039be <HAL_ADC_Start+0x14a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d018      	beq.n	80038d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038b4:	4b45      	ldr	r3, [pc, #276]	; (80039cc <HAL_ADC_Start+0x158>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <HAL_ADC_Start+0x15c>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9a      	lsrs	r2, r3, #18
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038c8:	e002      	b.n	80038d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f9      	bne.n	80038ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d15f      	bne.n	80039a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800390e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	d106      	bne.n	8003932 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f023 0206 	bic.w	r2, r3, #6
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	645a      	str	r2, [r3, #68]	; 0x44
 8003930:	e002      	b.n	8003938 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_ADC_Start+0x160>)
 8003942:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800394c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d129      	bne.n	80039bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e020      	b.n	80039bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_ADC_Start+0x164>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d11b      	bne.n	80039bc <HAL_ADC_Start+0x148>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d114      	bne.n	80039bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	e00b      	b.n	80039bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f043 0210 	orr.w	r2, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000
 80039d0:	431bde83 	.word	0x431bde83
 80039d4:	40012300 	.word	0x40012300
 80039d8:	40012000 	.word	0x40012000

080039dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Stop+0x16>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e021      	b.n	8003a36 <HAL_ADC_Stop+0x5a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d113      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6e:	d10b      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e063      	b.n	8003b50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a88:	f7ff fe80 	bl	800378c <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a8e:	e021      	b.n	8003ad4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d01d      	beq.n	8003ad4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_ADC_PollForConversion+0x6c>
 8003a9e:	f7ff fe75 	bl	800378c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d212      	bcs.n	8003ad4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d00b      	beq.n	8003ad4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e03d      	b.n	8003b50 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d1d6      	bne.n	8003a90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f06f 0212 	mvn.w	r2, #18
 8003aea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d123      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11f      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d006      	beq.n	8003b2a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d111      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e105      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x228>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	d925      	bls.n	8003bec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3b1e      	subs	r3, #30
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68d9      	ldr	r1, [r3, #12]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4603      	mov	r3, r0
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4403      	add	r3, r0
 8003bde:	3b1e      	subs	r3, #30
 8003be0:	409a      	lsls	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	e022      	b.n	8003c32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6919      	ldr	r1, [r3, #16]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	2207      	movs	r2, #7
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4618      	mov	r0, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4403      	add	r3, r0
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d824      	bhi.n	8003c84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	3b05      	subs	r3, #5
 8003c4c:	221f      	movs	r2, #31
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	400a      	ands	r2, r1
 8003c5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	3b05      	subs	r3, #5
 8003c76:	fa00 f203 	lsl.w	r2, r0, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
 8003c82:	e04c      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d824      	bhi.n	8003cd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b23      	subs	r3, #35	; 0x23
 8003c9e:	221f      	movs	r2, #31
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	400a      	ands	r2, r1
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3b23      	subs	r3, #35	; 0x23
 8003cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd4:	e023      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3b41      	subs	r3, #65	; 0x41
 8003ce8:	221f      	movs	r2, #31
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4618      	mov	r0, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	3b41      	subs	r3, #65	; 0x41
 8003d12:	fa00 f203 	lsl.w	r2, r0, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_ADC_ConfigChannel+0x234>)
 8003d20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <HAL_ADC_ConfigChannel+0x238>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1cc>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b12      	cmp	r3, #18
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_ADC_ConfigChannel+0x238>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d123      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d003      	beq.n	8003d5a <HAL_ADC_ConfigChannel+0x1e6>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b11      	cmp	r3, #17
 8003d58:	d11b      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d111      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_ADC_ConfigChannel+0x23c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_ADC_ConfigChannel+0x240>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	0c9a      	lsrs	r2, r3, #18
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d84:	e002      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f9      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40012300 	.word	0x40012300
 8003dac:	40012000 	.word	0x40012000
 8003db0:	20000000 	.word	0x20000000
 8003db4:	431bde83 	.word	0x431bde83

08003db8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dc0:	4b79      	ldr	r3, [pc, #484]	; (8003fa8 <ADC_Init+0x1f0>)
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	4a58      	ldr	r2, [pc, #352]	; (8003fac <ADC_Init+0x1f4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	e00f      	b.n	8003eb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0202 	bic.w	r2, r2, #2
 8003ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e1b      	ldrb	r3, [r3, #24]
 8003ed0:	005a      	lsls	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	035a      	lsls	r2, r3, #13
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	e007      	b.n	8003f2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	051a      	lsls	r2, r3, #20
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6899      	ldr	r1, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f6e:	025a      	lsls	r2, r3, #9
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6899      	ldr	r1, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	029a      	lsls	r2, r3, #10
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40012300 	.word	0x40012300
 8003fac:	0f000001 	.word	0x0f000001

08003fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fe2:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	60d3      	str	r3, [r2, #12]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <__NVIC_GetPriorityGrouping+0x18>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	f003 0307 	and.w	r3, r3, #7
}
 8004006:	4618      	mov	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	2b00      	cmp	r3, #0
 8004024:	db0b      	blt.n	800403e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	4907      	ldr	r1, [pc, #28]	; (800404c <__NVIC_EnableIRQ+0x38>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2001      	movs	r0, #1
 8004036:	fa00 f202 	lsl.w	r2, r0, r2
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000e100 	.word	0xe000e100

08004050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	6039      	str	r1, [r7, #0]
 800405a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db0a      	blt.n	800407a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	490c      	ldr	r1, [pc, #48]	; (800409c <__NVIC_SetPriority+0x4c>)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	0112      	lsls	r2, r2, #4
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	440b      	add	r3, r1
 8004074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004078:	e00a      	b.n	8004090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4908      	ldr	r1, [pc, #32]	; (80040a0 <__NVIC_SetPriority+0x50>)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	3b04      	subs	r3, #4
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	440b      	add	r3, r1
 800408e:	761a      	strb	r2, [r3, #24]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000e100 	.word	0xe000e100
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	2b04      	cmp	r3, #4
 80040c0:	bf28      	it	cs
 80040c2:	2304      	movcs	r3, #4
 80040c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d902      	bls.n	80040d4 <NVIC_EncodePriority+0x30>
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3b03      	subs	r3, #3
 80040d2:	e000      	b.n	80040d6 <NVIC_EncodePriority+0x32>
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	401a      	ands	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040ec:	f04f 31ff 	mov.w	r1, #4294967295
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	43d9      	mvns	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	4313      	orrs	r3, r2
         );
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411c:	d301      	bcc.n	8004122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <SysTick_Config+0x40>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800412a:	210f      	movs	r1, #15
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f7ff ff8e 	bl	8004050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <SysTick_Config+0x40>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <SysTick_Config+0x40>)
 800413c:	2207      	movs	r2, #7
 800413e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	e000e010 	.word	0xe000e010

08004150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff29 	bl	8003fb0 <__NVIC_SetPriorityGrouping>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004178:	f7ff ff3e 	bl	8003ff8 <__NVIC_GetPriorityGrouping>
 800417c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff ff8e 	bl	80040a4 <NVIC_EncodePriority>
 8004188:	4602      	mov	r2, r0
 800418a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff5d 	bl	8004050 <__NVIC_SetPriority>
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff31 	bl	8004014 <__NVIC_EnableIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffa2 	bl	800410c <SysTick_Config>
 80041c8:	4603      	mov	r3, r0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fad4 	bl	800378c <HAL_GetTick>
 80041e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d008      	beq.n	8004204 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e052      	b.n	80042aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0216 	bic.w	r2, r2, #22
 8004212:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004222:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <HAL_DMA_Abort+0x62>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0208 	bic.w	r2, r2, #8
 8004242:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004254:	e013      	b.n	800427e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004256:	f7ff fa99 	bl	800378c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b05      	cmp	r3, #5
 8004262:	d90c      	bls.n	800427e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e015      	b.n	80042aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e4      	bne.n	8004256 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	223f      	movs	r2, #63	; 0x3f
 8004292:	409a      	lsls	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e00c      	b.n	80042ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2205      	movs	r2, #5
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e159      	b.n	80045c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	f040 8148 	bne.w	80045c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d005      	beq.n	800434a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	2b02      	cmp	r3, #2
 8004348:	d130      	bne.n	80043ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0201 	and.w	r2, r3, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d017      	beq.n	80043e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a2 	beq.w	80045c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4b57      	ldr	r3, [pc, #348]	; (80045e0 <HAL_GPIO_Init+0x2e8>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	4a56      	ldr	r2, [pc, #344]	; (80045e0 <HAL_GPIO_Init+0x2e8>)
 8004488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800448c:	6453      	str	r3, [r2, #68]	; 0x44
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <HAL_GPIO_Init+0x2e8>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449a:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_GPIO_Init+0x2ec>)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3302      	adds	r3, #2
 80044a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	220f      	movs	r2, #15
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_GPIO_Init+0x2f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d019      	beq.n	80044fa <HAL_GPIO_Init+0x202>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_GPIO_Init+0x2f4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_GPIO_Init+0x1fe>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a47      	ldr	r2, [pc, #284]	; (80045f0 <HAL_GPIO_Init+0x2f8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00d      	beq.n	80044f2 <HAL_GPIO_Init+0x1fa>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <HAL_GPIO_Init+0x2fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <HAL_GPIO_Init+0x1f6>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <HAL_GPIO_Init+0x300>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_GPIO_Init+0x1f2>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e008      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044ea:	2307      	movs	r3, #7
 80044ec:	e006      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e004      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044fa:	2300      	movs	r3, #0
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	f002 0203 	and.w	r2, r2, #3
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4093      	lsls	r3, r2
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450c:	4935      	ldr	r1, [pc, #212]	; (80045e4 <HAL_GPIO_Init+0x2ec>)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800451a:	4b38      	ldr	r3, [pc, #224]	; (80045fc <HAL_GPIO_Init+0x304>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800453e:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <HAL_GPIO_Init+0x304>)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_GPIO_Init+0x304>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045bc:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_GPIO_Init+0x304>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	f67f aea2 	bls.w	8004314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40013800 	.word	0x40013800
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020800 	.word	0x40020800
 80045f4:	40020c00 	.word	0x40020c00
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
 800461c:	e001      	b.n	8004622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
 800463c:	4613      	mov	r3, r2
 800463e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004646:	887a      	ldrh	r2, [r7, #2]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800464c:	e003      	b.n	8004656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	619a      	str	r2, [r3, #24]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fce8 	bl	8003058 <HAL_GPIO_EXTI_Callback>
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40013c00 	.word	0x40013c00

08004694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e267      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d075      	beq.n	800479e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d00c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d112      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	4b7e      	ldr	r3, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05b      	beq.n	800479c <HAL_RCC_OscConfig+0x108>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d157      	bne.n	800479c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e242      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d106      	bne.n	8004708 <HAL_RCC_OscConfig+0x74>
 80046fa:	4b76      	ldr	r3, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a75      	ldr	r2, [pc, #468]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0x98>
 8004712:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6f      	ldr	r2, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b6d      	ldr	r3, [pc, #436]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6c      	ldr	r2, [pc, #432]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 800472c:	4b69      	ldr	r3, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a68      	ldr	r2, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7ff f81e 	bl	800378c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7ff f81a 	bl	800378c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e207      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xc0>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7ff f80a 	bl	800378c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800477c:	f7ff f806 	bl	800378c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1f3      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0xe8>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047aa:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCC_OscConfig+0x152>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e1c7      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4937      	ldr	r1, [pc, #220]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	e03a      	b.n	8004872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCC_OscConfig+0x244>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fe ffbf 	bl	800378c <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004812:	f7fe ffbb 	bl	800378c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e1a8      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4925      	ldr	r1, [pc, #148]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	e015      	b.n	8004872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_OscConfig+0x244>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fe ff9e 	bl	800378c <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004854:	f7fe ff9a 	bl	800378c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e187      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d036      	beq.n	80048ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d016      	beq.n	80048b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCC_OscConfig+0x248>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fe ff7e 	bl	800378c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004894:	f7fe ff7a 	bl	800378c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e167      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x200>
 80048b2:	e01b      	b.n	80048ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x248>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ba:	f7fe ff67 	bl	800378c <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c0:	e00e      	b.n	80048e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fe ff63 	bl	800378c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d907      	bls.n	80048e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e150      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	42470000 	.word	0x42470000
 80048dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ea      	bne.n	80048c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8097 	beq.w	8004a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fe:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	4b7d      	ldr	r3, [pc, #500]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b7a      	ldr	r3, [pc, #488]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004926:	2301      	movs	r3, #1
 8004928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492a:	4b77      	ldr	r3, [pc, #476]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d118      	bne.n	8004968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004936:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a73      	ldr	r2, [pc, #460]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004942:	f7fe ff23 	bl	800378c <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494a:	f7fe ff1f 	bl	800378c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e10c      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x2ea>
 8004970:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4a63      	ldr	r2, [pc, #396]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6713      	str	r3, [r2, #112]	; 0x70
 800497c:	e01c      	b.n	80049b8 <HAL_RCC_OscConfig+0x324>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b05      	cmp	r3, #5
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x30c>
 8004986:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a5e      	ldr	r2, [pc, #376]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	6713      	str	r3, [r2, #112]	; 0x70
 8004992:	4b5c      	ldr	r3, [pc, #368]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0x324>
 80049a0:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	4a57      	ldr	r2, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	; 0x70
 80049ac:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a54      	ldr	r2, [pc, #336]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0304 	bic.w	r3, r3, #4
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fe fee4 	bl	800378c <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	e00a      	b.n	80049de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fe fee0 	bl	800378c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e0cb      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ee      	beq.n	80049c8 <HAL_RCC_OscConfig+0x334>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ec:	f7fe fece 	bl	800378c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fe feca 	bl	800378c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0b5      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ee      	bne.n	80049f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a1 	beq.w	8004b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a32:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d05c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d141      	bne.n	8004aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fe9e 	bl	800378c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe fe9a 	bl	800378c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e087      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fe fe73 	bl	800378c <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fe fe6f 	bl	800378c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e05c      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x416>
 8004ac8:	e054      	b.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fe5c 	bl	800378c <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fe fe58 	bl	800378c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e045      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x444>
 8004af6:	e03d      	b.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e038      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x4ec>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d028      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d121      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d11a      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d111      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0cc      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d90c      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0b8      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a58      	ldr	r2, [pc, #352]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	494d      	ldr	r1, [pc, #308]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d044      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d119      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e067      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4934      	ldr	r1, [pc, #208]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fe fd8a 	bl	800378c <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fe fd86 	bl	800378c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e04f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20c      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e032      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4916      	ldr	r1, [pc, #88]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	490e      	ldr	r1, [pc, #56]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0a:	f000 f821 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	490a      	ldr	r1, [pc, #40]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fcea 	bl	8003704 <HAL_InitTick>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	080084d8 	.word	0x080084d8
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	20000004 	.word	0x20000004

08004d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d54:	b094      	sub	sp, #80	; 0x50
 8004d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d60:	2300      	movs	r3, #0
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d68:	4b79      	ldr	r3, [pc, #484]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x40>
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	f200 80e1 	bhi.w	8004f3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d82:	e0db      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d88:	e0db      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8a:	4b73      	ldr	r3, [pc, #460]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d8e:	e0d8      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d90:	4b6f      	ldr	r3, [pc, #444]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9a:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d063      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	2200      	movs	r2, #0
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	0159      	lsls	r1, r3, #5
 8004dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd4:	0150      	lsls	r0, r2, #5
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4621      	mov	r1, r4
 8004ddc:	1a51      	subs	r1, r2, r1
 8004dde:	6139      	str	r1, [r7, #16]
 8004de0:	4629      	mov	r1, r5
 8004de2:	eb63 0301 	sbc.w	r3, r3, r1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df4:	4659      	mov	r1, fp
 8004df6:	018b      	lsls	r3, r1, #6
 8004df8:	4651      	mov	r1, sl
 8004dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dfe:	4651      	mov	r1, sl
 8004e00:	018a      	lsls	r2, r1, #6
 8004e02:	4651      	mov	r1, sl
 8004e04:	ebb2 0801 	subs.w	r8, r2, r1
 8004e08:	4659      	mov	r1, fp
 8004e0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e22:	4690      	mov	r8, r2
 8004e24:	4699      	mov	r9, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	eb18 0303 	adds.w	r3, r8, r3
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	462b      	mov	r3, r5
 8004e30:	eb49 0303 	adc.w	r3, r9, r3
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e42:	4629      	mov	r1, r5
 8004e44:	024b      	lsls	r3, r1, #9
 8004e46:	4621      	mov	r1, r4
 8004e48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	024a      	lsls	r2, r1, #9
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e56:	2200      	movs	r2, #0
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e60:	f7fb fe2c 	bl	8000abc <__aeabi_uldivmod>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4613      	mov	r3, r2
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6c:	e058      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	2200      	movs	r2, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	4611      	mov	r1, r2
 8004e7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	f04f 0000 	mov.w	r0, #0
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	0159      	lsls	r1, r3, #5
 8004e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e9a:	0150      	lsls	r0, r2, #5
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ebc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ec0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ec4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	eb45 0303 	adc.w	r3, r5, r3
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	028b      	lsls	r3, r1, #10
 8004efa:	4621      	mov	r1, r4
 8004efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f00:	4621      	mov	r1, r4
 8004f02:	028a      	lsls	r2, r1, #10
 8004f04:	4610      	mov	r0, r2
 8004f06:	4619      	mov	r1, r3
 8004f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	61fa      	str	r2, [r7, #28]
 8004f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f14:	f7fb fdd2 	bl	8000abc <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3750      	adds	r7, #80	; 0x50
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	00f42400 	.word	0x00f42400
 8004f58:	007a1200 	.word	0x007a1200

08004f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000000 	.word	0x20000000

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f78:	f7ff fff0 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0a9b      	lsrs	r3, r3, #10
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	080084e8 	.word	0x080084e8

08004f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa0:	f7ff ffdc 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	0b5b      	lsrs	r3, r3, #13
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4903      	ldr	r1, [pc, #12]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	080084e8 	.word	0x080084e8

08004fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e041      	b.n	800505a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fe f934 	bl	8003258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 feee 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d001      	beq.n	800507c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e03c      	b.n	80050f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <HAL_TIM_Base_Start+0xa0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_TIM_Base_Start+0x5c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d013      	beq.n	80050c0 <HAL_TIM_Base_Start+0x5c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_TIM_Base_Start+0xa4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_Base_Start+0x5c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a19      	ldr	r2, [pc, #100]	; (800510c <HAL_TIM_Base_Start+0xa8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_Base_Start+0x5c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_TIM_Base_Start+0xac>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_Base_Start+0x5c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_TIM_Base_Start+0xb0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d111      	bne.n	80050e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d010      	beq.n	80050f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	e007      	b.n	80050f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40014000 	.word	0x40014000

08005118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e044      	b.n	80051ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x6c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d013      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x6c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <HAL_TIM_Base_Start_IT+0xb4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x6c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x6c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x6c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d111      	bne.n	80051a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b06      	cmp	r3, #6
 8005194:	d010      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	e007      	b.n	80051b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000

080051dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e041      	b.n	8005272 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fe f806 	bl	8003214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fde2 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <HAL_TIM_PWM_Start+0x24>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e022      	b.n	80052e6 <HAL_TIM_PWM_Start+0x6a>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d109      	bne.n	80052ba <HAL_TIM_PWM_Start+0x3e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	e015      	b.n	80052e6 <HAL_TIM_PWM_Start+0x6a>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d109      	bne.n	80052d4 <HAL_TIM_PWM_Start+0x58>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e008      	b.n	80052e6 <HAL_TIM_PWM_Start+0x6a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e068      	b.n	80053c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_PWM_Start+0x82>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	e013      	b.n	8005326 <HAL_TIM_PWM_Start+0xaa>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0x92>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800530c:	e00b      	b.n	8005326 <HAL_TIM_PWM_Start+0xaa>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0xa2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531c:	e003      	b.n	8005326 <HAL_TIM_PWM_Start+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f001 f91c 	bl	800656c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <HAL_TIM_PWM_Start+0x14c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d107      	bne.n	800534e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <HAL_TIM_PWM_Start+0x14c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_TIM_PWM_Start+0x10e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005360:	d013      	beq.n	800538a <HAL_TIM_PWM_Start+0x10e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a19      	ldr	r2, [pc, #100]	; (80053cc <HAL_TIM_PWM_Start+0x150>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_TIM_PWM_Start+0x10e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <HAL_TIM_PWM_Start+0x154>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_TIM_PWM_Start+0x10e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a16      	ldr	r2, [pc, #88]	; (80053d4 <HAL_TIM_PWM_Start+0x158>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_TIM_PWM_Start+0x10e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <HAL_TIM_PWM_Start+0x15c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d111      	bne.n	80053ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d010      	beq.n	80053be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	e007      	b.n	80053be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40014000 	.word	0x40014000

080053dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e041      	b.n	8005472 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f839 	bl	800547a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f000 fce2 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x1e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e013      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x2e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_IC_Start_IT+0x3e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e003      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <HAL_TIM_IC_Start_IT+0x58>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e013      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_IC_Start_IT+0x68>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e00b      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d104      	bne.n	8005508 <HAL_TIM_IC_Start_IT+0x78>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e003      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800550e:	b2db      	uxtb	r3, r3
 8005510:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005518:	7b7b      	ldrb	r3, [r7, #13]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d001      	beq.n	8005522 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0c2      	b.n	80056a8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e013      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xb2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	e00b      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0xc2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	e003      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xda>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	e013      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xea>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005578:	e00b      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xfa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005588:	e003      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d841      	bhi.n	800561c <HAL_TIM_IC_Start_IT+0x18c>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_TIM_IC_Start_IT+0x110>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800560b 	.word	0x0800560b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0202 	orr.w	r2, r2, #2
 80055e2:	60da      	str	r2, [r3, #12]
      break;
 80055e4:	e01d      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0204 	orr.w	r2, r2, #4
 80055f4:	60da      	str	r2, [r3, #12]
      break;
 80055f6:	e014      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0208 	orr.w	r2, r2, #8
 8005606:	60da      	str	r2, [r3, #12]
      break;
 8005608:	e00b      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0210 	orr.w	r2, r2, #16
 8005618:	60da      	str	r2, [r3, #12]
      break;
 800561a:	e002      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	bf00      	nop
  }

  if (status == HAL_OK)
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13e      	bne.n	80056a6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 ff9b 	bl	800656c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_TIM_IC_Start_IT+0x220>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d013      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <HAL_TIM_IC_Start_IT+0x224>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <HAL_TIM_IC_Start_IT+0x228>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <HAL_TIM_IC_Start_IT+0x22c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a14      	ldr	r2, [pc, #80]	; (80056c0 <HAL_TIM_IC_Start_IT+0x230>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d111      	bne.n	8005696 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d010      	beq.n	80056a6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	e007      	b.n	80056a6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40014000 	.word	0x40014000

080056c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0202 	mvn.w	r2, #2
 80056f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fd fcbe 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fb4a 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fb51 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b04      	cmp	r3, #4
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b04      	cmp	r3, #4
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0204 	mvn.w	r2, #4
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fd fc94 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fb20 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fb27 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b08      	cmp	r3, #8
 8005780:	d122      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b08      	cmp	r3, #8
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0208 	mvn.w	r2, #8
 8005798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2204      	movs	r2, #4
 800579e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fd fc6a 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 faf6 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fafd 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b10      	cmp	r3, #16
 80057d4:	d122      	bne.n	800581c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d11b      	bne.n	800581c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0210 	mvn.w	r2, #16
 80057ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2208      	movs	r2, #8
 80057f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fd fc40 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 facc 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fad3 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0201 	mvn.w	r2, #1
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fd fc5a 	bl	80030fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b80      	cmp	r3, #128	; 0x80
 8005854:	d10e      	bne.n	8005874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d107      	bne.n	8005874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 ff6c 	bl	800674c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d10e      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa98 	bl	8005dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d10e      	bne.n	80058cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d107      	bne.n	80058cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0220 	mvn.w	r2, #32
 80058c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 ff36 	bl	8006738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e088      	b.n	8005a04 <HAL_TIM_IC_ConfigChannel+0x130>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f000 fc74 	bl	80061fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 020c 	bic.w	r2, r2, #12
 8005922:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6999      	ldr	r1, [r3, #24]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	619a      	str	r2, [r3, #24]
 8005936:	e060      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d11c      	bne.n	8005978 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f000 fcec 	bl	800632a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005960:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6999      	ldr	r1, [r3, #24]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	021a      	lsls	r2, r3, #8
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	619a      	str	r2, [r3, #24]
 8005976:	e040      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b08      	cmp	r3, #8
 800597c:	d11b      	bne.n	80059b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f000 fd39 	bl	8006404 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 020c 	bic.w	r2, r2, #12
 80059a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69d9      	ldr	r1, [r3, #28]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	61da      	str	r2, [r3, #28]
 80059b4:	e021      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d11c      	bne.n	80059f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f000 fd56 	bl	800647c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69d9      	ldr	r1, [r3, #28]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	021a      	lsls	r2, r3, #8
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	61da      	str	r2, [r3, #28]
 80059f4:	e001      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0ae      	b.n	8005b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	f200 809f 	bhi.w	8005b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a75 	.word	0x08005a75
 8005a44:	08005b79 	.word	0x08005b79
 8005a48:	08005b79 	.word	0x08005b79
 8005a4c:	08005b79 	.word	0x08005b79
 8005a50:	08005ab5 	.word	0x08005ab5
 8005a54:	08005b79 	.word	0x08005b79
 8005a58:	08005b79 	.word	0x08005b79
 8005a5c:	08005b79 	.word	0x08005b79
 8005a60:	08005af7 	.word	0x08005af7
 8005a64:	08005b79 	.word	0x08005b79
 8005a68:	08005b79 	.word	0x08005b79
 8005a6c:	08005b79 	.word	0x08005b79
 8005a70:	08005b37 	.word	0x08005b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa32 	bl	8005ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	619a      	str	r2, [r3, #24]
      break;
 8005ab2:	e064      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa78 	bl	8005fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	619a      	str	r2, [r3, #24]
      break;
 8005af4:	e043      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fac3 	bl	8006088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0208 	orr.w	r2, r2, #8
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0204 	bic.w	r2, r2, #4
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
      break;
 8005b34:	e023      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fb0d 	bl	800615c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
      break;
 8005b76:	e002      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIM_ConfigClockSource+0x1c>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0b4      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x186>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be4:	d03e      	beq.n	8005c64 <HAL_TIM_ConfigClockSource+0xd4>
 8005be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bea:	f200 8087 	bhi.w	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	f000 8086 	beq.w	8005d02 <HAL_TIM_ConfigClockSource+0x172>
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d87f      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d01a      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xa6>
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d87b      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b60      	cmp	r3, #96	; 0x60
 8005c06:	d050      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x11a>
 8005c08:	2b60      	cmp	r3, #96	; 0x60
 8005c0a:	d877      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b50      	cmp	r3, #80	; 0x50
 8005c0e:	d03c      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0xfa>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d873      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d058      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x13a>
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d86f      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d064      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d86b      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d060      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d867      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05c      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d05a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	e062      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6899      	ldr	r1, [r3, #8]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f000 fc71 	bl	800652c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	609a      	str	r2, [r3, #8]
      break;
 8005c62:	e04f      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6899      	ldr	r1, [r3, #8]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f000 fc5a 	bl	800652c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c86:	609a      	str	r2, [r3, #8]
      break;
 8005c88:	e03c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f000 fb18 	bl	80062cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2150      	movs	r1, #80	; 0x50
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fc27 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005ca8:	e02c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f000 fb74 	bl	80063a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2160      	movs	r1, #96	; 0x60
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fc17 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005cc8:	e01c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 faf8 	bl	80062cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2140      	movs	r1, #64	; 0x40
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fc07 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e00c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f000 fbfe 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005cfa:	e003      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e000      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	d831      	bhi.n	8005d98 <HAL_TIM_ReadCapturedValue+0x78>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d7b 	.word	0x08005d7b
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005d99 	.word	0x08005d99
 8005d6c:	08005d8f 	.word	0x08005d8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	60fb      	str	r3, [r7, #12]

      break;
 8005d78:	e00f      	b.n	8005d9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	60fb      	str	r3, [r7, #12]

      break;
 8005d82:	e00a      	b.n	8005d9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	60fb      	str	r3, [r7, #12]

      break;
 8005d8c:	e005      	b.n	8005d9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	60fb      	str	r3, [r7, #12]

      break;
 8005d96:	e000      	b.n	8005d9a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d98:	bf00      	nop
  }

  return tmpreg;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a34      	ldr	r2, [pc, #208]	; (8005ec8 <TIM_Base_SetConfig+0xe4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <TIM_Base_SetConfig+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a30      	ldr	r2, [pc, #192]	; (8005ed0 <TIM_Base_SetConfig+0xec>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <TIM_Base_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d017      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <TIM_Base_SetConfig+0xe8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <TIM_Base_SetConfig+0xec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a1f      	ldr	r2, [pc, #124]	; (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <TIM_Base_SetConfig+0xf8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <TIM_Base_SetConfig+0xfc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d108      	bne.n	8005e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a08      	ldr	r2, [pc, #32]	; (8005ec8 <TIM_Base_SetConfig+0xe4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d103      	bne.n	8005eb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	615a      	str	r2, [r3, #20]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f023 0201 	bic.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f023 0302 	bic.w	r3, r3, #2
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <TIM_OC1_SetConfig+0xc8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10c      	bne.n	8005f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0308 	bic.w	r3, r3, #8
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	; (8005fac <TIM_OC1_SetConfig+0xc8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d111      	bne.n	8005f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000

08005fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f023 0210 	bic.w	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <TIM_OC2_SetConfig+0xd4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10d      	bne.n	800602c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <TIM_OC2_SetConfig+0xd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d113      	bne.n	800605c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800603a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000

08006088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <TIM_OC3_SetConfig+0xd0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d10d      	bne.n	8006102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <TIM_OC3_SetConfig+0xd0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d113      	bne.n	8006132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000

0800615c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <TIM_OC4_SetConfig+0x9c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d109      	bne.n	80061d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40010000 	.word	0x40010000

080061fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0201 	bic.w	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a24      	ldr	r2, [pc, #144]	; (80062b8 <TIM_TI1_SetConfig+0xbc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_TI1_SetConfig+0x56>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d00f      	beq.n	8006252 <TIM_TI1_SetConfig+0x56>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a21      	ldr	r2, [pc, #132]	; (80062bc <TIM_TI1_SetConfig+0xc0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_TI1_SetConfig+0x56>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <TIM_TI1_SetConfig+0xc4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_TI1_SetConfig+0x56>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <TIM_TI1_SetConfig+0xc8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_TI1_SetConfig+0x56>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a1e      	ldr	r2, [pc, #120]	; (80062c8 <TIM_TI1_SetConfig+0xcc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <TIM_TI1_SetConfig+0x5a>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <TIM_TI1_SetConfig+0x5c>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e003      	b.n	8006276 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800627c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	b2db      	uxtb	r3, r3
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f023 030a 	bic.w	r3, r3, #10
 8006290:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 030a 	and.w	r3, r3, #10
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40014000 	.word	0x40014000

080062cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f023 030a 	bic.w	r3, r3, #10
 8006308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f023 0210 	bic.w	r2, r3, #16
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006356:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	b29b      	uxth	r3, r3
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800637c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0210 	bic.w	r2, r3, #16
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	031b      	lsls	r3, r3, #12
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	621a      	str	r2, [r3, #32]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0303 	bic.w	r3, r3, #3
 8006430:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006440:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	b2db      	uxtb	r3, r3
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006454:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	031b      	lsls	r3, r3, #12
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	031b      	lsls	r3, r3, #12
 80064d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	f043 0307 	orr.w	r3, r3, #7
 8006518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	021a      	lsls	r2, r3, #8
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	431a      	orrs	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4313      	orrs	r3, r2
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2201      	movs	r2, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	43db      	mvns	r3, r3
 800658e:	401a      	ands	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e050      	b.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1c      	ldr	r2, [pc, #112]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d018      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661c:	d013      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a16      	ldr	r2, [pc, #88]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10c      	bne.n	8006660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4313      	orrs	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40010000 	.word	0x40010000
 8006684:	40000400 	.word	0x40000400
 8006688:	40000800 	.word	0x40000800
 800668c:	40000c00 	.word	0x40000c00
 8006690:	40014000 	.word	0x40014000

08006694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e03d      	b.n	800672c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e03f      	b.n	80067f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fc fe4a 	bl	8003420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2224      	movs	r2, #36	; 0x24
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fe1d 	bl	80073e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b08a      	sub	sp, #40	; 0x28
 80067fe:	af02      	add	r7, sp, #8
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b20      	cmp	r3, #32
 8006818:	d17c      	bne.n	8006914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_UART_Transmit+0x2c>
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e075      	b.n	8006916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_UART_Transmit+0x3e>
 8006834:	2302      	movs	r3, #2
 8006836:	e06e      	b.n	8006916 <HAL_UART_Transmit+0x11c>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2221      	movs	r2, #33	; 0x21
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800684e:	f7fc ff9d 	bl	800378c <HAL_GetTick>
 8006852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	88fa      	ldrh	r2, [r7, #6]
 8006858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006868:	d108      	bne.n	800687c <HAL_UART_Transmit+0x82>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e003      	b.n	8006884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800688c:	e02a      	b.n	80068e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2200      	movs	r2, #0
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fb9b 	bl	8006fd4 <UART_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e036      	b.n	8006916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10b      	bne.n	80068c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	3302      	adds	r3, #2
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e007      	b.n	80068d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1cf      	bne.n	800688e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	2140      	movs	r1, #64	; 0x40
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fb6b 	bl	8006fd4 <UART_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e006      	b.n	8006916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e000      	b.n	8006916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006914:	2302      	movs	r3, #2
  }
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b08a      	sub	sp, #40	; 0x28
 8006922:	af02      	add	r7, sp, #8
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b20      	cmp	r3, #32
 800693c:	f040 808c 	bne.w	8006a58 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_UART_Receive+0x2e>
 8006946:	88fb      	ldrh	r3, [r7, #6]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e084      	b.n	8006a5a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UART_Receive+0x40>
 800695a:	2302      	movs	r3, #2
 800695c:	e07d      	b.n	8006a5a <HAL_UART_Receive+0x13c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2222      	movs	r2, #34	; 0x22
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697a:	f7fc ff07 	bl	800378c <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	88fa      	ldrh	r2, [r7, #6]
 800698a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d108      	bne.n	80069a8 <HAL_UART_Receive+0x8a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e003      	b.n	80069b0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80069b8:	e043      	b.n	8006a42 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	2120      	movs	r1, #32
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fb05 	bl	8006fd4 <UART_WaitOnFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e042      	b.n	8006a5a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10c      	bne.n	80069f4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	3302      	adds	r3, #2
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	e01f      	b.n	8006a34 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fc:	d007      	beq.n	8006a0e <HAL_UART_Receive+0xf0>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_UART_Receive+0xfe>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	e008      	b.n	8006a2e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3301      	adds	r3, #1
 8006a32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1b6      	bne.n	80069ba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	e000      	b.n	8006a5a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006a58:	2302      	movs	r3, #2
  }
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b0ba      	sub	sp, #232	; 0xe8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_UART_IRQHandler+0x66>
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fbd3 	bl	800726e <UART_Receive_IT>
      return;
 8006ac8:	e256      	b.n	8006f78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80de 	beq.w	8006c90 <HAL_UART_IRQHandler+0x22c>
 8006ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80d1 	beq.w	8006c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00b      	beq.n	8006b12 <HAL_UART_IRQHandler+0xae>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <HAL_UART_IRQHandler+0xd2>
 8006b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	f043 0202 	orr.w	r2, r3, #2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <HAL_UART_IRQHandler+0xf6>
 8006b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f043 0204 	orr.w	r2, r3, #4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d011      	beq.n	8006b8a <HAL_UART_IRQHandler+0x126>
 8006b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f043 0208 	orr.w	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 81ed 	beq.w	8006f6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x14e>
 8006ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb5e 	bl	800726e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2301      	moveq	r3, #1
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_UART_IRQHandler+0x17a>
 8006bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d04f      	beq.n	8006c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa66 	bl	80070b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d141      	bne.n	8006c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1d9      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d013      	beq.n	8006c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4a7d      	ldr	r2, [pc, #500]	; (8006e40 <HAL_UART_IRQHandler+0x3dc>)
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd fb2d 	bl	80042b2 <HAL_DMA_Abort_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d016      	beq.n	8006c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e00e      	b.n	8006c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f99a 	bl	8006fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	e00a      	b.n	8006c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f996 	bl	8006fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	e006      	b.n	8006c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f992 	bl	8006fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c8a:	e170      	b.n	8006f6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8c:	bf00      	nop
    return;
 8006c8e:	e16e      	b.n	8006f6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	f040 814a 	bne.w	8006f2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8143 	beq.w	8006f2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 813c 	beq.w	8006f2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	f040 80b4 	bne.w	8006e44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8140 	beq.w	8006f72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	f080 8139 	bcs.w	8006f72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	f000 8088 	beq.w	8006e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1d9      	bne.n	8006d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3314      	adds	r3, #20
 8006d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3314      	adds	r3, #20
 8006d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e1      	bne.n	8006d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3314      	adds	r3, #20
 8006da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3314      	adds	r3, #20
 8006dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e3      	bne.n	8006d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	330c      	adds	r3, #12
 8006e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e08:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e3      	bne.n	8006de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fd f9d6 	bl	80041d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8c0 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e3c:	e099      	b.n	8006f72 <HAL_UART_IRQHandler+0x50e>
 8006e3e:	bf00      	nop
 8006e40:	08007177 	.word	0x08007177
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 808b 	beq.w	8006f76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8086 	beq.w	8006f76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e3      	bne.n	8006e6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e3      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0310 	bic.w	r3, r3, #16
 8006efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	69b9      	ldr	r1, [r7, #24]
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	617b      	str	r3, [r7, #20]
   return(result);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e3      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f848 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f2c:	e023      	b.n	8006f76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_UART_IRQHandler+0x4ea>
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f929 	bl	800719e <UART_Transmit_IT>
    return;
 8006f4c:	e014      	b.n	8006f78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00e      	beq.n	8006f78 <HAL_UART_IRQHandler+0x514>
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f969 	bl	800723e <UART_EndTransmit_IT>
    return;
 8006f6c:	e004      	b.n	8006f78 <HAL_UART_IRQHandler+0x514>
    return;
 8006f6e:	bf00      	nop
 8006f70:	e002      	b.n	8006f78 <HAL_UART_IRQHandler+0x514>
      return;
 8006f72:	bf00      	nop
 8006f74:	e000      	b.n	8006f78 <HAL_UART_IRQHandler+0x514>
      return;
 8006f76:	bf00      	nop
  }
}
 8006f78:	37e8      	adds	r7, #232	; 0xe8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop

08006f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b090      	sub	sp, #64	; 0x40
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe4:	e050      	b.n	8007088 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fec:	d04c      	beq.n	8007088 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff4:	f7fc fbca 	bl	800378c <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007000:	429a      	cmp	r2, r3
 8007002:	d241      	bcs.n	8007088 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007024:	637a      	str	r2, [r7, #52]	; 0x34
 8007026:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3314      	adds	r3, #20
 8007056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007058:	623a      	str	r2, [r7, #32]
 800705a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	61bb      	str	r3, [r7, #24]
   return(result);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e00f      	b.n	80070a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	429a      	cmp	r2, r3
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d09f      	beq.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3740      	adds	r7, #64	; 0x40
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b095      	sub	sp, #84	; 0x54
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070d8:	643a      	str	r2, [r7, #64]	; 0x40
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3314      	adds	r3, #20
 80070f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f023 0301 	bic.w	r3, r3, #1
 8007102:	64bb      	str	r3, [r7, #72]	; 0x48
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800710c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e5      	bne.n	80070ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	2b01      	cmp	r3, #1
 8007126:	d119      	bne.n	800715c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	60bb      	str	r3, [r7, #8]
   return(result);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0310 	bic.w	r3, r3, #16
 800713e:	647b      	str	r3, [r7, #68]	; 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	330c      	adds	r3, #12
 8007146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007148:	61ba      	str	r2, [r7, #24]
 800714a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e5      	bne.n	8007128 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
}
 800716a:	bf00      	nop
 800716c:	3754      	adds	r7, #84	; 0x54
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff ff09 	bl	8006fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b21      	cmp	r3, #33	; 0x21
 80071b0:	d13e      	bne.n	8007230 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ba:	d114      	bne.n	80071e6 <UART_Transmit_IT+0x48>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d110      	bne.n	80071e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	1c9a      	adds	r2, r3, #2
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	621a      	str	r2, [r3, #32]
 80071e4:	e008      	b.n	80071f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6211      	str	r1, [r2, #32]
 80071f0:	781a      	ldrb	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4619      	mov	r1, r3
 8007206:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10f      	bne.n	800722c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800721a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800722a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007254:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fe8e 	bl	8006f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b08c      	sub	sp, #48	; 0x30
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b22      	cmp	r3, #34	; 0x22
 8007280:	f040 80ab 	bne.w	80073da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728c:	d117      	bne.n	80072be <UART_Receive_IT+0x50>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d113      	bne.n	80072be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	1c9a      	adds	r2, r3, #2
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28
 80072bc:	e026      	b.n	800730c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d0:	d007      	beq.n	80072e2 <UART_Receive_IT+0x74>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10a      	bne.n	80072f0 <UART_Receive_IT+0x82>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e008      	b.n	8007302 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4619      	mov	r1, r3
 800731a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800731c:	2b00      	cmp	r3, #0
 800731e:	d15a      	bne.n	80073d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0220 	bic.w	r2, r2, #32
 800732e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800733e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0201 	bic.w	r2, r2, #1
 800734e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	2b01      	cmp	r3, #1
 800735e:	d135      	bne.n	80073cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	613b      	str	r3, [r7, #16]
   return(result);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f023 0310 	bic.w	r3, r3, #16
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007386:	623a      	str	r2, [r7, #32]
 8007388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	69f9      	ldr	r1, [r7, #28]
 800738c:	6a3a      	ldr	r2, [r7, #32]
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	61bb      	str	r3, [r7, #24]
   return(result);
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e5      	bne.n	8007366 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d10a      	bne.n	80073be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fdf9 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
 80073ca:	e002      	b.n	80073d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fde1 	bl	8006f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e002      	b.n	80073dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e000      	b.n	80073dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073da:	2302      	movs	r3, #2
  }
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3730      	adds	r7, #48	; 0x30
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b0c0      	sub	sp, #256	; 0x100
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	68d9      	ldr	r1, [r3, #12]
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	ea40 0301 	orr.w	r3, r0, r1
 800740c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	431a      	orrs	r2, r3
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	431a      	orrs	r2, r3
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800743c:	f021 010c 	bic.w	r1, r1, #12
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800744a:	430b      	orrs	r3, r1
 800744c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	6999      	ldr	r1, [r3, #24]
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	ea40 0301 	orr.w	r3, r0, r1
 800746a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b8f      	ldr	r3, [pc, #572]	; (80076b0 <UART_SetConfig+0x2cc>)
 8007474:	429a      	cmp	r2, r3
 8007476:	d005      	beq.n	8007484 <UART_SetConfig+0xa0>
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b8d      	ldr	r3, [pc, #564]	; (80076b4 <UART_SetConfig+0x2d0>)
 8007480:	429a      	cmp	r2, r3
 8007482:	d104      	bne.n	800748e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007484:	f7fd fd8a 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8007488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800748c:	e003      	b.n	8007496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800748e:	f7fd fd71 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8007492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a0:	f040 810c 	bne.w	80076bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
 80074ba:	1891      	adds	r1, r2, r2
 80074bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80074be:	415b      	adcs	r3, r3
 80074c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074c6:	4621      	mov	r1, r4
 80074c8:	eb12 0801 	adds.w	r8, r2, r1
 80074cc:	4629      	mov	r1, r5
 80074ce:	eb43 0901 	adc.w	r9, r3, r1
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074e6:	4690      	mov	r8, r2
 80074e8:	4699      	mov	r9, r3
 80074ea:	4623      	mov	r3, r4
 80074ec:	eb18 0303 	adds.w	r3, r8, r3
 80074f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074f4:	462b      	mov	r3, r5
 80074f6:	eb49 0303 	adc.w	r3, r9, r3
 80074fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800750a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800750e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007512:	460b      	mov	r3, r1
 8007514:	18db      	adds	r3, r3, r3
 8007516:	653b      	str	r3, [r7, #80]	; 0x50
 8007518:	4613      	mov	r3, r2
 800751a:	eb42 0303 	adc.w	r3, r2, r3
 800751e:	657b      	str	r3, [r7, #84]	; 0x54
 8007520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007528:	f7f9 fac8 	bl	8000abc <__aeabi_uldivmod>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4b61      	ldr	r3, [pc, #388]	; (80076b8 <UART_SetConfig+0x2d4>)
 8007532:	fba3 2302 	umull	r2, r3, r3, r2
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	011c      	lsls	r4, r3, #4
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	1891      	adds	r1, r2, r2
 8007552:	64b9      	str	r1, [r7, #72]	; 0x48
 8007554:	415b      	adcs	r3, r3
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800755c:	4641      	mov	r1, r8
 800755e:	eb12 0a01 	adds.w	sl, r2, r1
 8007562:	4649      	mov	r1, r9
 8007564:	eb43 0b01 	adc.w	fp, r3, r1
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800757c:	4692      	mov	sl, r2
 800757e:	469b      	mov	fp, r3
 8007580:	4643      	mov	r3, r8
 8007582:	eb1a 0303 	adds.w	r3, sl, r3
 8007586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800758a:	464b      	mov	r3, r9
 800758c:	eb4b 0303 	adc.w	r3, fp, r3
 8007590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075a8:	460b      	mov	r3, r1
 80075aa:	18db      	adds	r3, r3, r3
 80075ac:	643b      	str	r3, [r7, #64]	; 0x40
 80075ae:	4613      	mov	r3, r2
 80075b0:	eb42 0303 	adc.w	r3, r2, r3
 80075b4:	647b      	str	r3, [r7, #68]	; 0x44
 80075b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075be:	f7f9 fa7d 	bl	8000abc <__aeabi_uldivmod>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	4b3b      	ldr	r3, [pc, #236]	; (80076b8 <UART_SetConfig+0x2d4>)
 80075ca:	fba3 2301 	umull	r2, r3, r3, r1
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	2264      	movs	r2, #100	; 0x64
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	1acb      	subs	r3, r1, r3
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075de:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <UART_SetConfig+0x2d4>)
 80075e0:	fba3 2302 	umull	r2, r3, r3, r2
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075ec:	441c      	add	r4, r3
 80075ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	63b9      	str	r1, [r7, #56]	; 0x38
 8007608:	415b      	adcs	r3, r3
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800760c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007610:	4641      	mov	r1, r8
 8007612:	1851      	adds	r1, r2, r1
 8007614:	6339      	str	r1, [r7, #48]	; 0x30
 8007616:	4649      	mov	r1, r9
 8007618:	414b      	adcs	r3, r1
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007628:	4659      	mov	r1, fp
 800762a:	00cb      	lsls	r3, r1, #3
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007632:	4651      	mov	r1, sl
 8007634:	00ca      	lsls	r2, r1, #3
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	4603      	mov	r3, r0
 800763c:	4642      	mov	r2, r8
 800763e:	189b      	adds	r3, r3, r2
 8007640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007644:	464b      	mov	r3, r9
 8007646:	460a      	mov	r2, r1
 8007648:	eb42 0303 	adc.w	r3, r2, r3
 800764c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800765c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007664:	460b      	mov	r3, r1
 8007666:	18db      	adds	r3, r3, r3
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
 800766a:	4613      	mov	r3, r2
 800766c:	eb42 0303 	adc.w	r3, r2, r3
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800767a:	f7f9 fa1f 	bl	8000abc <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <UART_SetConfig+0x2d4>)
 8007684:	fba3 1302 	umull	r1, r3, r3, r2
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	2164      	movs	r1, #100	; 0x64
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	3332      	adds	r3, #50	; 0x32
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <UART_SetConfig+0x2d4>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f003 0207 	and.w	r2, r3, #7
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4422      	add	r2, r4
 80076aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076ac:	e106      	b.n	80078bc <UART_SetConfig+0x4d8>
 80076ae:	bf00      	nop
 80076b0:	40011000 	.word	0x40011000
 80076b4:	40011400 	.word	0x40011400
 80076b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076ce:	4642      	mov	r2, r8
 80076d0:	464b      	mov	r3, r9
 80076d2:	1891      	adds	r1, r2, r2
 80076d4:	6239      	str	r1, [r7, #32]
 80076d6:	415b      	adcs	r3, r3
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
 80076da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076de:	4641      	mov	r1, r8
 80076e0:	1854      	adds	r4, r2, r1
 80076e2:	4649      	mov	r1, r9
 80076e4:	eb43 0501 	adc.w	r5, r3, r1
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	00eb      	lsls	r3, r5, #3
 80076f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076f6:	00e2      	lsls	r2, r4, #3
 80076f8:	4614      	mov	r4, r2
 80076fa:	461d      	mov	r5, r3
 80076fc:	4643      	mov	r3, r8
 80076fe:	18e3      	adds	r3, r4, r3
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007704:	464b      	mov	r3, r9
 8007706:	eb45 0303 	adc.w	r3, r5, r3
 800770a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800771a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800772a:	4629      	mov	r1, r5
 800772c:	008b      	lsls	r3, r1, #2
 800772e:	4621      	mov	r1, r4
 8007730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007734:	4621      	mov	r1, r4
 8007736:	008a      	lsls	r2, r1, #2
 8007738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800773c:	f7f9 f9be 	bl	8000abc <__aeabi_uldivmod>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4b60      	ldr	r3, [pc, #384]	; (80078c8 <UART_SetConfig+0x4e4>)
 8007746:	fba3 2302 	umull	r2, r3, r3, r2
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	011c      	lsls	r4, r3, #4
 800774e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007752:	2200      	movs	r2, #0
 8007754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800775c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007760:	4642      	mov	r2, r8
 8007762:	464b      	mov	r3, r9
 8007764:	1891      	adds	r1, r2, r2
 8007766:	61b9      	str	r1, [r7, #24]
 8007768:	415b      	adcs	r3, r3
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007770:	4641      	mov	r1, r8
 8007772:	1851      	adds	r1, r2, r1
 8007774:	6139      	str	r1, [r7, #16]
 8007776:	4649      	mov	r1, r9
 8007778:	414b      	adcs	r3, r1
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007788:	4659      	mov	r1, fp
 800778a:	00cb      	lsls	r3, r1, #3
 800778c:	4651      	mov	r1, sl
 800778e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007792:	4651      	mov	r1, sl
 8007794:	00ca      	lsls	r2, r1, #3
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	4603      	mov	r3, r0
 800779c:	4642      	mov	r2, r8
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077a4:	464b      	mov	r3, r9
 80077a6:	460a      	mov	r2, r1
 80077a8:	eb42 0303 	adc.w	r3, r2, r3
 80077ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80077ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077c8:	4649      	mov	r1, r9
 80077ca:	008b      	lsls	r3, r1, #2
 80077cc:	4641      	mov	r1, r8
 80077ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077d2:	4641      	mov	r1, r8
 80077d4:	008a      	lsls	r2, r1, #2
 80077d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077da:	f7f9 f96f 	bl	8000abc <__aeabi_uldivmod>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	4b38      	ldr	r3, [pc, #224]	; (80078c8 <UART_SetConfig+0x4e4>)
 80077e6:	fba3 2301 	umull	r2, r3, r3, r1
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2264      	movs	r2, #100	; 0x64
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	1acb      	subs	r3, r1, r3
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	3332      	adds	r3, #50	; 0x32
 80077f8:	4a33      	ldr	r2, [pc, #204]	; (80078c8 <UART_SetConfig+0x4e4>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007804:	441c      	add	r4, r3
 8007806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780a:	2200      	movs	r2, #0
 800780c:	673b      	str	r3, [r7, #112]	; 0x70
 800780e:	677a      	str	r2, [r7, #116]	; 0x74
 8007810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007814:	4642      	mov	r2, r8
 8007816:	464b      	mov	r3, r9
 8007818:	1891      	adds	r1, r2, r2
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	415b      	adcs	r3, r3
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007824:	4641      	mov	r1, r8
 8007826:	1851      	adds	r1, r2, r1
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	4649      	mov	r1, r9
 800782c:	414b      	adcs	r3, r1
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800783c:	4659      	mov	r1, fp
 800783e:	00cb      	lsls	r3, r1, #3
 8007840:	4651      	mov	r1, sl
 8007842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007846:	4651      	mov	r1, sl
 8007848:	00ca      	lsls	r2, r1, #3
 800784a:	4610      	mov	r0, r2
 800784c:	4619      	mov	r1, r3
 800784e:	4603      	mov	r3, r0
 8007850:	4642      	mov	r2, r8
 8007852:	189b      	adds	r3, r3, r2
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
 8007856:	464b      	mov	r3, r9
 8007858:	460a      	mov	r2, r1
 800785a:	eb42 0303 	adc.w	r3, r2, r3
 800785e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	663b      	str	r3, [r7, #96]	; 0x60
 800786a:	667a      	str	r2, [r7, #100]	; 0x64
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007878:	4649      	mov	r1, r9
 800787a:	008b      	lsls	r3, r1, #2
 800787c:	4641      	mov	r1, r8
 800787e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007882:	4641      	mov	r1, r8
 8007884:	008a      	lsls	r2, r1, #2
 8007886:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800788a:	f7f9 f917 	bl	8000abc <__aeabi_uldivmod>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <UART_SetConfig+0x4e4>)
 8007894:	fba3 1302 	umull	r1, r3, r3, r2
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	2164      	movs	r1, #100	; 0x64
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	3332      	adds	r3, #50	; 0x32
 80078a6:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <UART_SetConfig+0x4e4>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	f003 020f 	and.w	r2, r3, #15
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4422      	add	r2, r4
 80078ba:	609a      	str	r2, [r3, #8]
}
 80078bc:	bf00      	nop
 80078be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078c2:	46bd      	mov	sp, r7
 80078c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078c8:	51eb851f 	.word	0x51eb851f

080078cc <siprintf>:
 80078cc:	b40e      	push	{r1, r2, r3}
 80078ce:	b500      	push	{lr}
 80078d0:	b09c      	sub	sp, #112	; 0x70
 80078d2:	ab1d      	add	r3, sp, #116	; 0x74
 80078d4:	9002      	str	r0, [sp, #8]
 80078d6:	9006      	str	r0, [sp, #24]
 80078d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078dc:	4809      	ldr	r0, [pc, #36]	; (8007904 <siprintf+0x38>)
 80078de:	9107      	str	r1, [sp, #28]
 80078e0:	9104      	str	r1, [sp, #16]
 80078e2:	4909      	ldr	r1, [pc, #36]	; (8007908 <siprintf+0x3c>)
 80078e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e8:	9105      	str	r1, [sp, #20]
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	a902      	add	r1, sp, #8
 80078f0:	f000 f992 	bl	8007c18 <_svfiprintf_r>
 80078f4:	9b02      	ldr	r3, [sp, #8]
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	b01c      	add	sp, #112	; 0x70
 80078fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007900:	b003      	add	sp, #12
 8007902:	4770      	bx	lr
 8007904:	20000058 	.word	0x20000058
 8007908:	ffff0208 	.word	0xffff0208

0800790c <memset>:
 800790c:	4402      	add	r2, r0
 800790e:	4603      	mov	r3, r0
 8007910:	4293      	cmp	r3, r2
 8007912:	d100      	bne.n	8007916 <memset+0xa>
 8007914:	4770      	bx	lr
 8007916:	f803 1b01 	strb.w	r1, [r3], #1
 800791a:	e7f9      	b.n	8007910 <memset+0x4>

0800791c <__errno>:
 800791c:	4b01      	ldr	r3, [pc, #4]	; (8007924 <__errno+0x8>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000058 	.word	0x20000058

08007928 <__libc_init_array>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	4d0d      	ldr	r5, [pc, #52]	; (8007960 <__libc_init_array+0x38>)
 800792c:	4c0d      	ldr	r4, [pc, #52]	; (8007964 <__libc_init_array+0x3c>)
 800792e:	1b64      	subs	r4, r4, r5
 8007930:	10a4      	asrs	r4, r4, #2
 8007932:	2600      	movs	r6, #0
 8007934:	42a6      	cmp	r6, r4
 8007936:	d109      	bne.n	800794c <__libc_init_array+0x24>
 8007938:	4d0b      	ldr	r5, [pc, #44]	; (8007968 <__libc_init_array+0x40>)
 800793a:	4c0c      	ldr	r4, [pc, #48]	; (800796c <__libc_init_array+0x44>)
 800793c:	f000 fc6a 	bl	8008214 <_init>
 8007940:	1b64      	subs	r4, r4, r5
 8007942:	10a4      	asrs	r4, r4, #2
 8007944:	2600      	movs	r6, #0
 8007946:	42a6      	cmp	r6, r4
 8007948:	d105      	bne.n	8007956 <__libc_init_array+0x2e>
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007950:	4798      	blx	r3
 8007952:	3601      	adds	r6, #1
 8007954:	e7ee      	b.n	8007934 <__libc_init_array+0xc>
 8007956:	f855 3b04 	ldr.w	r3, [r5], #4
 800795a:	4798      	blx	r3
 800795c:	3601      	adds	r6, #1
 800795e:	e7f2      	b.n	8007946 <__libc_init_array+0x1e>
 8007960:	0800852c 	.word	0x0800852c
 8007964:	0800852c 	.word	0x0800852c
 8007968:	0800852c 	.word	0x0800852c
 800796c:	08008530 	.word	0x08008530

08007970 <__retarget_lock_acquire_recursive>:
 8007970:	4770      	bx	lr

08007972 <__retarget_lock_release_recursive>:
 8007972:	4770      	bx	lr

08007974 <_free_r>:
 8007974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007976:	2900      	cmp	r1, #0
 8007978:	d044      	beq.n	8007a04 <_free_r+0x90>
 800797a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800797e:	9001      	str	r0, [sp, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f1a1 0404 	sub.w	r4, r1, #4
 8007986:	bfb8      	it	lt
 8007988:	18e4      	addlt	r4, r4, r3
 800798a:	f000 f8df 	bl	8007b4c <__malloc_lock>
 800798e:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <_free_r+0x94>)
 8007990:	9801      	ldr	r0, [sp, #4]
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x30>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	b003      	add	sp, #12
 800799c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a0:	f000 b8da 	b.w	8007b58 <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x46>
 80079a8:	6825      	ldr	r5, [r4, #0]
 80079aa:	1961      	adds	r1, r4, r5
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1949      	addeq	r1, r1, r5
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x22>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x50>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x46>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1855      	adds	r5, r2, r1
 80079c8:	42a5      	cmp	r5, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x70>
 80079cc:	6824      	ldr	r4, [r4, #0]
 80079ce:	4421      	add	r1, r4
 80079d0:	1854      	adds	r4, r2, r1
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x26>
 80079d8:	681c      	ldr	r4, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	6053      	str	r3, [r2, #4]
 80079de:	440c      	add	r4, r1
 80079e0:	6014      	str	r4, [r2, #0]
 80079e2:	e7da      	b.n	800799a <_free_r+0x26>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x78>
 80079e6:	230c      	movs	r3, #12
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x26>
 80079ec:	6825      	ldr	r5, [r4, #0]
 80079ee:	1961      	adds	r1, r4, r5
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf04      	itt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	bf04      	itt	eq
 80079fc:	1949      	addeq	r1, r1, r5
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7ca      	b.n	800799a <_free_r+0x26>
 8007a04:	b003      	add	sp, #12
 8007a06:	bd30      	pop	{r4, r5, pc}
 8007a08:	200003cc 	.word	0x200003cc

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0e      	ldr	r6, [pc, #56]	; (8007a48 <sbrk_aligned+0x3c>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f000 fba6 	bl	8008168 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 fba1 	bl	8008168 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d00a      	beq.n	8007a40 <sbrk_aligned+0x34>
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d007      	beq.n	8007a44 <sbrk_aligned+0x38>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fb96 	bl	8008168 <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d101      	bne.n	8007a44 <sbrk_aligned+0x38>
 8007a40:	f04f 34ff 	mov.w	r4, #4294967295
 8007a44:	4620      	mov	r0, r4
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	200003d0 	.word	0x200003d0

08007a4c <_malloc_r>:
 8007a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a50:	1ccd      	adds	r5, r1, #3
 8007a52:	f025 0503 	bic.w	r5, r5, #3
 8007a56:	3508      	adds	r5, #8
 8007a58:	2d0c      	cmp	r5, #12
 8007a5a:	bf38      	it	cc
 8007a5c:	250c      	movcc	r5, #12
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	4607      	mov	r7, r0
 8007a62:	db01      	blt.n	8007a68 <_malloc_r+0x1c>
 8007a64:	42a9      	cmp	r1, r5
 8007a66:	d905      	bls.n	8007a74 <_malloc_r+0x28>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	4630      	mov	r0, r6
 8007a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b48 <_malloc_r+0xfc>
 8007a78:	f000 f868 	bl	8007b4c <__malloc_lock>
 8007a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a80:	461c      	mov	r4, r3
 8007a82:	bb5c      	cbnz	r4, 8007adc <_malloc_r+0x90>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7ff ffc0 	bl	8007a0c <sbrk_aligned>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	4604      	mov	r4, r0
 8007a90:	d155      	bne.n	8007b3e <_malloc_r+0xf2>
 8007a92:	f8d8 4000 	ldr.w	r4, [r8]
 8007a96:	4626      	mov	r6, r4
 8007a98:	2e00      	cmp	r6, #0
 8007a9a:	d145      	bne.n	8007b28 <_malloc_r+0xdc>
 8007a9c:	2c00      	cmp	r4, #0
 8007a9e:	d048      	beq.n	8007b32 <_malloc_r+0xe6>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	eb04 0903 	add.w	r9, r4, r3
 8007aaa:	f000 fb5d 	bl	8008168 <_sbrk_r>
 8007aae:	4581      	cmp	r9, r0
 8007ab0:	d13f      	bne.n	8007b32 <_malloc_r+0xe6>
 8007ab2:	6821      	ldr	r1, [r4, #0]
 8007ab4:	1a6d      	subs	r5, r5, r1
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7ff ffa7 	bl	8007a0c <sbrk_aligned>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d037      	beq.n	8007b32 <_malloc_r+0xe6>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	442b      	add	r3, r5
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d038      	beq.n	8007b42 <_malloc_r+0xf6>
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	42a2      	cmp	r2, r4
 8007ad4:	d12b      	bne.n	8007b2e <_malloc_r+0xe2>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	e00f      	b.n	8007afc <_malloc_r+0xb0>
 8007adc:	6822      	ldr	r2, [r4, #0]
 8007ade:	1b52      	subs	r2, r2, r5
 8007ae0:	d41f      	bmi.n	8007b22 <_malloc_r+0xd6>
 8007ae2:	2a0b      	cmp	r2, #11
 8007ae4:	d917      	bls.n	8007b16 <_malloc_r+0xca>
 8007ae6:	1961      	adds	r1, r4, r5
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	6025      	str	r5, [r4, #0]
 8007aec:	bf18      	it	ne
 8007aee:	6059      	strne	r1, [r3, #4]
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	bf08      	it	eq
 8007af4:	f8c8 1000 	streq.w	r1, [r8]
 8007af8:	5162      	str	r2, [r4, r5]
 8007afa:	604b      	str	r3, [r1, #4]
 8007afc:	4638      	mov	r0, r7
 8007afe:	f104 060b 	add.w	r6, r4, #11
 8007b02:	f000 f829 	bl	8007b58 <__malloc_unlock>
 8007b06:	f026 0607 	bic.w	r6, r6, #7
 8007b0a:	1d23      	adds	r3, r4, #4
 8007b0c:	1af2      	subs	r2, r6, r3
 8007b0e:	d0ae      	beq.n	8007a6e <_malloc_r+0x22>
 8007b10:	1b9b      	subs	r3, r3, r6
 8007b12:	50a3      	str	r3, [r4, r2]
 8007b14:	e7ab      	b.n	8007a6e <_malloc_r+0x22>
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	6862      	ldr	r2, [r4, #4]
 8007b1a:	d1dd      	bne.n	8007ad8 <_malloc_r+0x8c>
 8007b1c:	f8c8 2000 	str.w	r2, [r8]
 8007b20:	e7ec      	b.n	8007afc <_malloc_r+0xb0>
 8007b22:	4623      	mov	r3, r4
 8007b24:	6864      	ldr	r4, [r4, #4]
 8007b26:	e7ac      	b.n	8007a82 <_malloc_r+0x36>
 8007b28:	4634      	mov	r4, r6
 8007b2a:	6876      	ldr	r6, [r6, #4]
 8007b2c:	e7b4      	b.n	8007a98 <_malloc_r+0x4c>
 8007b2e:	4613      	mov	r3, r2
 8007b30:	e7cc      	b.n	8007acc <_malloc_r+0x80>
 8007b32:	230c      	movs	r3, #12
 8007b34:	603b      	str	r3, [r7, #0]
 8007b36:	4638      	mov	r0, r7
 8007b38:	f000 f80e 	bl	8007b58 <__malloc_unlock>
 8007b3c:	e797      	b.n	8007a6e <_malloc_r+0x22>
 8007b3e:	6025      	str	r5, [r4, #0]
 8007b40:	e7dc      	b.n	8007afc <_malloc_r+0xb0>
 8007b42:	605b      	str	r3, [r3, #4]
 8007b44:	deff      	udf	#255	; 0xff
 8007b46:	bf00      	nop
 8007b48:	200003cc 	.word	0x200003cc

08007b4c <__malloc_lock>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__malloc_lock+0x8>)
 8007b4e:	f7ff bf0f 	b.w	8007970 <__retarget_lock_acquire_recursive>
 8007b52:	bf00      	nop
 8007b54:	200003c8 	.word	0x200003c8

08007b58 <__malloc_unlock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__malloc_unlock+0x8>)
 8007b5a:	f7ff bf0a 	b.w	8007972 <__retarget_lock_release_recursive>
 8007b5e:	bf00      	nop
 8007b60:	200003c8 	.word	0x200003c8

08007b64 <__ssputs_r>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	688e      	ldr	r6, [r1, #8]
 8007b6a:	461f      	mov	r7, r3
 8007b6c:	42be      	cmp	r6, r7
 8007b6e:	680b      	ldr	r3, [r1, #0]
 8007b70:	4682      	mov	sl, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	4690      	mov	r8, r2
 8007b76:	d82c      	bhi.n	8007bd2 <__ssputs_r+0x6e>
 8007b78:	898a      	ldrh	r2, [r1, #12]
 8007b7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b7e:	d026      	beq.n	8007bce <__ssputs_r+0x6a>
 8007b80:	6965      	ldr	r5, [r4, #20]
 8007b82:	6909      	ldr	r1, [r1, #16]
 8007b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b88:	eba3 0901 	sub.w	r9, r3, r1
 8007b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b90:	1c7b      	adds	r3, r7, #1
 8007b92:	444b      	add	r3, r9
 8007b94:	106d      	asrs	r5, r5, #1
 8007b96:	429d      	cmp	r5, r3
 8007b98:	bf38      	it	cc
 8007b9a:	461d      	movcc	r5, r3
 8007b9c:	0553      	lsls	r3, r2, #21
 8007b9e:	d527      	bpl.n	8007bf0 <__ssputs_r+0x8c>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7ff ff53 	bl	8007a4c <_malloc_r>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	b360      	cbz	r0, 8007c04 <__ssputs_r+0xa0>
 8007baa:	6921      	ldr	r1, [r4, #16]
 8007bac:	464a      	mov	r2, r9
 8007bae:	f000 faeb 	bl	8008188 <memcpy>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	6126      	str	r6, [r4, #16]
 8007bc0:	6165      	str	r5, [r4, #20]
 8007bc2:	444e      	add	r6, r9
 8007bc4:	eba5 0509 	sub.w	r5, r5, r9
 8007bc8:	6026      	str	r6, [r4, #0]
 8007bca:	60a5      	str	r5, [r4, #8]
 8007bcc:	463e      	mov	r6, r7
 8007bce:	42be      	cmp	r6, r7
 8007bd0:	d900      	bls.n	8007bd4 <__ssputs_r+0x70>
 8007bd2:	463e      	mov	r6, r7
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	4641      	mov	r1, r8
 8007bda:	f000 faab 	bl	8008134 <memmove>
 8007bde:	68a3      	ldr	r3, [r4, #8]
 8007be0:	1b9b      	subs	r3, r3, r6
 8007be2:	60a3      	str	r3, [r4, #8]
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	4433      	add	r3, r6
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	2000      	movs	r0, #0
 8007bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	f000 fad7 	bl	80081a4 <_realloc_r>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1e0      	bne.n	8007bbe <__ssputs_r+0x5a>
 8007bfc:	6921      	ldr	r1, [r4, #16]
 8007bfe:	4650      	mov	r0, sl
 8007c00:	f7ff feb8 	bl	8007974 <_free_r>
 8007c04:	230c      	movs	r3, #12
 8007c06:	f8ca 3000 	str.w	r3, [sl]
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	f04f 30ff 	mov.w	r0, #4294967295
 8007c16:	e7e9      	b.n	8007bec <__ssputs_r+0x88>

08007c18 <_svfiprintf_r>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	4698      	mov	r8, r3
 8007c1e:	898b      	ldrh	r3, [r1, #12]
 8007c20:	061b      	lsls	r3, r3, #24
 8007c22:	b09d      	sub	sp, #116	; 0x74
 8007c24:	4607      	mov	r7, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	4614      	mov	r4, r2
 8007c2a:	d50e      	bpl.n	8007c4a <_svfiprintf_r+0x32>
 8007c2c:	690b      	ldr	r3, [r1, #16]
 8007c2e:	b963      	cbnz	r3, 8007c4a <_svfiprintf_r+0x32>
 8007c30:	2140      	movs	r1, #64	; 0x40
 8007c32:	f7ff ff0b 	bl	8007a4c <_malloc_r>
 8007c36:	6028      	str	r0, [r5, #0]
 8007c38:	6128      	str	r0, [r5, #16]
 8007c3a:	b920      	cbnz	r0, 8007c46 <_svfiprintf_r+0x2e>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	e0d0      	b.n	8007de8 <_svfiprintf_r+0x1d0>
 8007c46:	2340      	movs	r3, #64	; 0x40
 8007c48:	616b      	str	r3, [r5, #20]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4e:	2320      	movs	r3, #32
 8007c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c58:	2330      	movs	r3, #48	; 0x30
 8007c5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e00 <_svfiprintf_r+0x1e8>
 8007c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c62:	f04f 0901 	mov.w	r9, #1
 8007c66:	4623      	mov	r3, r4
 8007c68:	469a      	mov	sl, r3
 8007c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c6e:	b10a      	cbz	r2, 8007c74 <_svfiprintf_r+0x5c>
 8007c70:	2a25      	cmp	r2, #37	; 0x25
 8007c72:	d1f9      	bne.n	8007c68 <_svfiprintf_r+0x50>
 8007c74:	ebba 0b04 	subs.w	fp, sl, r4
 8007c78:	d00b      	beq.n	8007c92 <_svfiprintf_r+0x7a>
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff ff6f 	bl	8007b64 <__ssputs_r>
 8007c86:	3001      	adds	r0, #1
 8007c88:	f000 80a9 	beq.w	8007dde <_svfiprintf_r+0x1c6>
 8007c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c8e:	445a      	add	r2, fp
 8007c90:	9209      	str	r2, [sp, #36]	; 0x24
 8007c92:	f89a 3000 	ldrb.w	r3, [sl]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80a1 	beq.w	8007dde <_svfiprintf_r+0x1c6>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca6:	f10a 0a01 	add.w	sl, sl, #1
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	9307      	str	r3, [sp, #28]
 8007cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8007cb4:	4654      	mov	r4, sl
 8007cb6:	2205      	movs	r2, #5
 8007cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbc:	4850      	ldr	r0, [pc, #320]	; (8007e00 <_svfiprintf_r+0x1e8>)
 8007cbe:	f7f8 fa97 	bl	80001f0 <memchr>
 8007cc2:	9a04      	ldr	r2, [sp, #16]
 8007cc4:	b9d8      	cbnz	r0, 8007cfe <_svfiprintf_r+0xe6>
 8007cc6:	06d0      	lsls	r0, r2, #27
 8007cc8:	bf44      	itt	mi
 8007cca:	2320      	movmi	r3, #32
 8007ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd0:	0711      	lsls	r1, r2, #28
 8007cd2:	bf44      	itt	mi
 8007cd4:	232b      	movmi	r3, #43	; 0x2b
 8007cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cda:	f89a 3000 	ldrb.w	r3, [sl]
 8007cde:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce0:	d015      	beq.n	8007d0e <_svfiprintf_r+0xf6>
 8007ce2:	9a07      	ldr	r2, [sp, #28]
 8007ce4:	4654      	mov	r4, sl
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f04f 0c0a 	mov.w	ip, #10
 8007cec:	4621      	mov	r1, r4
 8007cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cf2:	3b30      	subs	r3, #48	; 0x30
 8007cf4:	2b09      	cmp	r3, #9
 8007cf6:	d94d      	bls.n	8007d94 <_svfiprintf_r+0x17c>
 8007cf8:	b1b0      	cbz	r0, 8007d28 <_svfiprintf_r+0x110>
 8007cfa:	9207      	str	r2, [sp, #28]
 8007cfc:	e014      	b.n	8007d28 <_svfiprintf_r+0x110>
 8007cfe:	eba0 0308 	sub.w	r3, r0, r8
 8007d02:	fa09 f303 	lsl.w	r3, r9, r3
 8007d06:	4313      	orrs	r3, r2
 8007d08:	9304      	str	r3, [sp, #16]
 8007d0a:	46a2      	mov	sl, r4
 8007d0c:	e7d2      	b.n	8007cb4 <_svfiprintf_r+0x9c>
 8007d0e:	9b03      	ldr	r3, [sp, #12]
 8007d10:	1d19      	adds	r1, r3, #4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	9103      	str	r1, [sp, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bfbb      	ittet	lt
 8007d1a:	425b      	neglt	r3, r3
 8007d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d20:	9307      	strge	r3, [sp, #28]
 8007d22:	9307      	strlt	r3, [sp, #28]
 8007d24:	bfb8      	it	lt
 8007d26:	9204      	strlt	r2, [sp, #16]
 8007d28:	7823      	ldrb	r3, [r4, #0]
 8007d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d2c:	d10c      	bne.n	8007d48 <_svfiprintf_r+0x130>
 8007d2e:	7863      	ldrb	r3, [r4, #1]
 8007d30:	2b2a      	cmp	r3, #42	; 0x2a
 8007d32:	d134      	bne.n	8007d9e <_svfiprintf_r+0x186>
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	9203      	str	r2, [sp, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bfb8      	it	lt
 8007d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d44:	3402      	adds	r4, #2
 8007d46:	9305      	str	r3, [sp, #20]
 8007d48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e10 <_svfiprintf_r+0x1f8>
 8007d4c:	7821      	ldrb	r1, [r4, #0]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	4650      	mov	r0, sl
 8007d52:	f7f8 fa4d 	bl	80001f0 <memchr>
 8007d56:	b138      	cbz	r0, 8007d68 <_svfiprintf_r+0x150>
 8007d58:	9b04      	ldr	r3, [sp, #16]
 8007d5a:	eba0 000a 	sub.w	r0, r0, sl
 8007d5e:	2240      	movs	r2, #64	; 0x40
 8007d60:	4082      	lsls	r2, r0
 8007d62:	4313      	orrs	r3, r2
 8007d64:	3401      	adds	r4, #1
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6c:	4825      	ldr	r0, [pc, #148]	; (8007e04 <_svfiprintf_r+0x1ec>)
 8007d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d72:	2206      	movs	r2, #6
 8007d74:	f7f8 fa3c 	bl	80001f0 <memchr>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d038      	beq.n	8007dee <_svfiprintf_r+0x1d6>
 8007d7c:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <_svfiprintf_r+0x1f0>)
 8007d7e:	bb1b      	cbnz	r3, 8007dc8 <_svfiprintf_r+0x1b0>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	3307      	adds	r3, #7
 8007d84:	f023 0307 	bic.w	r3, r3, #7
 8007d88:	3308      	adds	r3, #8
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	4433      	add	r3, r6
 8007d90:	9309      	str	r3, [sp, #36]	; 0x24
 8007d92:	e768      	b.n	8007c66 <_svfiprintf_r+0x4e>
 8007d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d98:	460c      	mov	r4, r1
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	e7a6      	b.n	8007cec <_svfiprintf_r+0xd4>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	3401      	adds	r4, #1
 8007da2:	9305      	str	r3, [sp, #20]
 8007da4:	4619      	mov	r1, r3
 8007da6:	f04f 0c0a 	mov.w	ip, #10
 8007daa:	4620      	mov	r0, r4
 8007dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db0:	3a30      	subs	r2, #48	; 0x30
 8007db2:	2a09      	cmp	r2, #9
 8007db4:	d903      	bls.n	8007dbe <_svfiprintf_r+0x1a6>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0c6      	beq.n	8007d48 <_svfiprintf_r+0x130>
 8007dba:	9105      	str	r1, [sp, #20]
 8007dbc:	e7c4      	b.n	8007d48 <_svfiprintf_r+0x130>
 8007dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e7f0      	b.n	8007daa <_svfiprintf_r+0x192>
 8007dc8:	ab03      	add	r3, sp, #12
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	462a      	mov	r2, r5
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <_svfiprintf_r+0x1f4>)
 8007dd0:	a904      	add	r1, sp, #16
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f3af 8000 	nop.w
 8007dd8:	1c42      	adds	r2, r0, #1
 8007dda:	4606      	mov	r6, r0
 8007ddc:	d1d6      	bne.n	8007d8c <_svfiprintf_r+0x174>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	065b      	lsls	r3, r3, #25
 8007de2:	f53f af2d 	bmi.w	8007c40 <_svfiprintf_r+0x28>
 8007de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de8:	b01d      	add	sp, #116	; 0x74
 8007dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dee:	ab03      	add	r3, sp, #12
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	462a      	mov	r2, r5
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <_svfiprintf_r+0x1f4>)
 8007df6:	a904      	add	r1, sp, #16
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f000 f879 	bl	8007ef0 <_printf_i>
 8007dfe:	e7eb      	b.n	8007dd8 <_svfiprintf_r+0x1c0>
 8007e00:	080084f0 	.word	0x080084f0
 8007e04:	080084fa 	.word	0x080084fa
 8007e08:	00000000 	.word	0x00000000
 8007e0c:	08007b65 	.word	0x08007b65
 8007e10:	080084f6 	.word	0x080084f6

08007e14 <_printf_common>:
 8007e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	4616      	mov	r6, r2
 8007e1a:	4699      	mov	r9, r3
 8007e1c:	688a      	ldr	r2, [r1, #8]
 8007e1e:	690b      	ldr	r3, [r1, #16]
 8007e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	bfb8      	it	lt
 8007e28:	4613      	movlt	r3, r2
 8007e2a:	6033      	str	r3, [r6, #0]
 8007e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e30:	4607      	mov	r7, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	b10a      	cbz	r2, 8007e3a <_printf_common+0x26>
 8007e36:	3301      	adds	r3, #1
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	0699      	lsls	r1, r3, #26
 8007e3e:	bf42      	ittt	mi
 8007e40:	6833      	ldrmi	r3, [r6, #0]
 8007e42:	3302      	addmi	r3, #2
 8007e44:	6033      	strmi	r3, [r6, #0]
 8007e46:	6825      	ldr	r5, [r4, #0]
 8007e48:	f015 0506 	ands.w	r5, r5, #6
 8007e4c:	d106      	bne.n	8007e5c <_printf_common+0x48>
 8007e4e:	f104 0a19 	add.w	sl, r4, #25
 8007e52:	68e3      	ldr	r3, [r4, #12]
 8007e54:	6832      	ldr	r2, [r6, #0]
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	dc26      	bgt.n	8007eaa <_printf_common+0x96>
 8007e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e60:	1e13      	subs	r3, r2, #0
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	bf18      	it	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	0692      	lsls	r2, r2, #26
 8007e6a:	d42b      	bmi.n	8007ec4 <_printf_common+0xb0>
 8007e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e70:	4649      	mov	r1, r9
 8007e72:	4638      	mov	r0, r7
 8007e74:	47c0      	blx	r8
 8007e76:	3001      	adds	r0, #1
 8007e78:	d01e      	beq.n	8007eb8 <_printf_common+0xa4>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	6922      	ldr	r2, [r4, #16]
 8007e7e:	f003 0306 	and.w	r3, r3, #6
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	bf02      	ittt	eq
 8007e86:	68e5      	ldreq	r5, [r4, #12]
 8007e88:	6833      	ldreq	r3, [r6, #0]
 8007e8a:	1aed      	subeq	r5, r5, r3
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	bf0c      	ite	eq
 8007e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e94:	2500      	movne	r5, #0
 8007e96:	4293      	cmp	r3, r2
 8007e98:	bfc4      	itt	gt
 8007e9a:	1a9b      	subgt	r3, r3, r2
 8007e9c:	18ed      	addgt	r5, r5, r3
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	341a      	adds	r4, #26
 8007ea2:	42b5      	cmp	r5, r6
 8007ea4:	d11a      	bne.n	8007edc <_printf_common+0xc8>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e008      	b.n	8007ebc <_printf_common+0xa8>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4652      	mov	r2, sl
 8007eae:	4649      	mov	r1, r9
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	47c0      	blx	r8
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d103      	bne.n	8007ec0 <_printf_common+0xac>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	e7c6      	b.n	8007e52 <_printf_common+0x3e>
 8007ec4:	18e1      	adds	r1, r4, r3
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	2030      	movs	r0, #48	; 0x30
 8007eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ece:	4422      	add	r2, r4
 8007ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ed8:	3302      	adds	r3, #2
 8007eda:	e7c7      	b.n	8007e6c <_printf_common+0x58>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4622      	mov	r2, r4
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	47c0      	blx	r8
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d0e6      	beq.n	8007eb8 <_printf_common+0xa4>
 8007eea:	3601      	adds	r6, #1
 8007eec:	e7d9      	b.n	8007ea2 <_printf_common+0x8e>
	...

08007ef0 <_printf_i>:
 8007ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	7e0f      	ldrb	r7, [r1, #24]
 8007ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ef8:	2f78      	cmp	r7, #120	; 0x78
 8007efa:	4691      	mov	r9, r2
 8007efc:	4680      	mov	r8, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	469a      	mov	sl, r3
 8007f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f06:	d807      	bhi.n	8007f18 <_printf_i+0x28>
 8007f08:	2f62      	cmp	r7, #98	; 0x62
 8007f0a:	d80a      	bhi.n	8007f22 <_printf_i+0x32>
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	f000 80d4 	beq.w	80080ba <_printf_i+0x1ca>
 8007f12:	2f58      	cmp	r7, #88	; 0x58
 8007f14:	f000 80c0 	beq.w	8008098 <_printf_i+0x1a8>
 8007f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f20:	e03a      	b.n	8007f98 <_printf_i+0xa8>
 8007f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f26:	2b15      	cmp	r3, #21
 8007f28:	d8f6      	bhi.n	8007f18 <_printf_i+0x28>
 8007f2a:	a101      	add	r1, pc, #4	; (adr r1, 8007f30 <_printf_i+0x40>)
 8007f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f9d 	.word	0x08007f9d
 8007f38:	08007f19 	.word	0x08007f19
 8007f3c:	08007f19 	.word	0x08007f19
 8007f40:	08007f19 	.word	0x08007f19
 8007f44:	08007f19 	.word	0x08007f19
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007f19 	.word	0x08007f19
 8007f50:	08007f19 	.word	0x08007f19
 8007f54:	08007f19 	.word	0x08007f19
 8007f58:	08007f19 	.word	0x08007f19
 8007f5c:	080080a1 	.word	0x080080a1
 8007f60:	08007fc9 	.word	0x08007fc9
 8007f64:	0800805b 	.word	0x0800805b
 8007f68:	08007f19 	.word	0x08007f19
 8007f6c:	08007f19 	.word	0x08007f19
 8007f70:	080080c3 	.word	0x080080c3
 8007f74:	08007f19 	.word	0x08007f19
 8007f78:	08007fc9 	.word	0x08007fc9
 8007f7c:	08007f19 	.word	0x08007f19
 8007f80:	08007f19 	.word	0x08007f19
 8007f84:	08008063 	.word	0x08008063
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e09f      	b.n	80080dc <_printf_i+0x1ec>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	0607      	lsls	r7, r0, #24
 8007fa2:	f103 0104 	add.w	r1, r3, #4
 8007fa6:	6029      	str	r1, [r5, #0]
 8007fa8:	d501      	bpl.n	8007fae <_printf_i+0xbe>
 8007faa:	681e      	ldr	r6, [r3, #0]
 8007fac:	e003      	b.n	8007fb6 <_printf_i+0xc6>
 8007fae:	0646      	lsls	r6, r0, #25
 8007fb0:	d5fb      	bpl.n	8007faa <_printf_i+0xba>
 8007fb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	da03      	bge.n	8007fc2 <_printf_i+0xd2>
 8007fba:	232d      	movs	r3, #45	; 0x2d
 8007fbc:	4276      	negs	r6, r6
 8007fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc2:	485a      	ldr	r0, [pc, #360]	; (800812c <_printf_i+0x23c>)
 8007fc4:	230a      	movs	r3, #10
 8007fc6:	e012      	b.n	8007fee <_printf_i+0xfe>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	6820      	ldr	r0, [r4, #0]
 8007fcc:	1d19      	adds	r1, r3, #4
 8007fce:	6029      	str	r1, [r5, #0]
 8007fd0:	0605      	lsls	r5, r0, #24
 8007fd2:	d501      	bpl.n	8007fd8 <_printf_i+0xe8>
 8007fd4:	681e      	ldr	r6, [r3, #0]
 8007fd6:	e002      	b.n	8007fde <_printf_i+0xee>
 8007fd8:	0641      	lsls	r1, r0, #25
 8007fda:	d5fb      	bpl.n	8007fd4 <_printf_i+0xe4>
 8007fdc:	881e      	ldrh	r6, [r3, #0]
 8007fde:	4853      	ldr	r0, [pc, #332]	; (800812c <_printf_i+0x23c>)
 8007fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2308      	moveq	r3, #8
 8007fe6:	230a      	movne	r3, #10
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fee:	6865      	ldr	r5, [r4, #4]
 8007ff0:	60a5      	str	r5, [r4, #8]
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	bfa2      	ittt	ge
 8007ff6:	6821      	ldrge	r1, [r4, #0]
 8007ff8:	f021 0104 	bicge.w	r1, r1, #4
 8007ffc:	6021      	strge	r1, [r4, #0]
 8007ffe:	b90e      	cbnz	r6, 8008004 <_printf_i+0x114>
 8008000:	2d00      	cmp	r5, #0
 8008002:	d04b      	beq.n	800809c <_printf_i+0x1ac>
 8008004:	4615      	mov	r5, r2
 8008006:	fbb6 f1f3 	udiv	r1, r6, r3
 800800a:	fb03 6711 	mls	r7, r3, r1, r6
 800800e:	5dc7      	ldrb	r7, [r0, r7]
 8008010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008014:	4637      	mov	r7, r6
 8008016:	42bb      	cmp	r3, r7
 8008018:	460e      	mov	r6, r1
 800801a:	d9f4      	bls.n	8008006 <_printf_i+0x116>
 800801c:	2b08      	cmp	r3, #8
 800801e:	d10b      	bne.n	8008038 <_printf_i+0x148>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	07de      	lsls	r6, r3, #31
 8008024:	d508      	bpl.n	8008038 <_printf_i+0x148>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	4299      	cmp	r1, r3
 800802c:	bfde      	ittt	le
 800802e:	2330      	movle	r3, #48	; 0x30
 8008030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008034:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008038:	1b52      	subs	r2, r2, r5
 800803a:	6122      	str	r2, [r4, #16]
 800803c:	f8cd a000 	str.w	sl, [sp]
 8008040:	464b      	mov	r3, r9
 8008042:	aa03      	add	r2, sp, #12
 8008044:	4621      	mov	r1, r4
 8008046:	4640      	mov	r0, r8
 8008048:	f7ff fee4 	bl	8007e14 <_printf_common>
 800804c:	3001      	adds	r0, #1
 800804e:	d14a      	bne.n	80080e6 <_printf_i+0x1f6>
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	b004      	add	sp, #16
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	f043 0320 	orr.w	r3, r3, #32
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	4833      	ldr	r0, [pc, #204]	; (8008130 <_printf_i+0x240>)
 8008064:	2778      	movs	r7, #120	; 0x78
 8008066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	6829      	ldr	r1, [r5, #0]
 800806e:	061f      	lsls	r7, r3, #24
 8008070:	f851 6b04 	ldr.w	r6, [r1], #4
 8008074:	d402      	bmi.n	800807c <_printf_i+0x18c>
 8008076:	065f      	lsls	r7, r3, #25
 8008078:	bf48      	it	mi
 800807a:	b2b6      	uxthmi	r6, r6
 800807c:	07df      	lsls	r7, r3, #31
 800807e:	bf48      	it	mi
 8008080:	f043 0320 	orrmi.w	r3, r3, #32
 8008084:	6029      	str	r1, [r5, #0]
 8008086:	bf48      	it	mi
 8008088:	6023      	strmi	r3, [r4, #0]
 800808a:	b91e      	cbnz	r6, 8008094 <_printf_i+0x1a4>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	f023 0320 	bic.w	r3, r3, #32
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	2310      	movs	r3, #16
 8008096:	e7a7      	b.n	8007fe8 <_printf_i+0xf8>
 8008098:	4824      	ldr	r0, [pc, #144]	; (800812c <_printf_i+0x23c>)
 800809a:	e7e4      	b.n	8008066 <_printf_i+0x176>
 800809c:	4615      	mov	r5, r2
 800809e:	e7bd      	b.n	800801c <_printf_i+0x12c>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	6826      	ldr	r6, [r4, #0]
 80080a4:	6961      	ldr	r1, [r4, #20]
 80080a6:	1d18      	adds	r0, r3, #4
 80080a8:	6028      	str	r0, [r5, #0]
 80080aa:	0635      	lsls	r5, r6, #24
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	d501      	bpl.n	80080b4 <_printf_i+0x1c4>
 80080b0:	6019      	str	r1, [r3, #0]
 80080b2:	e002      	b.n	80080ba <_printf_i+0x1ca>
 80080b4:	0670      	lsls	r0, r6, #25
 80080b6:	d5fb      	bpl.n	80080b0 <_printf_i+0x1c0>
 80080b8:	8019      	strh	r1, [r3, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	6123      	str	r3, [r4, #16]
 80080be:	4615      	mov	r5, r2
 80080c0:	e7bc      	b.n	800803c <_printf_i+0x14c>
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	1d1a      	adds	r2, r3, #4
 80080c6:	602a      	str	r2, [r5, #0]
 80080c8:	681d      	ldr	r5, [r3, #0]
 80080ca:	6862      	ldr	r2, [r4, #4]
 80080cc:	2100      	movs	r1, #0
 80080ce:	4628      	mov	r0, r5
 80080d0:	f7f8 f88e 	bl	80001f0 <memchr>
 80080d4:	b108      	cbz	r0, 80080da <_printf_i+0x1ea>
 80080d6:	1b40      	subs	r0, r0, r5
 80080d8:	6060      	str	r0, [r4, #4]
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	2300      	movs	r3, #0
 80080e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e4:	e7aa      	b.n	800803c <_printf_i+0x14c>
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	462a      	mov	r2, r5
 80080ea:	4649      	mov	r1, r9
 80080ec:	4640      	mov	r0, r8
 80080ee:	47d0      	blx	sl
 80080f0:	3001      	adds	r0, #1
 80080f2:	d0ad      	beq.n	8008050 <_printf_i+0x160>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	079b      	lsls	r3, r3, #30
 80080f8:	d413      	bmi.n	8008122 <_printf_i+0x232>
 80080fa:	68e0      	ldr	r0, [r4, #12]
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	4298      	cmp	r0, r3
 8008100:	bfb8      	it	lt
 8008102:	4618      	movlt	r0, r3
 8008104:	e7a6      	b.n	8008054 <_printf_i+0x164>
 8008106:	2301      	movs	r3, #1
 8008108:	4632      	mov	r2, r6
 800810a:	4649      	mov	r1, r9
 800810c:	4640      	mov	r0, r8
 800810e:	47d0      	blx	sl
 8008110:	3001      	adds	r0, #1
 8008112:	d09d      	beq.n	8008050 <_printf_i+0x160>
 8008114:	3501      	adds	r5, #1
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	9903      	ldr	r1, [sp, #12]
 800811a:	1a5b      	subs	r3, r3, r1
 800811c:	42ab      	cmp	r3, r5
 800811e:	dcf2      	bgt.n	8008106 <_printf_i+0x216>
 8008120:	e7eb      	b.n	80080fa <_printf_i+0x20a>
 8008122:	2500      	movs	r5, #0
 8008124:	f104 0619 	add.w	r6, r4, #25
 8008128:	e7f5      	b.n	8008116 <_printf_i+0x226>
 800812a:	bf00      	nop
 800812c:	08008501 	.word	0x08008501
 8008130:	08008512 	.word	0x08008512

08008134 <memmove>:
 8008134:	4288      	cmp	r0, r1
 8008136:	b510      	push	{r4, lr}
 8008138:	eb01 0402 	add.w	r4, r1, r2
 800813c:	d902      	bls.n	8008144 <memmove+0x10>
 800813e:	4284      	cmp	r4, r0
 8008140:	4623      	mov	r3, r4
 8008142:	d807      	bhi.n	8008154 <memmove+0x20>
 8008144:	1e43      	subs	r3, r0, #1
 8008146:	42a1      	cmp	r1, r4
 8008148:	d008      	beq.n	800815c <memmove+0x28>
 800814a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008152:	e7f8      	b.n	8008146 <memmove+0x12>
 8008154:	4402      	add	r2, r0
 8008156:	4601      	mov	r1, r0
 8008158:	428a      	cmp	r2, r1
 800815a:	d100      	bne.n	800815e <memmove+0x2a>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008166:	e7f7      	b.n	8008158 <memmove+0x24>

08008168 <_sbrk_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	; (8008184 <_sbrk_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7fb fa32 	bl	80035dc <_sbrk>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_sbrk_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_sbrk_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	200003c4 	.word	0x200003c4

08008188 <memcpy>:
 8008188:	440a      	add	r2, r1
 800818a:	4291      	cmp	r1, r2
 800818c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008190:	d100      	bne.n	8008194 <memcpy+0xc>
 8008192:	4770      	bx	lr
 8008194:	b510      	push	{r4, lr}
 8008196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819e:	4291      	cmp	r1, r2
 80081a0:	d1f9      	bne.n	8008196 <memcpy+0xe>
 80081a2:	bd10      	pop	{r4, pc}

080081a4 <_realloc_r>:
 80081a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a8:	4680      	mov	r8, r0
 80081aa:	4614      	mov	r4, r2
 80081ac:	460e      	mov	r6, r1
 80081ae:	b921      	cbnz	r1, 80081ba <_realloc_r+0x16>
 80081b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b4:	4611      	mov	r1, r2
 80081b6:	f7ff bc49 	b.w	8007a4c <_malloc_r>
 80081ba:	b92a      	cbnz	r2, 80081c8 <_realloc_r+0x24>
 80081bc:	f7ff fbda 	bl	8007974 <_free_r>
 80081c0:	4625      	mov	r5, r4
 80081c2:	4628      	mov	r0, r5
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	f000 f81b 	bl	8008202 <_malloc_usable_size_r>
 80081cc:	4284      	cmp	r4, r0
 80081ce:	4607      	mov	r7, r0
 80081d0:	d802      	bhi.n	80081d8 <_realloc_r+0x34>
 80081d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081d6:	d812      	bhi.n	80081fe <_realloc_r+0x5a>
 80081d8:	4621      	mov	r1, r4
 80081da:	4640      	mov	r0, r8
 80081dc:	f7ff fc36 	bl	8007a4c <_malloc_r>
 80081e0:	4605      	mov	r5, r0
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d0ed      	beq.n	80081c2 <_realloc_r+0x1e>
 80081e6:	42bc      	cmp	r4, r7
 80081e8:	4622      	mov	r2, r4
 80081ea:	4631      	mov	r1, r6
 80081ec:	bf28      	it	cs
 80081ee:	463a      	movcs	r2, r7
 80081f0:	f7ff ffca 	bl	8008188 <memcpy>
 80081f4:	4631      	mov	r1, r6
 80081f6:	4640      	mov	r0, r8
 80081f8:	f7ff fbbc 	bl	8007974 <_free_r>
 80081fc:	e7e1      	b.n	80081c2 <_realloc_r+0x1e>
 80081fe:	4635      	mov	r5, r6
 8008200:	e7df      	b.n	80081c2 <_realloc_r+0x1e>

08008202 <_malloc_usable_size_r>:
 8008202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008206:	1f18      	subs	r0, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfbc      	itt	lt
 800820c:	580b      	ldrlt	r3, [r1, r0]
 800820e:	18c0      	addlt	r0, r0, r3
 8008210:	4770      	bx	lr
	...

08008214 <_init>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	bf00      	nop
 8008218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821a:	bc08      	pop	{r3}
 800821c:	469e      	mov	lr, r3
 800821e:	4770      	bx	lr

08008220 <_fini>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr
